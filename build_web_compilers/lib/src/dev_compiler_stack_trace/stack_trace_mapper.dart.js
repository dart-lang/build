// Generated by dart2js (fast startup emitter, strong), the Dart to JavaScript compiler version: 2.2.1-dev.3.0.
// The code supports the following hooks:
// dartPrint(message):
//    if this function is defined it is called instead of the Dart [print]
//    method.
//
// dartMainRunner(main, args):
//    if this function is defined, the Dart [main] method will not be invoked
//    directly. Instead, a closure that will invoke [main], and its arguments
//    [args] is passed to [dartMainRunner].
//
// dartDeferredLibraryLoader(uri, successCallback, errorCallback):
//    if this function is defined, it will be called when a deferred library
//    is loaded. It should load and eval the javascript of `uri`, and call
//    successCallback. If it fails to do so, it should call errorCallback with
//    an error.
//
// dartCallInstrumentation(id, qualifiedName):
//    if this function is defined, it will be called at each entry of a
//    method or constructor. Used only when compiling programs with
//    --experiment-call-instrumentation.
//
// defaultPackagesBase:
//    Override the location where `package:` uris are resolved from. By default
//    they are resolved under "packages/" from the current window location.
{
}
(function dartProgram() {
  function copyProperties(from, to) {
    var keys = Object.keys(from);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      to[key] = from[key];
    }
  }
  var supportsDirectProtoAccess = function() {
    var cls = function() {
    };
    cls.prototype = {p: {}};
    var object = new cls();
    if (!(object.__proto__ && object.__proto__.p === cls.prototype.p))
      return false;
    try {
      if (typeof navigator != "undefined" && typeof navigator.userAgent == "string" && navigator.userAgent.indexOf("Chrome/") >= 0)
        return true;
      if (typeof version == "function" && version.length == 0) {
        var v = version();
        if (/^\d+\.\d+\.\d+\.\d+$/.test(v))
          return true;
      }
    } catch (_) {
    }
    return false;
  }();
  function setFunctionNamesIfNecessary(holders) {
    function t() {
    }
    ;
    if (typeof t.name == "string")
      return;
    for (var i = 0; i < holders.length; i++) {
      var holder = holders[i];
      var keys = Object.keys(holder);
      for (var j = 0; j < keys.length; j++) {
        var key = keys[j];
        var f = holder[key];
        if (typeof f == 'function')
          f.name = key;
      }
    }
  }
  function inherit(cls, sup) {
    cls.prototype.constructor = cls;
    cls.prototype["$is" + cls.name] = cls;
    if (sup != null) {
      if (supportsDirectProtoAccess) {
        cls.prototype.__proto__ = sup.prototype;
        return;
      }
      var clsPrototype = Object.create(sup.prototype);
      copyProperties(cls.prototype, clsPrototype);
      cls.prototype = clsPrototype;
    }
  }
  function inheritMany(sup, classes) {
    for (var i = 0; i < classes.length; i++)
      inherit(classes[i], sup);
  }
  function mixin(cls, mixin) {
    copyProperties(mixin.prototype, cls.prototype);
    cls.prototype.constructor = cls;
  }
  function lazy(holder, name, getterName, initializer) {
    var uninitializedSentinel = holder;
    holder[name] = uninitializedSentinel;
    holder[getterName] = function() {
      holder[getterName] = function() {
        H.throwCyclicInit(name);
      };
      var result;
      var sentinelInProgress = initializer;
      try {
        if (holder[name] === uninitializedSentinel) {
          result = holder[name] = sentinelInProgress;
          result = holder[name] = initializer();
        } else
          result = holder[name];
      } finally {
        if (result === sentinelInProgress)
          holder[name] = null;
        holder[getterName] = function() {
          return this[name];
        };
      }
      return result;
    };
  }
  function makeConstList(list) {
    list.immutable$list = Array;
    list.fixed$length = Array;
    return list;
  }
  function convertToFastObject(properties) {
    function t() {
    }
    t.prototype = properties;
    new t();
    return properties;
  }
  function convertAllToFastObject(arrayOfObjects) {
    for (var i = 0; i < arrayOfObjects.length; ++i)
      convertToFastObject(arrayOfObjects[i]);
  }
  var functionCounter = 0;
  function tearOffGetter(funcs, applyTrampolineIndex, reflectionInfo, name, isIntercepted) {
    return isIntercepted ? new Function("funcs", "applyTrampolineIndex", "reflectionInfo", "name", "H", "c", "return function tearOff_" + name + functionCounter++ + "(receiver) {" + "if (c === null) c = " + "H.closureFromTearOff" + "(" + "this, funcs, applyTrampolineIndex, reflectionInfo, false, true, name);" + "return new c(this, funcs[0], receiver, name);" + "}")(funcs, applyTrampolineIndex, reflectionInfo, name, H, null) : new Function("funcs", "applyTrampolineIndex", "reflectionInfo", "name", "H", "c", "return function tearOff_" + name + functionCounter++ + "() {" + "if (c === null) c = " + "H.closureFromTearOff" + "(" + "this, funcs, applyTrampolineIndex, reflectionInfo, false, false, name);" + "return new c(this, funcs[0], null, name);" + "}")(funcs, applyTrampolineIndex, reflectionInfo, name, H, null);
  }
  function tearOff(funcs, applyTrampolineIndex, reflectionInfo, isStatic, name, isIntercepted) {
    var cache = null;
    return isStatic ? function() {
      if (cache === null)
        cache = H.closureFromTearOff(this, funcs, applyTrampolineIndex, reflectionInfo, true, false, name).prototype;
      return cache;
    } : tearOffGetter(funcs, applyTrampolineIndex, reflectionInfo, name, isIntercepted);
  }
  var typesOffset = 0;
  function installTearOff(container, getterName, isStatic, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex) {
    var funs = [];
    for (var i = 0; i < funsOrNames.length; i++) {
      var fun = funsOrNames[i];
      if (typeof fun == 'string')
        fun = container[fun];
      fun.$callName = callNames[i];
      funs.push(fun);
    }
    var fun = funs[0];
    fun.$requiredArgCount = requiredParameterCount;
    fun.$defaultValues = optionalParameterDefaultValues;
    var reflectionInfo = funType;
    if (typeof reflectionInfo == "number")
      reflectionInfo = reflectionInfo + typesOffset;
    var name = funsOrNames[0];
    fun.$stubName = name;
    var getterFunction = tearOff(funs, applyIndex || 0, reflectionInfo, isStatic, name, isIntercepted);
    container[getterName] = getterFunction;
    if (isStatic)
      fun.$tearOff = getterFunction;
  }
  function installStaticTearOff(container, getterName, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex) {
    return installTearOff(container, getterName, true, false, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex);
  }
  function installInstanceTearOff(container, getterName, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex) {
    return installTearOff(container, getterName, false, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex);
  }
  function setOrUpdateInterceptorsByTag(newTags) {
    var tags = init.interceptorsByTag;
    if (!tags) {
      init.interceptorsByTag = newTags;
      return;
    }
    copyProperties(newTags, tags);
  }
  function setOrUpdateLeafTags(newTags) {
    var tags = init.leafTags;
    if (!tags) {
      init.leafTags = newTags;
      return;
    }
    copyProperties(newTags, tags);
  }
  function updateTypes(newTypes) {
    var types = init.types;
    var length = types.length;
    types.push.apply(types, newTypes);
    return length;
  }
  function updateHolder(holder, newHolder) {
    copyProperties(newHolder, holder);
    return holder;
  }
  var hunkHelpers = function() {
    var mkInstance = function(isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, applyIndex) {
        return function(container, getterName, name, funType) {
          return installInstanceTearOff(container, getterName, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, [name], funType, applyIndex);
        };
      },
      mkStatic = function(requiredParameterCount, optionalParameterDefaultValues, callNames, applyIndex) {
        return function(container, getterName, name, funType) {
          return installStaticTearOff(container, getterName, requiredParameterCount, optionalParameterDefaultValues, callNames, [name], funType, applyIndex);
        };
      };
    return {inherit: inherit, inheritMany: inheritMany, mixin: mixin, installStaticTearOff: installStaticTearOff, installInstanceTearOff: installInstanceTearOff, _instance_0u: mkInstance(0, 0, null, ["call$0"], 0), _instance_1u: mkInstance(0, 1, null, ["call$1"], 0), _instance_2u: mkInstance(0, 2, null, ["call$2"], 0), _instance_0i: mkInstance(1, 0, null, ["call$0"], 0), _instance_1i: mkInstance(1, 1, null, ["call$1"], 0), _instance_2i: mkInstance(1, 2, null, ["call$2"], 0), _static_0: mkStatic(0, null, ["call$0"], 0), _static_1: mkStatic(1, null, ["call$1"], 0), _static_2: mkStatic(2, null, ["call$2"], 0), makeConstList: makeConstList, lazy: lazy, updateHolder: updateHolder, convertToFastObject: convertToFastObject, setFunctionNamesIfNecessary: setFunctionNamesIfNecessary, updateTypes: updateTypes, setOrUpdateInterceptorsByTag: setOrUpdateInterceptorsByTag, setOrUpdateLeafTags: setOrUpdateLeafTags};
  }();
  function initializeDeferredHunk(hunk) {
    typesOffset = init.types.length;
    hunk(hunkHelpers, init, holders, $);
  }
  function getGlobalFromName(name) {
    for (var i = 0; i < holders.length; i++) {
      if (holders[i] == C)
        continue;
      if (holders[i][name])
        return holders[i][name];
    }
  }
  var C = {},
  H = {ChromeObject: function ChromeObject() {
    }, Rule: function Rule() {
    }, Event: function Event() {
    }, API_ChromeApp: function API_ChromeApp() {
    }, API_Chrome: function API_Chrome() {
    }, AppWindowBounds: function AppWindowBounds() {
    }, AppWindowCreateWindowOptions: function AppWindowCreateWindowOptions() {
    }, AppWindowAppWindow: function AppWindowAppWindow() {
    }, Event_app_window_onBoundsChanged: function Event_app_window_onBoundsChanged() {
    }, Event_app_window_onClosed: function Event_app_window_onClosed() {
    }, Event_app_window_onFullscreened: function Event_app_window_onFullscreened() {
    }, Event_app_window_onMaximized: function Event_app_window_onMaximized() {
    }, Event_app_window_onMinimized: function Event_app_window_onMinimized() {
    }, Event_app_window_onRestored: function Event_app_window_onRestored() {
    }, API_app_window: function API_app_window() {
    }, AppRuntimeLaunchItem: function AppRuntimeLaunchItem() {
    }, AppRuntimeLaunchData: function AppRuntimeLaunchData() {
    }, Event_app_runtime_onLaunched: function Event_app_runtime_onLaunched() {
    }, Event_app_runtime_onRestarted: function Event_app_runtime_onRestarted() {
    }, API_app_runtime: function API_app_runtime() {
    }, FilesystemAcceptOption: function FilesystemAcceptOption() {
    }, FilesystemChooseEntryOptions: function FilesystemChooseEntryOptions() {
    }, API_file_system: function API_file_system() {
    }, JS_CONST: function JS_CONST(t0) {
      this.$ti = t0;
    }, _CryptoUtils: function _CryptoUtils() {
    }, _HashBase: function _HashBase() {
    }, _MD5: function _MD5() {
    }, _SHA1: function _SHA1() {
    }, HttpServer: function HttpServer() {
    }, HttpConnectionsInfo: function HttpConnectionsInfo() {
    }, HttpHeaders: function HttpHeaders() {
    }, HeaderValue: function HeaderValue() {
    }, HttpSession: function HttpSession() {
    }, ContentType: function ContentType() {
    }, Cookie: function Cookie() {
    }, HttpRequest: function HttpRequest() {
    }, HttpResponse: function HttpResponse() {
    }, HttpClient: function HttpClient() {
    }, HttpClientRequest: function HttpClientRequest() {
    }, HttpClientResponse: function HttpClientResponse() {
    }, HttpClientCredentials: function HttpClientCredentials() {
    }, HttpClientBasicCredentials: function HttpClientBasicCredentials() {
    }, HttpClientDigestCredentials: function HttpClientDigestCredentials() {
    }, HttpConnectionInfo: function HttpConnectionInfo() {
    }, RedirectInfo: function RedirectInfo() {
    }, DetachedSocket: function DetachedSocket() {
    }, HttpException: function HttpException() {
    }, RedirectException: function RedirectException() {
    }, HttpDate: function HttpDate() {
    }, _HttpHeaders: function _HttpHeaders() {
    }, _HeaderValue: function _HeaderValue() {
    }, _ContentType: function _ContentType() {
    }, _Cookie: function _Cookie() {
    }, _ServiceObject: function _ServiceObject() {
    }, _CopyingBytesBuilder: function _CopyingBytesBuilder() {
    }, _HttpIncoming: function _HttpIncoming() {
    }, _HttpInboundMessage: function _HttpInboundMessage() {
    }, _HttpRequest: function _HttpRequest() {
    }, _HttpClientResponse: function _HttpClientResponse() {
    }, _StreamSinkImpl: function _StreamSinkImpl() {
    }, _IOSinkImpl: function _IOSinkImpl() {
    }, _HttpOutboundMessage: function _HttpOutboundMessage() {
    }, _HttpResponse: function _HttpResponse() {
    }, _HttpClientRequest: function _HttpClientRequest() {
    }, _HttpGZipSink: function _HttpGZipSink() {
    }, _HttpOutgoing: function _HttpOutgoing() {
    }, _HttpClientConnection: function _HttpClientConnection() {
    }, _ConnectionInfo: function _ConnectionInfo() {
    }, _ConnectionTarget: function _ConnectionTarget() {
    }, _HttpClient: function _HttpClient() {
    }, _HttpConnection: function _HttpConnection() {
    }, _HttpServer: function _HttpServer() {
    }, _ProxyConfiguration: function _ProxyConfiguration() {
    }, _Proxy: function _Proxy() {
    }, _HttpConnectionInfo: function _HttpConnectionInfo() {
    }, _DetachedSocket: function _DetachedSocket() {
    }, _AuthenticationScheme: function _AuthenticationScheme() {
    }, _Credentials: function _Credentials() {
    }, _SiteCredentials: function _SiteCredentials() {
    }, _ProxyCredentials: function _ProxyCredentials() {
    }, _HttpClientCredentials: function _HttpClientCredentials() {
    }, _HttpClientBasicCredentials: function _HttpClientBasicCredentials() {
    }, _HttpClientDigestCredentials: function _HttpClientDigestCredentials() {
    }, _RedirectInfo: function _RedirectInfo() {
    }, _Const: function _Const() {
    }, _CharCode: function _CharCode() {
    }, _State: function _State() {
    }, _HttpVersion: function _HttpVersion() {
    }, _MessageType: function _MessageType() {
    }, _HttpDetachedStreamSubscription: function _HttpDetachedStreamSubscription() {
    }, _HttpDetachedIncoming: function _HttpDetachedIncoming() {
    }, _HttpParser: function _HttpParser() {
    }, _HttpSession: function _HttpSession() {
    }, _HttpSessionManager: function _HttpSessionManager() {
    }, HttpOverrides: function HttpOverrides() {
    }, _HttpOverridesScope: function _HttpOverridesScope() {
    }, WebSocketStatus: function WebSocketStatus() {
    }, CompressionOptions: function CompressionOptions() {
    }, WebSocketTransformer: function WebSocketTransformer() {
    }, WebSocket: function WebSocket() {
    }, WebSocketException: function WebSocketException() {
    }, _WebSocketMessageType: function _WebSocketMessageType() {
    }, _WebSocketOpcode: function _WebSocketOpcode() {
    }, _EncodedString: function _EncodedString() {
    }, _CompressionMaxWindowBits: function _CompressionMaxWindowBits() {
    }, _WebSocketProtocolTransformer: function _WebSocketProtocolTransformer() {
    }, _WebSocketPing: function _WebSocketPing() {
    }, _WebSocketPong: function _WebSocketPong() {
    }, _WebSocketTransformerImpl: function _WebSocketTransformerImpl() {
    }, _WebSocketPerMessageDeflate: function _WebSocketPerMessageDeflate() {
    }, _WebSocketOutgoingTransformer: function _WebSocketOutgoingTransformer() {
    }, _WebSocketConsumer: function _WebSocketConsumer() {
    }, _WebSocketImpl: function _WebSocketImpl() {
    }, __HttpConnection_LinkedListEntry__ServiceObject: function __HttpConnection_LinkedListEntry__ServiceObject() {
    }, __HttpServer_Stream__ServiceObject: function __HttpServer_Stream__ServiceObject() {
    }, __WebSocketImpl_Stream__ServiceObject: function __WebSocketImpl_Stream__ServiceObject() {
    },
    makeListFixedLength: function(growableList, $T) {
      var t1 = [$T];
      return H.assertSubtype(J.JSArray_markFixedList(H.assertSubtype(growableList, "$isList", t1, "$asList")), "$isList", t1, "$asList");
    },
    makeFixedListUnmodifiable: function(fixedLengthList, $T) {
      var t1 = [$T];
      return H.assertSubtype(J.JSArray_markUnmodifiableList(H.assertSubtype(fixedLengthList, "$isList", t1, "$asList")), "$isList", t1, "$asList");
    },
    CastIterator$: function(_source, $S, $T) {
      return new H.CastIterator(_source, [$S, $T]);
    },
    CastIterable$_: function(_source, $S, $T) {
      return new H.CastIterable(_source, [$S, $T]);
    },
    CastIterable_CastIterable: function(source, $S, $T) {
      H.assertSubtype(source, "$isIterable", [$S], "$asIterable");
      if (H.checkSubtype(source, "$isEfficientLengthIterable", [$S], "$asEfficientLengthIterable"))
        return H._EfficientLengthCastIterable$(source, $S, $T);
      return H.CastIterable$_(source, $S, $T);
    },
    _EfficientLengthCastIterable$: function(source, $S, $T) {
      return new H._EfficientLengthCastIterable(source, [$S, $T]);
    },
    CastList$: function(_source, $S, $T) {
      return new H.CastList(_source, [$S, $T]);
    },
    CodeUnits$: function(_string) {
      return new H.CodeUnits(_string, []);
    },
    hexDigitValue: function(char) {
      var digit, letter;
      H.intTypeCheck(char);
      if (typeof char !== "number")
        return char.$xor();
      digit = (char ^ 48) >>> 0;
      if (digit <= 9)
        return digit;
      letter = (char | 32) >>> 0;
      if (97 <= letter && letter <= 102)
        return letter - 87;
      return -1;
    },
    parseHexByte: function(source, index) {
      var digit1, digit2;
      H.stringTypeCheck(source);
      H.intTypeCheck(index);
      digit1 = H.hexDigitValue(J.getInterceptor$s(source).codeUnitAt$1(source, index));
      if (typeof index !== "number")
        return index.$add();
      digit2 = H.hexDigitValue(C.JSString_methods.codeUnitAt$1(source, index + 1));
      if (typeof digit1 !== "number")
        return digit1.$mul();
      if (typeof digit2 !== "number")
        return H.iae(digit2);
      return digit1 * 16 + digit2 - (digit2 & 256);
    },
    SubListIterable$: function(_iterable, _start, _endOrLength, $E) {
      var t1 = new H.SubListIterable(_iterable, _start, _endOrLength, [$E]);
      t1.SubListIterable$3(_iterable, _start, _endOrLength, $E);
      return t1;
    },
    ListIterator$: function(iterable, $E) {
      return new H.ListIterator(iterable, J.get$length$asx(iterable), [$E]);
    },
    MappedIterable_MappedIterable: function(iterable, $function, $S, $T) {
      H.assertSubtype(iterable, "$isIterable", [$S], "$asIterable");
      H.functionTypeCheck($function, {func: 1, ret: $T, args: [$S]});
      if (!!J.getInterceptor$(iterable).$isEfficientLengthIterable)
        return H.EfficientLengthMappedIterable$(iterable, $function, $S, $T);
      return H.MappedIterable$_(iterable, $function, $S, $T);
    },
    MappedIterable$_: function(_iterable, _f, $S, $T) {
      return new H.MappedIterable(_iterable, _f, [$S, $T]);
    },
    EfficientLengthMappedIterable$: function(iterable, $function, $S, $T) {
      return new H.EfficientLengthMappedIterable(iterable, $function, [$S, $T]);
    },
    MappedIterator$: function(_iterator, _f, $S, $T) {
      return new H.MappedIterator(_iterator, _f, [$S, $T]);
    },
    MappedListIterable$: function(_source, _f, $S, $T) {
      return new H.MappedListIterable(_source, _f, [$S, $T]);
    },
    WhereIterable$: function(_iterable, _f, $E) {
      return new H.WhereIterable(_iterable, _f, [$E]);
    },
    WhereIterator$: function(_iterator, _f, $E) {
      return new H.WhereIterator(_iterator, _f, [$E]);
    },
    ExpandIterable$: function(_iterable, _f, $S, $T) {
      return new H.ExpandIterable(_iterable, _f, [$S, $T]);
    },
    ExpandIterator$: function(_iterator, _f, $S, $T) {
      return new H.ExpandIterator(_iterator, _f, C.C_EmptyIterator, [$S, $T]);
    },
    TakeIterable_TakeIterable: function(iterable, takeCount, $E) {
      var _s9_ = "takeCount";
      H.assertSubtype(iterable, "$isIterable", [$E], "$asIterable");
      H.intTypeCheck(takeCount);
      P.ArgumentError_checkNotNull(takeCount, _s9_);
      P.RangeError_checkNotNegative(takeCount, _s9_);
      if (!!J.getInterceptor$(iterable).$isEfficientLengthIterable)
        return H.EfficientLengthTakeIterable$(iterable, takeCount, $E);
      return H.TakeIterable$_(iterable, takeCount, $E);
    },
    TakeIterable$_: function(_iterable, _takeCount, $E) {
      return new H.TakeIterable(_iterable, _takeCount, [$E]);
    },
    EfficientLengthTakeIterable$: function(iterable, takeCount, $E) {
      return new H.EfficientLengthTakeIterable(iterable, takeCount, [$E]);
    },
    TakeIterator$: function(_iterator, _remaining, $E) {
      var t1 = new H.TakeIterator(_iterator, _remaining, [$E]);
      t1.TakeIterator$2(_iterator, _remaining, $E);
      return t1;
    },
    SkipIterable_SkipIterable: function(iterable, count, $E) {
      H.assertSubtype(iterable, "$isIterable", [$E], "$asIterable");
      H.intTypeCheck(count);
      if (!!J.getInterceptor$(iterable).$isEfficientLengthIterable)
        return H.EfficientLengthSkipIterable_EfficientLengthSkipIterable(iterable, count, $E);
      return H.SkipIterable$_(iterable, H._checkCount(count), $E);
    },
    SkipIterable$_: function(_iterable, _skipCount, $E) {
      return new H.SkipIterable(_iterable, _skipCount, [$E]);
    },
    EfficientLengthSkipIterable_EfficientLengthSkipIterable: function(iterable, count, $E) {
      return H.EfficientLengthSkipIterable$_(H.assertSubtype(iterable, "$isIterable", [$E], "$asIterable"), H._checkCount(H.intTypeCheck(count)), $E);
    },
    EfficientLengthSkipIterable$_: function(iterable, count, $E) {
      return new H.EfficientLengthSkipIterable(iterable, count, [$E]);
    },
    _checkCount: function(count) {
      H.intTypeCheck(count);
      P.ArgumentError_checkNotNull(count, "count");
      P.RangeError_checkNotNegative(count, "count");
      return count;
    },
    SkipIterator$: function(_iterator, _skipCount, $E) {
      var t1 = new H.SkipIterator(_iterator, _skipCount, [$E]);
      t1.SkipIterator$2(_iterator, _skipCount, $E);
      return t1;
    },
    SkipWhileIterable$: function(_iterable, _f, $E) {
      return new H.SkipWhileIterable(_iterable, _f, [$E]);
    },
    SkipWhileIterator$: function(_iterator, _f, $E) {
      return new H.SkipWhileIterator(_iterator, _f, [$E]);
    },
    EmptyIterable$: function($E) {
      return new H.EmptyIterable([$E]);
    },
    FollowedByIterable$: function(_first, _second, $E) {
      return new H.FollowedByIterable(_first, _second, [$E]);
    },
    FollowedByIterable_FollowedByIterable$firstEfficient: function(first, second, $E) {
      var t1 = [$E];
      H.assertSubtype(first, "$isEfficientLengthIterable", t1, "$asEfficientLengthIterable");
      H.assertSubtype(second, "$isIterable", [$E], "$asIterable");
      if (H.checkSubtype(second, "$isEfficientLengthIterable", t1, "$asEfficientLengthIterable"))
        return H.EfficientLengthFollowedByIterable$(first, second, $E);
      return H.FollowedByIterable$(first, second, $E);
    },
    EfficientLengthFollowedByIterable$: function(first, second, $E) {
      return new H.EfficientLengthFollowedByIterable(first, second, [$E]);
    },
    FollowedByIterator$: function(first, _nextIterable, $E) {
      return new H.FollowedByIterator(J.get$iterator$ax(first), _nextIterable, [$E]);
    },
    IterableElementError_noElement: function() {
      return P.StateError$("No element");
    },
    IterableElementError_tooFew: function() {
      return P.StateError$("Too few elements");
    },
    ReversedListIterable$: function(_source, $E) {
      return new H.ReversedListIterable(_source, [$E]);
    },
    Symbol$unvalidated: function(_name) {
      return new H.Symbol(_name, []);
    },
    Symbol_getName: function(symbol) {
      return H.interceptedTypeCheck(symbol, "$isSymbol")._name;
    },
    CastStream: function CastStream() {
    },
    CastStreamSubscription: function CastStreamSubscription() {
    },
    CastStreamTransformer: function CastStreamTransformer() {
    },
    CastConverter: function CastConverter() {
    },
    _CastIterableBase: function _CastIterableBase() {
    },
    CastIterator: function CastIterator(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    CastIterable: function CastIterable(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    _EfficientLengthCastIterable: function _EfficientLengthCastIterable(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    _CastListBase: function _CastListBase() {
    },
    CastList: function CastList(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    CastSet: function CastSet() {
    },
    CastMap: function CastMap() {
    },
    CastQueue: function CastQueue() {
    },
    CodeUnits: function CodeUnits(t0, t1) {
      this.__internal$_string = t0;
      this.$ti = t1;
    },
    ExternalName: function ExternalName() {
    },
    Since: function Since() {
    },
    HttpStatus: function HttpStatus() {
    },
    EfficientLengthIterable: function EfficientLengthIterable() {
    },
    ListIterable: function ListIterable() {
    },
    SubListIterable: function SubListIterable(t0, t1, t2, t3) {
      var _ = this;
      _.__internal$_iterable = t0;
      _._start = t1;
      _._endOrLength = t2;
      _.$ti = t3;
    },
    ListIterator: function ListIterator(t0, t1, t2) {
      var _ = this;
      _.__internal$_iterable = t0;
      _.__internal$_length = t1;
      _.__internal$_index = 0;
      _.__internal$_current = null;
      _.$ti = t2;
    },
    MappedIterable: function MappedIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    EfficientLengthMappedIterable: function EfficientLengthMappedIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    MappedIterator: function MappedIterator(t0, t1, t2) {
      var _ = this;
      _.__internal$_current = null;
      _._iterator = t0;
      _._f = t1;
      _.$ti = t2;
    },
    MappedListIterable: function MappedListIterable(t0, t1, t2) {
      this._source = t0;
      this._f = t1;
      this.$ti = t2;
    },
    WhereIterable: function WhereIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    WhereIterator: function WhereIterator(t0, t1, t2) {
      this._iterator = t0;
      this._f = t1;
      this.$ti = t2;
    },
    ExpandIterable: function ExpandIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    ExpandIterator: function ExpandIterator(t0, t1, t2, t3) {
      var _ = this;
      _._iterator = t0;
      _._f = t1;
      _._currentExpansion = t2;
      _.__internal$_current = null;
      _.$ti = t3;
    },
    TakeIterable: function TakeIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._takeCount = t1;
      this.$ti = t2;
    },
    EfficientLengthTakeIterable: function EfficientLengthTakeIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._takeCount = t1;
      this.$ti = t2;
    },
    TakeIterator: function TakeIterator(t0, t1, t2) {
      this._iterator = t0;
      this._remaining = t1;
      this.$ti = t2;
    },
    TakeWhileIterable: function TakeWhileIterable() {
    },
    TakeWhileIterator: function TakeWhileIterator() {
    },
    SkipIterable: function SkipIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._skipCount = t1;
      this.$ti = t2;
    },
    EfficientLengthSkipIterable: function EfficientLengthSkipIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._skipCount = t1;
      this.$ti = t2;
    },
    SkipIterator: function SkipIterator(t0, t1, t2) {
      this._iterator = t0;
      this._skipCount = t1;
      this.$ti = t2;
    },
    SkipWhileIterable: function SkipWhileIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    SkipWhileIterator: function SkipWhileIterator(t0, t1, t2) {
      var _ = this;
      _._iterator = t0;
      _._f = t1;
      _._hasSkipped = false;
      _.$ti = t2;
    },
    EmptyIterable: function EmptyIterable(t0) {
      this.$ti = t0;
    },
    EmptyIterator: function EmptyIterator(t0) {
      this.$ti = t0;
    },
    FollowedByIterable: function FollowedByIterable(t0, t1, t2) {
      this.__internal$_first = t0;
      this._second = t1;
      this.$ti = t2;
    },
    EfficientLengthFollowedByIterable: function EfficientLengthFollowedByIterable(t0, t1, t2) {
      this.__internal$_first = t0;
      this._second = t1;
      this.$ti = t2;
    },
    FollowedByIterator: function FollowedByIterator(t0, t1, t2) {
      this._currentIterator = t0;
      this._nextIterable = t1;
      this.$ti = t2;
    },
    WhereTypeIterable: function WhereTypeIterable() {
    },
    WhereTypeIterator: function WhereTypeIterator() {
    },
    IterableElementError: function IterableElementError() {
    },
    LinkedList: function LinkedList() {
    },
    LinkedListEntry0: function LinkedListEntry0() {
    },
    _LinkedListIterator: function _LinkedListIterator() {
    },
    FixedLengthListMixin: function FixedLengthListMixin() {
    },
    UnmodifiableListMixin: function UnmodifiableListMixin() {
    },
    FixedLengthListBase: function FixedLengthListBase() {
    },
    UnmodifiableListBase: function UnmodifiableListBase() {
    },
    _ListIndicesIterable: function _ListIndicesIterable() {
    },
    ListMapView: function ListMapView() {
    },
    ReversedListIterable: function ReversedListIterable(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    UnmodifiableListError: function UnmodifiableListError() {
    },
    NonGrowableListError: function NonGrowableListError() {
    },
    Sort: function Sort() {
    },
    Symbol: function Symbol(t0, t1) {
      this._name = t0;
      this.$ti = t1;
    },
    __CastListBase__CastIterableBase_ListMixin: function __CastListBase__CastIterableBase_ListMixin() {
    },
    JsGetName: function JsGetName() {
    },
    JsBuiltin: function JsBuiltin() {
    },
    ConstantMapView$: function(base, $K, $V) {
      return new H.ConstantMapView(base, [$K, $V]);
    },
    ConstantMap__throwUnmodifiable: function() {
      throw H.wrapException(P.UnsupportedError$("Cannot modify unmodifiable Map"));
    },
    _ConstantMapKeyIterable$: function(_map, $K) {
      return new H._ConstantMapKeyIterable(_map, [$K]);
    },
    Instantiation1$: function(f, T1) {
      var t1 = new H.Instantiation1(f, [T1]);
      t1.Instantiation$1(f);
      return t1;
    },
    instantiate1: function(f, T1) {
      return H.Instantiation1$(H.interceptedTypeCheck(f, "$isClosure"), T1);
    },
    isCheckPropertyToJsConstructorName: function(isCheckProperty) {
      return H.stringTypeCheck(isCheckProperty).substring(3);
    },
    isDartFunctionType: function(type) {
      return 'func' in type;
    },
    isDartFutureOrType: function(type) {
      return 'futureOr' in type;
    },
    isDartVoidTypeRti: function(type) {
      return type === -1;
    },
    rawRtiToJsConstructorName: function(rti) {
      return rti.name;
    },
    unminifyOrTag: function(rawClassName) {
      var preserved;
      H.stringTypeCheck(rawClassName);
      preserved = H.unmangleGlobalNameIfPreservedAnyways(rawClassName);
      if (typeof preserved === "string")
        return preserved;
      return rawClassName;
    },
    getRawRuntimeType: function(o) {
      return o.constructor;
    },
    builtinIsSubtype: function(type, other) {
      return '$is' + H.stringTypeCheck(other) in type.prototype;
    },
    isDartFunctionTypeRti: function(type) {
      return type.name === "Function";
    },
    isNullType: function(type) {
      return type.name === "Null";
    },
    isDartDynamicTypeRti: function(type) {
      return type == null;
    },
    isDartJsInteropTypeArgumentRti: function(type) {
      return type === -2;
    },
    isDartObjectTypeRti: function(type) {
      return type.name === "Object";
    },
    isNullTypeRti: function(type) {
      return type.name === "Null";
    },
    getType: function(index) {
      return init.types[H.intTypeCheck(index)];
    },
    requiresPreamble: function() {
    },
    isJsIndexable: function(object, record) {
      var result;
      if (record != null) {
        result = J.dispatchRecordIndexability(record);
        if (result != null)
          return H.boolTypeCheck(result);
      }
      return !!J.getInterceptor$(object).$isJavaScriptIndexingBehavior;
    },
    S: function(value) {
      var res;
      if (typeof value === "string")
        return value;
      if (typeof value === "number") {
        if (value !== 0)
          return "" + value;
      } else if (true === value)
        return "true";
      else if (false === value)
        return "false";
      else if (value == null)
        return "null";
      res = J.toString$0$(value);
      if (typeof res !== "string")
        throw H.wrapException(H.argumentErrorValue(value));
      return res;
    },
    createUnmangledInvocationMirror: function(symbol, internalName, kind, $arguments, argumentNames, types) {
      return H.JSInvocationMirror$(H.interceptedTypeCheck(symbol, "$isSymbol0"), H.stringTypeCheck(internalName), H.intTypeCheck(kind), H.listTypeCheck($arguments), H.listTypeCheck(argumentNames), H.intTypeCheck(types));
    },
    JSInvocationMirror$: function(_memberName, _internalName, _kind, _arguments, _namedArgumentNames, _typeArgumentCount) {
      return new H.JSInvocationMirror(_memberName, _kind, _arguments, _namedArgumentNames, _typeArgumentCount, []);
    },
    Primitives_objectHashCode: function(object) {
      var hash = object.$identityHash;
      if (hash == null) {
        hash = Math.random() * 0x3fffffff | 0;
        object.$identityHash = hash;
      }
      return hash;
    },
    Primitives_parseInt: function(source, radix) {
      var match, decimalMatch, maxCharCode, digitsPart, t1, i, characterCode;
      H.stringTypeCheck(source);
      H.intTypeCheck(radix);
      H.checkString(source);
      match = /^\s*[+-]?((0x[a-f0-9]+)|(\d+)|([a-z0-9]+))\s*$/i.exec(source);
      if (match == null)
        return;
      if (3 >= match.length)
        return H.ioore(match, 3);
      decimalMatch = H.stringTypeCheck(match[3]);
      if (radix == null) {
        if (decimalMatch != null)
          return parseInt(source, 10);
        if (match[2] != null)
          return parseInt(source, 16);
        return;
      }
      if (radix < 2 || radix > 36)
        throw H.wrapException(P.RangeError$range(radix, 2, 36, "radix", null));
      if (radix === 10 && decimalMatch != null)
        return parseInt(source, 10);
      if (radix < 10 || decimalMatch == null) {
        maxCharCode = radix <= 10 ? 47 + radix : 86 + radix;
        digitsPart = match[1];
        for (t1 = digitsPart.length, i = 0; i < t1; ++i) {
          characterCode = J.$or$n(C.JSString_methods._codeUnitAt$1(digitsPart, i), 32);
          if (typeof characterCode !== "number")
            return characterCode.$gt();
          if (characterCode > maxCharCode)
            return;
        }
      }
      return parseInt(source, radix);
    },
    Primitives_formatType: function(className, typeArguments) {
      H.stringTypeCheck(className);
      H.listTypeCheck(typeArguments);
      return H.unmangleAllIdentifiersIfPreservedAnyways(H.S(className) + H.S(H.joinArguments(typeArguments, 0)));
    },
    Primitives_objectTypeName: function(object) {
      var className = H.Primitives__objectClassName(object),
        $arguments = H.joinArguments(H.getRuntimeTypeInfo(object), 0);
      return H.S(className) + H.S($arguments);
    },
    Primitives__objectClassName: function(object) {
      var interceptorConstructorName, $name, t1, dispatchName, objectConstructor, match, decompiledName,
        interceptor = J.getInterceptor$(object),
        interceptorConstructor = interceptor.constructor;
      if (typeof interceptorConstructor == "function") {
        interceptorConstructorName = interceptorConstructor.name;
        $name = typeof interceptorConstructorName === "string" ? interceptorConstructorName : null;
      } else
        $name = null;
      t1 = $name == null;
      if (t1 || interceptor === C.Interceptor_methods || !!interceptor.$isUnknownJavaScriptObject) {
        dispatchName = H.constructorNameFallback(object);
        if (t1)
          $name = dispatchName;
        if (dispatchName === "Object") {
          objectConstructor = object.constructor;
          if (typeof objectConstructor == "function") {
            match = String(objectConstructor).match(/^\s*function\s*([\w$]*)\s*\(/);
            decompiledName = match == null ? null : match[1];
            if (typeof decompiledName === "string" && /^\w+$/.test(decompiledName))
              $name = decompiledName;
          }
        }
        return $name;
      }
      $name = $name;
      return H.unminifyOrTag($name.length > 1 && C.JSString_methods._codeUnitAt$1($name, 0) === 36 ? C.JSString_methods.substring$1($name, 1) : $name);
    },
    Primitives_objectToHumanReadableString: function(object) {
      return "Instance of '" + H.S(H.Primitives_objectTypeName(object)) + "'";
    },
    Primitives_currentUri: function() {
      H.requiresPreamble();
      if (!!self.location)
        return self.location.href;
      return;
    },
    Primitives__fromCharCodeApply: function(array) {
      var end, result, i, i0, chunkEnd;
      H.listTypeCheck(array);
      end = J.get$length$asx(array);
      if (typeof end !== "number")
        return end.$le();
      if (end <= 500)
        return String.fromCharCode.apply(null, array);
      for (result = "", i = 0; i < end; i = i0) {
        i0 = i + 500;
        if (i0 < end)
          chunkEnd = i0;
        else
          chunkEnd = end;
        result += String.fromCharCode.apply(null, array.slice(i, chunkEnd));
      }
      return result;
    },
    Primitives_stringFromCodePoints: function(codePoints) {
      var t1, i,
        a = H.setRuntimeTypeInfo([], [P.int]);
      for (t1 = J.get$iterator$ax(H.listSuperNativeTypeCheck(codePoints, "$isIterable")); t1.moveNext$0();) {
        i = t1.get$current();
        if (typeof i !== "number" || Math.floor(i) !== i)
          throw H.wrapException(H.argumentErrorValue(i));
        if (i <= 65535)
          C.JSArray_methods.add$1(a, i);
        else if (i <= 1114111) {
          C.JSArray_methods.add$1(a, 55296 + (C.JSInt_methods._shrOtherPositive$1(i - 65536, 10) & 1023));
          C.JSArray_methods.add$1(a, 56320 + (i & 1023));
        } else
          throw H.wrapException(H.argumentErrorValue(i));
      }
      return H.Primitives__fromCharCodeApply(a);
    },
    Primitives_stringFromCharCodes: function(charCodes) {
      var t1, i;
      for (H.listSuperNativeTypeCheck(charCodes, "$isIterable"), t1 = J.get$iterator$ax(charCodes); t1.moveNext$0();) {
        i = t1.get$current();
        if (typeof i !== "number" || Math.floor(i) !== i)
          throw H.wrapException(H.argumentErrorValue(i));
        if (i < 0)
          throw H.wrapException(H.argumentErrorValue(i));
        if (i > 65535)
          return H.Primitives_stringFromCodePoints(charCodes);
      }
      return H.Primitives__fromCharCodeApply(H.listTypeCheck(charCodes));
    },
    Primitives_stringFromNativeUint8List: function(charCodes, start, end) {
      var i, result, i0, chunkEnd;
      H.interceptedTypeCheck(charCodes, "$isNativeUint8List");
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      if (typeof end !== "number")
        return end.$le();
      if (end <= 500 && start === 0 && end === charCodes.length)
        return String.fromCharCode.apply(null, charCodes);
      i = start;
      result = "";
      while (true) {
        if (typeof i !== "number")
          return i.$lt();
        if (!(i < end))
          break;
        i0 = i + 500;
        if (i0 < end)
          chunkEnd = i0;
        else
          chunkEnd = end;
        result += String.fromCharCode.apply(null, charCodes.subarray(i, chunkEnd));
        i = i0;
      }
      return result;
    },
    Primitives_stringFromCharCode: function(charCode) {
      var bits;
      H.numTypeCheck(charCode);
      if (typeof charCode !== "number")
        return H.iae(charCode);
      if (0 <= charCode) {
        if (charCode <= 65535)
          return String.fromCharCode(charCode);
        if (charCode <= 1114111) {
          bits = charCode - 65536;
          return String.fromCharCode((55296 | C.JSNumber_methods._shrOtherPositive$1(bits, 10)) >>> 0, 56320 | bits & 1023);
        }
      }
      throw H.wrapException(P.RangeError$range(charCode, 0, 1114111, null, null));
    },
    Primitives_stringConcatUnchecked: function(string1, string2) {
      return H.stringTypeCheck(string1) + H.stringTypeCheck(string2);
    },
    Primitives_flattenString: function(str) {
      H.stringTypeCheck(str);
      return str.charCodeAt(0) == 0 ? str : str;
    },
    Primitives_functionNoSuchMethod: function($function, positionalArguments, namedArguments) {
      var $arguments, namedArgumentList, t2, t1 = {};
      H.listTypeCheck(positionalArguments);
      H.assertSubtype(namedArguments, "$isMap", [P.String, null], "$asMap");
      t1.argumentCount = 0;
      $arguments = [];
      namedArgumentList = [];
      if (positionalArguments != null) {
        t2 = J.get$length$asx(positionalArguments);
        if (typeof t2 !== "number")
          return H.iae(t2);
        t1.argumentCount = 0 + t2;
        C.JSArray_methods.addAll$1($arguments, positionalArguments);
      }
      t1.names = "";
      if (namedArguments != null && !namedArguments.get$isEmpty(namedArguments))
        namedArguments.forEach$1(0, new H.Primitives_functionNoSuchMethod_closure(t1, namedArgumentList, $arguments));
      return J.noSuchMethod$1$($function, H.interceptedTypeCheck(H.createUnmangledInvocationMirror(C.Symbol_call, "call" + "$" + H.S(t1.argumentCount) + H.S(t1.names), 0, $arguments, namedArgumentList, 0), "$isInvocation"));
    },
    Primitives_applyFunction: function($function, positionalArguments, namedArguments) {
      var t1, $arguments, argumentCount, jsStub;
      H.interceptedTypeCheck($function, "$isFunction");
      H.listTypeCheck(positionalArguments);
      H.assertSubtype(namedArguments, "$isMap", [P.String, null], "$asMap");
      if (positionalArguments instanceof Array)
        t1 = namedArguments == null || namedArguments.get$isEmpty(namedArguments);
      else
        t1 = false;
      if (t1) {
        $arguments = positionalArguments;
        argumentCount = $arguments.length;
        if (argumentCount === 0) {
          if (!!$function.call$0)
            return $function.call$0();
        } else if (argumentCount === 1) {
          if (!!$function.call$1)
            return $function.call$1($arguments[0]);
        } else if (argumentCount === 2) {
          if (!!$function.call$2)
            return $function.call$2($arguments[0], $arguments[1]);
        } else if (argumentCount === 3) {
          if (!!$function.call$3)
            return $function.call$3($arguments[0], $arguments[1], $arguments[2]);
        } else if (argumentCount === 4) {
          if (!!$function.call$4)
            return $function.call$4($arguments[0], $arguments[1], $arguments[2], $arguments[3]);
        } else if (argumentCount === 5)
          if (!!$function.call$5)
            return $function.call$5($arguments[0], $arguments[1], $arguments[2], $arguments[3], $arguments[4]);
        jsStub = $function["call" + "$" + argumentCount];
        if (jsStub != null)
          return jsStub.apply($function, $arguments);
      }
      return H.Primitives__genericApplyFunction2($function, positionalArguments, namedArguments);
    },
    Primitives__genericApplyFunction2: function($function, positionalArguments, namedArguments) {
      var $arguments, t1, argumentCount, requiredParameterCount, defaultValuesClosure, t2, defaultValues, interceptor, jsFunction, keys, used, t3;
      H.interceptedTypeCheck($function, "$isFunction");
      H.listTypeCheck(positionalArguments);
      H.assertSubtype(namedArguments, "$isMap", [P.String, null], "$asMap");
      if (positionalArguments != null)
        $arguments = positionalArguments instanceof Array ? positionalArguments : P.List_List$from(positionalArguments, true, null);
      else
        $arguments = [];
      t1 = J.getInterceptor$asx($arguments);
      argumentCount = t1.get$length($arguments);
      requiredParameterCount = $function.$requiredArgCount;
      if (typeof argumentCount !== "number")
        return argumentCount.$lt();
      if (argumentCount < requiredParameterCount)
        return H.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
      defaultValuesClosure = $function.$defaultValues;
      t2 = defaultValuesClosure == null;
      defaultValues = !t2 ? defaultValuesClosure() : null;
      interceptor = J.getInterceptor$($function);
      jsFunction = interceptor["call*"];
      if (typeof jsFunction === "string")
        jsFunction = interceptor[jsFunction];
      if (t2) {
        if (namedArguments != null && namedArguments.get$isNotEmpty(namedArguments))
          return H.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
        if (argumentCount === requiredParameterCount)
          return jsFunction.apply($function, $arguments);
        return H.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
      }
      if (defaultValues instanceof Array) {
        if (namedArguments != null && namedArguments.get$isNotEmpty(namedArguments))
          return H.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
        if (argumentCount > requiredParameterCount + defaultValues.length)
          return H.Primitives_functionNoSuchMethod($function, $arguments, null);
        t1.addAll$1($arguments, defaultValues.slice(argumentCount - requiredParameterCount));
        return jsFunction.apply($function, $arguments);
      } else {
        if (argumentCount > requiredParameterCount)
          return H.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
        keys = Object.keys(defaultValues);
        if (namedArguments == null)
          for (t2 = C.JSArray_methods.get$iterator(keys); t2.moveNext$0();)
            t1.add$1($arguments, defaultValues[H.stringTypeCheck(t2.get$current())]);
        else {
          for (t2 = C.JSArray_methods.get$iterator(keys), used = 0; t2.moveNext$0();) {
            t3 = H.stringTypeCheck(t2.get$current());
            if (namedArguments.containsKey$1(t3)) {
              ++used;
              t1.add$1($arguments, namedArguments.$index(0, t3));
            } else
              t1.add$1($arguments, defaultValues[t3]);
          }
          if (used !== namedArguments.get$length(namedArguments))
            return H.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
        }
        return jsFunction.apply($function, $arguments);
      }
    },
    JsCache_fetch: function(cache, key) {
      return cache[H.stringTypeCheck(key)];
    },
    iae: function(argument) {
      throw H.wrapException(H.argumentErrorValue(argument));
    },
    ioore: function(receiver, index) {
      if (receiver == null)
        J.get$length$asx(receiver);
      throw H.wrapException(H.diagnoseIndexError(receiver, index));
    },
    diagnoseIndexError: function(indexable, index) {
      var $length, t1, _s5_ = "index";
      if (typeof index !== "number" || Math.floor(index) !== index)
        return P.ArgumentError$value(index, _s5_, null);
      $length = H.intTypeCheck(J.get$length$asx(indexable));
      if (!(index < 0)) {
        if (typeof $length !== "number")
          return H.iae($length);
        t1 = index >= $length;
      } else
        t1 = true;
      if (t1)
        return P.IndexError$(index, indexable, _s5_, null, $length);
      return P.RangeError$value(index, _s5_);
    },
    diagnoseRangeError: function(start, end, $length) {
      var t1, _null = null;
      if (typeof start !== "number" || Math.floor(start) !== start)
        return P.ArgumentError$value(start, "start", _null);
      if (!(start < 0)) {
        H.numTypeCheck($length);
        if (typeof $length !== "number")
          return H.iae($length);
        t1 = start > $length;
      } else
        t1 = true;
      if (t1)
        return P.RangeError$range(start, 0, H.intTypeCheck($length), "start", _null);
      if (end != null) {
        if (typeof end !== "number" || Math.floor(end) !== end)
          return P.ArgumentError$value(end, "end", _null);
        if (!(end < start)) {
          H.numTypeCheck($length);
          if (typeof $length !== "number")
            return H.iae($length);
          t1 = end > $length;
        } else
          t1 = true;
        if (t1)
          return P.RangeError$range(end, start, H.intTypeCheck($length), "end", _null);
      }
      return P.ArgumentError$value(end, "end", _null);
    },
    stringLastIndexOfUnchecked: function(receiver, element, start) {
      return receiver.lastIndexOf(element, start);
    },
    argumentErrorValue: function(object) {
      return P.ArgumentError$value(object, null, null);
    },
    checkNull: function(object) {
      if (object == null)
        throw H.wrapException(H.argumentErrorValue(object));
      return object;
    },
    checkNum: function(value) {
      if (typeof value !== "number")
        throw H.wrapException(H.argumentErrorValue(value));
      return value;
    },
    checkInt: function(value) {
      if (typeof value !== "number" || Math.floor(value) !== value)
        throw H.wrapException(H.argumentErrorValue(value));
      return value;
    },
    checkBool: function(value) {
      if (typeof value !== "boolean")
        throw H.wrapException(H.argumentErrorValue(value));
      return value;
    },
    checkString: function(value) {
      if (typeof value !== "string")
        throw H.wrapException(H.argumentErrorValue(value));
      return value;
    },
    wrapException: function(ex) {
      var wrapper;
      if (ex == null)
        ex = P.NullThrownError$();
      wrapper = new Error();
      wrapper.dartException = ex;
      if ("defineProperty" in Object) {
        Object.defineProperty(wrapper, "message", {get: H.toStringWrapper});
        wrapper.name = "";
      } else
        wrapper.toString = H.toStringWrapper;
      return wrapper;
    },
    toStringWrapper: function() {
      return J.toString$0$(this.dartException);
    },
    throwExpression: function(ex) {
      throw H.wrapException(ex);
    },
    throwConcurrentModificationError: function(collection) {
      throw H.wrapException(P.ConcurrentModificationError$(collection));
    },
    TypeErrorDecoder$: function(_arguments, _argumentsExpr, _expr, _method, _receiver, _pattern) {
      return new H.TypeErrorDecoder(_pattern, _arguments, _argumentsExpr, _expr, _method, _receiver, []);
    },
    TypeErrorDecoder_buildJavaScriptObject: function() {
      return {
        toString: function() {
          return "$receiver$";
        }
      };
    },
    TypeErrorDecoder_buildJavaScriptObjectWithNonClosure: function() {
      return {$method$: null,
        toString: function() {
          return "$receiver$";
        }
      };
    },
    TypeErrorDecoder_extractPattern: function(message) {
      var match;
      message = H.stringTypeCheck(H.quoteStringForRegExp(H.stringTypeCheck(message).replace(String({}), '$receiver$')));
      match = message.match(/\\\$[a-zA-Z]+\\\$/g);
      if (match == null)
        match = H.setRuntimeTypeInfo([], [P.String]);
      return H.TypeErrorDecoder$(match.indexOf("\\$arguments\\$"), match.indexOf("\\$argumentsExpr\\$"), match.indexOf("\\$expr\\$"), match.indexOf("\\$method\\$"), match.indexOf("\\$receiver\\$"), message.replace(new RegExp('\\\\\\$arguments\\\\\\$', 'g'), '((?:x|[^x])*)').replace(new RegExp('\\\\\\$argumentsExpr\\\\\\$', 'g'), '((?:x|[^x])*)').replace(new RegExp('\\\\\\$expr\\\\\\$', 'g'), '((?:x|[^x])*)').replace(new RegExp('\\\\\\$method\\\\\\$', 'g'), '((?:x|[^x])*)').replace(new RegExp('\\\\\\$receiver\\\\\\$', 'g'), '((?:x|[^x])*)'));
    },
    TypeErrorDecoder_provokeCallErrorOn: function(expression) {
      return function($expr$) {
        var $argumentsExpr$ = '$arguments$';
        try {
          $expr$.$method$($argumentsExpr$);
        } catch (e) {
          return e.message;
        }
      }(expression);
    },
    TypeErrorDecoder_provokeCallErrorOnNull: function() {
      return function() {
        var $argumentsExpr$ = '$arguments$';
        try {
          null.$method$($argumentsExpr$);
        } catch (e) {
          return e.message;
        }
      }();
    },
    TypeErrorDecoder_provokeCallErrorOnUndefined: function() {
      return function() {
        var $argumentsExpr$ = '$arguments$';
        try {
          (void 0).$method$($argumentsExpr$);
        } catch (e) {
          return e.message;
        }
      }();
    },
    TypeErrorDecoder_provokePropertyErrorOn: function(expression) {
      return function($expr$) {
        try {
          $expr$.$method$;
        } catch (e) {
          return e.message;
        }
      }(expression);
    },
    TypeErrorDecoder_provokePropertyErrorOnNull: function() {
      return function() {
        try {
          null.$method$;
        } catch (e) {
          return e.message;
        }
      }();
    },
    TypeErrorDecoder_provokePropertyErrorOnUndefined: function() {
      return function() {
        try {
          (void 0).$method$;
        } catch (e) {
          return e.message;
        }
      }();
    },
    NullError$: function(_message, match) {
      var t1 = match == null ? null : match.method;
      return new H.NullError(_message, t1, []);
    },
    JsNoSuchMethodError$: function(_message, match) {
      var t1 = match == null,
        t2 = t1 ? null : match.method;
      t1 = t1 ? null : match.receiver;
      return new H.JsNoSuchMethodError(_message, t2, t1, []);
    },
    UnknownJsTypeError$: function(_message) {
      return new H.UnknownJsTypeError(_message, []);
    },
    unwrapException: function(ex) {
      var message, number, ieErrorCode, nsme, notClosure, nullCall, nullLiteralCall, undefCall, undefLiteralCall, nullProperty, undefProperty, undefLiteralProperty, match, t2,
        t1 = new H.unwrapException_saveStackTrace(ex);
      if (ex == null)
        return;
      if (typeof ex !== "object")
        return ex;
      if ("dartException" in ex)
        return t1.call$1(ex.dartException);
      else if (!("message" in ex))
        return ex;
      message = ex.message;
      if ("number" in ex && typeof ex.number == "number") {
        number = ex.number;
        ieErrorCode = number & 65535;
        if ((C.JSInt_methods._shrOtherPositive$1(number, 16) & 8191) === 10)
          switch (ieErrorCode) {
            case 438:
              return t1.call$1(H.JsNoSuchMethodError$(H.S(message) + " (Error " + ieErrorCode + ")", null));
            case 445:
            case 5007:
              return t1.call$1(H.NullError$(H.S(message) + " (Error " + ieErrorCode + ")", null));
          }
      }
      if (ex instanceof TypeError) {
        nsme = $.$get$TypeErrorDecoder_noSuchMethodPattern();
        notClosure = $.$get$TypeErrorDecoder_notClosurePattern();
        nullCall = $.$get$TypeErrorDecoder_nullCallPattern();
        nullLiteralCall = $.$get$TypeErrorDecoder_nullLiteralCallPattern();
        undefCall = $.$get$TypeErrorDecoder_undefinedCallPattern();
        undefLiteralCall = $.$get$TypeErrorDecoder_undefinedLiteralCallPattern();
        nullProperty = $.$get$TypeErrorDecoder_nullPropertyPattern();
        $.$get$TypeErrorDecoder_nullLiteralPropertyPattern();
        undefProperty = $.$get$TypeErrorDecoder_undefinedPropertyPattern();
        undefLiteralProperty = $.$get$TypeErrorDecoder_undefinedLiteralPropertyPattern();
        match = nsme.matchTypeError$1(message);
        if (match != null)
          return t1.call$1(H.JsNoSuchMethodError$(H.stringTypeCheck(message), match));
        else {
          match = notClosure.matchTypeError$1(message);
          if (match != null) {
            match.method = "call";
            return t1.call$1(H.JsNoSuchMethodError$(H.stringTypeCheck(message), match));
          } else {
            match = nullCall.matchTypeError$1(message);
            if (match == null) {
              match = nullLiteralCall.matchTypeError$1(message);
              if (match == null) {
                match = undefCall.matchTypeError$1(message);
                if (match == null) {
                  match = undefLiteralCall.matchTypeError$1(message);
                  if (match == null) {
                    match = nullProperty.matchTypeError$1(message);
                    if (match == null) {
                      match = nullLiteralCall.matchTypeError$1(message);
                      if (match == null) {
                        match = undefProperty.matchTypeError$1(message);
                        if (match == null) {
                          match = undefLiteralProperty.matchTypeError$1(message);
                          t2 = match != null;
                        } else
                          t2 = true;
                      } else
                        t2 = true;
                    } else
                      t2 = true;
                  } else
                    t2 = true;
                } else
                  t2 = true;
              } else
                t2 = true;
            } else
              t2 = true;
            if (t2)
              return t1.call$1(H.NullError$(H.stringTypeCheck(message), match));
          }
        }
        return t1.call$1(H.UnknownJsTypeError$(typeof message === "string" ? message : ""));
      }
      if (ex instanceof RangeError) {
        if (typeof message === "string" && H.contains(message, "call stack"))
          return P.StackOverflowError$();
        message = H.tryStringifyException(ex);
        return t1.call$1(P.ArgumentError$(typeof message === "string" ? message.replace(/^RangeError:\s*/, "") : message));
      }
      if (typeof InternalError == "function" && ex instanceof InternalError)
        if (typeof message === "string" && message === "too much recursion")
          return P.StackOverflowError$();
      return ex;
    },
    tryStringifyException: function(ex) {
      return function(ex) {
        try {
          return String(ex);
        } catch (e) {
        }
        return null;
      }(ex);
    },
    fillLiteralMap: function(keyValuePairs, result) {
      var $length, index, index0, index1;
      H.interceptedTypeCheck(result, "$isMap");
      $length = H.getLength(keyValuePairs);
      if (typeof $length !== "number")
        return H.iae($length);
      index = 0;
      for (; index < $length; index = index1) {
        index0 = index + 1;
        index1 = index0 + 1;
        result.$indexSet(0, H.getIndex(keyValuePairs, index), H.getIndex(keyValuePairs, index0));
      }
      return result;
    },
    Closure_fromTearOff: function(receiver, functions, applyTrampolineIndex, reflectionInfo, isStatic, isIntercepted, propertyName) {
      var $function, callName, $prototype, $constructor, t1, trampoline, signatureFunction, getReceiver, applyTrampoline, i, t2, stub, stubCallName, _null = null;
      H.listTypeCheck(functions);
      H.intTypeCheck(applyTrampolineIndex);
      H.boolTypeCheck(isStatic);
      H.boolTypeCheck(isIntercepted);
      H.stringTypeCheck(propertyName);
      $function = functions[0];
      callName = $function.$callName;
      $prototype = isStatic ? Object.create(H.StaticClosure$().constructor.prototype) : Object.create(H.BoundClosure$(_null, _null, _null, _null).constructor.prototype);
      $prototype.$initialize = $prototype.constructor;
      if (isStatic)
        $constructor = function static_tear_off() {
          this.$initialize();
        };
      else if (H.Closure_isCsp()) {
        t1 = function tear_off(a, b, c, d) {
          this.$initialize(a, b, c, d);
        };
        $constructor = t1;
      } else {
        t1 = $.Closure_functionCounter;
        $.Closure_functionCounter = J.$add$ansx(t1, 1);
        t1 = new Function("a,b,c,d" + t1, "this.$initialize(a,b,c,d" + t1 + ")");
        $constructor = t1;
      }
      $prototype.constructor = $constructor;
      $constructor.prototype = $prototype;
      if (!isStatic) {
        trampoline = H.Closure_forwardCallTo(receiver, $function, isIntercepted);
        trampoline.$reflectionInfo = reflectionInfo;
      } else {
        $prototype.$static_name = propertyName;
        trampoline = $function;
      }
      if (typeof reflectionInfo == "number")
        signatureFunction = function(getType, t) {
          return function() {
            return getType(t);
          };
        }(H.getType, reflectionInfo);
      else if (typeof reflectionInfo == "function")
        if (isStatic)
          signatureFunction = reflectionInfo;
        else {
          getReceiver = isIntercepted ? H.BoundClosure_receiverOf : H.BoundClosure_selfOf;
          signatureFunction = function(f, r) {
            return function() {
              return f.apply({$receiver: r(this)}, arguments);
            };
          }(reflectionInfo, getReceiver);
        }
      else
        throw H.wrapException("Error in reflectionInfo.");
      $prototype.$signature = signatureFunction;
      $prototype[callName] = trampoline;
      t1 = J.getInterceptor$asx(functions);
      applyTrampoline = trampoline;
      i = 1;
      while (true) {
        t2 = t1.get$length(functions);
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (!(i < t2))
          break;
        stub = t1.$index(functions, i);
        stubCallName = stub.$callName;
        if (stubCallName != null) {
          stub = isStatic ? stub : H.Closure_forwardCallTo(receiver, stub, isIntercepted);
          $prototype[stubCallName] = stub;
        }
        if (i === applyTrampolineIndex) {
          stub.$reflectionInfo = reflectionInfo;
          applyTrampoline = stub;
        }
        ++i;
      }
      $prototype["call*"] = applyTrampoline;
      $prototype.$requiredArgCount = $function.$requiredArgCount;
      $prototype.$defaultValues = $function.$defaultValues;
      return $constructor;
    },
    Closure_cspForwardCall: function(arity, isSuperCall, stubName, $function) {
      var getSelf;
      H.intTypeCheck(arity);
      H.boolTypeCheck(isSuperCall);
      H.stringTypeCheck(stubName);
      getSelf = H.BoundClosure_selfOf;
      switch (isSuperCall ? -1 : arity) {
        case 0:
          return function(n, S) {
            return function() {
              return S(this)[n]();
            };
          }(stubName, getSelf);
        case 1:
          return function(n, S) {
            return function(a) {
              return S(this)[n](a);
            };
          }(stubName, getSelf);
        case 2:
          return function(n, S) {
            return function(a, b) {
              return S(this)[n](a, b);
            };
          }(stubName, getSelf);
        case 3:
          return function(n, S) {
            return function(a, b, c) {
              return S(this)[n](a, b, c);
            };
          }(stubName, getSelf);
        case 4:
          return function(n, S) {
            return function(a, b, c, d) {
              return S(this)[n](a, b, c, d);
            };
          }(stubName, getSelf);
        case 5:
          return function(n, S) {
            return function(a, b, c, d, e) {
              return S(this)[n](a, b, c, d, e);
            };
          }(stubName, getSelf);
        default:
          return function(f, s) {
            return function() {
              return f.apply(s(this), arguments);
            };
          }($function, getSelf);
      }
    },
    Closure_isCsp: function() {
      return false;
    },
    Closure_forwardCallTo: function(receiver, $function, isIntercepted) {
      var stubName, arity, lookedUpFunction, t1, selfName, $arguments;
      if (H.boolTypeCheck(isIntercepted))
        return H.Closure_forwardInterceptedCallTo(receiver, $function);
      stubName = $function.$stubName;
      arity = $function.length;
      lookedUpFunction = receiver[stubName];
      t1 = $function == null ? lookedUpFunction == null : $function === lookedUpFunction;
      if (H.Closure_isCsp() || !t1 || arity >= 27)
        return H.Closure_cspForwardCall(arity, !t1, stubName, $function);
      if (arity === 0) {
        t1 = $.Closure_functionCounter;
        $.Closure_functionCounter = J.$add$ansx(t1, 1);
        selfName = "self" + H.S(t1);
        return new Function("return function(){var " + selfName + " = this." + H.S(H.BoundClosure_selfFieldName()) + ";return " + selfName + "." + H.S(stubName) + "();}")();
      }
      $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity).join(",");
      t1 = $.Closure_functionCounter;
      $.Closure_functionCounter = J.$add$ansx(t1, 1);
      $arguments += H.S(t1);
      return new Function("return function(" + H.S($arguments) + "){return this." + H.S(H.BoundClosure_selfFieldName()) + "." + H.S(stubName) + "(" + H.S($arguments) + ");}")();
    },
    Closure_cspForwardInterceptedCall: function(arity, isSuperCall, $name, $function) {
      var getSelf, getReceiver;
      H.intTypeCheck(arity);
      H.boolTypeCheck(isSuperCall);
      H.stringTypeCheck($name);
      getSelf = H.BoundClosure_selfOf;
      getReceiver = H.BoundClosure_receiverOf;
      switch (isSuperCall ? -1 : arity) {
        case 0:
          throw H.wrapException(H.RuntimeError$("Intercepted function with no arguments."));
        case 1:
          return function(n, s, r) {
            return function() {
              return s(this)[n](r(this));
            };
          }($name, getSelf, getReceiver);
        case 2:
          return function(n, s, r) {
            return function(a) {
              return s(this)[n](r(this), a);
            };
          }($name, getSelf, getReceiver);
        case 3:
          return function(n, s, r) {
            return function(a, b) {
              return s(this)[n](r(this), a, b);
            };
          }($name, getSelf, getReceiver);
        case 4:
          return function(n, s, r) {
            return function(a, b, c) {
              return s(this)[n](r(this), a, b, c);
            };
          }($name, getSelf, getReceiver);
        case 5:
          return function(n, s, r) {
            return function(a, b, c, d) {
              return s(this)[n](r(this), a, b, c, d);
            };
          }($name, getSelf, getReceiver);
        case 6:
          return function(n, s, r) {
            return function(a, b, c, d, e) {
              return s(this)[n](r(this), a, b, c, d, e);
            };
          }($name, getSelf, getReceiver);
        default:
          return function(f, s, r, a) {
            return function() {
              a = [r(this)];
              Array.prototype.push.apply(a, arguments);
              return f.apply(s(this), a);
            };
          }($function, getSelf, getReceiver);
      }
    },
    Closure_forwardInterceptedCallTo: function(receiver, $function) {
      var $arguments,
        selfField = H.BoundClosure_selfFieldName(),
        receiverField = H.BoundClosure_receiverFieldName(),
        stubName = $function.$stubName,
        arity = $function.length,
        lookedUpFunction = receiver[stubName],
        t1 = $function == null ? lookedUpFunction == null : $function === lookedUpFunction,
        t2 = !t1 || arity >= 28;
      if (t2)
        return H.Closure_cspForwardInterceptedCall(arity, !t1, stubName, $function);
      if (arity === 1) {
        t1 = "return function(){return this." + H.S(selfField) + "." + H.S(stubName) + "(this." + H.S(receiverField) + ");";
        t2 = $.Closure_functionCounter;
        $.Closure_functionCounter = J.$add$ansx(t2, 1);
        return new Function(t1 + H.S(t2) + "}")();
      }
      $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity - 1).join(",");
      t1 = "return function(" + $arguments + "){return this." + H.S(selfField) + "." + H.S(stubName) + "(this." + H.S(receiverField) + ", " + $arguments + ");";
      t2 = $.Closure_functionCounter;
      $.Closure_functionCounter = J.$add$ansx(t2, 1);
      return new Function(t1 + H.S(t2) + "}")();
    },
    closureFromTearOff: function(receiver, functions, applyTrampolineIndex, reflectionInfo, isStatic, isIntercepted, $name) {
      return H.Closure_fromTearOff(receiver, functions, H.intTypeCheck(applyTrampolineIndex), reflectionInfo, !!isStatic, !!isIntercepted, $name);
    },
    StaticClosure$: function() {
      return new H.StaticClosure([]);
    },
    BoundClosure$: function(_self, _target, _receiver, _name) {
      return new H.BoundClosure(_self, _target, _receiver, _name, []);
    },
    BoundClosure_selfOf: function(closure) {
      return H.interceptedTypeCheck(closure, "$isBoundClosure")._self;
    },
    BoundClosure_receiverOf: function(closure) {
      return H.interceptedTypeCheck(closure, "$isBoundClosure").__js_helper$_receiver;
    },
    BoundClosure_selfFieldName: function() {
      var t1 = $.BoundClosure_selfFieldNameCache;
      return t1 == null ? $.BoundClosure_selfFieldNameCache = H.BoundClosure_computeFieldNamed("self") : t1;
    },
    BoundClosure_receiverFieldName: function() {
      var t1 = $.BoundClosure_receiverFieldNameCache;
      return t1 == null ? $.BoundClosure_receiverFieldNameCache = H.BoundClosure_computeFieldNamed("receiver") : t1;
    },
    BoundClosure_computeFieldNamed: function(fieldName) {
      var template, names, t1, i, t2, $name;
      H.stringTypeCheck(fieldName);
      template = H.BoundClosure$("self", "target", "receiver", "name");
      names = J.JSArray_markFixedList(Object.getOwnPropertyNames(template));
      t1 = J.getInterceptor$asx(names);
      i = 0;
      while (true) {
        t2 = t1.get$length(names);
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (!(i < t2))
          break;
        $name = t1.$index(names, i);
        if (template[$name] === fieldName)
          return $name;
        ++i;
      }
    },
    jsHasOwnProperty: function(jsObject, property) {
      return jsObject.hasOwnProperty(H.stringTypeCheck(property));
    },
    jsPropertyAccess: function(jsObject, property) {
      return jsObject[H.stringTypeCheck(property)];
    },
    stringTypeCheck: function(value) {
      if (value == null)
        return value;
      if (typeof value === "string")
        return value;
      throw H.wrapException(H.TypeErrorImplementation$(value, "String"));
    },
    numTypeCheck: function(value) {
      if (value == null)
        return value;
      if (typeof value === "number")
        return value;
      throw H.wrapException(H.TypeErrorImplementation$(value, "num"));
    },
    boolTypeCheck: function(value) {
      if (value == null)
        return value;
      if (typeof value === "boolean")
        return value;
      throw H.wrapException(H.TypeErrorImplementation$(value, "bool"));
    },
    intTypeCheck: function(value) {
      if (value == null)
        return value;
      if (typeof value === "number" && Math.floor(value) === value)
        return value;
      throw H.wrapException(H.TypeErrorImplementation$(value, "int"));
    },
    propertyTypeError: function(value, property) {
      throw H.wrapException(H.TypeErrorImplementation$(value, H.unminifyOrTag(H.isCheckPropertyToJsConstructorName(H.stringTypeCheck(property)))));
    },
    propertyTypeCastError: function(value, property) {
      throw H.wrapException(H.CastErrorImplementation$(value, H.unminifyOrTag(H.isCheckPropertyToJsConstructorName(H.stringTypeCheck(property)))));
    },
    interceptedTypeCheck: function(value, property) {
      if (value == null)
        return value;
      if ((typeof value === "object" || typeof value === "function") && J.getInterceptor$(value)[property])
        return value;
      H.propertyTypeError(value, property);
    },
    interceptedTypeCast: function(value, property) {
      var t1;
      if (value != null)
        t1 = (typeof value === "object" || typeof value === "function") && J.getInterceptor$(value)[property];
      else
        t1 = true;
      if (t1)
        return value;
      H.propertyTypeCastError(value, property);
    },
    stringSuperNativeTypeCheck: function(value, property) {
      if (value == null)
        return value;
      if (typeof value === "string")
        return value;
      if (J.getInterceptor$(value)[property])
        return value;
      H.propertyTypeError(value, property);
    },
    listTypeCheck: function(value) {
      if (value == null)
        return value;
      if (!!J.getInterceptor$(value).$isList)
        return value;
      throw H.wrapException(H.TypeErrorImplementation$(value, "List<dynamic>"));
    },
    listTypeCast: function(value) {
      if (!!J.getInterceptor$(value).$isList || value == null)
        return value;
      throw H.wrapException(H.CastErrorImplementation$(value, "List<dynamic>"));
    },
    listSuperNativeTypeCheck: function(value, property) {
      var t1;
      if (value == null)
        return value;
      t1 = J.getInterceptor$(value);
      if (!!t1.$isList)
        return value;
      if (t1[property])
        return value;
      H.propertyTypeError(value, property);
    },
    extractFunctionTypeObjectFrom: function(o) {
      return H.extractFunctionTypeObjectFromInternal(J.getInterceptor$(o));
    },
    extractFunctionTypeObjectFromInternal: function(o) {
      var signature;
      if ("$signature" in o) {
        signature = o.$signature;
        if (typeof signature == "number")
          return H.getType(H.intTypeCheck(signature));
        else
          return o.$signature();
      }
      return;
    },
    functionTypeTest: function(value, functionTypeRti) {
      var functionTypeObject;
      if (value == null)
        return false;
      if (typeof value == "function")
        return true;
      functionTypeObject = H.extractFunctionTypeObjectFrom(value);
      if (functionTypeObject == null)
        return false;
      return H.isFunctionSubtype(functionTypeObject, functionTypeRti);
    },
    functionTypeCheck: function(value, functionTypeRti) {
      var $self, t1;
      if (value == null)
        return value;
      if (true === $._inTypeAssertion)
        return value;
      $._inTypeAssertion = true;
      try {
        if (H.boolTypeCheck(H.functionTypeTest(value, functionTypeRti)))
          return value;
        $self = H.runtimeTypeToString(functionTypeRti);
        t1 = H.TypeErrorImplementation$(value, $self);
        throw H.wrapException(t1);
      } finally {
        $._inTypeAssertion = false;
      }
    },
    TypeErrorImplementation$: function(value, type) {
      return new H.TypeErrorImplementation("TypeError: " + H.S(P.Error_safeToString(value)) + ": type '" + H.S(H._typeDescription(value)) + "' is not a subtype of type '" + H.S(type) + "'", []);
    },
    TypeErrorImplementation$fromMessage: function(message) {
      return new H.TypeErrorImplementation(message, []);
    },
    CastErrorImplementation$: function(value, type) {
      return new H.CastErrorImplementation("CastError: " + H.S(P.Error_safeToString(value)) + ": type '" + H.S(H._typeDescription(value)) + "' is not a subtype of type '" + H.S(type) + "'", []);
    },
    _typeDescription: function(value) {
      var functionTypeObject;
      if (value instanceof H.Closure) {
        functionTypeObject = H.extractFunctionTypeObjectFrom(value);
        if (functionTypeObject != null)
          return H.runtimeTypeToString(functionTypeObject);
        return "Closure";
      }
      return H.Primitives_objectTypeName(value);
    },
    throwCyclicInit: function(staticName) {
      throw H.wrapException(P.CyclicInitializationError$(H.stringTypeCheck(staticName)));
    },
    RuntimeError$: function(message) {
      return new H.RuntimeError(message, []);
    },
    jsonEncodeNative: function(string) {
      return JSON.stringify(H.stringTypeCheck(string));
    },
    getIsolateAffinityTag: function($name) {
      return init.getIsolateTag(H.stringTypeCheck($name));
    },
    createRuntimeType: function(rti) {
      return H.TypeImpl$(rti);
    },
    TypeImpl$: function(_rti) {
      return new H.TypeImpl(_rti, []);
    },
    setRuntimeTypeInfo: function(target, rti) {
      target.$ti = rti;
      return target;
    },
    getRuntimeTypeInfo: function(target) {
      if (target == null)
        return;
      return target.$ti;
    },
    getRuntimeTypeArguments: function(interceptor, object, substitutionName) {
      return H.substitute(H.getField(interceptor, "$as" + H.S(substitutionName)), H.getRuntimeTypeInfo(object));
    },
    getRuntimeTypeArgumentIntercepted: function(interceptor, target, substitutionName, index) {
      var $arguments;
      H.stringTypeCheck(substitutionName);
      H.intTypeCheck(index);
      $arguments = H.getRuntimeTypeArguments(interceptor, target, substitutionName);
      return $arguments == null ? null : H.getIndex($arguments, index);
    },
    getRuntimeTypeArgument: function(target, substitutionName, index) {
      var $arguments;
      H.stringTypeCheck(substitutionName);
      H.intTypeCheck(index);
      $arguments = H.getRuntimeTypeArguments(target, target, substitutionName);
      return $arguments == null ? null : H.getIndex($arguments, index);
    },
    getTypeArgumentByIndex: function(target, index) {
      var rti;
      H.intTypeCheck(index);
      rti = H.getRuntimeTypeInfo(target);
      return rti == null ? null : H.getIndex(rti, index);
    },
    _getRuntimeTypeAsString: function(rti, genericContext) {
      H.assertSubtype(genericContext, "$isList", [P.String], "$asList");
      return H.S(H.unminifyOrTag(H.rawRtiToJsConstructorName(H.getIndex(rti, 0)))) + H.S(H._joinArguments(rti, 1, genericContext));
    },
    runtimeTypeToString: function(rti) {
      return H._runtimeTypeToString(rti, null);
    },
    _runtimeTypeToString: function(rti, genericContext) {
      var t1;
      H.assertSubtype(genericContext, "$isList", [P.String], "$asList");
      if (H.isDartDynamicTypeRti(rti))
        return "dynamic";
      if (H.isDartVoidTypeRti(rti))
        return "void";
      if (H.isJsArray(rti))
        return H._getRuntimeTypeAsString(rti, genericContext);
      if (H.isJsFunction(rti))
        return H.unminifyOrTag(H.rawRtiToJsConstructorName(rti));
      if (H.isDartJsInteropTypeArgumentRti(rti))
        return "dynamic";
      if (H.isGenericFunctionTypeParameter(rti)) {
        H.intTypeCheck(rti);
        if (genericContext != null) {
          if (typeof rti !== "number")
            return rti.$lt();
          if (rti >= 0) {
            t1 = J.get$length$asx(genericContext);
            if (typeof t1 !== "number")
              return H.iae(t1);
            t1 = rti >= t1;
          } else
            t1 = true;
        } else
          t1 = true;
        if (t1)
          return "unexpected-generic-index:" + H.S(rti);
        t1 = J.getInterceptor$asx(genericContext);
        return H.S(t1.$index(genericContext, J.$sub$n(J.$sub$n(t1.get$length(genericContext), rti), 1)));
      }
      if (H.isDartFunctionType(rti))
        return H._functionRtiToString(rti, genericContext);
      if (H.isDartFutureOrType(rti))
        return "FutureOr<" + H.S(H._runtimeTypeToString(H.getFutureOrArgument(rti), genericContext)) + ">";
      return "unknown-reified-type";
    },
    _functionRtiToString: function(rti, genericContext) {
      var boundsRti, outerContextLength, offset, i, i0, typeParameters, typeSep, boundRti, returnTypeText, argumentsText, sep, argument, optionalArguments, namedArguments, t2, _s2_ = ", ",
        t1 = [P.String];
      H.assertSubtype(genericContext, "$isList", t1, "$asList");
      if (H.boolTypeCheck(H.hasField(rti, "bounds"))) {
        boundsRti = rti.bounds;
        if (genericContext == null) {
          genericContext = H.setRuntimeTypeInfo([], t1);
          outerContextLength = null;
        } else
          outerContextLength = J.get$length$asx(genericContext);
        t1 = J.getInterceptor$asx(genericContext);
        offset = t1.get$length(genericContext);
        for (i = boundsRti.length, i0 = i; i0 > 0; --i0) {
          if (typeof offset !== "number")
            return offset.$add();
          t1.add$1(genericContext, "T" + (offset + i0));
        }
        for (typeParameters = "<", typeSep = "", i0 = 0; i0 < i; ++i0, typeSep = _s2_) {
          typeParameters = J.$add$ansx(J.$add$ansx(typeParameters, typeSep), t1.$index(genericContext, J.$sub$n(J.$sub$n(t1.get$length(genericContext), i0), 1)));
          boundRti = boundsRti[i0];
          if (H.isInterestingBound(boundRti))
            typeParameters = J.$add$ansx(typeParameters, C.JSString_methods.$add(" extends ", H._runtimeTypeToString(boundRti, genericContext)));
        }
        typeParameters = J.$add$ansx(typeParameters, ">");
      } else {
        typeParameters = "";
        outerContextLength = null;
      }
      returnTypeText = !!rti.v ? "void" : H._runtimeTypeToString(rti.ret, genericContext);
      if (H.boolTypeCheck(H.hasField(rti, "args")))
        for (t1 = C.JSArray_methods.get$iterator(rti.args), argumentsText = "", sep = ""; t1.moveNext$0(); sep = _s2_) {
          argument = t1.get$current();
          argumentsText = J.$add$ansx(J.$add$ansx(argumentsText, sep), H._runtimeTypeToString(argument, genericContext));
        }
      else {
        argumentsText = "";
        sep = "";
      }
      if ("opt" in rti) {
        optionalArguments = rti.opt;
        argumentsText = J.$add$ansx(argumentsText, sep + "[");
        for (t1 = C.JSArray_methods.get$iterator(optionalArguments), sep = ""; t1.moveNext$0(); sep = _s2_) {
          argument = t1.get$current();
          argumentsText = J.$add$ansx(J.$add$ansx(argumentsText, sep), H._runtimeTypeToString(argument, genericContext));
        }
        argumentsText = J.$add$ansx(argumentsText, "]");
      }
      if ("named" in rti) {
        namedArguments = rti.named;
        argumentsText = J.$add$ansx(argumentsText, sep + "{");
        for (t1 = J.get$iterator$ax(H.extractKeys(namedArguments)), sep = ""; t1.moveNext$0(); sep = _s2_) {
          t2 = H.stringTypeCheck(t1.get$current());
          argumentsText = J.$add$ansx(J.$add$ansx(J.$add$ansx(argumentsText, sep), H._runtimeTypeToString(namedArguments[t2], genericContext)), " " + H.S(t2));
        }
        argumentsText = J.$add$ansx(argumentsText, "}");
      }
      if (outerContextLength != null)
        genericContext.length = outerContextLength;
      return H.S(typeParameters) + "(" + H.S(argumentsText) + ") => " + H.S(returnTypeText);
    },
    joinArguments: function(types, startIndex) {
      return H._joinArguments(types, H.intTypeCheck(startIndex), null);
    },
    _joinArguments: function(types, startIndex, genericContext) {
      var buffer, index, separator, allDynamic, t1, argument;
      H.intTypeCheck(startIndex);
      H.assertSubtype(genericContext, "$isList", [P.String], "$asList");
      if (types == null)
        return "";
      buffer = P.StringBuffer$("");
      index = startIndex;
      separator = "";
      allDynamic = true;
      while (true) {
        t1 = H.getLength(types);
        if (typeof index !== "number")
          return index.$lt();
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (!(index < t1))
          break;
        buffer.write$1(separator);
        argument = H.getIndex(types, index);
        if (argument != null)
          allDynamic = false;
        buffer.write$1(H._runtimeTypeToString(argument, genericContext));
        ++index;
        separator = ", ";
      }
      return "<" + H.S(buffer) + ">";
    },
    getRti: function(o) {
      var functionRti, type, rti,
        t1 = J.getInterceptor$(o);
      if (!!t1.$isClosure) {
        functionRti = H.extractFunctionTypeObjectFrom(o);
        if (functionRti != null)
          return functionRti;
      }
      type = H.getRawRuntimeType(t1);
      if (o == null)
        return type;
      if (typeof o != "object")
        return type;
      rti = H.getRuntimeTypeInfo(o);
      if (rti != null) {
        rti = rti.slice();
        rti.splice(0, 0, type);
        type = rti;
      }
      return type;
    },
    getRuntimeType: function(object) {
      return H.TypeImpl$(H.getRti(object));
    },
    substitute: function(substitution, $arguments) {
      if (substitution == null)
        return $arguments;
      substitution = H.invoke(substitution, $arguments);
      if (substitution == null)
        return;
      if (H.isJsArray(substitution))
        return substitution;
      if (H.isJsFunction(substitution))
        return H.invoke(substitution, $arguments);
      return $arguments;
    },
    checkSubtype: function(object, isField, checks, asField) {
      var $arguments, interceptor;
      H.stringTypeCheck(isField);
      H.listTypeCheck(checks);
      H.stringTypeCheck(asField);
      if (object == null)
        return false;
      $arguments = H.getRuntimeTypeInfo(object);
      interceptor = J.getInterceptor$(object);
      if (H.getField(interceptor, isField) == null)
        return false;
      return H.checkArguments(H.getField(interceptor, asField), $arguments, null, checks, null);
    },
    computeTypeName: function(isField, $arguments) {
      H.stringTypeCheck(isField);
      H.listTypeCheck($arguments);
      return H.Primitives_formatType(H.unminifyOrTag(H.isCheckPropertyToJsConstructorName(isField)), $arguments);
    },
    assertSubtype: function(object, isField, checks, asField) {
      H.stringTypeCheck(isField);
      H.listTypeCheck(checks);
      H.stringTypeCheck(asField);
      if (object == null)
        return object;
      if (H.checkSubtype(object, isField, checks, asField))
        return object;
      throw H.wrapException(H.TypeErrorImplementation$(object, H.computeTypeName(isField, checks)));
    },
    assertIsSubtype: function(subtype, supertype, prefix, infix, suffix) {
      H.stringTypeCheck(prefix);
      H.stringTypeCheck(infix);
      H.stringTypeCheck(suffix);
      if (!H.isSubtype(subtype, supertype))
        H.throwTypeError("TypeError: " + H.S(prefix) + H.S(H.runtimeTypeToString(subtype)) + H.S(infix) + H.S(H.runtimeTypeToString(supertype)) + H.S(suffix));
    },
    throwTypeError: function(message) {
      throw H.wrapException(H.TypeErrorImplementation$fromMessage(H.stringTypeCheck(message)));
    },
    checkArguments: function(substitution, $arguments, sEnv, checks, tEnv) {
      return H.areSubtypes(H.substitute(substitution, $arguments), sEnv, checks, tEnv);
    },
    areSubtypes: function(s, sEnv, t, tEnv) {
      var len, i;
      if (t == null)
        return true;
      if (s == null) {
        len = H.getLength(t);
        if (typeof len !== "number")
          return H.iae(len);
        i = 0;
        for (; i < len; ++i)
          if (!H._isSubtype(null, null, H.getIndex(t, i), tEnv))
            return false;
        return true;
      }
      len = H.getLength(s);
      if (typeof len !== "number")
        return H.iae(len);
      i = 0;
      for (; i < len; ++i)
        if (!H._isSubtype(H.getIndex(s, i), sEnv, H.getIndex(t, i), tEnv))
          return false;
      return true;
    },
    computeSignature: function(signature, context, contextName) {
      return H.invokeOn(signature, context, H.getRuntimeTypeArguments(J.getInterceptor$(context), context, contextName));
    },
    isTopType: function(type) {
      return H.isDartDynamicTypeRti(type) || H.isDartVoidTypeRti(type) || H.isDartObjectTypeRti(type) || H.isDartJsInteropTypeArgumentRti(type);
    },
    isSupertypeOfNull: function(type) {
      return H.isSupertypeOfNullBase(type) || H.isSupertypeOfNullRecursive(type);
    },
    isSupertypeOfNullBase: function(type) {
      return H.isDartDynamicTypeRti(type) || H.isDartObjectTypeRti(type) || H.isNullTypeRti(type) || H.isDartVoidTypeRti(type) || H.isDartJsInteropTypeArgumentRti(type);
    },
    isSupertypeOfNullRecursive: function(type) {
      var typeArgument;
      if (H.isGenericFunctionTypeParameter(type))
        return false;
      if (H.isDartFutureOrType(type)) {
        typeArgument = H.getFutureOrArgument(type);
        return H.isSupertypeOfNullBase(type) || H.isSupertypeOfNullRecursive(typeArgument);
      }
      return false;
    },
    getFutureOrArgument: function(type) {
      return H.boolTypeCheck(H.hasField(type, "type")) ? H.getField(type, "type") : null;
    },
    checkSubtypeOfRuntimeType: function(o, t) {
      var type, rti;
      if (o == null)
        return H.isSupertypeOfNull(t);
      if (H.isTopType(t))
        return true;
      if (typeof t == "object") {
        if (H.isDartFutureOrType(t))
          if (H.checkSubtypeOfRuntimeType(o, H.getFutureOrArgument(t)))
            return true;
        if (H.isDartFunctionType(t))
          return H.boolTypeCheck(H.functionTypeTest(o, t));
      }
      type = H.getRawRuntimeType(J.getInterceptor$(o));
      rti = H.getRuntimeTypeInfo(o);
      if (rti != null) {
        rti = rti.slice();
        rti.splice(0, 0, type);
        type = rti;
      }
      return H.isSubtype(type, t);
    },
    subtypeOfRuntimeTypeCast: function(object, type) {
      if (object != null && !H.checkSubtypeOfRuntimeType(object, type))
        throw H.wrapException(H.CastErrorImplementation$(object, H.runtimeTypeToString(type)));
      return object;
    },
    assertSubtypeOfRuntimeType: function(object, type) {
      if (object != null && !H.checkSubtypeOfRuntimeType(object, type))
        throw H.wrapException(H.TypeErrorImplementation$(object, H.runtimeTypeToString(type)));
      return object;
    },
    getArguments: function(type) {
      return H.isJsArray(type) ? type.slice(1) : null;
    },
    isSubtype: function(s, t) {
      return H._isSubtype(s, null, t, null);
    },
    _isSubtype: function(s, sEnv, t, tEnv) {
      var typeOfS, tTypeArgument, futureArguments, typeOfT, typeOfTString, substitution;
      if (H.isIdentical(s, t))
        return true;
      if (H.isTopType(t))
        return true;
      if (H.isDartJsInteropTypeArgumentRti(s))
        return true;
      if (H.isTopType(s)) {
        if (H.isGenericFunctionTypeParameter(t))
          return false;
        if (H.isDartFutureOrType(t))
          return H._isSubtype(s, sEnv, H.getFutureOrArgument(t), tEnv);
        return false;
      }
      if (H.isGenericFunctionTypeParameter(s))
        return false;
      if (H.isGenericFunctionTypeParameter(t))
        return false;
      if (H.isNullType(s))
        return true;
      if (H.isDartFunctionType(t))
        return H._isFunctionSubtype(s, sEnv, t, tEnv);
      if (H.isDartFunctionType(s))
        return H.isDartFunctionTypeRti(t);
      typeOfS = H.isJsArray(s) ? H.getIndex(s, 0) : s;
      if (H.isDartFutureOrType(t)) {
        tTypeArgument = H.getFutureOrArgument(t);
        if (H.isDartFutureOrType(s))
          return H._isSubtype(H.getFutureOrArgument(s), sEnv, tTypeArgument, tEnv);
        else if (H._isSubtype(s, sEnv, tTypeArgument, tEnv))
          return true;
        else {
          if (!H.builtinIsSubtype(typeOfS, "Future"))
            return false;
          futureArguments = H.substitute(H.getField(typeOfS.prototype, "$as" + "Future"), H.getArguments(s));
          return H._isSubtype(H.isJsArray(futureArguments) ? H.getIndex(futureArguments, 0) : null, sEnv, tTypeArgument, tEnv);
        }
      }
      typeOfT = H.isJsArray(t) ? H.getIndex(t, 0) : t;
      if (H.isNotIdentical(typeOfT, typeOfS)) {
        typeOfTString = H.rawRtiToJsConstructorName(typeOfT);
        if (!H.builtinIsSubtype(typeOfS, typeOfTString))
          return false;
        substitution = H.getField(typeOfS.prototype, "$as" + H.S(typeOfTString));
      } else
        substitution = null;
      if (!H.isJsArray(t))
        return true;
      return H.checkArguments(substitution, H.getArguments(s), sEnv, H.getArguments(t), tEnv);
    },
    isFunctionSubtype: function(s, t) {
      return H._isFunctionSubtype(s, null, t, null);
    },
    _isFunctionSubtype: function(s, sEnv, t, tEnv) {
      var sBounds, tBounds, sParameterTypes, tParameterTypes, sOptionalParameterTypes, tOptionalParameterTypes, sParametersLen, tParametersLen, sOptionalParametersLen, tOptionalParametersLen, pos, tPos, sPos, sNamedParameters, tNamedParameters;
      if (!H.isDartFunctionType(s))
        return false;
      if (H.boolTypeCheck(H.hasField(s, "bounds"))) {
        if (H.boolTypeCheck(H.hasNoField(t, "bounds")))
          return false;
        sBounds = H.getField(s, "bounds");
        tBounds = H.getField(t, "bounds");
        if (H.getLength(sBounds) != H.getLength(tBounds))
          return false;
      } else if (H.boolTypeCheck(H.hasField(t, "bounds")))
        return false;
      if (!H._isSubtype(H.getField(s, "ret"), sEnv, H.getField(t, "ret"), tEnv))
        return false;
      sParameterTypes = H.getField(s, "args");
      tParameterTypes = H.getField(t, "args");
      sOptionalParameterTypes = H.getField(s, "opt");
      tOptionalParameterTypes = H.getField(t, "opt");
      sParametersLen = sParameterTypes != null ? H.getLength(sParameterTypes) : 0;
      tParametersLen = tParameterTypes != null ? H.getLength(tParameterTypes) : 0;
      sOptionalParametersLen = sOptionalParameterTypes != null ? H.getLength(sOptionalParameterTypes) : 0;
      tOptionalParametersLen = tOptionalParameterTypes != null ? H.getLength(tOptionalParameterTypes) : 0;
      if (typeof sParametersLen !== "number")
        return sParametersLen.$gt();
      if (typeof tParametersLen !== "number")
        return H.iae(tParametersLen);
      if (sParametersLen > tParametersLen)
        return false;
      if (typeof sOptionalParametersLen !== "number")
        return H.iae(sOptionalParametersLen);
      if (typeof tOptionalParametersLen !== "number")
        return H.iae(tOptionalParametersLen);
      if (sParametersLen + sOptionalParametersLen < tParametersLen + tOptionalParametersLen)
        return false;
      for (pos = 0; pos < sParametersLen; ++pos)
        if (!H._isSubtype(H.getIndex(tParameterTypes, pos), tEnv, H.getIndex(sParameterTypes, pos), sEnv))
          return false;
      for (tPos = pos, sPos = 0; tPos < tParametersLen; ++sPos, ++tPos)
        if (!H._isSubtype(H.getIndex(tParameterTypes, tPos), tEnv, H.getIndex(sOptionalParameterTypes, sPos), sEnv))
          return false;
      for (tPos = 0; tPos < tOptionalParametersLen; ++sPos, ++tPos)
        if (!H._isSubtype(H.getIndex(tOptionalParameterTypes, tPos), tEnv, H.getIndex(sOptionalParameterTypes, sPos), sEnv))
          return false;
      sNamedParameters = H.getField(s, "named");
      tNamedParameters = H.getField(t, "named");
      if (tNamedParameters == null)
        return true;
      if (sNamedParameters == null)
        return false;
      return H.namedParametersSubtypeCheck(sNamedParameters, sEnv, tNamedParameters, tEnv);
    },
    namedParametersSubtypeCheck: function(s, sEnv, t, tEnv) {
      var t1, i, $name,
        names = Object.getOwnPropertyNames(t);
      for (t1 = names.length, i = 0; i < t1; ++i) {
        $name = names[i];
        if (!Object.hasOwnProperty.call(s, $name))
          return false;
        if (!H._isSubtype(t[$name], tEnv, s[$name], sEnv))
          return false;
      }
      return true;
    },
    isGenericFunctionTypeParameter: function(type) {
      return typeof type === "number";
    },
    instantiatedGenericFunctionType: function(genericFunctionRti, parameters) {
      if (genericFunctionRti == null)
        return;
      H.getLength(H.getField(genericFunctionRti, "bounds"));
      H.getLength(parameters);
      return H.finishBindInstantiatedFunctionType(genericFunctionRti, {func: 1}, parameters, 0);
    },
    bindInstantiatedFunctionType: function(rti, parameters, depth) {
      var result, bounds, t1;
      H.intTypeCheck(depth);
      result = {func: 1};
      if (H.boolTypeCheck(H.hasField(rti, "bounds"))) {
        bounds = H.getField(rti, "bounds");
        t1 = H.getLength(bounds);
        if (typeof depth !== "number")
          return depth.$add();
        if (typeof t1 !== "number")
          return H.iae(t1);
        depth += t1;
        H.setField(result, "bounds", H.bindInstantiatedTypes(bounds, parameters, depth));
      }
      return H.finishBindInstantiatedFunctionType(rti, result, parameters, depth);
    },
    finishBindInstantiatedFunctionType: function(rti, result, parameters, depth) {
      var namedParameters, boundNamed, t1, $name;
      H.intTypeCheck(depth);
      if (H.boolTypeCheck(H.hasField(rti, "v")))
        H.setField(result, "v", H.getField(rti, "v"));
      else if (H.boolTypeCheck(H.hasField(rti, "ret")))
        H.setField(result, "ret", H.bindInstantiatedType(H.getField(rti, "ret"), parameters, depth));
      if (H.boolTypeCheck(H.hasField(rti, "args")))
        H.setField(result, "args", H.bindInstantiatedTypes(H.getField(rti, "args"), parameters, depth));
      if (H.boolTypeCheck(H.hasField(rti, "opt")))
        H.setField(result, "opt", H.bindInstantiatedTypes(H.getField(rti, "opt"), parameters, depth));
      if (H.boolTypeCheck(H.hasField(rti, "named"))) {
        namedParameters = H.getField(rti, "named");
        boundNamed = {};
        for (t1 = C.JSArray_methods.get$iterator(Object.keys(namedParameters)); t1.moveNext$0();) {
          $name = H.stringTypeCheck(t1.get$current());
          H.setField(boundNamed, $name, H.bindInstantiatedType(H.getField(namedParameters, $name), parameters, depth));
        }
        H.setField(result, "named", boundNamed);
      }
      return result;
    },
    bindInstantiatedType: function(rti, parameters, depth) {
      var t1;
      H.intTypeCheck(depth);
      if (H.isDartDynamicTypeRti(rti))
        return rti;
      if (H.isDartVoidTypeRti(rti))
        return rti;
      if (H.isJsFunction(rti))
        return rti;
      if (H.isGenericFunctionTypeParameter(rti)) {
        t1 = J.getInterceptor$n(rti);
        if (H.boolTypeCheck(t1.$lt(rti, depth)))
          return rti;
        return parameters[t1.$sub(rti, depth)];
      }
      if (typeof rti === "number")
        return rti;
      if (H.isJsArray(rti))
        return H.bindInstantiatedTypes(rti, parameters, depth);
      if (H.isDartFunctionType(rti))
        return H.bindInstantiatedFunctionType(rti, parameters, depth);
      throw H.wrapException(P.ArgumentError$("Unknown RTI format in bindInstantiatedType."));
    },
    bindInstantiatedTypes: function(rti, parameters, depth) {
      var array, t1, i;
      H.intTypeCheck(depth);
      array = rti.slice();
      for (t1 = array.length, i = 0; i < t1; ++i)
        C.JSArray_methods.$indexSet(array, i, H.bindInstantiatedType(array[i], parameters, depth));
      return array;
    },
    invoke: function($function, $arguments) {
      return H.invokeOn($function, null, $arguments);
    },
    invokeOn: function($function, receiver, $arguments) {
      return $function.apply(receiver, $arguments);
    },
    getField: function(object, $name) {
      return object[H.stringTypeCheck($name)];
    },
    getIndex: function(array, index) {
      return array[H.intTypeCheck(index)];
    },
    setField: function(object, $name, value) {
      object[H.stringTypeCheck($name)] = value;
    },
    getLength: function(array) {
      return array.length;
    },
    isJsArray: function(value) {
      return typeof value === "object" && value !== null && value.constructor === Array;
    },
    hasField: function(object, $name) {
      return $name in object;
    },
    hasNoField: function(object, $name) {
      return !H.boolTypeCheck(H.hasField(object, $name));
    },
    isJsFunction: function(o) {
      return typeof o == "function";
    },
    isIdentical: function(s, t) {
      return s === t;
    },
    isNotIdentical: function(s, t) {
      return s !== t;
    },
    isInterestingBound: function(rti) {
      return rti != null && H.isNotIdentical(rti, P.Object);
    },
    JsLinkedHashMap$: function($K, $V) {
      return new H.JsLinkedHashMap([$K, $V]);
    },
    JsLinkedHashMap_JsLinkedHashMap$es6: function($K, $V) {
      var t1 = H.JsLinkedHashMap$($K, $V);
      return t1;
    },
    JsLinkedHashMap__isStringKey: function(key) {
      return typeof key === "string";
    },
    JsLinkedHashMap__isNumericKey: function(key) {
      return typeof key === "number" && (key & 0x3ffffff) === key;
    },
    LinkedHashMapCell$: function(hashMapCellKey, hashMapCellValue) {
      return new H.LinkedHashMapCell(hashMapCellKey, hashMapCellValue, []);
    },
    LinkedHashMapKeyIterable$: function(_map, $E) {
      return new H.LinkedHashMapKeyIterable(_map, [$E]);
    },
    LinkedHashMapKeyIterator$: function(_map, _modifications, $E) {
      var t1 = new H.LinkedHashMapKeyIterator(_map, _modifications, [$E]);
      t1.LinkedHashMapKeyIterator$2(_map, _modifications, $E);
      return t1;
    },
    contains: function(userAgent, $name) {
      return H.stringTypeCheck(userAgent).indexOf(H.stringTypeCheck($name)) !== -1;
    },
    propertyGet: function(object, property) {
      return object[H.stringTypeCheck(property)];
    },
    propertySet: function(object, property, value) {
      object[H.stringTypeCheck(property)] = value;
    },
    defineProperty: function(obj, property, value) {
      Object.defineProperty(obj, H.stringTypeCheck(property), {value: value, enumerable: false, writable: true, configurable: true});
    },
    interceptorsByTag: function() {
      return init.interceptorsByTag;
    },
    leafTags: function() {
      return init.leafTags;
    },
    lookupInterceptor: function(tag) {
      H.stringTypeCheck(tag);
      return H.propertyGet(H.interceptorsByTag(), tag);
    },
    lookupAndCacheInterceptor: function(obj) {
      var interceptor, interceptorClass, mark,
        tag = H.stringTypeCheck($.getTagFunction.call$1(obj)),
        record = H.propertyGet($.dispatchRecordsForInstanceTags, tag);
      if (record != null)
        return H.patchInstance(obj, record);
      interceptor = H.propertyGet($.interceptorsForUncacheableTags, tag);
      if (interceptor != null)
        return interceptor;
      interceptorClass = H.lookupInterceptor(tag);
      if (interceptorClass == null) {
        tag = H.stringTypeCheck($.alternateTagFunction.call$2(obj, tag));
        if (tag != null) {
          record = H.propertyGet($.dispatchRecordsForInstanceTags, tag);
          if (record != null)
            return H.patchInstance(obj, record);
          interceptor = H.propertyGet($.interceptorsForUncacheableTags, tag);
          if (interceptor != null)
            return interceptor;
          interceptorClass = H.lookupInterceptor(tag);
        }
      }
      if (interceptorClass == null)
        return;
      interceptor = interceptorClass.prototype;
      mark = tag[0];
      if (mark === "!") {
        record = H.makeLeafDispatchRecord(interceptor);
        H.propertySet($.dispatchRecordsForInstanceTags, tag, record);
        return H.patchInstance(obj, record);
      }
      if (mark === "~") {
        H.propertySet($.interceptorsForUncacheableTags, tag, interceptor);
        return interceptor;
      }
      if (mark === "-")
        return H.patchProto(obj, H.makeLeafDispatchRecord(interceptor));
      if (mark === "+")
        return H.patchInteriorProto(obj, interceptor);
      if (mark === "*")
        throw H.wrapException(P.UnimplementedError$(tag));
      if (H.leafTags()[tag] === true)
        return H.patchProto(obj, H.makeLeafDispatchRecord(interceptor));
      else
        return H.patchInteriorProto(obj, interceptor);
    },
    patchInstance: function(obj, record) {
      J.setDispatchProperty(obj, record);
      return J.dispatchRecordInterceptor(record);
    },
    patchProto: function(obj, record) {
      J.setDispatchProperty(Object.getPrototypeOf(obj), record);
      return J.dispatchRecordInterceptor(record);
    },
    patchInteriorProto: function(obj, interceptor) {
      var proto = Object.getPrototypeOf(obj);
      J.setDispatchProperty(proto, J.makeDispatchRecord(interceptor, proto, null, null));
      return interceptor;
    },
    makeLeafDispatchRecord: function(interceptor) {
      return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
    },
    makeDefaultDispatchRecord: function(tag, interceptorClass, proto) {
      var interceptor = interceptorClass.prototype;
      if (H.leafTags()[tag] === true)
        return H.makeLeafDispatchRecord(interceptor);
      else
        return J.makeDispatchRecord(interceptor, proto, null, null);
    },
    constructorNameFallback: function(object) {
      return C.C_JS_CONST(object);
    },
    initNativeDispatch: function() {
      if (true === $.initNativeDispatchFlag)
        return;
      $.initNativeDispatchFlag = true;
      H.initNativeDispatchContinue();
    },
    initNativeDispatchContinue: function() {
      var map, tags, fun, i, tag, proto, record, interceptorClass;
      $.dispatchRecordsForInstanceTags = Object.create(null);
      $.interceptorsForUncacheableTags = Object.create(null);
      H.initHooks();
      map = H.interceptorsByTag();
      tags = Object.getOwnPropertyNames(map);
      if (typeof window != "undefined") {
        window;
        fun = function() {
        };
        for (i = 0; i < tags.length; ++i) {
          tag = tags[i];
          proto = $.prototypeForTagFunction.call$1(tag);
          if (proto != null) {
            record = H.makeDefaultDispatchRecord(tag, map[tag], proto);
            if (record != null) {
              J.setDispatchProperty(proto, record);
              fun.prototype = proto;
            }
          }
        }
      }
      for (i = 0; i < tags.length; ++i) {
        tag = tags[i];
        if (/^[A-Za-z_]/.test(tag)) {
          interceptorClass = H.propertyGet(map, tag);
          H.propertySet(map, "!" + tag, interceptorClass);
          H.propertySet(map, "~" + tag, interceptorClass);
          H.propertySet(map, "-" + tag, interceptorClass);
          H.propertySet(map, "+" + tag, interceptorClass);
          H.propertySet(map, "*" + tag, interceptorClass);
        }
      }
    },
    initHooks: function() {
      var transformers, i, transformer, getTag, getUnknownTag, prototypeForTag,
        hooks = C.C_JS_CONST0();
      hooks = H.applyHooksTransformer(C.C_JS_CONST1, H.applyHooksTransformer(C.C_JS_CONST2, H.applyHooksTransformer(C.C_JS_CONST3, H.applyHooksTransformer(C.C_JS_CONST3, H.applyHooksTransformer(C.C_JS_CONST4, H.applyHooksTransformer(C.C_JS_CONST5, H.applyHooksTransformer(C.C_JS_CONST6(C.C_JS_CONST), hooks)))))));
      if (typeof dartNativeDispatchHooksTransformer != "undefined") {
        transformers = dartNativeDispatchHooksTransformer;
        if (typeof transformers == "function")
          transformers = [transformers];
        if (transformers.constructor == Array)
          for (i = 0; i < transformers.length; ++i) {
            transformer = transformers[i];
            if (typeof transformer == "function")
              hooks = H.applyHooksTransformer(transformer, hooks);
          }
      }
      getTag = hooks.getTag;
      getUnknownTag = hooks.getUnknownTag;
      prototypeForTag = hooks.prototypeForTag;
      $.getTagFunction = new H.initHooks_closure(getTag);
      $.alternateTagFunction = new H.initHooks_closure0(getUnknownTag);
      $.prototypeForTagFunction = new H.initHooks_closure1(prototypeForTag);
    },
    applyHooksTransformer: function(transformer, hooks) {
      return transformer(hooks) || hooks;
    },
    regExpGetNative: function(regexp) {
      return H.interceptedTypeCheck(regexp, "$isJSSyntaxRegExp")._nativeRegExp;
    },
    regExpGetGlobalNative: function(regexp) {
      var nativeRegexp = H.interceptedTypeCheck(regexp, "$isJSSyntaxRegExp").get$_nativeGlobalVersion();
      nativeRegexp.lastIndex = 0;
      return nativeRegexp;
    },
    regExpCaptureCount: function(regexp) {
      return H.interceptedTypeCheck(regexp, "$isJSSyntaxRegExp").get$_nativeAnchoredVersion().exec("").length - 2;
    },
    JSSyntaxRegExp$: function(source, caseSensitive, multiLine) {
      return new H.JSSyntaxRegExp(source, H.JSSyntaxRegExp_makeNative(source, multiLine, caseSensitive, false), []);
    },
    JSSyntaxRegExp_makeNative: function(source, multiLine, caseSensitive, global) {
      var m, i, g, regexp;
      H.stringTypeCheck(source);
      H.boolTypeCheck(multiLine);
      H.boolTypeCheck(caseSensitive);
      H.boolTypeCheck(global);
      H.checkString(source);
      m = multiLine === true ? "m" : "";
      i = caseSensitive === true ? "" : "i";
      g = global ? "g" : "";
      regexp = function(source, modifiers) {
        try {
          return new RegExp(source, modifiers);
        } catch (e) {
          return e;
        }
      }(source, m + i + g);
      if (regexp instanceof RegExp)
        return regexp;
      throw H.wrapException(P.FormatException$("Illegal RegExp pattern (" + String(regexp) + ")", source, null));
    },
    _MatchImplementation$: function(pattern, _match) {
      var t1 = new H._MatchImplementation(_match, []);
      t1._MatchImplementation$2(pattern, _match);
      return t1;
    },
    _AllMatchesIterable$: function(_re, _string, _start) {
      return new H._AllMatchesIterable(_re, _string, _start, []);
    },
    _AllMatchesIterator$: function(_regExp, _string, _nextIndex) {
      return new H._AllMatchesIterator(_regExp, _string, _nextIndex, []);
    },
    firstMatchAfter: function(regExp, string, start) {
      return H.interceptedTypeCheck(regExp, "$isJSSyntaxRegExp")._execGlobal$2(H.stringTypeCheck(string), H.intTypeCheck(start));
    },
    stringIndexOfStringUnchecked: function(receiver, other, startIndex) {
      return receiver.indexOf(other, startIndex);
    },
    stringContainsStringUnchecked: function(receiver, other, startIndex) {
      return J.$ge$n(H.stringIndexOfStringUnchecked(receiver, other, startIndex), 0);
    },
    stringSplitUnchecked: function(receiver, pattern) {
      return J.JSArray_JSArray$markGrowable(H.stringTypeCheck(receiver).split(pattern), P.String);
    },
    StringMatch$: function(start, input, pattern) {
      return new H.StringMatch(start, pattern, []);
    },
    allMatchesInStringUnchecked: function(pattern, string, startIndex) {
      H.stringTypeCheck(pattern);
      return H._StringAllMatchesIterable$(H.stringTypeCheck(string), pattern, H.intTypeCheck(startIndex));
    },
    _StringAllMatchesIterable$: function(_input, _pattern, _index) {
      return new H._StringAllMatchesIterable(_input, _pattern, _index, []);
    },
    _StringAllMatchesIterator$: function(_input, _pattern, _index) {
      return new H._StringAllMatchesIterator(_input, _pattern, _index, []);
    },
    stringContainsUnchecked: function(receiver, other, startIndex) {
      var t1, t2;
      if (typeof other === "string")
        return H.stringContainsStringUnchecked(receiver, other, startIndex);
      else {
        t1 = J.getInterceptor$(other);
        t2 = J.getInterceptor$s(receiver);
        if (!!t1.$isJSSyntaxRegExp)
          return other.hasMatch$1(H.stringTypeCheck(t2.substring$1(receiver, startIndex)));
        else
          return J.get$isNotEmpty$asx(t1.allMatches$1(other, t2.substring$1(receiver, startIndex)));
      }
    },
    stringReplaceJS: function(receiver, jsRegExp, replacement) {
      return H.stringTypeCheck(receiver).replace(jsRegExp, H.escapeReplacement(H.stringTypeCheck(replacement)));
    },
    escapeReplacement: function(replacement) {
      H.stringTypeCheck(replacement);
      if (H.boolTypeCheck(H.stringContainsStringUnchecked(replacement, "$", 0)))
        return replacement.replace(/\$/g, "$$$$");
      return replacement;
    },
    stringReplaceFirstRE: function(receiver, regexp, replacement, startIndex) {
      var start, end,
        match = regexp._execGlobal$2(receiver, startIndex);
      if (match == null)
        return receiver;
      start = match.get$start();
      end = match.get$end();
      return H.stringReplaceRangeUnchecked(H.stringTypeCheck(receiver), H.intTypeCheck(start), H.intTypeCheck(end), H.stringTypeCheck(replacement));
    },
    quoteStringForRegExp: function(string) {
      if (/[[\]{}()*+?.\\^$|]/.test(string))
        return string.replace(/[[\]{}()*+?.\\^$|]/g, "\\$&");
      return string;
    },
    stringReplaceAllUnchecked: function(receiver, pattern, replacement) {
      var re;
      H.checkString(replacement);
      if (typeof pattern === "string")
        return H.stringReplaceAllUncheckedString(H.stringTypeCheck(receiver), pattern, H.stringTypeCheck(replacement));
      if (pattern instanceof H.JSSyntaxRegExp) {
        re = H.regExpGetGlobalNative(pattern);
        return H.stringReplaceJS(H.stringTypeCheck(receiver), re, H.stringTypeCheck(replacement));
      }
      H.checkNull(pattern);
      throw H.wrapException("String.replaceAll(Pattern) UNIMPLEMENTED");
    },
    stringReplaceAllUncheckedString: function(receiver, pattern, replacement) {
      var result, $length, i, index;
      H.stringTypeCheck(receiver);
      H.stringTypeCheck(pattern);
      H.stringTypeCheck(replacement);
      if (pattern === "") {
        if (receiver === "")
          return replacement;
        result = P.StringBuffer$("");
        $length = receiver.length;
        result.write$1(replacement);
        for (i = 0; i < $length; ++i) {
          result.write$1(receiver[i]);
          result.write$1(replacement);
        }
        return result.toString$0(0);
      }
      index = H.intTypeCheck(H.stringIndexOfStringUnchecked(receiver, pattern, 0));
      if (typeof index !== "number")
        return index.$lt();
      if (index < 0)
        return receiver;
      if (receiver.length < 500 || H.boolTypeCheck(H.stringContainsStringUnchecked(replacement, "$", 0)))
        return H.stringReplaceAllUsingSplitJoin(receiver, pattern, replacement);
      return H.stringReplaceJS(receiver, new RegExp(H.quoteStringForRegExp(pattern), 'g'), replacement);
    },
    stringReplaceAllUsingSplitJoin: function(receiver, pattern, replacement) {
      return receiver.split(pattern).join(replacement);
    },
    stringReplaceFirstUnchecked: function(receiver, pattern, replacement, startIndex) {
      var index, t1, matches, match;
      H.intTypeCheck(startIndex);
      if (typeof pattern === "string") {
        index = H.intTypeCheck(H.stringIndexOfStringUnchecked(receiver, pattern, startIndex));
        if (typeof index !== "number")
          return index.$lt();
        if (index < 0)
          return receiver;
        t1 = pattern.length;
        return H.stringReplaceRangeUnchecked(H.stringTypeCheck(receiver), index, index + t1, H.stringTypeCheck(replacement));
      }
      t1 = J.getInterceptor$(pattern);
      if (!!t1.$isJSSyntaxRegExp)
        return startIndex === 0 ? H.stringReplaceJS(H.stringTypeCheck(receiver), H.regExpGetNative(pattern), H.stringTypeCheck(replacement)) : H.stringReplaceFirstRE(receiver, pattern, replacement, startIndex);
      H.checkNull(pattern);
      matches = H.assertSubtype(J.get$iterator$ax(t1.allMatches$2(pattern, receiver, startIndex)), "$isIterator", [P.Match], "$asIterator");
      if (!matches.moveNext$0())
        return receiver;
      match = matches.get$current();
      return J.replaceRange$3$asx(receiver, match.get$start(), match.get$end(), replacement);
    },
    stringReplaceRangeUnchecked: function(receiver, start, end, replacement) {
      var prefix, suffix;
      H.stringTypeCheck(receiver);
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      H.stringTypeCheck(replacement);
      prefix = receiver.substring(0, start);
      suffix = receiver.substring(end);
      return prefix + H.S(replacement) + suffix;
    },
    Native: function Native() {
    },
    _Patch: function _Patch() {
    },
    ConstantMapView: function ConstantMapView(t0, t1) {
      this._collection$_map = t0;
      this.$ti = t1;
    },
    ConstantMap: function ConstantMap() {
    },
    ConstantStringMap: function ConstantStringMap(t0, t1, t2, t3) {
      var _ = this;
      _.__js_helper$_length = t0;
      _._jsObject = t1;
      _.__js_helper$_keys = t2;
      _.$ti = t3;
    },
    ConstantStringMap_values_closure: function ConstantStringMap_values_closure(t0, t1) {
      this.$this = t0;
      this.$ti = t1;
    },
    ConstantProtoMap: function ConstantProtoMap() {
    },
    _ConstantMapKeyIterable: function _ConstantMapKeyIterable(t0, t1) {
      this._map = t0;
      this.$ti = t1;
    },
    GeneralConstantMap: function GeneralConstantMap() {
    },
    Instantiation: function Instantiation() {
    },
    Instantiation1: function Instantiation1(t0, t1) {
      this._genericClosure = t0;
      this.$ti = t1;
    },
    Instantiation2: function Instantiation2() {
    },
    Instantiation3: function Instantiation3() {
    },
    Instantiation4: function Instantiation4() {
    },
    Instantiation5: function Instantiation5() {
    },
    Instantiation6: function Instantiation6() {
    },
    Instantiation7: function Instantiation7() {
    },
    Instantiation8: function Instantiation8() {
    },
    Instantiation9: function Instantiation9() {
    },
    Instantiation10: function Instantiation10() {
    },
    Instantiation11: function Instantiation11() {
    },
    Instantiation12: function Instantiation12() {
    },
    Instantiation13: function Instantiation13() {
    },
    Instantiation14: function Instantiation14() {
    },
    Instantiation15: function Instantiation15() {
    },
    Instantiation16: function Instantiation16() {
    },
    Instantiation17: function Instantiation17() {
    },
    Instantiation18: function Instantiation18() {
    },
    Instantiation19: function Instantiation19() {
    },
    Instantiation20: function Instantiation20() {
    },
    InternalMap: function InternalMap() {
    },
    JSInvocationMirror: function JSInvocationMirror(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.__js_helper$_memberName = t0;
      _._kind = t1;
      _.__js_helper$_arguments = t2;
      _._namedArgumentNames = t3;
      _._typeArgumentCount = t4;
      _.$ti = t5;
    },
    Primitives: function Primitives() {
    },
    Primitives_functionNoSuchMethod_closure: function Primitives_functionNoSuchMethod_closure(t0, t1, t2, t3) {
      var _ = this;
      _._box_0 = t0;
      _.namedArgumentList = t1;
      _.$arguments = t2;
      _.$ti = t3;
    },
    JsCache: function JsCache() {
    },
    TypeErrorDecoder: function TypeErrorDecoder(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._pattern = t0;
      _.__js_helper$_arguments = t1;
      _._argumentsExpr = t2;
      _._expr = t3;
      _._method = t4;
      _.__js_helper$_receiver = t5;
      _.$ti = t6;
    },
    NullError: function NullError(t0, t1, t2) {
      this._message = t0;
      this._method = t1;
      this.$ti = t2;
    },
    JsNoSuchMethodError: function JsNoSuchMethodError(t0, t1, t2, t3) {
      var _ = this;
      _._message = t0;
      _._method = t1;
      _.__js_helper$_receiver = t2;
      _.$ti = t3;
    },
    UnknownJsTypeError: function UnknownJsTypeError(t0, t1) {
      this._message = t0;
      this.$ti = t1;
    },
    ExceptionAndStackTrace: function ExceptionAndStackTrace() {
    },
    unwrapException_saveStackTrace: function unwrapException_saveStackTrace(t0, t1) {
      this.ex = t0;
      this.$ti = t1;
    },
    _StackTrace: function _StackTrace() {
    },
    Closure: function Closure() {
    },
    Closure_fromTearOff_closure: function Closure_fromTearOff_closure() {
    },
    TearOffClosure: function TearOffClosure() {
    },
    StaticClosure: function StaticClosure(t0) {
      this.$ti = t0;
    },
    BoundClosure: function BoundClosure(t0, t1, t2, t3, t4) {
      var _ = this;
      _._self = t0;
      _._target = t1;
      _.__js_helper$_receiver = t2;
      _.__js_helper$_name = t3;
      _.$ti = t4;
    },
    Creates: function Creates() {
    },
    Returns: function Returns() {
    },
    JSName: function JSName() {
    },
    JavaScriptIndexingBehavior: function JavaScriptIndexingBehavior() {
    },
    TypeErrorImplementation: function TypeErrorImplementation(t0, t1) {
      this.message = t0;
      this.$ti = t1;
    },
    CastErrorImplementation: function CastErrorImplementation(t0, t1) {
      this.message = t0;
      this.$ti = t1;
    },
    FallThroughErrorImplementation: function FallThroughErrorImplementation() {
    },
    RuntimeError: function RuntimeError(t0, t1) {
      this.message = t0;
      this.$ti = t1;
    },
    DeferredNotLoadedError: function DeferredNotLoadedError() {
    },
    UnimplementedNoSuchMethodError: function UnimplementedNoSuchMethodError() {
    },
    MainError: function MainError() {
    },
    _AssertionError: function _AssertionError() {
    },
    _UnreachableError: function _UnreachableError() {
    },
    TypeImpl: function TypeImpl(t0, t1) {
      var _ = this;
      _._rti = t0;
      _._hashCode = _.__typeName = null;
      _.$ti = t1;
    },
    TypeVariable: function TypeVariable() {
    },
    JsLinkedHashMap: function JsLinkedHashMap(t0) {
      var _ = this;
      _.__js_helper$_length = 0;
      _._last = _._first = _._rest = _._nums = _._strings = null;
      _._modifications = 0;
      _.$ti = t0;
    },
    JsLinkedHashMap_values_closure: function JsLinkedHashMap_values_closure(t0, t1) {
      this.$this = t0;
      this.$ti = t1;
    },
    Es6LinkedHashMap: function Es6LinkedHashMap() {
    },
    LinkedHashMapCell: function LinkedHashMapCell(t0, t1, t2) {
      var _ = this;
      _.hashMapCellKey = t0;
      _.hashMapCellValue = t1;
      _._next = null;
      _.$ti = t2;
    },
    LinkedHashMapKeyIterable: function LinkedHashMapKeyIterable(t0, t1) {
      this._map = t0;
      this.$ti = t1;
    },
    LinkedHashMapKeyIterator: function LinkedHashMapKeyIterator(t0, t1, t2) {
      var _ = this;
      _._map = t0;
      _._modifications = t1;
      _.__js_helper$_current = _._cell = null;
      _.$ti = t2;
    },
    initHooks_closure: function initHooks_closure(t0, t1) {
      this.getTag = t0;
      this.$ti = t1;
    },
    initHooks_closure0: function initHooks_closure0(t0, t1) {
      this.getUnknownTag = t0;
      this.$ti = t1;
    },
    initHooks_closure1: function initHooks_closure1(t0, t1) {
      this.prototypeForTag = t0;
      this.$ti = t1;
    },
    JSSyntaxRegExp: function JSSyntaxRegExp(t0, t1, t2) {
      var _ = this;
      _.pattern = t0;
      _._nativeRegExp = t1;
      _._nativeAnchoredRegExp = _._nativeGlobalRegExp = null;
      _.$ti = t2;
    },
    _MatchImplementation: function _MatchImplementation(t0, t1) {
      this._match = t0;
      this.$ti = t1;
    },
    _AllMatchesIterable: function _AllMatchesIterable(t0, t1, t2, t3) {
      var _ = this;
      _._re = t0;
      _._string = t1;
      _.__js_helper$_start = t2;
      _.$ti = t3;
    },
    _AllMatchesIterator: function _AllMatchesIterator(t0, t1, t2, t3) {
      var _ = this;
      _._regExp = t0;
      _._string = t1;
      _._nextIndex = t2;
      _.__js_helper$_current = null;
      _.$ti = t3;
    },
    StringMatch: function StringMatch(t0, t1, t2) {
      this.start = t0;
      this.pattern = t1;
      this.$ti = t2;
    },
    _StringAllMatchesIterable: function _StringAllMatchesIterable(t0, t1, t2, t3) {
      var _ = this;
      _._input = t0;
      _._pattern = t1;
      _.__js_helper$_index = t2;
      _.$ti = t3;
    },
    _StringAllMatchesIterator: function _StringAllMatchesIterator(t0, t1, t2, t3) {
      var _ = this;
      _._input = t0;
      _._pattern = t1;
      _.__js_helper$_index = t2;
      _.__js_helper$_current = null;
      _.$ti = t3;
    },
    extractKeys: function(victim) {
      return J.JSArray_JSArray$markFixed(victim ? Object.keys(victim) : [], null);
    },
    unmangleGlobalNameIfPreservedAnyways: function($name) {
      return H.stringTypeCheck(H.JsCache_fetch(init.mangledGlobalNames, H.stringTypeCheck($name)));
    },
    unmangleAllIdentifiersIfPreservedAnyways: function(str) {
      return function(str, names) {
        return str.replace(/[^<,> ]+/g, function(m) {
          return names[m] || m;
        });
      }(H.stringTypeCheck(str), init.mangledGlobalNames);
    },
    _LazyMangledNamesMap: function _LazyMangledNamesMap() {
    },
    _LazyMangledInstanceNamesMap: function _LazyMangledInstanceNamesMap() {
    },
    _LazyReflectiveNamesMap: function _LazyReflectiveNamesMap() {
    },
    SupportedBrowser: function SupportedBrowser() {
    },
    Experimental: function Experimental() {
    },
    DomName: function DomName() {
    },
    DocsEditable: function DocsEditable() {
    },
    Unstable: function Unstable() {
    },
    _checkLength: function($length) {
      return typeof $length === "number" && Math.floor($length) === $length ? $length : H.throwExpression(P.ArgumentError$("Invalid length " + H.S($length)));
    },
    _checkViewArguments: function(buffer, offsetInBytes, $length) {
      if (!J.getInterceptor$(buffer).$isNativeByteBuffer)
        throw H.wrapException(P.ArgumentError$("Invalid view buffer"));
      if (typeof offsetInBytes !== "number" || Math.floor(offsetInBytes) !== offsetInBytes)
        throw H.wrapException(P.ArgumentError$("Invalid view offsetInBytes " + H.S(offsetInBytes)));
      if ($length != null && (typeof $length !== "number" || Math.floor($length) !== $length))
        throw H.wrapException(P.ArgumentError$("Invalid view length " + H.S($length)));
    },
    _ensureNativeList: function(list) {
      var t1, t2, result, i;
      H.listTypeCheck(list);
      t1 = J.getInterceptor$(list);
      if (!!t1.$isJSIndexable)
        return list;
      t2 = t1.get$length(list);
      if (typeof t2 !== "number")
        return H.iae(t2);
      result = new Array(t2);
      result.fixed$length = Array;
      i = 0;
      while (true) {
        t2 = t1.get$length(list);
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (!(i < t2))
          break;
        C.JSArray_methods.$indexSet(result, i, t1.$index(list, i));
        ++i;
      }
      return result;
    },
    NativeInt8List_NativeInt8List$fromList: function(elements) {
      return H.NativeInt8List__create1(H._ensureNativeList(H.assertSubtype(elements, "$isList", [P.int], "$asList")));
    },
    NativeInt8List__create1: function(arg) {
      return new Int8Array(arg);
    },
    NativeUint32List_NativeUint32List$fromList: function(elements) {
      return H.NativeUint32List__create1(H._ensureNativeList(H.assertSubtype(elements, "$isList", [P.int], "$asList")));
    },
    NativeUint32List__create1: function(arg) {
      return new Uint32Array(arg);
    },
    NativeUint8List_NativeUint8List: function($length) {
      return H.NativeUint8List__create1(H._checkLength(H.intTypeCheck($length)));
    },
    NativeUint8List_NativeUint8List$view: function(buffer, offsetInBytes, $length) {
      H.interceptedTypeCheck(buffer, "$isByteBuffer");
      H.intTypeCheck(offsetInBytes);
      H.intTypeCheck($length);
      H._checkViewArguments(buffer, offsetInBytes, $length);
      return $length == null ? H.NativeUint8List__create2(buffer, offsetInBytes) : H.NativeUint8List__create3(buffer, offsetInBytes, $length);
    },
    NativeUint8List__create1: function(arg) {
      return new Uint8Array(arg);
    },
    NativeUint8List__create2: function(arg1, arg2) {
      return new Uint8Array(arg1, arg2);
    },
    NativeUint8List__create3: function(arg1, arg2, arg3) {
      return new Uint8Array(arg1, arg2, arg3);
    },
    _isInvalidArrayIndex: function(index) {
      H.intTypeCheck(index);
      return index >>> 0 !== index;
    },
    _checkValidIndex: function(index, list, $length) {
      var t1;
      H.intTypeCheck(index);
      H.listTypeCheck(list);
      H.intTypeCheck($length);
      if (!H._isInvalidArrayIndex(index)) {
        if (typeof $length !== "number")
          return H.iae($length);
        t1 = index >= $length;
      } else
        t1 = true;
      if (t1)
        throw H.wrapException(H.diagnoseIndexError(list, index));
    },
    _checkValidRange: function(start, end, $length) {
      var t1;
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      H.intTypeCheck($length);
      if (!H._isInvalidArrayIndex(start))
        if (end == null) {
          if (typeof start !== "number")
            return start.$gt();
          if (typeof $length !== "number")
            return H.iae($length);
          t1 = start > $length;
        } else if (!H._isInvalidArrayIndex(end)) {
          if (typeof start !== "number")
            return start.$gt();
          if (!(start > end)) {
            if (typeof $length !== "number")
              return H.iae($length);
            t1 = end > $length;
          } else
            t1 = true;
        } else
          t1 = true;
      else
        t1 = true;
      if (t1)
        throw H.wrapException(H.diagnoseRangeError(start, end, $length));
      if (end == null)
        return $length;
      return end;
    },
    NativeByteBuffer: function NativeByteBuffer() {
    },
    NativeFloat32x4List: function NativeFloat32x4List() {
    },
    NativeInt32x4List: function NativeInt32x4List() {
    },
    NativeFloat64x2List: function NativeFloat64x2List() {
    },
    NativeTypedData: function NativeTypedData() {
    },
    NativeByteData: function NativeByteData() {
    },
    NativeTypedArray: function NativeTypedArray() {
    },
    NativeTypedArrayOfDouble: function NativeTypedArrayOfDouble() {
    },
    NativeTypedArrayOfInt: function NativeTypedArrayOfInt() {
    },
    NativeFloat32List: function NativeFloat32List() {
    },
    NativeFloat64List: function NativeFloat64List() {
    },
    NativeInt16List: function NativeInt16List() {
    },
    NativeInt32List: function NativeInt32List() {
    },
    NativeInt8List: function NativeInt8List() {
    },
    NativeUint16List: function NativeUint16List() {
    },
    NativeUint32List: function NativeUint32List() {
    },
    NativeUint8ClampedList: function NativeUint8ClampedList() {
    },
    NativeUint8List: function NativeUint8List() {
    },
    NativeFloat32x4: function NativeFloat32x4() {
    },
    NativeInt32x4: function NativeInt32x4() {
    },
    NativeFloat64x2: function NativeFloat64x2() {
    },
    _NativeFloat32x4List_Object_ListMixin: function _NativeFloat32x4List_Object_ListMixin() {
    },
    _NativeFloat32x4List_Object_ListMixin_FixedLengthListMixin: function _NativeFloat32x4List_Object_ListMixin_FixedLengthListMixin() {
    },
    _NativeFloat64x2List_Object_ListMixin: function _NativeFloat64x2List_Object_ListMixin() {
    },
    _NativeFloat64x2List_Object_ListMixin_FixedLengthListMixin: function _NativeFloat64x2List_Object_ListMixin_FixedLengthListMixin() {
    },
    _NativeInt32x4List_Object_ListMixin: function _NativeInt32x4List_Object_ListMixin() {
    },
    _NativeInt32x4List_Object_ListMixin_FixedLengthListMixin: function _NativeInt32x4List_Object_ListMixin_FixedLengthListMixin() {
    },
    _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin: function _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin() {
    },
    _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin: function _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin() {
    },
    _NativeTypedArrayOfInt_NativeTypedArray_ListMixin: function _NativeTypedArrayOfInt_NativeTypedArray_ListMixin() {
    },
    _NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin: function _NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin() {
    }
  },
  J = {
    getDispatchProperty: function(object) {
      return object[init.dispatchPropertyName];
    },
    setDispatchProperty: function(object, value) {
      H.defineProperty(object, init.dispatchPropertyName, value);
    },
    makeDispatchRecord: function(interceptor, proto, extension, indexability) {
      return {i: interceptor, p: proto, e: extension, x: indexability};
    },
    dispatchRecordInterceptor: function(record) {
      return record.i;
    },
    dispatchRecordProto: function(record) {
      return record.p;
    },
    dispatchRecordExtension: function(record) {
      return record.e;
    },
    dispatchRecordIndexability: function(record) {
      return record.x;
    },
    getNativeInterceptor: function(object) {
      var proto, objectProto, $constructor, interceptor,
        record = J.getDispatchProperty(object);
      if (record == null)
        if ($.initNativeDispatchFlag == null) {
          H.initNativeDispatch();
          record = J.getDispatchProperty(object);
        }
      if (record != null) {
        proto = J.dispatchRecordProto(record);
        if (false === proto)
          return J.dispatchRecordInterceptor(record);
        if (true === proto)
          return object;
        objectProto = Object.getPrototypeOf(object);
        if (proto === objectProto)
          return J.dispatchRecordInterceptor(record);
        if (J.dispatchRecordExtension(record) === objectProto)
          throw H.wrapException(P.UnimplementedError$("Return interceptor for " + H.S(proto(object, record))));
      }
      $constructor = object.constructor;
      interceptor = J.lookupInterceptorByConstructor($constructor);
      if (interceptor != null)
        return interceptor;
      interceptor = H.lookupAndCacheInterceptor(object);
      if (interceptor != null)
        return interceptor;
      if (typeof object == "function")
        return C.JavaScriptFunction_methods;
      proto = Object.getPrototypeOf(object);
      if (proto == null)
        return C.PlainJavaScriptObject_methods;
      if (proto === Object.prototype)
        return C.PlainJavaScriptObject_methods;
      if (typeof $constructor == "function") {
        J.cacheInterceptorOnConstructor($constructor, C.UnknownJavaScriptObject_methods);
        return C.UnknownJavaScriptObject_methods;
      }
      return C.UnknownJavaScriptObject_methods;
    },
    lookupInterceptorByConstructor: function($constructor) {
      return $constructor == null ? null : $constructor[$.$get$JS_INTEROP_INTERCEPTOR_TAG()];
    },
    cacheInterceptorOnConstructor: function($constructor, interceptor) {
      H.defineProperty($constructor, $.$get$JS_INTEROP_INTERCEPTOR_TAG(), interceptor);
    },
    JSArray_JSArray$fixed: function($length, $E) {
      H.intTypeCheck($length);
      if (typeof $length !== "number" || Math.floor($length) !== $length)
        throw H.wrapException(P.ArgumentError$value($length, "length", "is not an integer"));
      if ($length < 0 || $length > 4294967295)
        throw H.wrapException(P.RangeError$range($length, 0, 4294967295, "length", null));
      return J.JSArray_JSArray$markFixed(new Array($length), $E);
    },
    JSArray_JSArray$typed: function(allocation, $E) {
      return allocation;
    },
    JSArray_JSArray$markFixed: function(allocation, $E) {
      return J.JSArray_markFixedList(H.setRuntimeTypeInfo(J.JSArray_JSArray$typed(allocation, $E), [$E]));
    },
    JSArray_JSArray$markGrowable: function(allocation, $E) {
      return H.setRuntimeTypeInfo(J.JSArray_JSArray$typed(allocation, $E), [$E]);
    },
    JSArray_markFixedList: function(list) {
      H.listTypeCheck(list);
      list.fixed$length = Array;
      return list;
    },
    JSArray_markUnmodifiableList: function(list) {
      H.listTypeCheck(list);
      list.fixed$length = Array;
      list.immutable$list = Array;
      return list;
    },
    ArrayIterator$: function(iterable, $E) {
      return new J.ArrayIterator(iterable, iterable.length, [$E]);
    },
    JSNumber__handleIEtoString: function(result) {
      var match, t1, exponent;
      H.stringTypeCheck(result);
      match = /^([\da-z]+)(?:\.([\da-z]+))?\(e\+(\d+)\)$/.exec(result);
      if (match == null)
        throw H.wrapException(P.UnsupportedError$("Unexpected toString result: " + H.S(result)));
      t1 = match.length;
      if (1 >= t1)
        return H.ioore(match, 1);
      result = match[1];
      if (3 >= t1)
        return H.ioore(match, 3);
      exponent = +match[3];
      t1 = match[2];
      if (t1 != null) {
        result += t1;
        exponent -= t1.length;
      }
      return C.JSString_methods.$add(result, C.JSString_methods.$mul("0", exponent));
    },
    JSString__isWhitespace: function(codeUnit) {
      H.intTypeCheck(codeUnit);
      if (typeof codeUnit !== "number")
        return codeUnit.$lt();
      if (codeUnit < 256)
        switch (codeUnit) {
          case 9:
          case 10:
          case 11:
          case 12:
          case 13:
          case 32:
          case 133:
          case 160:
            return true;
          default:
            return false;
        }
      switch (codeUnit) {
        case 5760:
        case 8192:
        case 8193:
        case 8194:
        case 8195:
        case 8196:
        case 8197:
        case 8198:
        case 8199:
        case 8200:
        case 8201:
        case 8202:
        case 8232:
        case 8233:
        case 8239:
        case 8287:
        case 12288:
        case 65279:
          return true;
        default:
          return false;
      }
    },
    JSString__skipLeadingWhitespace: function(string, index) {
      var t1, codeUnit;
      H.stringTypeCheck(string);
      H.intTypeCheck(index);
      t1 = string.length;
      while (true) {
        if (typeof index !== "number")
          return index.$lt();
        if (!(index < t1))
          break;
        codeUnit = C.JSString_methods.codeUnitAt$1(string, index);
        if (codeUnit !== 32 && codeUnit !== 13 && !J.JSString__isWhitespace(codeUnit))
          break;
        ++index;
      }
      return index;
    },
    JSString__skipTrailingWhitespace: function(string, index) {
      var t1, index0, codeUnit;
      H.stringTypeCheck(string);
      H.intTypeCheck(index);
      t1 = J.getInterceptor$s(string);
      while (true) {
        if (typeof index !== "number")
          return index.$gt();
        if (!(index > 0))
          break;
        index0 = index - 1;
        codeUnit = t1.codeUnitAt$1(string, index0);
        if (codeUnit !== 32 && codeUnit !== 13 && !J.JSString__isWhitespace(codeUnit))
          break;
        index = index0;
      }
      return index;
    },
    getInterceptor$: function(receiver) {
      if (typeof receiver == "number") {
        if (Math.floor(receiver) == receiver)
          return J.JSInt.prototype;
        return J.JSDouble.prototype;
      }
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return J.JSNull.prototype;
      if (typeof receiver == "boolean")
        return J.JSBool.prototype;
      if (receiver.constructor == Array)
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof P.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$ansx: function(receiver) {
      if (typeof receiver == "number")
        return J.JSNumber.prototype;
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (receiver.constructor == Array)
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof P.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$asx: function(receiver) {
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (receiver.constructor == Array)
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof P.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$ax: function(receiver) {
      if (receiver == null)
        return receiver;
      if (receiver.constructor == Array)
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof P.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$bn: function(receiver) {
      if (typeof receiver == "number")
        return J.JSNumber.prototype;
      if (receiver == null)
        return receiver;
      if (typeof receiver == "boolean")
        return J.JSBool.prototype;
      if (!(receiver instanceof P.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$i: function(receiver) {
      if (typeof receiver == "number") {
        if (Math.floor(receiver) == receiver)
          return J.JSInt.prototype;
        return J.JSNumber.prototype;
      }
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof P.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$in: function(receiver) {
      if (typeof receiver == "number") {
        if (Math.floor(receiver) == receiver)
          return J.JSInt.prototype;
        return J.JSNumber.prototype;
      }
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof P.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$n: function(receiver) {
      if (typeof receiver == "number")
        return J.JSNumber.prototype;
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof P.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$ns: function(receiver) {
      if (typeof receiver == "number")
        return J.JSNumber.prototype;
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof P.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$s: function(receiver) {
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof P.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$x: function(receiver) {
      if (receiver == null)
        return receiver;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof P.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$z: function(receiver) {
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof P.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    set$length$asx: function(receiver, value) {
      return J.getInterceptor$asx(receiver).set$length(receiver, value);
    },
    get$codeUnits$s: function(receiver) {
      return J.getInterceptor$s(receiver).get$codeUnits(receiver);
    },
    get$first$ax: function(receiver) {
      return J.getInterceptor$ax(receiver).get$first(receiver);
    },
    get$hashCode$: function(receiver) {
      return J.getInterceptor$(receiver).get$hashCode(receiver);
    },
    get$isEmpty$asx: function(receiver) {
      return J.getInterceptor$asx(receiver).get$isEmpty(receiver);
    },
    get$isNotEmpty$asx: function(receiver) {
      return J.getInterceptor$asx(receiver).get$isNotEmpty(receiver);
    },
    get$iterator$ax: function(receiver) {
      return J.getInterceptor$ax(receiver).get$iterator(receiver);
    },
    get$last$ax: function(receiver) {
      return J.getInterceptor$ax(receiver).get$last(receiver);
    },
    get$length$asx: function(receiver) {
      return J.getInterceptor$asx(receiver).get$length(receiver);
    },
    get$message$z: function(receiver) {
      return J.getInterceptor$z(receiver).get$message(receiver);
    },
    get$path$z: function(receiver) {
      return J.getInterceptor$z(receiver).get$path(receiver);
    },
    get$reversed$ax: function(receiver) {
      return J.getInterceptor$ax(receiver).get$reversed(receiver);
    },
    get$url$z: function(receiver) {
      return J.getInterceptor$z(receiver).get$url(receiver);
    },
    $add$ansx: function(receiver, a0) {
      if (typeof receiver == "number" && typeof a0 == "number")
        return receiver + a0;
      return J.getInterceptor$ansx(receiver).$add(receiver, a0);
    },
    $and$bn: function(receiver, a0) {
      if (typeof receiver == "number" && typeof a0 == "number")
        return (receiver & a0) >>> 0;
      return J.getInterceptor$bn(receiver).$and(receiver, a0);
    },
    $eq$: function(receiver, a0) {
      if (receiver == null)
        return a0 == null;
      if (typeof receiver != "object")
        return a0 != null && receiver === a0;
      return J.getInterceptor$(receiver).$eq(receiver, a0);
    },
    $ge$n: function(receiver, a0) {
      if (typeof receiver == "number" && typeof a0 == "number")
        return receiver >= a0;
      return J.getInterceptor$n(receiver).$ge(receiver, a0);
    },
    $gt$n: function(receiver, a0) {
      if (typeof receiver == "number" && typeof a0 == "number")
        return receiver > a0;
      return J.getInterceptor$n(receiver).$gt(receiver, a0);
    },
    $index$asx: function(receiver, a0) {
      if (typeof a0 === "number")
        if (receiver.constructor == Array || typeof receiver == "string" || H.isJsIndexable(receiver, receiver[init.dispatchPropertyName]))
          if (a0 >>> 0 === a0 && a0 < receiver.length)
            return receiver[a0];
      return J.getInterceptor$asx(receiver).$index(receiver, a0);
    },
    $indexSet$ax: function(receiver, a0, a1) {
      return J.getInterceptor$ax(receiver).$indexSet(receiver, a0, a1);
    },
    $le$n: function(receiver, a0) {
      if (typeof receiver == "number" && typeof a0 == "number")
        return receiver <= a0;
      return J.getInterceptor$n(receiver).$le(receiver, a0);
    },
    $lt$n: function(receiver, a0) {
      if (typeof receiver == "number" && typeof a0 == "number")
        return receiver < a0;
      return J.getInterceptor$n(receiver).$lt(receiver, a0);
    },
    $mod$n: function(receiver, a0) {
      return J.getInterceptor$n(receiver).$mod(receiver, a0);
    },
    $mul$ns: function(receiver, a0) {
      if (typeof receiver == "number" && typeof a0 == "number")
        return receiver * a0;
      return J.getInterceptor$ns(receiver).$mul(receiver, a0);
    },
    $negate$in: function(receiver) {
      if (typeof receiver == "number")
        return -receiver;
      return J.getInterceptor$in(receiver).$negate(receiver);
    },
    $or$n: function(receiver, a0) {
      if (typeof receiver == "number" && typeof a0 == "number")
        return (receiver | a0) >>> 0;
      return J.getInterceptor$n(receiver).$or(receiver, a0);
    },
    $shl$n: function(receiver, a0) {
      return J.getInterceptor$n(receiver).$shl(receiver, a0);
    },
    $sub$n: function(receiver, a0) {
      if (typeof receiver == "number" && typeof a0 == "number")
        return receiver - a0;
      return J.getInterceptor$n(receiver).$sub(receiver, a0);
    },
    $xor$n: function(receiver, a0) {
      if (typeof receiver == "number" && typeof a0 == "number")
        return (receiver ^ a0) >>> 0;
      return J.getInterceptor$n(receiver).$xor(receiver, a0);
    },
    _codeUnitAt$1$s: function(receiver, a0) {
      return J.getInterceptor$s(receiver)._codeUnitAt$1(receiver, a0);
    },
    abs$0$in: function(receiver) {
      if (typeof receiver === "number")
        return Math.abs(receiver);
      return J.getInterceptor$in(receiver).abs$0(receiver);
    },
    add$1$ax: function(receiver, a0) {
      return J.getInterceptor$ax(receiver).add$1(receiver, a0);
    },
    addAll$1$ax: function(receiver, a0) {
      return J.getInterceptor$ax(receiver).addAll$1(receiver, a0);
    },
    allMatches$1$s: function(receiver, a0) {
      return J.getInterceptor$s(receiver).allMatches$1(receiver, a0);
    },
    cast$1$0$ax: function(receiver, $T1) {
      return J.getInterceptor$ax(receiver).cast$1$0(receiver, $T1);
    },
    codeUnitAt$1$s: function(receiver, a0) {
      return J.getInterceptor$s(receiver).codeUnitAt$1(receiver, a0);
    },
    contains$1$asx: function(receiver, a0) {
      return J.getInterceptor$asx(receiver).contains$1(receiver, a0);
    },
    elementAt$1$ax: function(receiver, a0) {
      return J.getInterceptor$ax(receiver).elementAt$1(receiver, a0);
    },
    endsWith$1$s: function(receiver, a0) {
      return J.getInterceptor$s(receiver).endsWith$1(receiver, a0);
    },
    expand$1$1$ax: function(receiver, a0, $T1) {
      return J.getInterceptor$ax(receiver).expand$1$1(receiver, a0, $T1);
    },
    fillRange$3$x: function(receiver, a0, a1, a2) {
      return J.getInterceptor$x(receiver).fillRange$3(receiver, a0, a1, a2);
    },
    fold$1$2$ax: function(receiver, a0, a1, $T1) {
      return J.getInterceptor$ax(receiver).fold$1$2(receiver, a0, a1, $T1);
    },
    forEach$1$ax: function(receiver, a0) {
      return J.getInterceptor$ax(receiver).forEach$1(receiver, a0);
    },
    insert$2$ax: function(receiver, a0, a1) {
      return J.getInterceptor$ax(receiver).insert$2(receiver, a0, a1);
    },
    insertAll$2$ax: function(receiver, a0, a1) {
      return J.getInterceptor$ax(receiver).insertAll$2(receiver, a0, a1);
    },
    join$0$ax: function(receiver) {
      return J.getInterceptor$ax(receiver).join$0(receiver);
    },
    join$1$ax: function(receiver, a0) {
      return J.getInterceptor$ax(receiver).join$1(receiver, a0);
    },
    map$1$1$ax: function(receiver, a0, $T1) {
      return J.getInterceptor$ax(receiver).map$1$1(receiver, a0, $T1);
    },
    matchAsPrefix$2$s: function(receiver, a0, a1) {
      return J.getInterceptor$s(receiver).matchAsPrefix$2(receiver, a0, a1);
    },
    noSuchMethod$1$: function(receiver, a0) {
      return J.getInterceptor$(receiver).noSuchMethod$1(receiver, a0);
    },
    padRight$1$s: function(receiver, a0) {
      return J.getInterceptor$s(receiver).padRight$1(receiver, a0);
    },
    removeAt$1$ax: function(receiver, a0) {
      return J.getInterceptor$ax(receiver).removeAt$1(receiver, a0);
    },
    removeLast$0$ax: function(receiver) {
      return J.getInterceptor$ax(receiver).removeLast$0(receiver);
    },
    replaceAll$2$s: function(receiver, a0, a1) {
      return J.getInterceptor$s(receiver).replaceAll$2(receiver, a0, a1);
    },
    replaceFirst$2$s: function(receiver, a0, a1) {
      return J.getInterceptor$s(receiver).replaceFirst$2(receiver, a0, a1);
    },
    replaceRange$3$asx: function(receiver, a0, a1, a2) {
      return J.getInterceptor$asx(receiver).replaceRange$3(receiver, a0, a1, a2);
    },
    setAll$2$ax: function(receiver, a0, a1) {
      return J.getInterceptor$ax(receiver).setAll$2(receiver, a0, a1);
    },
    setRange$3$ax: function(receiver, a0, a1, a2) {
      return J.getInterceptor$ax(receiver).setRange$3(receiver, a0, a1, a2);
    },
    setRange$4$ax: function(receiver, a0, a1, a2, a3) {
      return J.getInterceptor$ax(receiver).setRange$4(receiver, a0, a1, a2, a3);
    },
    skip$1$ax: function(receiver, a0) {
      return J.getInterceptor$ax(receiver).skip$1(receiver, a0);
    },
    skipWhile$1$ax: function(receiver, a0) {
      return J.getInterceptor$ax(receiver).skipWhile$1(receiver, a0);
    },
    split$1$s: function(receiver, a0) {
      return J.getInterceptor$s(receiver).split$1(receiver, a0);
    },
    startsWith$1$s: function(receiver, a0) {
      return J.getInterceptor$s(receiver).startsWith$1(receiver, a0);
    },
    startsWith$2$s: function(receiver, a0, a1) {
      return J.getInterceptor$s(receiver).startsWith$2(receiver, a0, a1);
    },
    sublist$2$ax: function(receiver, a0, a1) {
      return J.getInterceptor$ax(receiver).sublist$2(receiver, a0, a1);
    },
    substring$1$s: function(receiver, a0) {
      return J.getInterceptor$s(receiver).substring$1(receiver, a0);
    },
    substring$2$s: function(receiver, a0, a1) {
      return J.getInterceptor$s(receiver).substring$2(receiver, a0, a1);
    },
    take$1$ax: function(receiver, a0) {
      return J.getInterceptor$ax(receiver).take$1(receiver, a0);
    },
    toList$0$ax: function(receiver) {
      return J.getInterceptor$ax(receiver).toList$0(receiver);
    },
    toList$1$growable$ax: function(receiver, a0) {
      return J.getInterceptor$ax(receiver).toList$1$growable(receiver, a0);
    },
    toLowerCase$0$s: function(receiver) {
      return J.getInterceptor$s(receiver).toLowerCase$0(receiver);
    },
    toRadixString$1$n: function(receiver, a0) {
      return J.getInterceptor$n(receiver).toRadixString$1(receiver, a0);
    },
    toString$0$: function(receiver) {
      return J.getInterceptor$(receiver).toString$0(receiver);
    },
    toUpperCase$0$s: function(receiver) {
      return J.getInterceptor$s(receiver).toUpperCase$0(receiver);
    },
    trim$0$s: function(receiver) {
      return J.getInterceptor$s(receiver).trim$0(receiver);
    },
    where$1$ax: function(receiver, a0) {
      return J.getInterceptor$ax(receiver).where$1(receiver, a0);
    },
    Interceptor: function Interceptor() {
    },
    JSBool: function JSBool(t0) {
      this.$ti = t0;
    },
    JSNull: function JSNull(t0) {
      this.$ti = t0;
    },
    JSIndexable: function JSIndexable() {
    },
    JSMutableIndexable: function JSMutableIndexable() {
    },
    JSObject: function JSObject() {
    },
    JavaScriptObject: function JavaScriptObject(t0) {
      this.$ti = t0;
    },
    PlainJavaScriptObject: function PlainJavaScriptObject(t0) {
      this.$ti = t0;
    },
    UnknownJavaScriptObject: function UnknownJavaScriptObject(t0) {
      this.$ti = t0;
    },
    JavaScriptFunction: function JavaScriptFunction(t0) {
      this.$ti = t0;
    },
    _Growable: function _Growable() {
    },
    JSArray: function JSArray(t0) {
      this.$ti = t0;
    },
    JSUnmodifiableArray: function JSUnmodifiableArray(t0) {
      this.$ti = t0;
    },
    ArrayIterator: function ArrayIterator(t0, t1, t2) {
      var _ = this;
      _._iterable = t0;
      _._length = t1;
      _._index = 0;
      _._current = null;
      _.$ti = t2;
    },
    JSNumber: function JSNumber(t0) {
      this.$ti = t0;
    },
    JSInt: function JSInt(t0) {
      this.$ti = t0;
    },
    JSDouble: function JSDouble(t0) {
      this.$ti = t0;
    },
    JSString: function JSString(t0) {
      this.$ti = t0;
    }
  },
  P = {_TimerImpl: function _TimerImpl() {
    }, _AsyncAwaitCompleter: function _AsyncAwaitCompleter() {
    }, _AsyncStarStreamController: function _AsyncStarStreamController() {
    }, _IterationMarker: function _IterationMarker() {
    }, _SyncStarIterator: function _SyncStarIterator() {
    }, _SyncStarIterable: function _SyncStarIterable() {
    }, _BroadcastStream: function _BroadcastStream() {
    }, _BroadcastSubscription: function _BroadcastSubscription() {
    }, _BroadcastStreamController: function _BroadcastStreamController() {
    }, _SyncBroadcastStreamController: function _SyncBroadcastStreamController() {
    }, _AsyncBroadcastStreamController: function _AsyncBroadcastStreamController() {
    }, _AsBroadcastStreamController: function _AsBroadcastStreamController() {
    }, DeferredLibrary: function DeferredLibrary() {
    }, DeferredLoadException: function DeferredLoadException() {
    }, FutureOr: function FutureOr() {
    }, Future: function Future() {
    }, TimeoutException: function TimeoutException() {
    }, Completer: function Completer() {
    }, _Completer: function _Completer() {
    }, _AsyncCompleter: function _AsyncCompleter() {
    }, _SyncCompleter: function _SyncCompleter() {
    }, _FutureListener: function _FutureListener() {
    }, _Future: function _Future() {
    }, _AsyncCallbackEntry: function _AsyncCallbackEntry() {
    }, _AsyncRun: function _AsyncRun() {
    }, Stream: function Stream() {
    }, StreamSubscription: function StreamSubscription() {
    }, EventSink: function EventSink() {
    }, StreamView: function StreamView() {
    }, StreamConsumer: function StreamConsumer() {
    }, StreamSink: function StreamSink() {
    }, StreamTransformer: function StreamTransformer() {
    }, StreamTransformerBase: function StreamTransformerBase() {
    }, StreamIterator: function StreamIterator() {
    }, _ControllerEventSinkWrapper: function _ControllerEventSinkWrapper() {
    }, StreamController: function StreamController() {
    }, SynchronousStreamController: function SynchronousStreamController() {
    }, _StreamControllerLifecycle: function _StreamControllerLifecycle() {
    }, _StreamControllerBase: function _StreamControllerBase() {
    }, _StreamController: function _StreamController() {
    }, _SyncStreamControllerDispatch: function _SyncStreamControllerDispatch() {
    }, _AsyncStreamControllerDispatch: function _AsyncStreamControllerDispatch() {
    }, _AsyncStreamController: function _AsyncStreamController() {
    }, _SyncStreamController: function _SyncStreamController() {
    }, _ControllerStream: function _ControllerStream() {
    }, _ControllerSubscription: function _ControllerSubscription() {
    }, _StreamSinkWrapper: function _StreamSinkWrapper() {
    }, _AddStreamState: function _AddStreamState() {
    }, _StreamControllerAddStreamState: function _StreamControllerAddStreamState() {
    }, _EventSink: function _EventSink() {
    }, _EventDispatch: function _EventDispatch() {
    }, _BufferingStreamSubscription: function _BufferingStreamSubscription() {
    }, _StreamImpl: function _StreamImpl() {
    }, _GeneratedStreamImpl: function _GeneratedStreamImpl() {
    }, _IterablePendingEvents: function _IterablePendingEvents() {
    }, _DelayedEvent: function _DelayedEvent() {
    }, _DelayedData: function _DelayedData() {
    }, _DelayedError: function _DelayedError() {
    }, _DelayedDone: function _DelayedDone() {
    }, _PendingEvents: function _PendingEvents() {
    }, _StreamImplEvents: function _StreamImplEvents() {
    }, _DoneStreamSubscription: function _DoneStreamSubscription() {
    }, _AsBroadcastStream: function _AsBroadcastStream() {
    }, _BroadcastSubscriptionWrapper: function _BroadcastSubscriptionWrapper() {
    }, _StreamIterator: function _StreamIterator() {
    }, _EmptyStream: function _EmptyStream() {
    }, _ForwardingStream: function _ForwardingStream() {
    }, _ForwardingStreamSubscription: function _ForwardingStreamSubscription() {
    }, _WhereStream: function _WhereStream() {
    }, _MapStream: function _MapStream() {
    }, _ExpandStream: function _ExpandStream() {
    }, _HandleErrorStream: function _HandleErrorStream() {
    }, _TakeStream: function _TakeStream() {
    }, _StateStreamSubscription: function _StateStreamSubscription() {
    }, _TakeWhileStream: function _TakeWhileStream() {
    }, _SkipStream: function _SkipStream() {
    }, _SkipWhileStream: function _SkipWhileStream() {
    }, _DistinctStream: function _DistinctStream() {
    }, _EventSinkWrapper: function _EventSinkWrapper() {
    }, _SinkTransformerStreamSubscription: function _SinkTransformerStreamSubscription() {
    }, _StreamSinkTransformer: function _StreamSinkTransformer() {
    }, _BoundSinkStream: function _BoundSinkStream() {
    }, _HandlerEventSink: function _HandlerEventSink() {
    }, _StreamHandlerTransformer: function _StreamHandlerTransformer() {
    }, _StreamBindTransformer: function _StreamBindTransformer() {
    }, _StreamSubscriptionTransformer: function _StreamSubscriptionTransformer() {
    }, _BoundSubscriptionStream: function _BoundSubscriptionStream() {
    }, Timer: function Timer() {
    }, AsyncError: function AsyncError() {
    }, _ZoneFunction: function _ZoneFunction() {
    }, ZoneSpecification: function ZoneSpecification() {
    }, _ZoneSpecification: function _ZoneSpecification() {
    }, ZoneDelegate: function ZoneDelegate() {
    }, Zone: function Zone() {
    }, _ZoneDelegate: function _ZoneDelegate() {
    }, _Zone: function _Zone() {
    }, _CustomZone: function _CustomZone() {
    }, _RootZone: function _RootZone() {
    },
    LinkedHashMap_LinkedHashMap$_literal: function(keyValuePairs, $K, $V) {
      return H.assertSubtype(H.fillLiteralMap(H.listTypeCheck(keyValuePairs), H.JsLinkedHashMap_JsLinkedHashMap$es6($K, $V)), "$isLinkedHashMap", [$K, $V], "$asLinkedHashMap");
    },
    LinkedHashMap_LinkedHashMap$_empty: function($K, $V) {
      return H.JsLinkedHashMap_JsLinkedHashMap$es6($K, $V);
    },
    IterableBase_iterableToShortString: function(iterable, leftDelimiter, rightDelimiter) {
      var parts, t1;
      H.listSuperNativeTypeCheck(iterable, "$isIterable");
      H.stringTypeCheck(leftDelimiter);
      H.stringTypeCheck(rightDelimiter);
      if (P._isToStringVisiting(iterable)) {
        if (leftDelimiter === "(" && rightDelimiter === ")")
          return "(...)";
        return H.S(leftDelimiter) + "..." + H.S(rightDelimiter);
      }
      parts = H.setRuntimeTypeInfo([], [P.String]);
      t1 = J.getInterceptor$ax($._toStringVisiting);
      t1.add$1($._toStringVisiting, iterable);
      try {
        P._iterablePartsToStrings(iterable, parts);
      } finally {
        t1.removeLast$0($._toStringVisiting);
      }
      t1 = P.StringBuffer$(leftDelimiter);
      t1.writeAll$2(parts, ", ");
      t1.write$1(rightDelimiter);
      return t1.toString$0(0);
    },
    IterableBase_iterableToFullString: function(iterable, leftDelimiter, rightDelimiter) {
      var buffer, t1;
      H.listSuperNativeTypeCheck(iterable, "$isIterable");
      H.stringTypeCheck(leftDelimiter);
      H.stringTypeCheck(rightDelimiter);
      if (P._isToStringVisiting(iterable))
        return H.S(leftDelimiter) + "..." + H.S(rightDelimiter);
      buffer = P.StringBuffer$(leftDelimiter);
      t1 = J.getInterceptor$ax($._toStringVisiting);
      t1.add$1($._toStringVisiting, iterable);
      try {
        buffer.writeAll$2(iterable, ", ");
      } finally {
        t1.removeLast$0($._toStringVisiting);
      }
      buffer.write$1(rightDelimiter);
      return J.toString$0$(buffer);
    },
    _isToStringVisiting: function(o) {
      var t2,
        t1 = J.getInterceptor$asx($._toStringVisiting),
        i = 0;
      while (true) {
        t2 = t1.get$length($._toStringVisiting);
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (!(i < t2))
          break;
        t2 = t1.$index($._toStringVisiting, i);
        if (o == null ? t2 == null : o === t2)
          return true;
        ++i;
      }
      return false;
    },
    _iterablePartsToStrings: function(iterable, parts) {
      var it, t1, $length, count, next, ultimateString, penultimateString, penultimate, ultimate, ultimate0, t2, elision;
      H.listSuperNativeTypeCheck(iterable, "$isIterable");
      H.assertSubtype(parts, "$isList", [P.String], "$asList");
      it = J.get$iterator$ax(iterable);
      t1 = J.getInterceptor$asx(parts);
      $length = 0;
      count = 0;
      while (true) {
        if (!($length < 80 || count < 3))
          break;
        if (!it.moveNext$0())
          return;
        next = H.S(it.get$current());
        t1.add$1(parts, next);
        $length += next.length + 2;
        ++count;
      }
      if (!it.moveNext$0()) {
        if (count <= 5)
          return;
        ultimateString = t1.removeLast$0(parts);
        penultimateString = t1.removeLast$0(parts);
      } else {
        penultimate = it.get$current();
        ++count;
        if (!it.moveNext$0()) {
          if (count <= 4) {
            t1.add$1(parts, H.S(penultimate));
            return;
          }
          ultimateString = H.S(penultimate);
          penultimateString = t1.removeLast$0(parts);
          $length += ultimateString.length + 2;
        } else {
          ultimate = it.get$current();
          ++count;
          for (; it.moveNext$0(); penultimate = ultimate, ultimate = ultimate0) {
            ultimate0 = it.get$current();
            ++count;
            if (count > 100) {
              while (true) {
                if (!($length > 75 && count > 3))
                  break;
                t2 = J.$add$ansx(J.get$length$asx(t1.removeLast$0(parts)), 2);
                if (typeof t2 !== "number")
                  return H.iae(t2);
                $length -= t2;
                --count;
              }
              t1.add$1(parts, "...");
              return;
            }
          }
          penultimateString = H.S(penultimate);
          ultimateString = H.S(ultimate);
          $length += ultimateString.length + penultimateString.length + 4;
        }
      }
      t2 = J.$add$ansx(t1.get$length(parts), 2);
      if (typeof t2 !== "number")
        return H.iae(t2);
      if (count > t2) {
        $length += 5;
        elision = "...";
      } else
        elision = null;
      while (true) {
        if (!($length > 80 && J.$gt$n(t1.get$length(parts), 3)))
          break;
        t2 = J.$add$ansx(J.get$length$asx(t1.removeLast$0(parts)), 2);
        if (typeof t2 !== "number")
          return H.iae(t2);
        $length -= t2;
        if (elision == null) {
          $length += 5;
          elision = "...";
        }
      }
      if (elision != null)
        t1.add$1(parts, elision);
      t1.add$1(parts, penultimateString);
      t1.add$1(parts, ultimateString);
    },
    ListBase_listToString: function(list) {
      return P.IterableBase_iterableToFullString(H.listTypeCheck(list), "[", "]");
    },
    MapBase_mapToString: function(m) {
      var result, t1 = {};
      H.interceptedTypeCheck(m, "$isMap");
      if (P._isToStringVisiting(m))
        return "{...}";
      result = P.StringBuffer$("");
      try {
        J.add$1$ax($._toStringVisiting, m);
        result.write$1("{");
        t1.first = true;
        J.forEach$1$ax(m, new P.MapBase_mapToString_closure(t1, result));
        result.write$1("}");
      } finally {
        J.removeLast$0$ax($._toStringVisiting);
      }
      return J.toString$0$(result);
    },
    _MapBaseValueIterable$: function(_map, $K, $V) {
      return new P._MapBaseValueIterable(_map, [$K, $V]);
    },
    _MapBaseValueIterator$: function(map, $K, $V) {
      return new P._MapBaseValueIterator(J.get$iterator$ax(map.get$keys()), map, [$K, $V]);
    },
    _HashMap: function _HashMap() {
    },
    _IdentityHashMap: function _IdentityHashMap() {
    },
    _CustomHashMap: function _CustomHashMap() {
    },
    _HashMapKeyIterable: function _HashMapKeyIterable() {
    },
    _HashMapKeyIterator: function _HashMapKeyIterator() {
    },
    _LinkedIdentityHashMap: function _LinkedIdentityHashMap() {
    },
    _Es6LinkedIdentityHashMap: function _Es6LinkedIdentityHashMap() {
    },
    _Es6MapIterable: function _Es6MapIterable() {
    },
    _Es6MapIterator: function _Es6MapIterator() {
    },
    _LinkedCustomHashMap: function _LinkedCustomHashMap() {
    },
    _HashSet: function _HashSet() {
    },
    _IdentityHashSet: function _IdentityHashSet() {
    },
    _CustomHashSet: function _CustomHashSet() {
    },
    _HashSetIterator: function _HashSetIterator() {
    },
    _LinkedHashSet: function _LinkedHashSet() {
    },
    _LinkedIdentityHashSet: function _LinkedIdentityHashSet() {
    },
    _LinkedCustomHashSet: function _LinkedCustomHashSet() {
    },
    _LinkedHashSetCell: function _LinkedHashSetCell() {
    },
    _LinkedHashSetIterator: function _LinkedHashSetIterator() {
    },
    UnmodifiableListView: function UnmodifiableListView() {
    },
    HashMap: function HashMap() {
    },
    HashSet: function HashSet() {
    },
    IterableMixin: function IterableMixin() {
    },
    IterableBase: function IterableBase() {
    },
    HasNextIterator: function HasNextIterator() {
    },
    LinkedHashMap: function LinkedHashMap() {
    },
    LinkedHashSet: function LinkedHashSet() {
    },
    LinkedList0: function LinkedList0() {
    },
    _LinkedListIterator0: function _LinkedListIterator0() {
    },
    LinkedListEntry: function LinkedListEntry() {
    },
    ListBase: function ListBase() {
    },
    ListMixin: function ListMixin() {
    },
    MapBase: function MapBase() {
    },
    MapBase_mapToString_closure: function MapBase_mapToString_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.result = t1;
      this.$ti = t2;
    },
    MapMixin: function MapMixin() {
    },
    UnmodifiableMapBase: function UnmodifiableMapBase() {
    },
    _MapBaseValueIterable: function _MapBaseValueIterable(t0, t1) {
      this._collection$_map = t0;
      this.$ti = t1;
    },
    _MapBaseValueIterator: function _MapBaseValueIterator(t0, t1, t2) {
      var _ = this;
      _._keys = t0;
      _._collection$_map = t1;
      _._collection$_current = null;
      _.$ti = t2;
    },
    _UnmodifiableMapMixin: function _UnmodifiableMapMixin() {
    },
    MapView: function MapView() {
    },
    UnmodifiableMapView: function UnmodifiableMapView() {
    },
    Queue: function Queue() {
    },
    _DoubleLink: function _DoubleLink() {
    },
    DoubleLinkedQueueEntry: function DoubleLinkedQueueEntry() {
    },
    _DoubleLinkedQueueEntry: function _DoubleLinkedQueueEntry() {
    },
    _DoubleLinkedQueueElement: function _DoubleLinkedQueueElement() {
    },
    _DoubleLinkedQueueSentinel: function _DoubleLinkedQueueSentinel() {
    },
    DoubleLinkedQueue: function DoubleLinkedQueue() {
    },
    _DoubleLinkedQueueIterator: function _DoubleLinkedQueueIterator() {
    },
    ListQueue: function ListQueue() {
    },
    _ListQueueIterator: function _ListQueueIterator() {
    },
    SetMixin: function SetMixin() {
    },
    SetBase: function SetBase() {
    },
    _SetBase: function _SetBase() {
    },
    _UnmodifiableSet: function _UnmodifiableSet() {
    },
    _SplayTreeNode: function _SplayTreeNode() {
    },
    _SplayTreeMapNode: function _SplayTreeMapNode() {
    },
    _SplayTree: function _SplayTree() {
    },
    _TypeTest: function _TypeTest() {
    },
    SplayTreeMap: function SplayTreeMap() {
    },
    _SplayTreeIterator: function _SplayTreeIterator() {
    },
    _SplayTreeKeyIterable: function _SplayTreeKeyIterable() {
    },
    _SplayTreeValueIterable: function _SplayTreeValueIterable() {
    },
    _SplayTreeKeyIterator: function _SplayTreeKeyIterator() {
    },
    _SplayTreeValueIterator: function _SplayTreeValueIterator() {
    },
    _SplayTreeNodeIterator: function _SplayTreeNodeIterator() {
    },
    SplayTreeSet: function SplayTreeSet() {
    },
    _ListBase_Object_ListMixin: function _ListBase_Object_ListMixin() {
    },
    _SetBase_Object_SetMixin: function _SetBase_Object_SetMixin() {
    },
    _SplayTreeMap__SplayTree_MapMixin: function _SplayTreeMap__SplayTree_MapMixin() {
    },
    _SplayTreeSet__SplayTree_IterableMixin: function _SplayTreeSet__SplayTree_IterableMixin() {
    },
    _SplayTreeSet__SplayTree_IterableMixin_SetMixin: function _SplayTreeSet__SplayTree_IterableMixin_SetMixin() {
    },
    _UnmodifiableMapView_MapView__UnmodifiableMapMixin: function _UnmodifiableMapView_MapView__UnmodifiableMapMixin() {
    },
    _parseJson: function(source, reviver) {
      var parsed, e, t1, exception;
      H.stringTypeCheck(source);
      H.functionTypeCheck(reviver, {func: 1, args: [,,]});
      t1 = source;
      if (typeof t1 !== "string")
        throw H.wrapException(H.argumentErrorValue(source));
      parsed = null;
      try {
        parsed = JSON.parse(source);
      } catch (exception) {
        e = H.unwrapException(exception);
        t1 = P.FormatException$(String(e), null, null);
        throw H.wrapException(t1);
      }
      if (reviver == null)
        return P._convertJsonToDartLazy(parsed);
      else
        return P._convertJsonToDart(parsed, reviver);
    },
    _convertJsonToDart: function(json, reviver) {
      H.functionTypeCheck(reviver, {func: 1, args: [,,]});
      return reviver.call$2(null, new P._convertJsonToDart_walk(reviver).call$1(json));
    },
    _convertJsonToDartLazy: function(object) {
      var i;
      if (object == null)
        return;
      if (typeof object != "object")
        return object;
      if (Object.getPrototypeOf(object) !== Array.prototype)
        return P._JsonMap$(object);
      for (i = 0; i < object.length; ++i)
        object[i] = P._convertJsonToDartLazy(object[i]);
      return object;
    },
    _JsonMap$: function(_original) {
      return new P._JsonMap(_original, P._JsonMap__newJavaScriptObject(), []);
    },
    _JsonMap__hasProperty: function(object, key) {
      return Object.prototype.hasOwnProperty.call(object, H.stringTypeCheck(key));
    },
    _JsonMap__getProperty: function(object, key) {
      return object[H.stringTypeCheck(key)];
    },
    _JsonMap__setProperty: function(object, key, value) {
      return object[H.stringTypeCheck(key)] = value;
    },
    _JsonMap__getPropertyNames: function(object) {
      return Object.keys(object);
    },
    _JsonMap__isUnprocessed: function(object) {
      return typeof object == "undefined";
    },
    _JsonMap__newJavaScriptObject: function() {
      return Object.create(null);
    },
    _JsonMapKeyIterable$: function(_parent) {
      return new P._JsonMapKeyIterable(_parent, []);
    },
    Utf8Decoder__convertIntercepted: function(allowMalformed, codeUnits, start, end) {
      H.boolTypeCheck(allowMalformed);
      H.assertSubtype(codeUnits, "$isList", [P.int], "$asList");
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      if (codeUnits instanceof Uint8Array)
        return P.Utf8Decoder__convertInterceptedUint8List(allowMalformed, codeUnits, start, end);
      return;
    },
    Utf8Decoder__convertInterceptedUint8List: function(allowMalformed, codeUnits, start, end) {
      var decoder, t1, $length;
      H.boolTypeCheck(allowMalformed);
      H.interceptedTypeCheck(codeUnits, "$isNativeUint8List");
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      if (allowMalformed)
        return;
      decoder = $.$get$Utf8Decoder__decoder();
      if (decoder == null)
        return;
      t1 = 0 === start;
      if (t1 && end == null)
        return P.Utf8Decoder__useTextDecoderChecked(decoder, codeUnits);
      $length = codeUnits.length;
      end = P.RangeError_checkValidRange(start, end, $length);
      if (t1 && end === $length)
        return P.Utf8Decoder__useTextDecoderChecked(decoder, codeUnits);
      return P.Utf8Decoder__useTextDecoderChecked(decoder, codeUnits.subarray(start, end));
    },
    Utf8Decoder__useTextDecoderChecked: function(decoder, codeUnits) {
      H.interceptedTypeCheck(codeUnits, "$isNativeUint8List");
      if (P.Utf8Decoder__unsafe(codeUnits))
        return;
      return P.Utf8Decoder__useTextDecoderUnchecked(decoder, codeUnits);
    },
    Utf8Decoder__useTextDecoderUnchecked: function(decoder, codeUnits) {
      var t1, exception;
      H.interceptedTypeCheck(codeUnits, "$isNativeUint8List");
      try {
        t1 = decoder.decode(codeUnits);
        return t1;
      } catch (exception) {
        H.unwrapException(exception);
      }
      return;
    },
    Utf8Decoder__unsafe: function(codeUnits) {
      var limit, i;
      H.interceptedTypeCheck(codeUnits, "$isNativeUint8List");
      limit = codeUnits.length - 2;
      for (i = 0; i < limit; ++i)
        if (codeUnits[i] === 237)
          if ((codeUnits[i + 1] & 224) === 160)
            return true;
      return false;
    },
    Utf8Decoder__makeDecoder: function() {
      var t1, exception;
      try {
        t1 = new TextDecoder("utf-8", {fatal: true});
        return t1;
      } catch (exception) {
        H.unwrapException(exception);
      }
      return;
    },
    _scanOneByteCharacters: function(units, from, endIndex) {
      var t1, i, unit;
      H.assertSubtype(units, "$isList", [P.int], "$asList");
      H.intTypeCheck(from);
      H.intTypeCheck(endIndex);
      t1 = J.getInterceptor$asx(units);
      i = from;
      while (true) {
        if (typeof i !== "number")
          return i.$lt();
        if (typeof endIndex !== "number")
          return H.iae(endIndex);
        if (!(i < endIndex))
          break;
        unit = t1.$index(units, i);
        if (typeof unit !== "number")
          return unit.$and();
        if ((unit & 127) !== unit) {
          if (typeof from !== "number")
            return H.iae(from);
          return i - from;
        }
        ++i;
      }
      if (typeof from !== "number")
        return H.iae(from);
      return endIndex - from;
    },
    Base64Codec__checkPadding: function(source, sourceIndex, sourceEnd, firstPadding, paddingCount, $length) {
      H.stringTypeCheck(source);
      H.intTypeCheck(sourceIndex);
      H.intTypeCheck(sourceEnd);
      H.intTypeCheck(firstPadding);
      H.intTypeCheck(paddingCount);
      H.intTypeCheck($length);
      if (typeof $length !== "number")
        return $length.$mod();
      if (C.JSInt_methods.$mod($length, 4) !== 0)
        throw H.wrapException(P.FormatException$("Invalid base64 padding, padded length must be multiple of four, is " + $length, source, sourceEnd));
      if (typeof firstPadding !== "number")
        return firstPadding.$add();
      if (typeof paddingCount !== "number")
        return H.iae(paddingCount);
      if (firstPadding + paddingCount !== $length)
        throw H.wrapException(P.FormatException$("Invalid base64 padding, '=' not at the end", source, sourceIndex));
      if (paddingCount > 2)
        throw H.wrapException(P.FormatException$("Invalid base64 padding, more than two '=' characters", source, sourceIndex));
    },
    _Base64Encoder$: function(urlSafe) {
      var t1 = urlSafe ? "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_" : "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
      return new P._Base64Encoder(t1, []);
    },
    _Base64Encoder__encodeState: function(count, bits) {
      H.intTypeCheck(count);
      H.intTypeCheck(bits);
      if (typeof bits !== "number")
        return bits.$shl();
      if (typeof count !== "number")
        return H.iae(count);
      return (bits << 2 | count) >>> 0;
    },
    _Base64Encoder__stateBits: function(state) {
      H.intTypeCheck(state);
      if (typeof state !== "number")
        return state.$shr();
      return C.JSInt_methods._shrOtherPositive$1(state, 2);
    },
    _Base64Encoder__stateCount: function(state) {
      H.intTypeCheck(state);
      if (typeof state !== "number")
        return state.$and();
      return state & 3;
    },
    _Base64Encoder_encodeChunk: function(alphabet, bytes, start, end, isLast, output, outputIndex, state) {
      var bits, t1, expectedChars, t2, t3, i, byteOr, byte, outputIndex0;
      H.stringTypeCheck(alphabet);
      H.assertSubtype(bytes, "$isList", [P.int], "$asList");
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      H.boolTypeCheck(isLast);
      H.interceptedTypeCheck(output, "$isUint8List");
      H.intTypeCheck(outputIndex);
      H.intTypeCheck(state);
      bits = P._Base64Encoder__stateBits(state);
      t1 = P._Base64Encoder__stateCount(state);
      if (typeof t1 !== "number")
        return H.iae(t1);
      expectedChars = 3 - t1;
      t1 = J.getInterceptor$asx(bytes);
      t2 = J.getInterceptor$s(alphabet);
      t3 = output && C.NativeUint8List_methods;
      i = start;
      byteOr = 0;
      while (true) {
        if (typeof i !== "number")
          return i.$lt();
        if (typeof end !== "number")
          return H.iae(end);
        if (!(i < end))
          break;
        byte = t1.$index(bytes, i);
        if (typeof byte !== "number")
          return H.iae(byte);
        byteOr = (byteOr | byte) >>> 0;
        if (typeof bits !== "number")
          return bits.$shl();
        bits = (bits << 8 | byte) & 16777215;
        --expectedChars;
        if (expectedChars === 0) {
          if (typeof outputIndex !== "number")
            return outputIndex.$add();
          outputIndex0 = outputIndex + 1;
          t3.$indexSet(output, outputIndex, t2._codeUnitAt$1(alphabet, bits >>> 18 & 63));
          outputIndex = outputIndex0 + 1;
          C.NativeUint8List_methods.$indexSet(output, outputIndex0, C.JSString_methods._codeUnitAt$1(alphabet, bits >>> 12 & 63));
          outputIndex0 = outputIndex + 1;
          C.NativeUint8List_methods.$indexSet(output, outputIndex, C.JSString_methods._codeUnitAt$1(alphabet, bits >>> 6 & 63));
          outputIndex = outputIndex0 + 1;
          C.NativeUint8List_methods.$indexSet(output, outputIndex0, C.JSString_methods._codeUnitAt$1(alphabet, bits & 63));
          bits = 0;
          expectedChars = 3;
        }
        ++i;
      }
      if (byteOr >= 0 && byteOr <= 255) {
        if (isLast && expectedChars < 3) {
          P._Base64Encoder_writeFinalChunk(alphabet, output, outputIndex, 3 - expectedChars, bits);
          return 0;
        }
        return P._Base64Encoder__encodeState(3 - expectedChars, bits);
      }
      i = start;
      while (true) {
        if (typeof i !== "number")
          return i.$lt();
        if (!(i < end))
          break;
        byte = t1.$index(bytes, i);
        if (typeof byte !== "number")
          return byte.$lt();
        if (byte < 0 || byte > 255)
          break;
        ++i;
      }
      throw H.wrapException(P.ArgumentError$value(bytes, "Not a byte value at index " + i + ": 0x" + H.S(J.toRadixString$1$n(t1.$index(bytes, i), 16)), null));
    },
    _Base64Encoder_writeFinalChunk: function(alphabet, output, outputIndex, count, bits) {
      var t1, t2, outputIndex0;
      H.stringTypeCheck(alphabet);
      H.interceptedTypeCheck(output, "$isUint8List");
      H.intTypeCheck(outputIndex);
      H.intTypeCheck(count);
      H.intTypeCheck(bits);
      t1 = J.getInterceptor$s(alphabet);
      t2 = output && C.NativeUint8List_methods;
      if (count === 1) {
        if (typeof outputIndex !== "number")
          return outputIndex.$add();
        outputIndex0 = outputIndex + 1;
        if (typeof bits !== "number")
          return bits.$shr();
        t2.$indexSet(output, outputIndex, t1._codeUnitAt$1(alphabet, C.JSInt_methods._shrOtherPositive$1(bits, 2) & 63));
        outputIndex = outputIndex0 + 1;
        C.NativeUint8List_methods.$indexSet(output, outputIndex0, C.JSString_methods._codeUnitAt$1(alphabet, bits << 4 & 63));
        outputIndex0 = outputIndex + 1;
        t1 = output.length;
        if (outputIndex < 0 || outputIndex >= t1)
          return H.ioore(output, outputIndex);
        output[outputIndex] = 61;
        if (outputIndex0 < 0 || outputIndex0 >= t1)
          return H.ioore(output, outputIndex0);
        output[outputIndex0] = 61;
      } else {
        if (typeof outputIndex !== "number")
          return outputIndex.$add();
        outputIndex0 = outputIndex + 1;
        if (typeof bits !== "number")
          return bits.$shr();
        t2.$indexSet(output, outputIndex, t1._codeUnitAt$1(alphabet, C.JSInt_methods._shrOtherPositive$1(bits, 10) & 63));
        outputIndex = outputIndex0 + 1;
        C.NativeUint8List_methods.$indexSet(output, outputIndex0, C.JSString_methods._codeUnitAt$1(alphabet, C.JSInt_methods._shrOtherPositive$1(bits, 4) & 63));
        outputIndex0 = outputIndex + 1;
        C.NativeUint8List_methods.$indexSet(output, outputIndex, C.JSString_methods._codeUnitAt$1(alphabet, bits << 2 & 63));
        if (outputIndex0 < 0 || outputIndex0 >= output.length)
          return H.ioore(output, outputIndex0);
        output[outputIndex0] = 61;
      }
    },
    _Base64Decoder$: function() {
      return new P._Base64Decoder([]);
    },
    _Base64Decoder__encodeCharacterState: function(count, bits) {
      H.intTypeCheck(count);
      H.intTypeCheck(bits);
      if (typeof bits !== "number")
        return bits.$shl();
      if (typeof count !== "number")
        return H.iae(count);
      return (bits << 2 | count) >>> 0;
    },
    _Base64Decoder__stateCount: function(state) {
      H.intTypeCheck(state);
      if (typeof state !== "number")
        return state.$and();
      return state & 3;
    },
    _Base64Decoder__stateBits: function(state) {
      H.intTypeCheck(state);
      if (typeof state !== "number")
        return state.$shr();
      return C.JSInt_methods._shrOtherPositive$1(state, 2);
    },
    _Base64Decoder__encodePaddingState: function(expectedPadding) {
      H.intTypeCheck(expectedPadding);
      if (typeof expectedPadding !== "number")
        return expectedPadding.$negate();
      return -expectedPadding - 1;
    },
    _Base64Decoder__statePadding: function(state) {
      H.intTypeCheck(state);
      if (typeof state !== "number")
        return state.$negate();
      return -state - 1;
    },
    _Base64Decoder__hasSeenPadding: function(state) {
      H.intTypeCheck(state);
      if (typeof state !== "number")
        return state.$lt();
      return state < 0;
    },
    _Base64Decoder_decodeChunk: function(input, start, end, output, outIndex, state) {
      var bits, count, t1, i, charOr, char, code, outIndex0, t2, expectedPadding,
        _s31_ = "Invalid encoding before padding",
        _s17_ = "Invalid character";
      H.stringTypeCheck(input);
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      H.interceptedTypeCheck(output, "$isUint8List");
      H.intTypeCheck(outIndex);
      H.intTypeCheck(state);
      bits = P._Base64Decoder__stateBits(state);
      count = P._Base64Decoder__stateCount(state);
      t1 = J.getInterceptor$s(input);
      i = start;
      charOr = 0;
      while (true) {
        if (typeof i !== "number")
          return i.$lt();
        if (typeof end !== "number")
          return H.iae(end);
        if (!(i < end))
          break;
        c$0: {
          char = t1.codeUnitAt$1(input, i);
          if (typeof char !== "number")
            return H.iae(char);
          charOr = (charOr | char) >>> 0;
          code = J.$index$asx($.$get$_Base64Decoder__inverseAlphabet(), char & 127);
          if (typeof code !== "number")
            return code.$ge();
          if (code >= 0) {
            if (typeof bits !== "number")
              return bits.$shl();
            bits = (bits << 6 | code) & 16777215;
            if (typeof count !== "number")
              return count.$add();
            count = count + 1 & 3;
            if (count === 0) {
              if (typeof outIndex !== "number")
                return outIndex.$add();
              outIndex0 = outIndex + 1;
              t2 = output.length;
              if (outIndex < 0 || outIndex >= t2)
                return H.ioore(output, outIndex);
              output[outIndex] = bits >>> 16 & 255;
              outIndex = outIndex0 + 1;
              if (outIndex0 < 0 || outIndex0 >= t2)
                return H.ioore(output, outIndex0);
              output[outIndex0] = bits >>> 8 & 255;
              outIndex0 = outIndex + 1;
              if (outIndex < 0 || outIndex >= t2)
                return H.ioore(output, outIndex);
              output[outIndex] = bits & 255;
              outIndex = outIndex0;
              bits = 0;
            }
            break c$0;
          } else {
            if (code === -1) {
              if (typeof count !== "number")
                return count.$gt();
              t2 = count > 1;
            } else
              t2 = false;
            if (t2) {
              if (charOr > 127)
                break;
              if (count === 3) {
                if (typeof bits !== "number")
                  return bits.$and();
                if ((bits & 3) !== 0)
                  throw H.wrapException(P.FormatException$(_s31_, input, i));
                if (typeof outIndex !== "number")
                  return outIndex.$add();
                outIndex0 = outIndex + 1;
                t1 = C.JSInt_methods._shrOtherPositive$1(bits, 10);
                t2 = output.length;
                if (outIndex < 0 || outIndex >= t2)
                  return H.ioore(output, outIndex);
                output[outIndex] = t1;
                t1 = C.JSInt_methods._shrOtherPositive$1(bits, 2);
                if (outIndex0 < 0 || outIndex0 >= t2)
                  return H.ioore(output, outIndex0);
                output[outIndex0] = t1;
              } else {
                if (typeof bits !== "number")
                  return bits.$and();
                if ((bits & 15) !== 0)
                  throw H.wrapException(P.FormatException$(_s31_, input, i));
                if (typeof outIndex !== "number")
                  return outIndex.$add();
                t1 = C.JSInt_methods._shrOtherPositive$1(bits, 4);
                if (outIndex < 0 || outIndex >= output.length)
                  return H.ioore(output, outIndex);
                output[outIndex] = t1;
              }
              if (typeof count !== "number")
                return H.iae(count);
              expectedPadding = (3 - count) * 3;
              return P._Base64Decoder__checkPadding(input, i + 1, end, P._Base64Decoder__encodePaddingState(char === 37 ? expectedPadding + 2 : expectedPadding));
            }
          }
          throw H.wrapException(P.FormatException$(_s17_, input, i));
        }
        ++i;
      }
      if (charOr >= 0 && charOr <= 127)
        return P._Base64Decoder__encodeCharacterState(count, bits);
      i = start;
      while (true) {
        if (typeof i !== "number")
          return i.$lt();
        if (!(i < end))
          break;
        char = t1.codeUnitAt$1(input, i);
        if (typeof char !== "number")
          return char.$lt();
        if (char < 0 || char > 127)
          break;
        ++i;
      }
      throw H.wrapException(P.FormatException$(_s17_, input, i));
    },
    _Base64Decoder__allocateBuffer: function(input, start, end, state) {
      var paddingStart, t1, $length, bufferLength, remainderLength;
      H.stringTypeCheck(input);
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      H.intTypeCheck(state);
      paddingStart = P._Base64Decoder__trimPaddingChars(input, start, end);
      t1 = P._Base64Decoder__stateCount(state);
      if (typeof paddingStart !== "number")
        return paddingStart.$sub();
      if (typeof start !== "number")
        return H.iae(start);
      $length = J.$add$ansx(t1, paddingStart - start);
      if (typeof $length !== "number")
        return $length.$shr();
      bufferLength = C.JSInt_methods._shrOtherPositive$1($length, 2) * 3;
      remainderLength = $length & 3;
      if (remainderLength !== 0) {
        if (typeof end !== "number")
          return H.iae(end);
        t1 = paddingStart < end;
      } else
        t1 = false;
      if (t1)
        bufferLength += remainderLength - 1;
      if (bufferLength > 0)
        return H.NativeUint8List_NativeUint8List(bufferLength);
      return;
    },
    _Base64Decoder__trimPaddingChars: function(input, start, end) {
      var t1, newEnd, index, padding, char;
      H.stringTypeCheck(input);
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      t1 = J.getInterceptor$s(input);
      newEnd = end;
      index = newEnd;
      padding = 0;
      while (true) {
        if (typeof index !== "number")
          return index.$gt();
        if (typeof start !== "number")
          return H.iae(start);
        if (!(index > start && padding < 2))
          break;
        c$0: {
          --index;
          char = t1.codeUnitAt$1(input, index);
          if (char === 61) {
            ++padding;
            newEnd = index;
            break c$0;
          }
          if (typeof char !== "number")
            return char.$or();
          if ((char | 32) >>> 0 === 100) {
            if (index === start)
              break;
            --index;
            char = C.JSString_methods.codeUnitAt$1(input, index);
          }
          if (char === 51) {
            if (index === start)
              break;
            --index;
            char = C.JSString_methods.codeUnitAt$1(input, index);
          }
          if (char === 37) {
            ++padding;
            newEnd = index;
            break c$0;
          }
          break;
        }
      }
      return newEnd;
    },
    _Base64Decoder__checkPadding: function(input, start, end, state) {
      var expectedPadding, t1, char;
      H.stringTypeCheck(input);
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      H.intTypeCheck(state);
      if (start == end)
        return state;
      expectedPadding = P._Base64Decoder__statePadding(state);
      t1 = J.getInterceptor$s(input);
      while (true) {
        if (typeof expectedPadding !== "number")
          return expectedPadding.$gt();
        if (!(expectedPadding > 0))
          break;
        char = t1.codeUnitAt$1(input, start);
        if (expectedPadding === 3) {
          if (char === 61) {
            expectedPadding -= 3;
            if (typeof start !== "number")
              return start.$add();
            ++start;
            break;
          }
          if (char === 37) {
            --expectedPadding;
            if (typeof start !== "number")
              return start.$add();
            ++start;
            if (start === end)
              break;
            char = C.JSString_methods.codeUnitAt$1(input, start);
          } else
            break;
        }
        if ((expectedPadding > 3 ? expectedPadding - 3 : expectedPadding) === 2) {
          if (char !== 51)
            break;
          if (typeof start !== "number")
            return start.$add();
          ++start;
          --expectedPadding;
          if (start === end)
            break;
          char = C.JSString_methods.codeUnitAt$1(input, start);
        }
        if (typeof char !== "number")
          return char.$or();
        if ((char | 32) >>> 0 !== 100)
          break;
        if (typeof start !== "number")
          return start.$add();
        ++start;
        --expectedPadding;
        if (start === end)
          break;
      }
      if (start != end)
        throw H.wrapException(P.FormatException$("Invalid padding character", input, start));
      return P._Base64Decoder__encodePaddingState(expectedPadding);
    },
    _FusedCodec$: function(_first, _second, $S, $M, $T) {
      return new P._FusedCodec(_first, _second, [$S, $M, $T]);
    },
    _FusedConverter$: function(_first, _second, $S, $M, $T) {
      return new P._FusedConverter(_first, _second, [$S, $M, $T]);
    },
    Encoding_getByName: function($name) {
      H.stringTypeCheck($name);
      if ($name == null)
        return;
      return J.$index$asx($.Encoding__nameToEncoding, C.JSString_methods.toLowerCase$0($name));
    },
    JsonUnsupportedObjectError$: function(unsupportedObject, cause, partialResult) {
      return new P.JsonUnsupportedObjectError(unsupportedObject, cause, []);
    },
    JsonCyclicError$: function(object) {
      return new P.JsonCyclicError(object, null, []);
    },
    jsonEncode: function(object) {
      return C.JsonCodec_null_null.encode$2$toEncodable(object, null);
    },
    jsonDecode: function(source) {
      return C.JsonCodec_null_null.decode$2$reviver(H.stringTypeCheck(source), null);
    },
    JsonEncoder$: function(toEncodable) {
      return new P.JsonEncoder(null, toEncodable, []);
    },
    JsonUtf8Encoder$: function(indent, toEncodable) {
      return new P.JsonUtf8Encoder(P.JsonUtf8Encoder__utf8Encode(indent), toEncodable, []);
    },
    JsonUtf8Encoder__utf8Encode: function(string) {
      var t1, i;
      H.stringTypeCheck(string);
      if (string == null)
        return;
      if (C.JSString_methods.get$isEmpty(string))
        return H.NativeUint8List_NativeUint8List(0);
      $label0$0: {
        for (t1 = string.length, i = 0; i < t1; ++i)
          if (J.$ge$n(C.JSString_methods._codeUnitAt$1(string, i), 128))
            break $label0$0;
        return C.JSString_methods.get$codeUnits(string);
      }
      return C.C_Utf8Codec.encode$1(string);
    },
    JsonDecoder$: function(reviver) {
      return new P.JsonDecoder(reviver, []);
    },
    _defaultToEncodable: function(object) {
      return object.toJson$0();
    },
    _JsonStringifier_hexDigit: function(x) {
      H.intTypeCheck(x);
      if (typeof x !== "number")
        return x.$lt();
      return x < 10 ? 48 + x : 87 + x;
    },
    _JsonStringStringifier$: function(_sink, _toEncodable) {
      var t1 = _toEncodable == null ? P.convert___defaultToEncodable$closure() : _toEncodable;
      return new P._JsonStringStringifier(_sink, [], t1, []);
    },
    _JsonStringStringifier_stringify: function(object, toEncodable, indent) {
      var output;
      H.functionTypeCheck(toEncodable, {func: 1, args: [,]});
      H.stringTypeCheck(indent);
      output = P.StringBuffer$("");
      P._JsonStringStringifier_printOn(object, output, toEncodable, indent);
      return output.toString$0(0);
    },
    _JsonStringStringifier_printOn: function(object, output, toEncodable, indent) {
      H.interceptedTypeCheck(output, "$isStringSink");
      H.functionTypeCheck(toEncodable, {func: 1, args: [,]});
      H.stringTypeCheck(indent);
      (indent == null ? P._JsonStringStringifier$(output, toEncodable) : P._JsonStringStringifierPretty$(output, toEncodable, indent)).writeObject$1(object);
    },
    _JsonStringStringifierPretty$: function(sink, toEncodable, _indent) {
      var t1 = toEncodable == null ? P.convert___defaultToEncodable$closure() : toEncodable;
      return new P._JsonStringStringifierPretty(_indent, 0, sink, [], t1, []);
    },
    _JsonUtf8Stringifier$: function(toEncodable, bufferSize, addChunk) {
      var t1 = H.NativeUint8List_NativeUint8List(bufferSize),
        t2 = toEncodable == null ? P.convert___defaultToEncodable$closure() : toEncodable;
      return new P._JsonUtf8Stringifier(bufferSize, addChunk, t1, [], t2, []);
    },
    _JsonUtf8Stringifier_stringify: function(object, indent, toEncodable, bufferSize, addChunk) {
      var stringifier;
      H.assertSubtype(indent, "$isList", [P.int], "$asList");
      H.functionTypeCheck(toEncodable, {func: 1, args: [,]});
      H.intTypeCheck(bufferSize);
      H.functionTypeCheck(addChunk, {func: 1, ret: -1, args: [P.Uint8List, P.int, P.int]});
      stringifier = indent != null ? P._JsonUtf8StringifierPretty$(toEncodable, indent, bufferSize, addChunk) : P._JsonUtf8Stringifier$(toEncodable, bufferSize, addChunk);
      stringifier.writeObject$1(object);
      stringifier.flush$0();
    },
    _JsonUtf8StringifierPretty$: function(toEncodable, indent, bufferSize, addChunk) {
      var t1 = H.NativeUint8List_NativeUint8List(bufferSize),
        t2 = toEncodable == null ? P.convert___defaultToEncodable$closure() : toEncodable;
      return new P._JsonUtf8StringifierPretty(indent, 0, bufferSize, addChunk, t1, [], t2, []);
    },
    _Utf8Encoder$withBufferSize: function(bufferSize) {
      return new P._Utf8Encoder(0, P._Utf8Encoder__createBuffer(bufferSize), []);
    },
    _Utf8Encoder__createBuffer: function(size) {
      return H.NativeUint8List_NativeUint8List(H.intTypeCheck(size));
    },
    Utf8Decoder$: function(allowMalformed) {
      return new P.Utf8Decoder(allowMalformed, []);
    },
    _isLeadSurrogate: function(codeUnit) {
      H.intTypeCheck(codeUnit);
      if (typeof codeUnit !== "number")
        return codeUnit.$and();
      return (codeUnit & 64512) === 55296;
    },
    _isTailSurrogate: function(codeUnit) {
      H.intTypeCheck(codeUnit);
      if (typeof codeUnit !== "number")
        return codeUnit.$and();
      return (codeUnit & 64512) === 56320;
    },
    _combineSurrogatePair: function(lead, tail) {
      H.intTypeCheck(lead);
      H.intTypeCheck(tail);
      if (typeof lead !== "number")
        return lead.$and();
      if (typeof tail !== "number")
        return tail.$and();
      return 65536 + ((lead & 1023) << 10) | tail & 1023;
    },
    _Utf8Decoder$: function(_stringSink, _allowMalformed) {
      return new P._Utf8Decoder(_allowMalformed, _stringSink, []);
    },
    _convertJsonToDart_walk: function _convertJsonToDart_walk(t0, t1) {
      this.reviver = t0;
      this.$ti = t1;
    },
    _JsonMap: function _JsonMap(t0, t1, t2) {
      var _ = this;
      _._original = t0;
      _._processed = t1;
      _._data = null;
      _.$ti = t2;
    },
    _JsonMap_values_closure: function _JsonMap_values_closure(t0, t1) {
      this.$this = t0;
      this.$ti = t1;
    },
    _JsonMapKeyIterable: function _JsonMapKeyIterable(t0, t1) {
      this._parent = t0;
      this.$ti = t1;
    },
    _JsonDecoderSink: function _JsonDecoderSink() {
    },
    AsciiCodec: function AsciiCodec(t0) {
      this.$ti = t0;
    },
    _UnicodeSubsetEncoder: function _UnicodeSubsetEncoder() {
    },
    AsciiEncoder: function AsciiEncoder(t0, t1) {
      this._subsetMask = t0;
      this.$ti = t1;
    },
    _UnicodeSubsetEncoderSink: function _UnicodeSubsetEncoderSink() {
    },
    _UnicodeSubsetDecoder: function _UnicodeSubsetDecoder() {
    },
    AsciiDecoder: function AsciiDecoder(t0, t1, t2) {
      this._allowInvalid = t0;
      this._subsetMask = t1;
      this.$ti = t2;
    },
    _ErrorHandlingAsciiDecoderSink: function _ErrorHandlingAsciiDecoderSink() {
    },
    _SimpleAsciiDecoderSink: function _SimpleAsciiDecoderSink() {
    },
    Base64Codec: function Base64Codec(t0, t1) {
      this._encoder = t0;
      this.$ti = t1;
    },
    Base64Encoder: function Base64Encoder(t0, t1) {
      this._urlSafe = t0;
      this.$ti = t1;
    },
    _Base64Encoder: function _Base64Encoder(t0, t1) {
      this._state = 0;
      this._alphabet = t0;
      this.$ti = t1;
    },
    _BufferCachingBase64Encoder: function _BufferCachingBase64Encoder() {
    },
    _Base64EncoderSink: function _Base64EncoderSink() {
    },
    _AsciiBase64EncoderSink: function _AsciiBase64EncoderSink() {
    },
    _Utf8Base64EncoderSink: function _Utf8Base64EncoderSink() {
    },
    Base64Decoder: function Base64Decoder(t0) {
      this.$ti = t0;
    },
    _Base64Decoder: function _Base64Decoder(t0) {
      this._state = 0;
      this.$ti = t0;
    },
    _Base64DecoderSink: function _Base64DecoderSink() {
    },
    ByteConversionSink: function ByteConversionSink() {
    },
    ByteConversionSinkBase: function ByteConversionSinkBase() {
    },
    _ByteAdapterSink: function _ByteAdapterSink() {
    },
    _ByteCallbackSink: function _ByteCallbackSink() {
    },
    ChunkedConversionSink: function ChunkedConversionSink() {
    },
    _SimpleCallbackSink: function _SimpleCallbackSink() {
    },
    _ConverterStreamEventSink: function _ConverterStreamEventSink() {
    },
    Codec: function Codec() {
    },
    _FusedCodec: function _FusedCodec(t0, t1, t2) {
      this._convert$_first = t0;
      this._convert$_second = t1;
      this.$ti = t2;
    },
    _InvertedCodec: function _InvertedCodec() {
    },
    Converter: function Converter() {
    },
    _FusedConverter: function _FusedConverter(t0, t1, t2) {
      this._convert$_first = t0;
      this._convert$_second = t1;
      this.$ti = t2;
    },
    Encoding: function Encoding() {
    },
    HtmlEscapeMode: function HtmlEscapeMode() {
    },
    HtmlEscape: function HtmlEscape() {
    },
    _HtmlEscapeSink: function _HtmlEscapeSink() {
    },
    JsonUnsupportedObjectError: function JsonUnsupportedObjectError(t0, t1, t2) {
      this.unsupportedObject = t0;
      this.cause = t1;
      this.$ti = t2;
    },
    JsonCyclicError: function JsonCyclicError(t0, t1, t2) {
      this.unsupportedObject = t0;
      this.cause = t1;
      this.$ti = t2;
    },
    JsonCodec: function JsonCodec(t0, t1, t2) {
      this._reviver = t0;
      this._toEncodable = t1;
      this.$ti = t2;
    },
    JsonEncoder: function JsonEncoder(t0, t1, t2) {
      this.indent = t0;
      this._toEncodable = t1;
      this.$ti = t2;
    },
    JsonUtf8Encoder: function JsonUtf8Encoder(t0, t1, t2) {
      this._indent = t0;
      this._toEncodable = t1;
      this.$ti = t2;
    },
    JsonUtf8Encoder_convert_addChunk: function JsonUtf8Encoder_convert_addChunk(t0, t1) {
      this.bytes = t0;
      this.$ti = t1;
    },
    _JsonEncoderSink: function _JsonEncoderSink() {
    },
    _JsonUtf8EncoderSink: function _JsonUtf8EncoderSink() {
    },
    JsonDecoder: function JsonDecoder(t0, t1) {
      this._reviver = t0;
      this.$ti = t1;
    },
    _JsonStringifier: function _JsonStringifier() {
    },
    _JsonStringifier_writeMap_closure: function _JsonStringifier_writeMap_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.keyValueList = t1;
      this.$ti = t2;
    },
    _JsonPrettyPrintMixin: function _JsonPrettyPrintMixin() {
    },
    _JsonPrettyPrintMixin_writeMap_closure: function _JsonPrettyPrintMixin_writeMap_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.keyValueList = t1;
      this.$ti = t2;
    },
    _JsonStringStringifier: function _JsonStringStringifier(t0, t1, t2, t3) {
      var _ = this;
      _._sink = t0;
      _._seen = t1;
      _._toEncodable = t2;
      _.$ti = t3;
    },
    _JsonStringStringifierPretty: function _JsonStringStringifierPretty(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._indent = t0;
      _._JsonPrettyPrintMixin__indentLevel = t1;
      _._sink = t2;
      _._seen = t3;
      _._toEncodable = t4;
      _.$ti = t5;
    },
    _JsonUtf8Stringifier: function _JsonUtf8Stringifier(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.bufferSize = t0;
      _.addChunk = t1;
      _.buffer = t2;
      _.index = 0;
      _._seen = t3;
      _._toEncodable = t4;
      _.$ti = t5;
    },
    _JsonUtf8StringifierPretty: function _JsonUtf8StringifierPretty(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _.indent = t0;
      _._JsonPrettyPrintMixin__indentLevel = t1;
      _.bufferSize = t2;
      _.addChunk = t3;
      _.buffer = t4;
      _.index = 0;
      _._seen = t5;
      _._toEncodable = t6;
      _.$ti = t7;
    },
    Latin1Codec: function Latin1Codec(t0) {
      this.$ti = t0;
    },
    Latin1Encoder: function Latin1Encoder(t0, t1) {
      this._subsetMask = t0;
      this.$ti = t1;
    },
    Latin1Decoder: function Latin1Decoder(t0, t1, t2) {
      this._allowInvalid = t0;
      this._subsetMask = t1;
      this.$ti = t2;
    },
    _Latin1DecoderSink: function _Latin1DecoderSink() {
    },
    _Latin1AllowInvalidDecoderSink: function _Latin1AllowInvalidDecoderSink() {
    },
    LineSplitter: function LineSplitter() {
    },
    _LineSplitterSink: function _LineSplitterSink() {
    },
    _LineSplitterEventSink: function _LineSplitterEventSink() {
    },
    StringConversionSink: function StringConversionSink() {
    },
    ClosableStringSink: function ClosableStringSink() {
    },
    _ClosableStringSink: function _ClosableStringSink() {
    },
    _StringConversionSinkAsStringSinkAdapter: function _StringConversionSinkAsStringSinkAdapter() {
    },
    StringConversionSinkBase: function StringConversionSinkBase() {
    },
    StringConversionSinkMixin: function StringConversionSinkMixin() {
    },
    _StringSinkConversionSink: function _StringSinkConversionSink() {
    },
    _StringCallbackSink: function _StringCallbackSink() {
    },
    _StringAdapterSink: function _StringAdapterSink() {
    },
    _Utf8StringSinkAdapter: function _Utf8StringSinkAdapter() {
    },
    _Utf8ConversionSink: function _Utf8ConversionSink() {
    },
    Utf8Codec: function Utf8Codec(t0) {
      this.$ti = t0;
    },
    Utf8Encoder: function Utf8Encoder(t0) {
      this.$ti = t0;
    },
    _Utf8Encoder: function _Utf8Encoder(t0, t1, t2) {
      this._bufferIndex = t0;
      this._buffer = t1;
      this.$ti = t2;
    },
    _Utf8EncoderSink: function _Utf8EncoderSink() {
    },
    Utf8Decoder: function Utf8Decoder(t0, t1) {
      this._allowMalformed = t0;
      this.$ti = t1;
    },
    _Utf8Decoder: function _Utf8Decoder(t0, t1, t2) {
      var _ = this;
      _._allowMalformed = t0;
      _._stringSink = t1;
      _._isFirstCharacter = true;
      _._extraUnits = _._expectedUnits = _._value = 0;
      _.$ti = t2;
    },
    __JsonStringStringifierPretty__JsonStringStringifier__JsonPrettyPrintMixin: function __JsonStringStringifierPretty__JsonStringStringifier__JsonPrettyPrintMixin() {
    },
    __JsonUtf8StringifierPretty__JsonUtf8Stringifier__JsonPrettyPrintMixin: function __JsonUtf8StringifierPretty__JsonUtf8Stringifier__JsonPrettyPrintMixin() {
    },
    __Utf8EncoderSink__Utf8Encoder_StringConversionSinkMixin: function __Utf8EncoderSink__Utf8Encoder_StringConversionSinkMixin() {
    },
    _symbolToString: function(symbol) {
      return H.Symbol_getName(H.interceptedTypeCheck(symbol, "$isSymbol0"));
    },
    Function_apply: function($function, positionalArguments) {
      H.interceptedTypeCheck($function, "$isFunction");
      H.listTypeCheck(positionalArguments);
      return H.Primitives_applyFunction($function, positionalArguments, null);
    },
    int_parse: function(source, onError, radix) {
      var value;
      H.stringTypeCheck(source);
      H.intTypeCheck(radix);
      H.functionTypeCheck(onError, {func: 1, ret: P.int, args: [P.String]});
      value = P.int_tryParse(source, radix);
      if (value != null)
        return value;
      if (onError != null)
        return onError.call$1(source);
      throw H.wrapException(P.FormatException$(source, null, null));
    },
    int_tryParse: function(source, radix) {
      return H.Primitives_parseInt(H.stringTypeCheck(source), H.intTypeCheck(radix));
    },
    Error__objectToString: function(object) {
      if (object instanceof H.Closure)
        return object.toString$0(0);
      return H.Primitives_objectToHumanReadableString(object);
    },
    Error__stringToSafeString: function(string) {
      return H.jsonEncodeNative(H.stringTypeCheck(string));
    },
    List_List$filled: function($length, fill, $E) {
      var result, i;
      H.intTypeCheck($length);
      H.assertSubtypeOfRuntimeType(fill, $E);
      result = J.JSArray_JSArray$fixed($length, $E);
      if ($length !== 0 && fill != null)
        for (i = 0; i < result.length; ++i)
          C.JSArray_methods.$indexSet(result, i, fill);
      return H.assertSubtype(result, "$isList", [$E], "$asList");
    },
    List_List$from: function(elements, growable, $E) {
      var list, t1;
      H.listSuperNativeTypeCheck(elements, "$isIterable");
      H.boolTypeCheck(growable);
      list = H.setRuntimeTypeInfo([], [$E]);
      for (t1 = J.get$iterator$ax(elements); t1.moveNext$0();)
        C.JSArray_methods.add$1(list, H.assertSubtypeOfRuntimeType(t1.get$current(), $E));
      if (growable)
        return list;
      return H.makeListFixedLength(list, $E);
    },
    List_List$unmodifiable: function(elements, $E) {
      return H.makeFixedListUnmodifiable(H.assertSubtype(P.List_List$from(H.listSuperNativeTypeCheck(elements, "$isIterable"), false, $E), "$isList", [$E], "$asList"), $E);
    },
    String_String$fromCharCodes: function(charCodes, start, end) {
      var t1 = P.int;
      H.assertSubtype(charCodes, "$isIterable", [t1], "$asIterable");
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      if (typeof charCodes === "object" && charCodes !== null && charCodes.constructor === Array)
        return P.String__stringFromJSArray(H.assertSubtype(charCodes, "$isJSArray", [t1], "$asJSArray"), start, end);
      if (!!J.getInterceptor$(charCodes).$isNativeUint8List)
        return P.String__stringFromUint8List(charCodes, start, end);
      return P.String__stringFromIterable(charCodes, start, end);
    },
    String_String$fromCharCode: function(charCode) {
      return H.Primitives_stringFromCharCode(H.intTypeCheck(charCode));
    },
    String__stringFromJSArray: function(list, start, endOrNull) {
      var t1, len, end, t2;
      H.listTypeCheck(list);
      H.intTypeCheck(start);
      H.intTypeCheck(endOrNull);
      t1 = J.getInterceptor$asx(list);
      len = t1.get$length(list);
      end = P.RangeError_checkValidRange(start, endOrNull, len);
      if (typeof start !== "number")
        return start.$gt();
      if (start <= 0) {
        if (typeof end !== "number")
          return end.$lt();
        if (typeof len !== "number")
          return H.iae(len);
        t2 = end < len;
      } else
        t2 = true;
      return H.Primitives_stringFromCharCodes(t2 ? t1.sublist$2(list, start, end) : list);
    },
    String__stringFromUint8List: function(charCodes, start, endOrNull) {
      H.interceptedTypeCheck(charCodes, "$isNativeUint8List");
      H.intTypeCheck(start);
      return H.Primitives_stringFromNativeUint8List(charCodes, start, P.RangeError_checkValidRange(start, H.intTypeCheck(endOrNull), charCodes.length));
    },
    String__stringFromIterable: function(charCodes, start, end) {
      var t1, it, i, list, _null = null;
      H.assertSubtype(charCodes, "$isIterable", [P.int], "$asIterable");
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      if (typeof start !== "number")
        return start.$lt();
      if (start < 0)
        throw H.wrapException(P.RangeError$range(start, 0, J.get$length$asx(charCodes), _null, _null));
      t1 = end == null;
      if (!t1 && end < start)
        throw H.wrapException(P.RangeError$range(end, start, J.get$length$asx(charCodes), _null, _null));
      it = J.get$iterator$ax(charCodes);
      for (i = 0; i < start; ++i)
        if (!it.moveNext$0())
          throw H.wrapException(P.RangeError$range(start, 0, i, _null, _null));
      list = [];
      if (t1)
        for (; it.moveNext$0();)
          list.push(it.get$current());
      else
        for (i = start; i < end; ++i) {
          if (!it.moveNext$0())
            throw H.wrapException(P.RangeError$range(end, start, i, _null, _null));
          list.push(it.get$current());
        }
      return H.Primitives_stringFromCharCodes(list);
    },
    RegExp_RegExp: function(source, multiLine) {
      return H.JSSyntaxRegExp$(H.stringTypeCheck(source), true, H.boolTypeCheck(multiLine));
    },
    StringBuffer$: function($content) {
      return new P.StringBuffer(H.S($content), []);
    },
    StringBuffer__writeAll: function(string, objects, separator) {
      var iterator;
      H.stringTypeCheck(string);
      H.listSuperNativeTypeCheck(objects, "$isIterable");
      H.stringTypeCheck(separator);
      iterator = J.get$iterator$ax(objects);
      if (!iterator.moveNext$0())
        return string;
      if (J.get$isEmpty$asx(separator)) {
        do
          string = P.StringBuffer__writeOne(string, iterator.get$current());
        while (iterator.moveNext$0());
      } else {
        string = P.StringBuffer__writeOne(string, iterator.get$current());
        for (; iterator.moveNext$0();)
          string = P.StringBuffer__writeOne(P.StringBuffer__writeOne(string, separator), iterator.get$current());
      }
      return string;
    },
    StringBuffer__writeOne: function(string, obj) {
      return H.Primitives_stringConcatUnchecked(H.stringTypeCheck(string), H.S(obj));
    },
    NoSuchMethodError$: function(receiver, memberName, positionalArguments, namedArguments) {
      return new P.NoSuchMethodError(receiver, memberName, positionalArguments, namedArguments, null, []);
    },
    Uri_base: function() {
      var uri = H.Primitives_currentUri();
      if (uri != null)
        return P.Uri_parse(uri);
      throw H.wrapException(P.UnsupportedError$("'Uri.base' is not supported"));
    },
    _Uri__isWindows: function() {
      return $.$get$_Uri__isWindowsCached();
    },
    _Uri__uriEncode: function(canonicalTable, text, encoding, spaceToPlus) {
      var result, bytes, t1, t2, i, t3, byte,
        _s16_ = "0123456789ABCDEF";
      H.assertSubtype(canonicalTable, "$isList", [P.int], "$asList");
      H.stringTypeCheck(text);
      H.interceptedTypeCheck(encoding, "$isEncoding");
      H.boolTypeCheck(spaceToPlus);
      if (encoding === C.C_Utf8Codec && $.$get$_Uri__needsNoEncoding().hasMatch$1(text))
        return text;
      result = P.StringBuffer$("");
      bytes = encoding.encode$1(text);
      t1 = J.getInterceptor$asx(bytes);
      t2 = J.getInterceptor$asx(canonicalTable);
      i = 0;
      while (true) {
        t3 = t1.get$length(bytes);
        if (typeof t3 !== "number")
          return H.iae(t3);
        if (!(i < t3))
          break;
        byte = t1.$index(bytes, i);
        if (typeof byte !== "number")
          return byte.$lt();
        if (byte < 128 && !J.$eq$(J.$and$bn(t2.$index(canonicalTable, C.JSInt_methods._shrOtherPositive$1(byte, 4)), 1 << (byte & 15) >>> 0), 0))
          result.writeCharCode$1(byte);
        else if (spaceToPlus && byte === 32)
          result.write$1("+");
        else {
          result.write$1("%");
          result.write$1(_s16_[C.JSInt_methods._shrOtherPositive$1(byte, 4) & 15]);
          result.write$1(_s16_[byte & 15]);
        }
        ++i;
      }
      return result.toString$0(0);
    },
    Error_safeToString: function(object) {
      if (typeof object === "number" || typeof object === "boolean" || null == object)
        return J.toString$0$(object);
      if (typeof object === "string")
        return P.Error__stringToSafeString(object);
      return P.Error__objectToString(object);
    },
    NullThrownError$: function() {
      return new P.NullThrownError([]);
    },
    ArgumentError$: function(message) {
      return new P.ArgumentError(false, null, null, message, []);
    },
    ArgumentError$value: function(value, $name, message) {
      return new P.ArgumentError(true, value, $name, message, []);
    },
    ArgumentError$notNull: function($name) {
      return new P.ArgumentError(false, null, $name, "Must not be null", []);
    },
    ArgumentError_checkNotNull: function(argument, $name) {
      H.stringTypeCheck($name);
      if (argument == null)
        throw H.wrapException(P.ArgumentError$notNull($name));
    },
    RangeError$: function(message) {
      var _null = null;
      return new P.RangeError(_null, _null, false, _null, _null, message, []);
    },
    RangeError$value: function(value, $name) {
      return new P.RangeError(null, null, true, value, $name, "Value not in range", []);
    },
    RangeError$range: function(invalidValue, minValue, maxValue, $name, message) {
      var t1 = message != null ? message : "Invalid value";
      return new P.RangeError(minValue, maxValue, true, invalidValue, $name, t1, []);
    },
    RangeError_checkValueInInterval: function(value, minValue, maxValue, $name) {
      var t1;
      H.intTypeCheck(value);
      H.intTypeCheck(minValue);
      H.intTypeCheck(maxValue);
      H.stringTypeCheck($name);
      if (typeof value !== "number")
        return value.$lt();
      if (typeof minValue !== "number")
        return H.iae(minValue);
      if (value >= minValue) {
        if (typeof maxValue !== "number")
          return H.iae(maxValue);
        t1 = value > maxValue;
      } else
        t1 = true;
      if (t1)
        throw H.wrapException(P.RangeError$range(value, minValue, maxValue, $name, null));
    },
    RangeError_checkValidRange: function(start, end, $length) {
      var t1;
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      H.intTypeCheck($length);
      if (typeof start !== "number")
        return H.iae(start);
      if (0 <= start) {
        if (typeof $length !== "number")
          return H.iae($length);
        t1 = start > $length;
      } else
        t1 = true;
      if (t1)
        throw H.wrapException(P.RangeError$range(start, 0, $length, "start", null));
      if (end != null) {
        if (!(start > end)) {
          if (typeof $length !== "number")
            return H.iae($length);
          t1 = end > $length;
        } else
          t1 = true;
        if (t1)
          throw H.wrapException(P.RangeError$range(end, start, $length, "end", null));
        return end;
      }
      return $length;
    },
    RangeError_checkNotNegative: function(value, $name) {
      H.intTypeCheck(value);
      H.stringTypeCheck($name);
      if (typeof value !== "number")
        return value.$lt();
      if (value < 0)
        throw H.wrapException(P.RangeError$range(value, 0, null, $name, null));
    },
    IndexError$: function(invalidValue, indexable, $name, message, $length) {
      var t1 = H.intTypeCheck($length == null ? J.get$length$asx(indexable) : $length),
        t2 = message != null ? message : "Index out of range";
      return new P.IndexError(t1, true, invalidValue, $name, t2, []);
    },
    UnsupportedError$: function(message) {
      return new P.UnsupportedError(message, []);
    },
    UnimplementedError$: function(message) {
      return new P.UnimplementedError(message, []);
    },
    StateError$: function(message) {
      return new P.StateError(message, []);
    },
    ConcurrentModificationError$: function(modifiedObject) {
      return new P.ConcurrentModificationError(modifiedObject, []);
    },
    StackOverflowError$: function() {
      return new P.StackOverflowError([]);
    },
    CyclicInitializationError$: function(variableName) {
      return new P.CyclicInitializationError(variableName, []);
    },
    FormatException$: function(message, source, offset) {
      return new P.FormatException(message, source, offset, []);
    },
    Iterable_castFrom: function(source, $S, $T) {
      return H.CastIterable_CastIterable(H.assertSubtype(source, "$isIterable", [$S], "$asIterable"), $S, $T);
    },
    List_List$generate: function($length, generator, growable, $E) {
      var result, t1, i;
      H.intTypeCheck($length);
      H.functionTypeCheck(generator, {func: 1, ret: $E, args: [P.int]});
      if (H.boolTypeCheck(growable)) {
        result = H.setRuntimeTypeInfo([], [$E]);
        C.JSArray_methods.set$length(result, $length);
      } else {
        if (typeof $length !== "number")
          return H.iae($length);
        t1 = new Array($length);
        t1.fixed$length = Array;
        result = H.setRuntimeTypeInfo(t1, [$E]);
      }
      if (typeof $length !== "number")
        return H.iae($length);
      i = 0;
      for (; i < $length; ++i)
        C.JSArray_methods.$indexSet(result, i, generator.call$1(i));
      return result;
    },
    List_castFrom: function(source, $S, $T) {
      return H.CastList$(H.assertSubtype(source, "$isList", [$S], "$asList"), $S, $T);
    },
    _StringStackTrace$: function(_stackTrace) {
      return new P._StringStackTrace(_stackTrace, []);
    },
    Uri_Uri$dataFromString: function($content) {
      return P.UriData_UriData$fromString(H.stringTypeCheck($content), false, null, null, null).get$uri();
    },
    Uri_parse: function(uri) {
      var end, dataDelta, t1, indices, state, schemeEnd, hostStart, portStart, pathStart, queryStart, fragmentStart, isSimple, scheme, t2, schemeAuth, delta, queryStart0, pathStart0, _null = null;
      H.stringTypeCheck(uri);
      end = uri.length;
      if (end >= 5) {
        dataDelta = P._startsWithData(uri, 0);
        if (dataDelta === 0)
          return P.UriData__parse(end < end ? J.substring$2$s(uri, 0, end) : uri, 5, _null).get$uri();
        else if (dataDelta === 32)
          return P.UriData__parse(J.substring$2$s(uri, 5, end), 0, _null).get$uri();
      }
      t1 = new Array(8);
      t1.fixed$length = Array;
      indices = H.setRuntimeTypeInfo(t1, [P.int]);
      C.JSArray_methods.$indexSet(indices, 0, 0);
      C.JSArray_methods.$indexSet(indices, 1, -1);
      C.JSArray_methods.$indexSet(indices, 2, -1);
      C.JSArray_methods.$indexSet(indices, 7, -1);
      C.JSArray_methods.$indexSet(indices, 3, 0);
      C.JSArray_methods.$indexSet(indices, 4, 0);
      C.JSArray_methods.$indexSet(indices, 5, end);
      C.JSArray_methods.$indexSet(indices, 6, end);
      state = P._scan(uri, 0, end, 0, indices);
      if (typeof state !== "number")
        return state.$ge();
      if (state >= 14)
        C.JSArray_methods.$indexSet(indices, 7, end);
      t1 = indices.length;
      if (1 >= t1)
        return H.ioore(indices, 1);
      schemeEnd = indices[1];
      if (typeof schemeEnd !== "number")
        return schemeEnd.$ge();
      if (schemeEnd >= 0)
        if (P._scan(uri, 0, schemeEnd, 20, indices) === 20)
          C.JSArray_methods.$indexSet(indices, 7, schemeEnd);
      if (2 >= t1)
        return H.ioore(indices, 2);
      hostStart = J.$add$ansx(indices[2], 1);
      if (3 >= t1)
        return H.ioore(indices, 3);
      portStart = indices[3];
      if (4 >= t1)
        return H.ioore(indices, 4);
      pathStart = indices[4];
      if (5 >= t1)
        return H.ioore(indices, 5);
      queryStart = indices[5];
      if (6 >= t1)
        return H.ioore(indices, 6);
      fragmentStart = indices[6];
      if (typeof fragmentStart !== "number")
        return fragmentStart.$lt();
      if (typeof queryStart !== "number")
        return H.iae(queryStart);
      if (fragmentStart < queryStart)
        queryStart = fragmentStart;
      if (typeof pathStart !== "number")
        return pathStart.$lt();
      if (typeof hostStart !== "number")
        return H.iae(hostStart);
      if (pathStart < hostStart)
        pathStart = queryStart;
      else if (pathStart <= schemeEnd)
        pathStart = schemeEnd + 1;
      if (typeof portStart !== "number")
        return portStart.$lt();
      if (portStart < hostStart)
        portStart = pathStart;
      if (7 >= t1)
        return H.ioore(indices, 7);
      isSimple = J.$lt$n(indices[7], 0);
      if (isSimple)
        if (hostStart > schemeEnd + 3) {
          scheme = _null;
          isSimple = false;
        } else {
          t1 = portStart > 0;
          if (t1 && portStart + 1 === pathStart) {
            scheme = _null;
            isSimple = false;
          } else {
            if (!(queryStart < end && queryStart === pathStart + 2 && J.startsWith$2$s(uri, "..", pathStart)))
              t2 = queryStart > pathStart + 2 && J.startsWith$2$s(uri, "/..", queryStart - 3);
            else
              t2 = true;
            if (t2) {
              scheme = _null;
              isSimple = false;
            } else {
              if (schemeEnd === 4)
                if (J.startsWith$2$s(uri, "file", 0)) {
                  if (hostStart <= 0) {
                    if (!C.JSString_methods.startsWith$2(uri, "/", pathStart)) {
                      schemeAuth = "file:///";
                      delta = 3;
                    } else {
                      schemeAuth = "file://";
                      delta = 2;
                    }
                    uri = C.JSString_methods.$add(schemeAuth, C.JSString_methods.substring$2(uri, pathStart, end));
                    schemeEnd -= 0;
                    t1 = delta - 0;
                    queryStart += t1;
                    fragmentStart += t1;
                    end = uri.length;
                    hostStart = 7;
                    portStart = 7;
                    pathStart = 7;
                  } else if (pathStart === queryStart) {
                    queryStart0 = queryStart + 1;
                    ++fragmentStart;
                    uri = C.JSString_methods.replaceRange$3(uri, pathStart, queryStart, "/");
                    ++end;
                    queryStart = queryStart0;
                  }
                  scheme = "file";
                } else if (C.JSString_methods.startsWith$2(uri, "http", 0)) {
                  if (t1 && portStart + 3 === pathStart && C.JSString_methods.startsWith$2(uri, "80", portStart + 1)) {
                    pathStart0 = pathStart - 3;
                    queryStart -= 3;
                    fragmentStart -= 3;
                    uri = C.JSString_methods.replaceRange$3(uri, portStart, pathStart, "");
                    end -= 3;
                    pathStart = pathStart0;
                  }
                  scheme = "http";
                } else
                  scheme = _null;
              else if (schemeEnd === 5 && J.startsWith$2$s(uri, "https", 0)) {
                if (t1 && portStart + 4 === pathStart && J.startsWith$2$s(uri, "443", portStart + 1)) {
                  pathStart0 = pathStart - 4;
                  queryStart -= 4;
                  fragmentStart -= 4;
                  uri = J.replaceRange$3$asx(uri, portStart, pathStart, "");
                  end -= 3;
                  pathStart = pathStart0;
                }
                scheme = "https";
              } else
                scheme = _null;
              isSimple = true;
            }
          }
        }
      else
        scheme = _null;
      if (isSimple) {
        t1 = uri.length;
        if (end < t1) {
          uri = J.substring$2$s(uri, 0, end);
          schemeEnd -= 0;
          hostStart -= 0;
          portStart -= 0;
          pathStart -= 0;
          queryStart -= 0;
          fragmentStart -= 0;
        }
        return P._SimpleUri$(uri, schemeEnd, hostStart, portStart, pathStart, queryStart, fragmentStart, scheme);
      }
      return P._Uri__Uri$notSimple(uri, 0, end, schemeEnd, hostStart, portStart, pathStart, queryStart, fragmentStart, scheme);
    },
    Uri_encodeQueryComponent: function(component) {
      return P._Uri__uriEncode(C.List_nxB, H.stringTypeCheck(component), C.C_Utf8Codec, true);
    },
    Uri_decodeComponent: function(encodedComponent) {
      H.stringTypeCheck(encodedComponent);
      return P._Uri__uriDecode(encodedComponent, 0, encodedComponent.length, C.C_Utf8Codec, false);
    },
    Uri__parseIPv4Address: function(host, start, end) {
      var error, result, t1, i, partStart, partIndex, char, part, partIndex0,
        _s43_ = "IPv4 address should contain exactly 4 parts",
        _null = null,
        _s37_ = "each part must be in the range 0..255";
      H.stringTypeCheck(host);
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      error = new P.Uri__parseIPv4Address_error(host);
      result = H.NativeUint8List_NativeUint8List(4);
      t1 = J.getInterceptor$s(host);
      i = start;
      partStart = i;
      partIndex = 0;
      while (true) {
        if (typeof i !== "number")
          return i.$lt();
        if (typeof end !== "number")
          return H.iae(end);
        if (!(i < end))
          break;
        char = t1.codeUnitAt$1(host, i);
        if (char !== 46) {
          if (typeof char !== "number")
            return char.$xor();
          if ((char ^ 48) >>> 0 > 9)
            error.call$2("invalid character", i);
        } else {
          if (partIndex === 3)
            error.call$2(_s43_, i);
          part = P.int_parse(C.JSString_methods.substring$2(host, partStart, i), _null, _null);
          if (typeof part !== "number")
            return part.$gt();
          if (part > 255)
            error.call$2(_s37_, partStart);
          partIndex0 = partIndex + 1;
          if (partIndex >= result.length)
            return H.ioore(result, partIndex);
          result[partIndex] = part;
          partStart = i + 1;
          partIndex = partIndex0;
        }
        ++i;
      }
      if (partIndex !== 3)
        error.call$2(_s43_, end);
      part = P.int_parse(t1.substring$2(host, partStart, end), _null, _null);
      if (typeof part !== "number")
        return part.$gt();
      if (part > 255)
        error.call$2(_s37_, partStart);
      if (partIndex >= result.length)
        return H.ioore(result, partIndex);
      result[partIndex] = part;
      return result;
    },
    Uri_parseIPv6Address: function(host, start, end) {
      var error, parseHex, parts, t1, i, partStart, wildcardSeen, seenDot, char, atEnd, isLastWildcard, last, bytes, wildCardLength, index, value, j, t2, t3;
      H.stringTypeCheck(host);
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      if (end == null)
        end = host.length;
      error = new P.Uri_parseIPv6Address_error(host);
      parseHex = new P.Uri_parseIPv6Address_parseHex(error, host);
      if (host.length < 2)
        error.call$1("address is too short");
      parts = H.setRuntimeTypeInfo([], [P.int]);
      t1 = J.getInterceptor$s(host);
      i = start;
      partStart = i;
      wildcardSeen = false;
      seenDot = false;
      while (true) {
        if (typeof i !== "number")
          return i.$lt();
        if (!(i < end))
          break;
        char = t1.codeUnitAt$1(host, i);
        if (char === 58) {
          if (i === start) {
            ++i;
            if (!J.$eq$(C.JSString_methods.codeUnitAt$1(host, i), 58))
              error.call$2("invalid start colon.", i);
            partStart = i;
          }
          if (i === partStart) {
            if (wildcardSeen)
              error.call$2("only one wildcard `::` is allowed", i);
            C.JSArray_methods.add$1(parts, -1);
            wildcardSeen = true;
          } else
            C.JSArray_methods.add$1(parts, parseHex.call$2(partStart, i));
          partStart = i + 1;
        } else if (char === 46)
          seenDot = true;
        ++i;
      }
      if (parts.length === 0)
        error.call$1("too few parts");
      atEnd = partStart === end;
      isLastWildcard = J.$eq$(C.JSArray_methods.get$last(parts), -1);
      if (atEnd && !isLastWildcard)
        error.call$2("expected a part after last `:`", end);
      if (!atEnd)
        if (!seenDot)
          C.JSArray_methods.add$1(parts, parseHex.call$2(partStart, end));
        else {
          last = P.Uri__parseIPv4Address(host, partStart, end);
          t1 = J.getInterceptor$asx(last);
          C.JSArray_methods.add$1(parts, J.$or$n(J.$shl$n(t1.$index(last, 0), 8), t1.$index(last, 1)));
          C.JSArray_methods.add$1(parts, J.$or$n(J.$shl$n(t1.$index(last, 2), 8), t1.$index(last, 3)));
        }
      if (wildcardSeen) {
        if (parts.length > 7)
          error.call$1("an address with a wildcard must have less than 7 parts");
      } else if (parts.length !== 8)
        error.call$1("an address without a wildcard must contain exactly 8 parts");
      bytes = H.NativeUint8List_NativeUint8List(16);
      for (t1 = parts.length, wildCardLength = 9 - t1, i = 0, index = 0; i < t1; ++i) {
        value = parts[i];
        if (value === -1)
          for (j = 0; j < wildCardLength; ++j) {
            t2 = bytes.length;
            if (index < 0 || index >= t2)
              return H.ioore(bytes, index);
            bytes[index] = 0;
            t3 = index + 1;
            if (t3 >= t2)
              return H.ioore(bytes, t3);
            bytes[t3] = 0;
            index += 2;
          }
        else {
          if (typeof value !== "number")
            return value.$shr();
          t2 = C.JSInt_methods._shrOtherPositive$1(value, 8);
          t3 = bytes.length;
          if (index < 0 || index >= t3)
            return H.ioore(bytes, index);
          bytes[index] = t2;
          t2 = index + 1;
          if (t2 >= t3)
            return H.ioore(bytes, t2);
          bytes[t2] = value & 255;
          index += 2;
        }
      }
      return bytes;
    },
    _Uri$_internal: function(scheme, _userInfo, _host, _port, path, _query, _fragment) {
      return new P._Uri(scheme, _userInfo, _host, _port, path, _query, _fragment, []);
    },
    _Uri__Uri$notSimple: function(uri, start, end, schemeEnd, hostStart, portStart, pathStart, queryStart, fragmentStart, scheme) {
      var userInfoStart, userInfo, host, t1, port, path, query, _null = null;
      H.stringTypeCheck(uri);
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      H.intTypeCheck(schemeEnd);
      H.intTypeCheck(hostStart);
      H.intTypeCheck(portStart);
      H.intTypeCheck(pathStart);
      H.intTypeCheck(queryStart);
      H.intTypeCheck(fragmentStart);
      H.stringTypeCheck(scheme);
      if (scheme == null) {
        if (typeof schemeEnd !== "number")
          return schemeEnd.$gt();
        if (typeof start !== "number")
          return H.iae(start);
        if (schemeEnd > start)
          scheme = P._Uri__makeScheme(uri, start, schemeEnd);
        else {
          if (schemeEnd === start)
            P._Uri__fail(uri, start, "Invalid empty scheme");
          scheme = "";
        }
      }
      if (typeof hostStart !== "number")
        return hostStart.$gt();
      if (typeof start !== "number")
        return H.iae(start);
      if (hostStart > start) {
        if (typeof schemeEnd !== "number")
          return schemeEnd.$add();
        userInfoStart = schemeEnd + 3;
        userInfo = userInfoStart < hostStart ? P._Uri__makeUserInfo(uri, userInfoStart, hostStart - 1) : "";
        host = P._Uri__makeHost(uri, hostStart, portStart, false);
        if (typeof portStart !== "number")
          return portStart.$add();
        t1 = portStart + 1;
        if (typeof pathStart !== "number")
          return H.iae(pathStart);
        port = t1 < pathStart ? P._Uri__makePort(P.int_parse(J.substring$2$s(uri, t1, pathStart), new P._Uri__Uri$notSimple_closure(uri, portStart), _null), scheme) : _null;
      } else {
        port = _null;
        host = port;
        userInfo = "";
      }
      path = P._Uri__makePath(uri, pathStart, queryStart, _null, scheme, host != null);
      if (typeof queryStart !== "number")
        return queryStart.$lt();
      if (typeof fragmentStart !== "number")
        return H.iae(fragmentStart);
      query = queryStart < fragmentStart ? P._Uri__makeQuery(uri, queryStart + 1, fragmentStart, _null) : _null;
      if (typeof end !== "number")
        return H.iae(end);
      return P._Uri$_internal(scheme, userInfo, host, port, path, query, fragmentStart < end ? P._Uri__makeFragment(uri, fragmentStart + 1, end) : _null);
    },
    _Uri__Uri: function(host, path, pathSegments, scheme) {
      var userInfo, query, fragment, port, isFile, t1, hasAuthority, _null = null;
      H.stringTypeCheck(scheme);
      H.stringTypeCheck(host);
      H.stringTypeCheck(path);
      H.assertSubtype(pathSegments, "$isIterable", [P.String], "$asIterable");
      scheme = P._Uri__makeScheme(scheme, 0, P._stringOrNullLength(scheme));
      userInfo = P._Uri__makeUserInfo(_null, 0, P._stringOrNullLength(_null));
      host = P._Uri__makeHost(host, 0, P._stringOrNullLength(host), false);
      query = P._Uri__makeQuery(_null, 0, P._stringOrNullLength(_null), _null);
      fragment = P._Uri__makeFragment(_null, 0, P._stringOrNullLength(_null));
      port = P._Uri__makePort(_null, scheme);
      isFile = scheme === "file";
      if (host == null)
        t1 = J.get$isNotEmpty$asx(userInfo) || port != null || isFile;
      else
        t1 = false;
      if (t1)
        host = "";
      t1 = host == null;
      hasAuthority = !t1;
      path = P._Uri__makePath(path, 0, P._stringOrNullLength(path), pathSegments, scheme, hasAuthority);
      if (J.getInterceptor$asx(scheme).get$isEmpty(scheme) && t1 && !J.startsWith$1$s(path, "/"))
        path = P._Uri__normalizeRelativePath(path, C.JSString_methods.get$isNotEmpty(scheme) || hasAuthority);
      else
        path = P._Uri__removeDotSegments(path);
      return P._Uri$_internal(scheme, userInfo, t1 && J.startsWith$1$s(path, "//") ? "" : host, port, path, query, fragment);
    },
    _Uri__defaultPort: function(scheme) {
      H.stringTypeCheck(scheme);
      if (scheme === "http")
        return 80;
      if (scheme === "https")
        return 443;
      return 0;
    },
    _Uri__fail: function(uri, index, message) {
      H.stringTypeCheck(uri);
      H.intTypeCheck(index);
      throw H.wrapException(P.FormatException$(H.stringTypeCheck(message), uri, index));
    },
    _Uri__Uri$file: function(path, windows) {
      H.stringTypeCheck(path);
      H.boolTypeCheck(windows);
      return H.interceptedTypeCheck((windows == null ? P._Uri__isWindows() : windows) ? P._Uri__makeWindowsFileUrl(path, false) : P._Uri__makeFileUri(path, false), "$is_Uri");
    },
    _Uri__checkNonWindowsPathReservedCharacters: function(segments, argumentError) {
      J.forEach$1$ax(H.assertSubtype(segments, "$isList", [P.String], "$asList"), new P._Uri__checkNonWindowsPathReservedCharacters_closure(H.boolTypeCheck(argumentError)));
    },
    _Uri__checkWindowsPathReservedCharacters: function(segments, argumentError, firstSegment) {
      var t1, t2;
      H.assertSubtype(segments, "$isList", [P.String], "$asList");
      H.boolTypeCheck(argumentError);
      for (t1 = J.get$iterator$ax(J.skip$1$ax(segments, H.intTypeCheck(firstSegment))); t1.moveNext$0();) {
        t2 = t1.get$current();
        if (J.contains$1$asx(t2, P.RegExp_RegExp('["*/:<>?\\\\|]', false)))
          if (argumentError)
            throw H.wrapException(P.ArgumentError$("Illegal character in path"));
          else
            throw H.wrapException(P.UnsupportedError$("Illegal character in path: " + t2));
      }
    },
    _Uri__checkWindowsDriveLetter: function(charCode, argumentError) {
      var t1,
        _s21_ = "Illegal drive letter ";
      H.intTypeCheck(charCode);
      H.boolTypeCheck(argumentError);
      if (typeof charCode !== "number")
        return H.iae(charCode);
      if (!(65 <= charCode && charCode <= 90))
        t1 = 97 <= charCode && charCode <= 122;
      else
        t1 = true;
      if (t1)
        return;
      if (argumentError)
        throw H.wrapException(P.ArgumentError$(C.JSString_methods.$add(_s21_, P.String_String$fromCharCode(charCode))));
      else
        throw H.wrapException(P.UnsupportedError$(C.JSString_methods.$add(_s21_, P.String_String$fromCharCode(charCode))));
    },
    _Uri__makeFileUri: function(path, slashTerminated) {
      var segments, _null = null;
      H.stringTypeCheck(path);
      H.boolTypeCheck(slashTerminated);
      segments = H.setRuntimeTypeInfo(path.split("/"), [P.String]);
      if (slashTerminated && C.JSArray_methods.get$isNotEmpty(segments) && J.get$isNotEmpty$asx(C.JSArray_methods.get$last(segments)))
        C.JSArray_methods.add$1(segments, "");
      if (C.JSString_methods.startsWith$1(path, "/"))
        return P._Uri__Uri(_null, _null, segments, "file");
      else
        return P._Uri__Uri(_null, _null, segments, _null);
    },
    _Uri__makeWindowsFileUrl: function(path, slashTerminated) {
      var t1, pathSegments, pathStart, hostPart, _s1_ = "\\", _s4_ = "file", _null = null;
      H.stringTypeCheck(path);
      H.boolTypeCheck(slashTerminated);
      if (J.getInterceptor$s(path).startsWith$1(path, "\\\\?\\"))
        if (C.JSString_methods.startsWith$2(path, "UNC\\", 4))
          path = C.JSString_methods.replaceRange$3(path, 0, 7, _s1_);
        else {
          path = C.JSString_methods.substring$1(path, 4);
          if (path.length < 3 || !J.$eq$(J.getInterceptor$s(path)._codeUnitAt$1(path, 1), 58) || !J.$eq$(C.JSString_methods._codeUnitAt$1(path, 2), 92))
            throw H.wrapException(P.ArgumentError$("Windows paths with \\\\?\\ prefix must be absolute"));
        }
      else
        path = C.JSString_methods.replaceAll$2(path, "/", _s1_);
      t1 = path.length;
      if (t1 > 1 && J.$eq$(C.JSString_methods._codeUnitAt$1(path, 1), 58)) {
        P._Uri__checkWindowsDriveLetter(C.JSString_methods._codeUnitAt$1(path, 0), true);
        if (t1 === 2 || !J.$eq$(C.JSString_methods._codeUnitAt$1(path, 2), 92))
          throw H.wrapException(P.ArgumentError$("Windows paths with drive letter must be absolute"));
        pathSegments = H.setRuntimeTypeInfo(path.split(_s1_), [P.String]);
        if (slashTerminated && J.get$isNotEmpty$asx(C.JSArray_methods.get$last(pathSegments)))
          C.JSArray_methods.add$1(pathSegments, "");
        P._Uri__checkWindowsPathReservedCharacters(pathSegments, true, 1);
        return P._Uri__Uri(_null, _null, pathSegments, _s4_);
      }
      if (C.JSString_methods.startsWith$1(path, _s1_))
        if (C.JSString_methods.startsWith$2(path, _s1_, 1)) {
          pathStart = C.JSString_methods.indexOf$2(path, _s1_, 2);
          if (typeof pathStart !== "number")
            return pathStart.$lt();
          t1 = pathStart < 0;
          hostPart = t1 ? C.JSString_methods.substring$1(path, 2) : C.JSString_methods.substring$2(path, 2, pathStart);
          pathSegments = H.setRuntimeTypeInfo((t1 ? "" : C.JSString_methods.substring$1(path, pathStart + 1)).split(_s1_), [P.String]);
          P._Uri__checkWindowsPathReservedCharacters(pathSegments, true, 0);
          if (slashTerminated && J.get$isNotEmpty$asx(C.JSArray_methods.get$last(pathSegments)))
            C.JSArray_methods.add$1(pathSegments, "");
          return P._Uri__Uri(hostPart, _null, pathSegments, _s4_);
        } else {
          pathSegments = H.setRuntimeTypeInfo(path.split(_s1_), [P.String]);
          if (slashTerminated && J.get$isNotEmpty$asx(C.JSArray_methods.get$last(pathSegments)))
            C.JSArray_methods.add$1(pathSegments, "");
          P._Uri__checkWindowsPathReservedCharacters(pathSegments, true, 0);
          return P._Uri__Uri(_null, _null, pathSegments, _s4_);
        }
      else {
        pathSegments = H.setRuntimeTypeInfo(path.split(_s1_), [P.String]);
        P._Uri__checkWindowsPathReservedCharacters(pathSegments, true, 0);
        if (slashTerminated && C.JSArray_methods.get$isNotEmpty(pathSegments) && J.get$isNotEmpty$asx(C.JSArray_methods.get$last(pathSegments)))
          C.JSArray_methods.add$1(pathSegments, "");
        return P._Uri__Uri(_null, _null, pathSegments, _null);
      }
    },
    _Uri__makePort: function(port, scheme) {
      H.intTypeCheck(port);
      H.stringTypeCheck(scheme);
      if (port != null && port === P._Uri__defaultPort(scheme))
        return;
      return port;
    },
    _Uri__makeHost: function(host, start, end, strictIPv6) {
      var t1, i;
      H.stringTypeCheck(host);
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      H.boolTypeCheck(strictIPv6);
      if (host == null)
        return;
      if (start == end)
        return "";
      if (J.$eq$(C.JSString_methods.codeUnitAt$1(host, start), 91)) {
        if (typeof end !== "number")
          return end.$sub();
        t1 = end - 1;
        if (!J.$eq$(C.JSString_methods.codeUnitAt$1(host, t1), 93))
          P._Uri__fail(host, start, "Missing end `]` to match `[` in host");
        if (typeof start !== "number")
          return start.$add();
        P.Uri_parseIPv6Address(host, start + 1, t1);
        return J.toLowerCase$0$s(C.JSString_methods.substring$2(host, start, end));
      }
      if (!strictIPv6) {
        i = start;
        while (true) {
          if (typeof i !== "number")
            return i.$lt();
          if (typeof end !== "number")
            return H.iae(end);
          if (!(i < end))
            break;
          if (J.$eq$(C.JSString_methods.codeUnitAt$1(host, i), 58)) {
            P.Uri_parseIPv6Address(host, start, end);
            return "[" + host + "]";
          }
          ++i;
        }
      }
      return P._Uri__normalizeRegName(host, start, end);
    },
    _Uri__isRegNameChar: function(char) {
      var t1;
      H.intTypeCheck(char);
      if (typeof char !== "number")
        return char.$lt();
      if (char < 127) {
        t1 = C.JSInt_methods._shrOtherPositive$1(char, 4);
        if (t1 >= 8)
          return H.ioore(C.List_qNA, t1);
        t1 = !J.$eq$(J.$and$bn(C.List_qNA[t1], 1 << (char & 15) >>> 0), 0);
      } else
        t1 = false;
      return t1;
    },
    _Uri__normalizeRegName: function(host, start, end) {
      var t1, index, sectionStart, buffer, isNormalized, char, replacement, t2, slice, sourceLength, tail;
      H.stringTypeCheck(host);
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      t1 = J.getInterceptor$s(host);
      index = start;
      sectionStart = index;
      buffer = null;
      isNormalized = true;
      while (true) {
        if (typeof index !== "number")
          return index.$lt();
        if (typeof end !== "number")
          return H.iae(end);
        if (!(index < end))
          break;
        c$0: {
          char = t1.codeUnitAt$1(host, index);
          if (char === 37) {
            replacement = P._Uri__normalizeEscape(host, index, true);
            t2 = replacement == null;
            if (t2 && isNormalized) {
              index += 3;
              break c$0;
            }
            if (buffer == null)
              buffer = P.StringBuffer$("");
            slice = C.JSString_methods.substring$2(host, sectionStart, index);
            buffer.write$1(!isNormalized ? J.toLowerCase$0$s(slice) : slice);
            if (t2) {
              replacement = C.JSString_methods.substring$2(host, index, index + 3);
              sourceLength = 3;
            } else if (replacement === "%") {
              replacement = "%25";
              sourceLength = 1;
            } else
              sourceLength = 3;
            buffer.write$1(replacement);
            index += sourceLength;
            sectionStart = index;
            isNormalized = true;
          } else if (P._Uri__isRegNameChar(char)) {
            if (isNormalized) {
              if (typeof char !== "number")
                return H.iae(char);
              t2 = 65 <= char && 90 >= char;
            } else
              t2 = false;
            if (t2) {
              if (buffer == null)
                buffer = P.StringBuffer$("");
              if (typeof sectionStart !== "number")
                return sectionStart.$lt();
              if (sectionStart < index) {
                buffer.write$1(C.JSString_methods.substring$2(host, sectionStart, index));
                sectionStart = index;
              }
              isNormalized = false;
            }
            ++index;
          } else if (P._Uri__isGeneralDelimiter(char))
            P._Uri__fail(host, index, "Invalid character");
          else {
            if (typeof char !== "number")
              return char.$and();
            if ((char & 64512) === 55296 && index + 1 < end) {
              tail = C.JSString_methods.codeUnitAt$1(host, index + 1);
              if (typeof tail !== "number")
                return tail.$and();
              if ((tail & 64512) === 56320) {
                char = 65536 | (char & 1023) << 10 | tail & 1023;
                sourceLength = 2;
              } else
                sourceLength = 1;
            } else
              sourceLength = 1;
            if (buffer == null)
              buffer = P.StringBuffer$("");
            slice = C.JSString_methods.substring$2(host, sectionStart, index);
            buffer.write$1(!isNormalized ? J.toLowerCase$0$s(slice) : slice);
            buffer.write$1(P._Uri__escapeChar(char));
            index += sourceLength;
            sectionStart = index;
          }
        }
      }
      if (buffer == null)
        return t1.substring$2(host, start, end);
      if (typeof sectionStart !== "number")
        return sectionStart.$lt();
      if (sectionStart < end) {
        slice = t1.substring$2(host, sectionStart, end);
        buffer.write$1(!isNormalized ? J.toLowerCase$0$s(slice) : slice);
      }
      return buffer.toString$0(0);
    },
    _Uri__makeScheme: function(scheme, start, end) {
      var i, containsUpperCase, codeUnit;
      H.stringTypeCheck(scheme);
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      if (start == end)
        return "";
      if (!P._Uri__isAlphabeticCharacter(J.getInterceptor$s(scheme).codeUnitAt$1(scheme, start)))
        P._Uri__fail(scheme, start, "Scheme not starting with alphabetic character");
      i = start;
      containsUpperCase = false;
      while (true) {
        if (typeof i !== "number")
          return i.$lt();
        if (typeof end !== "number")
          return H.iae(end);
        if (!(i < end))
          break;
        codeUnit = C.JSString_methods.codeUnitAt$1(scheme, i);
        if (!P._Uri__isSchemeCharacter(codeUnit))
          P._Uri__fail(scheme, i, "Illegal scheme character");
        if (typeof codeUnit !== "number")
          return H.iae(codeUnit);
        if (65 <= codeUnit && codeUnit <= 90)
          containsUpperCase = true;
        ++i;
      }
      scheme = C.JSString_methods.substring$2(scheme, start, end);
      return P._Uri__canonicalizeScheme(containsUpperCase ? J.toLowerCase$0$s(scheme) : scheme);
    },
    _Uri__canonicalizeScheme: function(scheme) {
      H.stringTypeCheck(scheme);
      if (scheme === "http")
        return "http";
      if (scheme === "file")
        return "file";
      if (scheme === "https")
        return "https";
      if (scheme === "package")
        return "package";
      return scheme;
    },
    _Uri__makeUserInfo: function(userInfo, start, end) {
      H.stringTypeCheck(userInfo);
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      if (userInfo == null)
        return "";
      return P._Uri__normalizeOrSubstring(userInfo, start, end, C.List_gRj, false);
    },
    _Uri__makePath: function(path, start, end, pathSegments, scheme, hasAuthority) {
      var t1, isFile, ensureLeadingSlash, t2, result;
      H.stringTypeCheck(path);
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      t1 = P.String;
      H.assertSubtype(pathSegments, "$isIterable", [t1], "$asIterable");
      H.stringTypeCheck(scheme);
      H.boolTypeCheck(hasAuthority);
      isFile = scheme === "file";
      ensureLeadingSlash = isFile || hasAuthority;
      t2 = path == null;
      if (t2 && pathSegments == null)
        return isFile ? "/" : "";
      t2 = !t2;
      if (t2 && pathSegments != null)
        throw H.wrapException(P.ArgumentError$("Both path and pathSegments specified"));
      result = t2 ? P._Uri__normalizeOrSubstring(path, start, end, C.List_qg4, true) : J.join$1$ax(J.map$1$1$ax(pathSegments, new P._Uri__makePath_closure(), t1), "/");
      if (J.getInterceptor$asx(result).get$isEmpty(result)) {
        if (isFile)
          return "/";
      } else if (ensureLeadingSlash && !C.JSString_methods.startsWith$1(result, "/"))
        result = "/" + result;
      return P._Uri__normalizePath(result, scheme, hasAuthority);
    },
    _Uri__normalizePath: function(path, scheme, hasAuthority) {
      H.stringTypeCheck(path);
      H.stringTypeCheck(scheme);
      H.boolTypeCheck(hasAuthority);
      if (J.getInterceptor$asx(scheme).get$isEmpty(scheme) && !hasAuthority && !J.startsWith$1$s(path, "/"))
        return P._Uri__normalizeRelativePath(path, C.JSString_methods.get$isNotEmpty(scheme) || hasAuthority);
      return P._Uri__removeDotSegments(path);
    },
    _Uri__makeQuery: function(query, start, end, queryParameters) {
      var result, t1 = {};
      H.stringTypeCheck(query);
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      H.assertSubtype(queryParameters, "$isMap", [P.String, null], "$asMap");
      if (query != null) {
        if (queryParameters != null)
          throw H.wrapException(P.ArgumentError$("Both query and queryParameters specified"));
        return P._Uri__normalizeOrSubstring(query, start, end, C.List_CVk, true);
      }
      if (queryParameters == null)
        return;
      result = P.StringBuffer$("");
      t1.separator = "";
      queryParameters.forEach$1(0, new P._Uri__makeQuery_closure(new P._Uri__makeQuery_writeParameter(t1, result)));
      return result.toString$0(0);
    },
    _Uri__makeFragment: function(fragment, start, end) {
      H.stringTypeCheck(fragment);
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      if (fragment == null)
        return;
      return P._Uri__normalizeOrSubstring(fragment, start, end, C.List_CVk, true);
    },
    _Uri__normalizeEscape: function(source, index, lowerCase) {
      var t1, firstDigit, secondDigit, firstDigitValue, secondDigitValue, value;
      H.stringTypeCheck(source);
      H.intTypeCheck(index);
      H.boolTypeCheck(lowerCase);
      if (typeof index !== "number")
        return index.$add();
      t1 = index + 2;
      if (t1 >= source.length)
        return "%";
      firstDigit = J.getInterceptor$s(source).codeUnitAt$1(source, index + 1);
      secondDigit = C.JSString_methods.codeUnitAt$1(source, t1);
      firstDigitValue = H.hexDigitValue(firstDigit);
      secondDigitValue = H.hexDigitValue(secondDigit);
      if (typeof firstDigitValue !== "number")
        return firstDigitValue.$lt();
      if (firstDigitValue >= 0) {
        if (typeof secondDigitValue !== "number")
          return secondDigitValue.$lt();
        t1 = secondDigitValue < 0;
      } else
        t1 = true;
      if (t1)
        return "%";
      if (typeof secondDigitValue !== "number")
        return H.iae(secondDigitValue);
      value = firstDigitValue * 16 + secondDigitValue;
      if (P._Uri__isUnreservedChar(value))
        return P.String_String$fromCharCode(lowerCase && 65 <= value && 90 >= value ? (value | 32) >>> 0 : value);
      if (typeof firstDigit !== "number")
        return firstDigit.$ge();
      if (firstDigit < 97) {
        if (typeof secondDigit !== "number")
          return secondDigit.$ge();
        t1 = secondDigit >= 97;
      } else
        t1 = true;
      if (t1)
        return J.toUpperCase$0$s(C.JSString_methods.substring$2(source, index, index + 3));
      return;
    },
    _Uri__escapeChar: function(char) {
      var t1, codeUnits, flag, encodedBytes, index, byte,
        _s16_ = "0123456789ABCDEF";
      H.intTypeCheck(char);
      if (typeof char !== "number")
        return char.$lt();
      if (char < 128) {
        t1 = new Array(3);
        t1.fixed$length = Array;
        codeUnits = H.setRuntimeTypeInfo(t1, [P.int]);
        C.JSArray_methods.$indexSet(codeUnits, 0, 37);
        C.JSArray_methods.$indexSet(codeUnits, 1, C.JSString_methods._codeUnitAt$1(_s16_, C.JSInt_methods._shrOtherPositive$1(char, 4)));
        C.JSArray_methods.$indexSet(codeUnits, 2, C.JSString_methods._codeUnitAt$1(_s16_, char & 15));
      } else {
        if (char > 2047)
          if (char > 65535) {
            flag = 240;
            encodedBytes = 4;
          } else {
            flag = 224;
            encodedBytes = 3;
          }
        else {
          flag = 192;
          encodedBytes = 2;
        }
        t1 = new Array(3 * encodedBytes);
        t1.fixed$length = Array;
        codeUnits = H.setRuntimeTypeInfo(t1, [P.int]);
        for (index = 0; --encodedBytes, encodedBytes >= 0; flag = 128) {
          byte = C.JSInt_methods.$shr(char, 6 * encodedBytes) & 63 | flag;
          C.JSArray_methods.$indexSet(codeUnits, index, 37);
          C.JSArray_methods.$indexSet(codeUnits, index + 1, C.JSString_methods._codeUnitAt$1(_s16_, byte >>> 4));
          C.JSArray_methods.$indexSet(codeUnits, index + 2, C.JSString_methods._codeUnitAt$1(_s16_, byte & 15));
          index += 3;
        }
      }
      return P.String_String$fromCharCodes(codeUnits, 0, null);
    },
    _Uri__normalizeOrSubstring: function(component, start, end, charTable, escapeDelimiters) {
      var t1;
      H.stringTypeCheck(component);
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      t1 = P._Uri__normalize(component, start, end, H.assertSubtype(charTable, "$isList", [P.int], "$asList"), H.boolTypeCheck(escapeDelimiters));
      return t1 == null ? J.substring$2$s(component, start, end) : t1;
    },
    _Uri__normalize: function(component, start, end, charTable, escapeDelimiters) {
      var t1, t2, t3, index, sectionStart, buffer, char, replacement, sourceLength, t4, tail;
      H.stringTypeCheck(component);
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      H.assertSubtype(charTable, "$isList", [P.int], "$asList");
      t1 = !H.boolTypeCheck(escapeDelimiters);
      t2 = J.getInterceptor$s(component);
      t3 = J.getInterceptor$asx(charTable);
      index = start;
      sectionStart = index;
      buffer = null;
      while (true) {
        if (typeof index !== "number")
          return index.$lt();
        if (typeof end !== "number")
          return H.iae(end);
        if (!(index < end))
          break;
        c$0: {
          char = t2.codeUnitAt$1(component, index);
          if (typeof char !== "number")
            return char.$lt();
          if (char < 127 && !J.$eq$(J.$and$bn(t3.$index(charTable, C.JSInt_methods._shrOtherPositive$1(char, 4)), 1 << (char & 15) >>> 0), 0))
            ++index;
          else {
            if (char === 37) {
              replacement = P._Uri__normalizeEscape(component, index, false);
              if (replacement == null) {
                index += 3;
                break c$0;
              }
              if ("%" === replacement) {
                replacement = "%25";
                sourceLength = 1;
              } else
                sourceLength = 3;
            } else if (t1 && P._Uri__isGeneralDelimiter(char)) {
              P._Uri__fail(component, index, "Invalid character");
              replacement = null;
              sourceLength = null;
            } else {
              if ((char & 64512) === 55296) {
                t4 = index + 1;
                if (t4 < end) {
                  tail = C.JSString_methods.codeUnitAt$1(component, t4);
                  if (typeof tail !== "number")
                    return tail.$and();
                  if ((tail & 64512) === 56320) {
                    char = 65536 | (char & 1023) << 10 | tail & 1023;
                    sourceLength = 2;
                  } else
                    sourceLength = 1;
                } else
                  sourceLength = 1;
              } else
                sourceLength = 1;
              replacement = P._Uri__escapeChar(char);
            }
            if (buffer == null)
              buffer = P.StringBuffer$("");
            buffer.write$1(C.JSString_methods.substring$2(component, sectionStart, index));
            buffer.write$1(replacement);
            if (typeof sourceLength !== "number")
              return H.iae(sourceLength);
            index += sourceLength;
            sectionStart = index;
          }
        }
      }
      if (buffer == null)
        return;
      if (typeof sectionStart !== "number")
        return sectionStart.$lt();
      if (sectionStart < end)
        buffer.write$1(t2.substring$2(component, sectionStart, end));
      return buffer.toString$0(0);
    },
    _Uri__isSchemeCharacter: function(ch) {
      var t1;
      H.intTypeCheck(ch);
      if (typeof ch !== "number")
        return ch.$lt();
      if (ch < 128) {
        t1 = C.JSInt_methods._shrOtherPositive$1(ch, 4);
        if (t1 >= 8)
          return H.ioore(C.List_JYB, t1);
        t1 = !J.$eq$(J.$and$bn(C.List_JYB[t1], 1 << (ch & 15) >>> 0), 0);
      } else
        t1 = false;
      return t1;
    },
    _Uri__isGeneralDelimiter: function(ch) {
      var t1;
      H.intTypeCheck(ch);
      if (typeof ch !== "number")
        return ch.$le();
      if (ch <= 93) {
        t1 = C.JSInt_methods._shrOtherPositive$1(ch, 4);
        if (t1 >= 8)
          return H.ioore(C.List_2Vk, t1);
        t1 = !J.$eq$(J.$and$bn(C.List_2Vk[t1], 1 << (ch & 15) >>> 0), 0);
      } else
        t1 = false;
      return t1;
    },
    _Uri__mayContainDotSegments: function(path) {
      H.stringTypeCheck(path);
      if (J.getInterceptor$s(path).startsWith$1(path, "."))
        return true;
      return C.JSString_methods.indexOf$1(path, "/.") !== -1;
    },
    _Uri__removeDotSegments: function(path) {
      var t1, output, appendSlash, t2;
      H.stringTypeCheck(path);
      if (!P._Uri__mayContainDotSegments(path))
        return path;
      t1 = P.String;
      output = H.setRuntimeTypeInfo([], [t1]);
      for (t1 = C.JSArray_methods.get$iterator(H.setRuntimeTypeInfo(path.split("/"), [t1])), appendSlash = false; t1.moveNext$0();) {
        t2 = t1.get$current();
        if (t2 === "..") {
          if (C.JSArray_methods.get$isNotEmpty(output)) {
            if (0 >= output.length)
              return H.ioore(output, -1);
            output.pop();
            if (C.JSArray_methods.get$isEmpty(output))
              C.JSArray_methods.add$1(output, "");
          }
          appendSlash = true;
        } else if ("." === t2)
          appendSlash = true;
        else {
          C.JSArray_methods.add$1(output, t2);
          appendSlash = false;
        }
      }
      if (appendSlash)
        C.JSArray_methods.add$1(output, "");
      return C.JSArray_methods.join$1(output, "/");
    },
    _Uri__normalizeRelativePath: function(path, allowScheme) {
      var t1, output, appendSlash, t2;
      H.stringTypeCheck(path);
      H.boolTypeCheck(allowScheme);
      if (!P._Uri__mayContainDotSegments(path))
        return !allowScheme ? P._Uri__escapeScheme(path) : path;
      t1 = P.String;
      output = H.setRuntimeTypeInfo([], [t1]);
      for (t1 = C.JSArray_methods.get$iterator(H.setRuntimeTypeInfo(path.split("/"), [t1])), appendSlash = false; t1.moveNext$0();) {
        t2 = t1.get$current();
        if (".." === t2)
          if (!C.JSArray_methods.get$isEmpty(output) && !J.$eq$(C.JSArray_methods.get$last(output), "..")) {
            if (0 >= output.length)
              return H.ioore(output, -1);
            output.pop();
            appendSlash = true;
          } else {
            C.JSArray_methods.add$1(output, "..");
            appendSlash = false;
          }
        else if ("." === t2)
          appendSlash = true;
        else {
          C.JSArray_methods.add$1(output, t2);
          appendSlash = false;
        }
      }
      if (!C.JSArray_methods.get$isEmpty(output)) {
        t1 = output.length;
        if (t1 === 1) {
          if (0 >= t1)
            return H.ioore(output, 0);
          t1 = J.get$isEmpty$asx(output[0]);
        } else
          t1 = false;
      } else
        t1 = true;
      if (t1)
        return "./";
      if (appendSlash || J.$eq$(C.JSArray_methods.get$last(output), ".."))
        C.JSArray_methods.add$1(output, "");
      if (!allowScheme) {
        if (0 >= output.length)
          return H.ioore(output, 0);
        C.JSArray_methods.$indexSet(output, 0, P._Uri__escapeScheme(output[0]));
      }
      return C.JSArray_methods.join$1(output, "/");
    },
    _Uri__escapeScheme: function(path) {
      var t1, i, char, t2;
      H.stringTypeCheck(path);
      t1 = path.length;
      if (t1 >= 2 && P._Uri__isAlphabeticCharacter(J._codeUnitAt$1$s(path, 0)))
        for (i = 1; i < t1; ++i) {
          char = C.JSString_methods._codeUnitAt$1(path, i);
          if (char === 58)
            return H.S(C.JSString_methods.substring$2(path, 0, i)) + "%3A" + H.S(C.JSString_methods.substring$1(path, i + 1));
          if (typeof char !== "number")
            return char.$gt();
          if (char <= 127) {
            t2 = C.JSInt_methods._shrOtherPositive$1(char, 4);
            if (t2 >= 8)
              return H.ioore(C.List_JYB, t2);
            t2 = J.$eq$(J.$and$bn(C.List_JYB[t2], 1 << (char & 15) >>> 0), 0);
          } else
            t2 = true;
          if (t2)
            break;
        }
      return path;
    },
    _Uri__toWindowsFilePath: function(uri) {
      var segments, t1, hasDriveLetter, result, host;
      H.interceptedTypeCheck(uri, "$isUri");
      segments = uri.get$pathSegments();
      t1 = J.getInterceptor$asx(segments);
      if (J.$gt$n(t1.get$length(segments), 0) && J.$eq$(J.get$length$asx(t1.$index(segments, 0)), 2) && J.$eq$(J.codeUnitAt$1$s(t1.$index(segments, 0), 1), 58)) {
        P._Uri__checkWindowsDriveLetter(J.codeUnitAt$1$s(t1.$index(segments, 0), 0), false);
        P._Uri__checkWindowsPathReservedCharacters(segments, false, 1);
        hasDriveLetter = true;
      } else {
        P._Uri__checkWindowsPathReservedCharacters(segments, false, 0);
        hasDriveLetter = false;
      }
      result = P.StringBuffer$("");
      if (uri.get$hasAbsolutePath() && !hasDriveLetter)
        result.write$1("\\");
      if (uri.get$hasAuthority()) {
        host = uri.get$host();
        if (J.get$isNotEmpty$asx(host)) {
          result.write$1("\\");
          result.write$1(host);
          result.write$1("\\");
        }
      }
      result.writeAll$2(segments, "\\");
      if (hasDriveLetter && J.$eq$(t1.get$length(segments), 1))
        result.write$1("\\");
      return result.toString$0(0);
    },
    _Uri__hexCharPairToByte: function(s, pos) {
      var t1, byte, i, charCode;
      H.stringTypeCheck(s);
      H.intTypeCheck(pos);
      for (t1 = J.getInterceptor$s(s), byte = 0, i = 0; i < 2; ++i) {
        if (typeof pos !== "number")
          return pos.$add();
        charCode = t1.codeUnitAt$1(s, pos + i);
        if (typeof charCode !== "number")
          return H.iae(charCode);
        if (48 <= charCode && charCode <= 57)
          byte = byte * 16 + charCode - 48;
        else {
          charCode = (charCode | 32) >>> 0;
          if (97 <= charCode && charCode <= 102)
            byte = byte * 16 + charCode - 87;
          else
            throw H.wrapException(P.ArgumentError$("Invalid URL encoding"));
        }
      }
      return byte;
    },
    _Uri__uriDecode: function(text, start, end, encoding, plusToSpace) {
      var simple, t1, i, codeUnit, t2, bytes;
      H.stringTypeCheck(text);
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      H.interceptedTypeCheck(encoding, "$isEncoding");
      H.boolTypeCheck(plusToSpace);
      t1 = J.getInterceptor$s(text);
      i = start;
      while (true) {
        if (typeof i !== "number")
          return i.$lt();
        if (typeof end !== "number")
          return H.iae(end);
        if (!(i < end)) {
          simple = true;
          break;
        }
        codeUnit = t1.codeUnitAt$1(text, i);
        if (typeof codeUnit !== "number")
          return codeUnit.$gt();
        if (codeUnit <= 127)
          if (codeUnit !== 37)
            t2 = plusToSpace && codeUnit === 43;
          else
            t2 = true;
        else
          t2 = true;
        if (t2) {
          simple = false;
          break;
        }
        ++i;
      }
      if (simple)
        if (C.C_Utf8Codec === encoding || C.C_Latin1Codec === encoding || C.C_AsciiCodec === encoding)
          return t1.substring$2(text, start, end);
        else
          bytes = J.get$codeUnits$s(t1.substring$2(text, start, end));
      else {
        bytes = H.setRuntimeTypeInfo([], [P.int]);
        i = start;
        while (true) {
          if (typeof i !== "number")
            return i.$lt();
          if (!(i < end))
            break;
          codeUnit = t1.codeUnitAt$1(text, i);
          if (typeof codeUnit !== "number")
            return codeUnit.$gt();
          if (codeUnit > 127)
            throw H.wrapException(P.ArgumentError$("Illegal percent encoding in URI"));
          if (codeUnit === 37) {
            if (i + 3 > text.length)
              throw H.wrapException(P.ArgumentError$("Truncated URI"));
            C.JSArray_methods.add$1(bytes, P._Uri__hexCharPairToByte(text, i + 1));
            i += 2;
          } else if (plusToSpace && codeUnit === 43)
            C.JSArray_methods.add$1(bytes, 32);
          else
            C.JSArray_methods.add$1(bytes, codeUnit);
          ++i;
        }
      }
      return encoding.decode$1(bytes);
    },
    _Uri__isAlphabeticCharacter: function(codeUnit) {
      var lowerCase;
      H.intTypeCheck(codeUnit);
      if (typeof codeUnit !== "number")
        return codeUnit.$or();
      lowerCase = (codeUnit | 32) >>> 0;
      return 97 <= lowerCase && lowerCase <= 122;
    },
    _Uri__isUnreservedChar: function(char) {
      var t1;
      H.intTypeCheck(char);
      if (typeof char !== "number")
        return char.$lt();
      if (char < 127) {
        t1 = C.JSInt_methods._shrOtherPositive$1(char, 4);
        if (t1 >= 8)
          return H.ioore(C.List_nxB, t1);
        t1 = !J.$eq$(J.$and$bn(C.List_nxB[t1], 1 << (char & 15) >>> 0), 0);
      } else
        t1 = false;
      return t1;
    },
    UriData$_: function(_text, _separatorIndices, _uriCache) {
      return new P.UriData(_text, _separatorIndices, _uriCache, []);
    },
    UriData_UriData$fromString: function($content, base64, encoding, mimeType, parameters) {
      var t1, buffer, indices, charsetName, encodingName, _null = null;
      H.stringTypeCheck($content);
      H.stringTypeCheck(mimeType);
      H.interceptedTypeCheck(encoding, "$isEncoding");
      t1 = P.String;
      H.assertSubtype(parameters, "$isMap", [t1, t1], "$asMap");
      H.boolTypeCheck(base64);
      buffer = P.StringBuffer$("");
      indices = H.setRuntimeTypeInfo([-1], [P.int]);
      charsetName = parameters != null ? parameters.$index(0, "charset") : _null;
      if (encoding == null) {
        if (charsetName != null)
          encoding = P.Encoding_getByName(charsetName);
        encodingName = _null;
      } else
        encodingName = charsetName == null ? encoding.get$name(encoding) : _null;
      if (encoding == null)
        encoding = C.C_AsciiCodec;
      P.UriData__writeUri(mimeType, encodingName, parameters, buffer, indices);
      C.JSArray_methods.add$1(indices, buffer.get$length(buffer));
      if (base64) {
        buffer.write$1(";base64,");
        C.JSArray_methods.add$1(indices, J.$sub$n(buffer.get$length(buffer), 1));
        buffer.write$1(encoding.fuse$1$1(C.Base64Codec_Base64Encoder_false, t1).encode$1($content));
      } else {
        buffer.write$1(",");
        P.UriData__uriEncodeBytes(C.List_CVk, encoding.encode$1($content), buffer);
      }
      return P.UriData$_(buffer.toString$0(0), indices, _null);
    },
    UriData__writeUri: function(mimeType, charsetName, parameters, buffer, indices) {
      var t1, slashIndex;
      H.stringTypeCheck(mimeType);
      H.stringTypeCheck(charsetName);
      t1 = P.String;
      H.assertSubtype(parameters, "$isMap", [t1, t1], "$asMap");
      H.interceptedTypeCheck(buffer, "$isStringBuffer");
      H.listTypeCheck(indices);
      if (mimeType == null || mimeType === "text/plain")
        mimeType = "";
      if (J.getInterceptor$asx(mimeType).get$isEmpty(mimeType) || mimeType === "application/octet-stream")
        buffer.write$1(mimeType);
      else {
        slashIndex = P.UriData__validateMimeType(mimeType);
        if (typeof slashIndex !== "number")
          return slashIndex.$lt();
        if (slashIndex < 0)
          throw H.wrapException(P.ArgumentError$value(mimeType, "mimeType", "Invalid MIME type"));
        buffer.write$1(P._Uri__uriEncode(C.List_qFt, C.JSString_methods.substring$2(mimeType, 0, slashIndex), C.C_Utf8Codec, false));
        buffer.write$1("/");
        buffer.write$1(P._Uri__uriEncode(C.List_qFt, C.JSString_methods.substring$1(mimeType, slashIndex + 1), C.C_Utf8Codec, false));
      }
      if (charsetName != null) {
        if (indices != null) {
          t1 = J.getInterceptor$ax(indices);
          t1.add$1(indices, buffer.get$length(buffer));
          t1.add$1(indices, J.$add$ansx(buffer.get$length(buffer), 8));
        }
        buffer.write$1(";charset=");
        buffer.write$1(P._Uri__uriEncode(C.List_qFt, charsetName, C.C_Utf8Codec, false));
      }
      if (parameters != null)
        parameters.forEach$1(0, new P.UriData__writeUri_closure(indices, buffer));
    },
    UriData__validateMimeType: function(mimeType) {
      var t1, slashIndex, i;
      H.stringTypeCheck(mimeType);
      for (t1 = mimeType.length, slashIndex = -1, i = 0; i < t1; ++i) {
        if (C.JSString_methods._codeUnitAt$1(mimeType, i) !== 47)
          continue;
        if (slashIndex < 0) {
          slashIndex = i;
          continue;
        }
        return -1;
      }
      return slashIndex;
    },
    UriData__parse: function(text, start, sourceUri) {
      var indices, t1, i, slashIndex, char, t2, equalsIndex, lastSeparator, data,
        _s17_ = "Invalid MIME type";
      H.stringTypeCheck(text);
      H.intTypeCheck(start);
      H.interceptedTypeCheck(sourceUri, "$isUri");
      if (typeof start !== "number")
        return start.$sub();
      indices = H.setRuntimeTypeInfo([start - 1], [P.int]);
      for (t1 = text.length, i = start, slashIndex = -1, char = null; i < t1; ++i) {
        char = C.JSString_methods.codeUnitAt$1(text, i);
        t2 = J.getInterceptor$(char);
        if (t2.$eq(char, 44) || t2.$eq(char, 59))
          break;
        if (t2.$eq(char, 47)) {
          if (slashIndex < 0) {
            slashIndex = i;
            continue;
          }
          throw H.wrapException(P.FormatException$(_s17_, text, i));
        }
      }
      if (slashIndex < 0 && i > start)
        throw H.wrapException(P.FormatException$(_s17_, text, i));
      for (; !J.$eq$(char, 44);) {
        C.JSArray_methods.add$1(indices, i);
        ++i;
        for (equalsIndex = -1; i < t1; ++i) {
          char = C.JSString_methods.codeUnitAt$1(text, i);
          t2 = J.getInterceptor$(char);
          if (t2.$eq(char, 61)) {
            if (equalsIndex < 0)
              equalsIndex = i;
          } else if (t2.$eq(char, 59) || t2.$eq(char, 44))
            break;
        }
        if (equalsIndex >= 0)
          C.JSArray_methods.add$1(indices, equalsIndex);
        else {
          lastSeparator = C.JSArray_methods.get$last(indices);
          if (J.$eq$(char, 44)) {
            if (typeof lastSeparator !== "number")
              return lastSeparator.$add();
            t2 = i !== lastSeparator + 7 || !C.JSString_methods.startsWith$2(text, "base64", lastSeparator + 1);
          } else
            t2 = true;
          if (t2)
            throw H.wrapException(P.FormatException$("Expecting '='", text, i));
          break;
        }
      }
      C.JSArray_methods.add$1(indices, i);
      t2 = i + 1;
      if (C.JSInt_methods.get$isOdd(indices.length))
        text = C.Base64Codec_Base64Encoder_false.normalize$3(text, t2, t1);
      else {
        data = P._Uri__normalize(text, t2, t1, C.List_CVk, true);
        if (data != null)
          text = C.JSString_methods.replaceRange$3(text, t2, t1, data);
      }
      return P.UriData$_(text, indices, sourceUri);
    },
    UriData__uriEncodeBytes: function(canonicalTable, bytes, buffer) {
      var t2, byteOr, i, t3, byte,
        _s16_ = "0123456789ABCDEF",
        t1 = [P.int];
      H.assertSubtype(canonicalTable, "$isList", t1, "$asList");
      H.assertSubtype(bytes, "$isList", t1, "$asList");
      H.interceptedTypeCheck(buffer, "$isStringSink");
      t1 = J.getInterceptor$asx(bytes);
      t2 = J.getInterceptor$asx(canonicalTable);
      byteOr = 0;
      i = 0;
      while (true) {
        t3 = t1.get$length(bytes);
        if (typeof t3 !== "number")
          return H.iae(t3);
        if (!(i < t3))
          break;
        byte = t1.$index(bytes, i);
        if (typeof byte !== "number")
          return H.iae(byte);
        byteOr |= byte;
        if (byte < 128 && !J.$eq$(J.$and$bn(t2.$index(canonicalTable, C.JSInt_methods._shrOtherPositive$1(byte, 4)), 1 << (byte & 15) >>> 0), 0))
          buffer.writeCharCode$1(byte);
        else {
          buffer.writeCharCode$1(37);
          buffer.writeCharCode$1(C.JSString_methods._codeUnitAt$1(_s16_, C.JSInt_methods._shrOtherPositive$1(byte, 4)));
          buffer.writeCharCode$1(C.JSString_methods._codeUnitAt$1(_s16_, byte & 15));
        }
        ++i;
      }
      if ((byteOr & 4294967040) >>> 0 !== 0) {
        i = 0;
        while (true) {
          t2 = t1.get$length(bytes);
          if (typeof t2 !== "number")
            return H.iae(t2);
          if (!(i < t2))
            break;
          byte = t1.$index(bytes, i);
          if (typeof byte !== "number")
            return byte.$lt();
          if (byte < 0 || byte > 255)
            throw H.wrapException(P.ArgumentError$value(byte, "non-byte value", null));
          ++i;
        }
      }
    },
    _createTables: function() {
      var _s77_ = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-._~!$&'()*+,;=",
        _s1_ = ".", _s1_0 = ":", _s1_1 = "/", _s1_2 = "?", _s1_3 = "#",
        tables = P.List_List$generate(22, new P._createTables_closure(), true, P.Uint8List),
        t1 = new P._createTables_build(tables),
        t2 = new P._createTables_setChars(),
        t3 = new P._createTables_setRange(),
        b = H.interceptedTypeCheck(t1.call$2(0, 225), "$isUint8List");
      t2.call$3(b, _s77_, 1);
      t2.call$3(b, _s1_, 14);
      t2.call$3(b, _s1_0, 34);
      t2.call$3(b, _s1_1, 3);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = H.interceptedTypeCheck(t1.call$2(14, 225), "$isUint8List");
      t2.call$3(b, _s77_, 1);
      t2.call$3(b, _s1_, 15);
      t2.call$3(b, _s1_0, 34);
      t2.call$3(b, _s1_1, 234);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = H.interceptedTypeCheck(t1.call$2(15, 225), "$isUint8List");
      t2.call$3(b, _s77_, 1);
      t2.call$3(b, "%", 225);
      t2.call$3(b, _s1_0, 34);
      t2.call$3(b, _s1_1, 9);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = H.interceptedTypeCheck(t1.call$2(1, 225), "$isUint8List");
      t2.call$3(b, _s77_, 1);
      t2.call$3(b, _s1_0, 34);
      t2.call$3(b, _s1_1, 10);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = H.interceptedTypeCheck(t1.call$2(2, 235), "$isUint8List");
      t2.call$3(b, _s77_, 139);
      t2.call$3(b, _s1_1, 131);
      t2.call$3(b, _s1_, 146);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = H.interceptedTypeCheck(t1.call$2(3, 235), "$isUint8List");
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s1_1, 68);
      t2.call$3(b, _s1_, 18);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = H.interceptedTypeCheck(t1.call$2(4, 229), "$isUint8List");
      t2.call$3(b, _s77_, 5);
      t3.call$3(b, "AZ", 229);
      t2.call$3(b, _s1_0, 102);
      t2.call$3(b, "@", 68);
      t2.call$3(b, "[", 232);
      t2.call$3(b, _s1_1, 138);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = H.interceptedTypeCheck(t1.call$2(5, 229), "$isUint8List");
      t2.call$3(b, _s77_, 5);
      t3.call$3(b, "AZ", 229);
      t2.call$3(b, _s1_0, 102);
      t2.call$3(b, "@", 68);
      t2.call$3(b, _s1_1, 138);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = H.interceptedTypeCheck(t1.call$2(6, 231), "$isUint8List");
      t3.call$3(b, "19", 7);
      t2.call$3(b, "@", 68);
      t2.call$3(b, _s1_1, 138);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = H.interceptedTypeCheck(t1.call$2(7, 231), "$isUint8List");
      t3.call$3(b, "09", 7);
      t2.call$3(b, "@", 68);
      t2.call$3(b, _s1_1, 138);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      t2.call$3(H.interceptedTypeCheck(t1.call$2(8, 8), "$isUint8List"), "]", 5);
      b = H.interceptedTypeCheck(t1.call$2(9, 235), "$isUint8List");
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s1_, 16);
      t2.call$3(b, _s1_1, 234);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = H.interceptedTypeCheck(t1.call$2(16, 235), "$isUint8List");
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s1_, 17);
      t2.call$3(b, _s1_1, 234);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = H.interceptedTypeCheck(t1.call$2(17, 235), "$isUint8List");
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s1_1, 9);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = H.interceptedTypeCheck(t1.call$2(10, 235), "$isUint8List");
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s1_, 18);
      t2.call$3(b, _s1_1, 234);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = H.interceptedTypeCheck(t1.call$2(18, 235), "$isUint8List");
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s1_, 19);
      t2.call$3(b, _s1_1, 234);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = H.interceptedTypeCheck(t1.call$2(19, 235), "$isUint8List");
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s1_1, 234);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = H.interceptedTypeCheck(t1.call$2(11, 235), "$isUint8List");
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s1_1, 10);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = H.interceptedTypeCheck(t1.call$2(12, 236), "$isUint8List");
      t2.call$3(b, _s77_, 12);
      t2.call$3(b, _s1_2, 12);
      t2.call$3(b, _s1_3, 205);
      b = H.interceptedTypeCheck(t1.call$2(13, 237), "$isUint8List");
      t2.call$3(b, _s77_, 13);
      t2.call$3(b, _s1_2, 13);
      t3.call$3(H.interceptedTypeCheck(t1.call$2(20, 245), "$isUint8List"), "az", 21);
      b = H.interceptedTypeCheck(t1.call$2(21, 245), "$isUint8List");
      t3.call$3(b, "az", 21);
      t3.call$3(b, "09", 21);
      t2.call$3(b, "+-.", 21);
      return tables;
    },
    _scan: function(uri, start, end, state, indices) {
      var tables, t1, t2, t3, i, table, char, transition;
      H.stringTypeCheck(uri);
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      H.intTypeCheck(state);
      H.assertSubtype(indices, "$isList", [P.int], "$asList");
      tables = $.$get$_scannerTables();
      t1 = J.getInterceptor$ax(indices);
      t2 = J.getInterceptor$asx(tables);
      t3 = J.getInterceptor$s(uri);
      i = start;
      while (true) {
        if (typeof i !== "number")
          return i.$lt();
        if (typeof end !== "number")
          return H.iae(end);
        if (!(i < end))
          break;
        table = t2.$index(tables, state);
        char = J.$xor$n(t3.codeUnitAt$1(uri, i), 96);
        if (typeof char !== "number")
          return char.$gt();
        if (char > 95)
          char = 31;
        if (char < 0 || char >= table.length)
          return H.ioore(table, char);
        transition = table[char];
        state = transition & 31;
        t1.$indexSet(indices, C.JSInt_methods._shrOtherPositive$1(transition, 5), i);
        ++i;
      }
      return state;
    },
    _SimpleUri$: function(_uri, _schemeEnd, _hostStart, _portStart, _pathStart, _queryStart, _fragmentStart, _schemeCache) {
      return new P._SimpleUri(_uri, _schemeEnd, _hostStart, _portStart, _pathStart, _queryStart, _fragmentStart, _schemeCache, []);
    },
    _DataUri$: function(_data, path, query) {
      var _null = null;
      return new P._DataUri("data", _null, _null, _null, path, query, _null, []);
    },
    _startsWithData: function(text, start) {
      var delta, t1, t2, t3, t4;
      H.stringTypeCheck(text);
      H.intTypeCheck(start);
      if (typeof start !== "number")
        return start.$add();
      delta = J.$mul$ns(J.$xor$n(J.getInterceptor$s(text).codeUnitAt$1(text, start + 4), 58), 3);
      t1 = J.$xor$n(C.JSString_methods.codeUnitAt$1(text, start), 100);
      if (typeof delta !== "number")
        return delta.$or();
      if (typeof t1 !== "number")
        return H.iae(t1);
      t2 = J.$xor$n(C.JSString_methods.codeUnitAt$1(text, start + 1), 97);
      if (typeof t2 !== "number")
        return H.iae(t2);
      t3 = J.$xor$n(C.JSString_methods.codeUnitAt$1(text, start + 2), 116);
      if (typeof t3 !== "number")
        return H.iae(t3);
      t4 = J.$xor$n(C.JSString_methods.codeUnitAt$1(text, start + 3), 97);
      if (typeof t4 !== "number")
        return H.iae(t4);
      return (delta | t1 | t2 | t3 | t4) >>> 0;
    },
    _stringOrNullLength: function(s) {
      H.stringTypeCheck(s);
      return s == null ? 0 : s.length;
    },
    _symbolMapToStringMap_closure: function _symbolMapToStringMap_closure() {
    },
    NoSuchMethodError_toString_closure: function NoSuchMethodError_toString_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.sb = t1;
      this.$ti = t2;
    },
    _CompileTimeError: function _CompileTimeError() {
    },
    _DuplicatedFieldInitializerError: function _DuplicatedFieldInitializerError() {
    },
    _BigIntImpl: function _BigIntImpl() {
    },
    _BigIntReduction: function _BigIntReduction() {
    },
    _BigIntClassic: function _BigIntClassic() {
    },
    Deprecated: function Deprecated() {
    },
    _Override: function _Override() {
    },
    Provisional: function Provisional() {
    },
    _Proxy0: function _Proxy0() {
    },
    pragma: function pragma() {
    },
    BigInt: function BigInt() {
    },
    bool: function bool(t0) {
      this.$ti = t0;
    },
    Comparable: function Comparable() {
    },
    DateTime: function DateTime() {
    },
    double: function double() {
    },
    Duration: function Duration() {
    },
    Error: function Error() {
    },
    AssertionError: function AssertionError() {
    },
    TypeError: function TypeError() {
    },
    CastError: function CastError() {
    },
    NullThrownError: function NullThrownError(t0) {
      this.$ti = t0;
    },
    ArgumentError: function ArgumentError(t0, t1, t2, t3, t4) {
      var _ = this;
      _._hasValue = t0;
      _.invalidValue = t1;
      _.name = t2;
      _.message = t3;
      _.$ti = t4;
    },
    RangeError: function RangeError(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.start = t0;
      _.end = t1;
      _._hasValue = t2;
      _.invalidValue = t3;
      _.name = t4;
      _.message = t5;
      _.$ti = t6;
    },
    IndexError: function IndexError(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.length = t0;
      _._hasValue = t1;
      _.invalidValue = t2;
      _.name = t3;
      _.message = t4;
      _.$ti = t5;
    },
    FallThroughError: function FallThroughError() {
    },
    AbstractClassInstantiationError: function AbstractClassInstantiationError() {
    },
    NoSuchMethodError: function NoSuchMethodError(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._receiver = t0;
      _._memberName = t1;
      _._arguments = t2;
      _._namedArguments = t3;
      _._existingArgumentNames = t4;
      _.$ti = t5;
    },
    UnsupportedError: function UnsupportedError(t0, t1) {
      this.message = t0;
      this.$ti = t1;
    },
    UnimplementedError: function UnimplementedError(t0, t1) {
      this.message = t0;
      this.$ti = t1;
    },
    StateError: function StateError(t0, t1) {
      this.message = t0;
      this.$ti = t1;
    },
    ConcurrentModificationError: function ConcurrentModificationError(t0, t1) {
      this.modifiedObject = t0;
      this.$ti = t1;
    },
    OutOfMemoryError: function OutOfMemoryError(t0) {
      this.$ti = t0;
    },
    StackOverflowError: function StackOverflowError(t0) {
      this.$ti = t0;
    },
    CyclicInitializationError: function CyclicInitializationError(t0, t1) {
      this.variableName = t0;
      this.$ti = t1;
    },
    Exception: function Exception() {
    },
    _Exception: function _Exception() {
    },
    FormatException: function FormatException(t0, t1, t2, t3) {
      var _ = this;
      _.message = t0;
      _.source = t1;
      _.offset = t2;
      _.$ti = t3;
    },
    IntegerDivisionByZeroException: function IntegerDivisionByZeroException() {
    },
    Expando: function Expando() {
    },
    Function: function Function() {
    },
    int: function int() {
    },
    Invocation: function Invocation() {
    },
    _Invocation: function _Invocation() {
    },
    Iterable: function Iterable() {
    },
    _GeneratorIterable: function _GeneratorIterable() {
    },
    BidirectionalIterator: function BidirectionalIterator() {
    },
    Iterator: function Iterator() {
    },
    List: function List() {
    },
    Map: function Map() {
    },
    MapEntry: function MapEntry() {
    },
    Null: function Null(t0) {
      this.$ti = t0;
    },
    num: function num() {
    },
    Object: function Object(t0) {
      this.$ti = t0;
    },
    Pattern: function Pattern() {
    },
    Match: function Match() {
    },
    RegExp: function RegExp() {
    },
    RegExpMatch: function RegExpMatch() {
    },
    Set: function Set() {
    },
    Sink: function Sink() {
    },
    StackTrace: function StackTrace() {
    },
    _StringStackTrace: function _StringStackTrace(t0, t1) {
      this._stackTrace = t0;
      this.$ti = t1;
    },
    Stopwatch: function Stopwatch() {
    },
    String: function String() {
    },
    Runes: function Runes() {
    },
    RuneIterator: function RuneIterator() {
    },
    StringBuffer: function StringBuffer(t0, t1) {
      this._contents = t0;
      this.$ti = t1;
    },
    StringSink: function StringSink() {
    },
    Symbol0: function Symbol0() {
    },
    Type: function Type() {
    },
    Uri: function Uri() {
    },
    Uri__parseIPv4Address_error: function Uri__parseIPv4Address_error(t0, t1) {
      this.host = t0;
      this.$ti = t1;
    },
    Uri_parseIPv6Address_error: function Uri_parseIPv6Address_error(t0, t1) {
      this.host = t0;
      this.$ti = t1;
    },
    Uri_parseIPv6Address_parseHex: function Uri_parseIPv6Address_parseHex(t0, t1, t2) {
      this.error = t0;
      this.host = t1;
      this.$ti = t2;
    },
    _Uri: function _Uri(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _.scheme = t0;
      _._userInfo = t1;
      _._host = t2;
      _._port = t3;
      _.path = t4;
      _._query = t5;
      _._fragment = t6;
      _._hashCodeCache = _._text = _._pathSegments = null;
      _.$ti = t7;
    },
    _Uri__Uri$notSimple_closure: function _Uri__Uri$notSimple_closure(t0, t1, t2) {
      this.uri = t0;
      this.portStart = t1;
      this.$ti = t2;
    },
    _Uri__checkNonWindowsPathReservedCharacters_closure: function _Uri__checkNonWindowsPathReservedCharacters_closure(t0, t1) {
      this.argumentError = t0;
      this.$ti = t1;
    },
    _Uri__makePath_closure: function _Uri__makePath_closure(t0) {
      this.$ti = t0;
    },
    _Uri__makeQuery_writeParameter: function _Uri__makeQuery_writeParameter(t0, t1, t2) {
      this._box_0 = t0;
      this.result = t1;
      this.$ti = t2;
    },
    _Uri__makeQuery_closure: function _Uri__makeQuery_closure(t0, t1) {
      this.writeParameter = t0;
      this.$ti = t1;
    },
    UriData: function UriData(t0, t1, t2, t3) {
      var _ = this;
      _._text = t0;
      _._separatorIndices = t1;
      _._uriCache = t2;
      _.$ti = t3;
    },
    UriData__writeUri_closure: function UriData__writeUri_closure(t0, t1, t2) {
      this.indices = t0;
      this.buffer = t1;
      this.$ti = t2;
    },
    _createTables_closure: function _createTables_closure(t0) {
      this.$ti = t0;
    },
    _createTables_build: function _createTables_build(t0, t1) {
      this.tables = t0;
      this.$ti = t1;
    },
    _createTables_setChars: function _createTables_setChars(t0) {
      this.$ti = t0;
    },
    _createTables_setRange: function _createTables_setRange(t0) {
      this.$ti = t0;
    },
    _SimpleUri: function _SimpleUri(t0, t1, t2, t3, t4, t5, t6, t7, t8) {
      var _ = this;
      _._uri = t0;
      _._schemeEnd = t1;
      _._hostStart = t2;
      _._portStart = t3;
      _._pathStart = t4;
      _._queryStart = t5;
      _._fragmentStart = t6;
      _._schemeCache = t7;
      _._hashCodeCache = null;
      _.$ti = t8;
    },
    _DataUri: function _DataUri(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _.scheme = t0;
      _._userInfo = t1;
      _._host = t2;
      _._port = t3;
      _.path = t4;
      _._query = t5;
      _._fragment = t6;
      _._hashCodeCache = _._text = _._pathSegments = null;
      _.$ti = t7;
    },
    _FakeUserTag: function _FakeUserTag() {
    },
    ServiceExtensionResponse: function ServiceExtensionResponse() {
    },
    UserTag: function UserTag() {
    },
    Metric: function Metric() {
    },
    Gauge: function Gauge() {
    },
    Counter: function Counter() {
    },
    Metrics: function Metrics() {
    },
    ServiceProtocolInfo: function ServiceProtocolInfo() {
    },
    Service: function Service() {
    },
    Flow: function Flow() {
    },
    Timeline: function Timeline() {
    },
    TimelineTask: function TimelineTask() {
    },
    _AsyncBlock: function _AsyncBlock() {
    },
    _SyncBlock: function _SyncBlock() {
    },
    _StructuredClone: function _StructuredClone() {
    },
    _AcceptStructuredClone: function _AcceptStructuredClone() {
    },
    ContextAttributes: function ContextAttributes() {
    },
    _TypedImageData: function _TypedImageData() {
    },
    _StructuredCloneDart2Js: function _StructuredCloneDart2Js() {
    },
    _AcceptStructuredCloneDart2Js: function _AcceptStructuredCloneDart2Js() {
    },
    CssClassSetImpl: function CssClassSetImpl() {
    },
    Device: function Device() {
    },
    FilteredElementList: function FilteredElementList() {
    },
    Lists: function Lists() {
    },
    NodeListWrapper: function NodeListWrapper() {
    },
    _KeyRangeFactoryProvider: function _KeyRangeFactoryProvider() {
    },
    Cursor: function Cursor() {
    },
    CursorWithValue: function CursorWithValue() {
    },
    Database: function Database() {
    },
    IdbFactory: function IdbFactory() {
    },
    Index: function Index() {
    },
    KeyRange: function KeyRange() {
    },
    ObjectStore: function ObjectStore() {
    },
    Observation: function Observation() {
    },
    Observer: function Observer() {
    },
    ObserverChanges: function ObserverChanges() {
    },
    OpenDBRequest: function OpenDBRequest() {
    },
    Request: function Request() {
    },
    Transaction: function Transaction() {
    },
    VersionChangeEvent: function VersionChangeEvent() {
    },
    BytesBuilder: function BytesBuilder() {
    },
    _CopyingBytesBuilder0: function _CopyingBytesBuilder0() {
    },
    _BytesBuilder: function _BytesBuilder() {
    },
    IOException: function IOException() {
    },
    OSError: function OSError() {
    },
    _BufferAndStart: function _BufferAndStart() {
    },
    _IOCrypto: function _IOCrypto() {
    },
    ZLibOption: function ZLibOption() {
    },
    ZLibCodec: function ZLibCodec() {
    },
    GZipCodec: function GZipCodec() {
    },
    ZLibEncoder: function ZLibEncoder() {
    },
    ZLibDecoder: function ZLibDecoder() {
    },
    RawZLibFilter: function RawZLibFilter() {
    },
    _BufferSink: function _BufferSink() {
    },
    _ZLibEncoderSink: function _ZLibEncoderSink() {
    },
    _ZLibDecoderSink: function _ZLibDecoderSink() {
    },
    _FilterSink: function _FilterSink() {
    },
    Directory: function Directory() {
    },
    _Directory: function _Directory() {
    },
    _AsyncDirectoryListerOps: function _AsyncDirectoryListerOps() {
    },
    _AsyncDirectoryLister: function _AsyncDirectoryLister() {
    },
    _EmbedderConfig: function _EmbedderConfig() {
    },
    _EventHandler: function _EventHandler() {
    },
    FileMode: function FileMode() {
    },
    FileLock: function FileLock() {
    },
    File0: function File0() {
    },
    RandomAccessFile: function RandomAccessFile() {
    },
    FileSystemException: function FileSystemException() {
    },
    _FileStream: function _FileStream() {
    },
    _FileStreamConsumer: function _FileStreamConsumer() {
    },
    _File: function _File() {
    },
    _RandomAccessFileOps: function _RandomAccessFileOps() {
    },
    _RandomAccessFile: function _RandomAccessFile() {
    },
    FileSystemEntityType: function FileSystemEntityType() {
    },
    FileStat: function FileStat() {
    },
    FileSystemEntity: function FileSystemEntity() {
    },
    FileSystemEvent: function FileSystemEvent() {
    },
    FileSystemCreateEvent: function FileSystemCreateEvent() {
    },
    FileSystemModifyEvent: function FileSystemModifyEvent() {
    },
    FileSystemDeleteEvent: function FileSystemDeleteEvent() {
    },
    FileSystemMoveEvent: function FileSystemMoveEvent() {
    },
    _FileSystemWatcher: function _FileSystemWatcher() {
    },
    _IOResourceInfo: function _IOResourceInfo() {
    },
    _ReadWriteResourceInfo: function _ReadWriteResourceInfo() {
    },
    _FileResourceInfo: function _FileResourceInfo() {
    },
    _ProcessResourceInfo: function _ProcessResourceInfo() {
    },
    _SocketResourceInfo: function _SocketResourceInfo() {
    },
    _IOService: function _IOService() {
    },
    IOSink: function IOSink() {
    },
    _StreamSinkImpl0: function _StreamSinkImpl0() {
    },
    _IOSinkImpl0: function _IOSinkImpl0() {
    },
    Link: function Link() {
    },
    _Link: function _Link() {
    },
    _Namespace: function _Namespace() {
    },
    IOOverrides: function IOOverrides() {
    },
    _IOOverridesScope: function _IOOverridesScope() {
    },
    Platform0: function Platform0() {
    },
    _Platform: function _Platform() {
    },
    _CaseInsensitiveStringMap: function _CaseInsensitiveStringMap() {
    },
    _ProcessUtils: function _ProcessUtils() {
    },
    ProcessInfo: function ProcessInfo() {
    },
    ProcessStartMode: function ProcessStartMode() {
    },
    Process: function Process() {
    },
    ProcessResult: function ProcessResult() {
    },
    ProcessSignal: function ProcessSignal() {
    },
    SignalException: function SignalException() {
    },
    ProcessException: function ProcessException() {
    },
    SecureServerSocket: function SecureServerSocket() {
    },
    RawSecureServerSocket: function RawSecureServerSocket() {
    },
    SecureSocket: function SecureSocket() {
    },
    RawSecureSocket: function RawSecureSocket() {
    },
    X509Certificate: function X509Certificate() {
    },
    _FilterStatus: function _FilterStatus() {
    },
    _RawSecureSocket: function _RawSecureSocket() {
    },
    _ExternalBuffer: function _ExternalBuffer() {
    },
    _SecureFilter: function _SecureFilter() {
    },
    TlsException: function TlsException() {
    },
    HandshakeException: function HandshakeException() {
    },
    CertificateException: function CertificateException() {
    },
    SecurityContext: function SecurityContext() {
    },
    _ServiceObject0: function _ServiceObject0() {
    },
    InternetAddressType: function InternetAddressType() {
    },
    InternetAddress: function InternetAddress() {
    },
    NetworkInterface: function NetworkInterface() {
    },
    RawServerSocket: function RawServerSocket() {
    },
    ServerSocket: function ServerSocket() {
    },
    SocketDirection: function SocketDirection() {
    },
    SocketOption: function SocketOption() {
    },
    _RawSocketOptions: function _RawSocketOptions() {
    },
    RawSocketOption: function RawSocketOption() {
    },
    RawSocketEvent: function RawSocketEvent() {
    },
    ConnectionTask: function ConnectionTask() {
    },
    RawSocket: function RawSocket() {
    },
    Socket: function Socket() {
    },
    Datagram: function Datagram() {
    },
    RawDatagramSocket: function RawDatagramSocket() {
    },
    SocketException: function SocketException() {
    },
    _StdStream: function _StdStream() {
    },
    Stdin: function Stdin() {
    },
    Stdout: function Stdout() {
    },
    StdoutException: function StdoutException() {
    },
    StdinException: function StdinException() {
    },
    _StdConsumer: function _StdConsumer() {
    },
    _StdSink: function _StdSink() {
    },
    StdioType: function StdioType() {
    },
    _StdIOUtils: function _StdIOUtils() {
    },
    SystemEncoding: function SystemEncoding() {
    },
    _WindowsCodePageEncoder: function _WindowsCodePageEncoder() {
    },
    _WindowsCodePageEncoderSink: function _WindowsCodePageEncoderSink() {
    },
    _WindowsCodePageDecoder: function _WindowsCodePageDecoder() {
    },
    _WindowsCodePageDecoderSink: function _WindowsCodePageDecoderSink() {
    },
    RawSynchronousSocket: function RawSynchronousSocket() {
    },
    _ReceivePortImpl: function _ReceivePortImpl() {
    },
    Capability: function Capability() {
    },
    IsolateSpawnException: function IsolateSpawnException() {
    },
    Isolate: function Isolate() {
    },
    SendPort: function SendPort() {
    },
    ReceivePort: function ReceivePort() {
    },
    RawReceivePort: function RawReceivePort() {
    },
    RemoteError: function RemoteError() {
    },
    _convertDartFunctionFast: function(f) {
      var existing, ret;
      H.interceptedTypeCheck(f, "$isFunction");
      existing = f.$dart_jsFunction;
      if (existing != null)
        return existing;
      ret = function(_call, f) {
        return function() {
          return _call(f, Array.prototype.slice.apply(arguments));
        };
      }(P._callDartFunctionFast, f);
      ret[$.$get$DART_CLOSURE_PROPERTY_NAME()] = f;
      f.$dart_jsFunction = ret;
      return ret;
    },
    _callDartFunctionFast: function(callback, $arguments) {
      H.listTypeCheck($arguments);
      return P.Function_apply(H.interceptedTypeCheck(callback, "$isFunction"), $arguments);
    },
    allowInterop: function(f, $F) {
      H.assertIsSubtype($F, P.Function, "The type argument '", "' is not a subtype of the type variable bound '", "' of type variable 'F' in 'allowInterop'.");
      H.assertSubtypeOfRuntimeType(f, $F);
      if (typeof f == "function")
        return f;
      else
        return H.assertSubtypeOfRuntimeType(P._convertDartFunctionFast(f), $F);
    },
    JsObject: function JsObject() {
    },
    JsFunction: function JsFunction() {
    },
    JsArray: function JsArray() {
    },
    _JsArray_JsObject_ListMixin: function _JsArray_JsObject_ListMixin() {
    },
    max: function(a, b, $T) {
      H.assertIsSubtype($T, P.num, "The type argument '", "' is not a subtype of the type variable bound '", "' of type variable 'T' in 'max'.");
      H.assertSubtypeOfRuntimeType(a, $T);
      H.assertSubtypeOfRuntimeType(b, $T);
      return Math.max(H.checkNum(a), H.checkNum(b));
    },
    pow: function(x, exponent) {
      H.numTypeCheck(x);
      H.numTypeCheck(exponent);
      H.checkNum(x);
      H.checkNum(exponent);
      return Math.pow(x, exponent);
    },
    _JSRandom: function _JSRandom() {
    },
    _Random: function _Random() {
    },
    _JSSecureRandom: function _JSSecureRandom() {
    },
    _JenkinsSmiHash0: function _JenkinsSmiHash0() {
    },
    Point: function Point() {
    },
    Random: function Random() {
    },
    _RectangleBase: function _RectangleBase() {
    },
    Rectangle: function Rectangle() {
    },
    MutableRectangle: function MutableRectangle() {
    },
    MirrorSystem: function MirrorSystem() {
    },
    Mirror: function Mirror() {
    },
    IsolateMirror: function IsolateMirror() {
    },
    DeclarationMirror: function DeclarationMirror() {
    },
    ObjectMirror: function ObjectMirror() {
    },
    InstanceMirror: function InstanceMirror() {
    },
    ClosureMirror: function ClosureMirror() {
    },
    LibraryMirror: function LibraryMirror() {
    },
    LibraryDependencyMirror: function LibraryDependencyMirror() {
    },
    CombinatorMirror: function CombinatorMirror() {
    },
    TypeMirror: function TypeMirror() {
    },
    ClassMirror: function ClassMirror() {
    },
    FunctionTypeMirror: function FunctionTypeMirror() {
    },
    TypeVariableMirror: function TypeVariableMirror() {
    },
    TypedefMirror: function TypedefMirror() {
    },
    MethodMirror: function MethodMirror() {
    },
    VariableMirror: function VariableMirror() {
    },
    ParameterMirror: function ParameterMirror() {
    },
    SourceLocation0: function SourceLocation0() {
    },
    Comment0: function Comment0() {
    },
    MirrorsUsed: function MirrorsUsed() {
    },
    _SvgElementFactoryProvider: function _SvgElementFactoryProvider() {
    },
    AElement: function AElement() {
    },
    Angle: function Angle() {
    },
    AnimateElement: function AnimateElement() {
    },
    AnimateMotionElement: function AnimateMotionElement() {
    },
    AnimateTransformElement: function AnimateTransformElement() {
    },
    AnimatedAngle: function AnimatedAngle() {
    },
    AnimatedBoolean: function AnimatedBoolean() {
    },
    AnimatedEnumeration: function AnimatedEnumeration() {
    },
    AnimatedInteger: function AnimatedInteger() {
    },
    AnimatedLength: function AnimatedLength() {
    },
    AnimatedLengthList: function AnimatedLengthList() {
    },
    AnimatedNumber: function AnimatedNumber() {
    },
    AnimatedNumberList: function AnimatedNumberList() {
    },
    AnimatedPreserveAspectRatio: function AnimatedPreserveAspectRatio() {
    },
    AnimatedRect: function AnimatedRect() {
    },
    AnimatedString: function AnimatedString() {
    },
    AnimatedTransformList: function AnimatedTransformList() {
    },
    AnimationElement: function AnimationElement() {
    },
    CircleElement: function CircleElement() {
    },
    ClipPathElement: function ClipPathElement() {
    },
    DefsElement: function DefsElement() {
    },
    DescElement: function DescElement() {
    },
    DiscardElement: function DiscardElement() {
    },
    EllipseElement: function EllipseElement() {
    },
    FEBlendElement: function FEBlendElement() {
    },
    FEColorMatrixElement: function FEColorMatrixElement() {
    },
    FEComponentTransferElement: function FEComponentTransferElement() {
    },
    FECompositeElement: function FECompositeElement() {
    },
    FEConvolveMatrixElement: function FEConvolveMatrixElement() {
    },
    FEDiffuseLightingElement: function FEDiffuseLightingElement() {
    },
    FEDisplacementMapElement: function FEDisplacementMapElement() {
    },
    FEDistantLightElement: function FEDistantLightElement() {
    },
    FEFloodElement: function FEFloodElement() {
    },
    FEFuncAElement: function FEFuncAElement() {
    },
    FEFuncBElement: function FEFuncBElement() {
    },
    FEFuncGElement: function FEFuncGElement() {
    },
    FEFuncRElement: function FEFuncRElement() {
    },
    FEGaussianBlurElement: function FEGaussianBlurElement() {
    },
    FEImageElement: function FEImageElement() {
    },
    FEMergeElement: function FEMergeElement() {
    },
    FEMergeNodeElement: function FEMergeNodeElement() {
    },
    FEMorphologyElement: function FEMorphologyElement() {
    },
    FEOffsetElement: function FEOffsetElement() {
    },
    FEPointLightElement: function FEPointLightElement() {
    },
    FESpecularLightingElement: function FESpecularLightingElement() {
    },
    FESpotLightElement: function FESpotLightElement() {
    },
    FETileElement: function FETileElement() {
    },
    FETurbulenceElement: function FETurbulenceElement() {
    },
    FilterElement: function FilterElement() {
    },
    FilterPrimitiveStandardAttributes: function FilterPrimitiveStandardAttributes() {
    },
    FitToViewBox: function FitToViewBox() {
    },
    ForeignObjectElement: function ForeignObjectElement() {
    },
    GElement: function GElement() {
    },
    GeometryElement: function GeometryElement() {
    },
    GraphicsElement: function GraphicsElement() {
    },
    ImageElement0: function ImageElement0() {
    },
    Length: function Length() {
    },
    LengthList: function LengthList() {
    },
    LineElement: function LineElement() {
    },
    LinearGradientElement: function LinearGradientElement() {
    },
    MarkerElement: function MarkerElement() {
    },
    MaskElement: function MaskElement() {
    },
    Matrix: function Matrix() {
    },
    MetadataElement: function MetadataElement() {
    },
    Number: function Number() {
    },
    NumberList: function NumberList() {
    },
    PathElement: function PathElement() {
    },
    PatternElement: function PatternElement() {
    },
    Point0: function Point0() {
    },
    PointList: function PointList() {
    },
    PolygonElement: function PolygonElement() {
    },
    PolylineElement: function PolylineElement() {
    },
    PreserveAspectRatio: function PreserveAspectRatio() {
    },
    RadialGradientElement: function RadialGradientElement() {
    },
    Rect: function Rect() {
    },
    RectElement: function RectElement() {
    },
    ScriptElement0: function ScriptElement0() {
    },
    SetElement: function SetElement() {
    },
    StopElement: function StopElement() {
    },
    StringList: function StringList() {
    },
    StyleElement0: function StyleElement0() {
    },
    AttributeClassSet: function AttributeClassSet() {
    },
    SvgElement: function SvgElement() {
    },
    SvgSvgElement: function SvgSvgElement() {
    },
    SwitchElement: function SwitchElement() {
    },
    SymbolElement: function SymbolElement() {
    },
    TSpanElement: function TSpanElement() {
    },
    Tests: function Tests() {
    },
    TextContentElement: function TextContentElement() {
    },
    TextElement: function TextElement() {
    },
    TextPathElement: function TextPathElement() {
    },
    TextPositioningElement: function TextPositioningElement() {
    },
    TitleElement0: function TitleElement0() {
    },
    Transform: function Transform() {
    },
    TransformList: function TransformList() {
    },
    UnitTypes: function UnitTypes() {
    },
    UriReference: function UriReference() {
    },
    UseElement: function UseElement() {
    },
    ViewElement: function ViewElement() {
    },
    ZoomAndPan: function ZoomAndPan() {
    },
    _GradientElement: function _GradientElement() {
    },
    _SVGComponentTransferFunctionElement: function _SVGComponentTransferFunctionElement() {
    },
    _SVGFEDropShadowElement: function _SVGFEDropShadowElement() {
    },
    _SVGMPathElement: function _SVGMPathElement() {
    },
    _LengthList_Interceptor_ListMixin: function _LengthList_Interceptor_ListMixin() {
    },
    _LengthList_Interceptor_ListMixin_ImmutableListMixin: function _LengthList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _NumberList_Interceptor_ListMixin: function _NumberList_Interceptor_ListMixin() {
    },
    _NumberList_Interceptor_ListMixin_ImmutableListMixin: function _NumberList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _StringList_Interceptor_ListMixin: function _StringList_Interceptor_ListMixin() {
    },
    _StringList_Interceptor_ListMixin_ImmutableListMixin: function _StringList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _TransformList_Interceptor_ListMixin: function _TransformList_Interceptor_ListMixin() {
    },
    _TransformList_Interceptor_ListMixin_ImmutableListMixin: function _TransformList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    Uint8List_Uint8List$view: function(buffer, offsetInBytes, $length) {
      H.interceptedTypeCheck(buffer, "$isByteBuffer");
      return (buffer && C.NativeByteBuffer_methods).asUint8List$2(buffer, H.intTypeCheck(offsetInBytes), H.intTypeCheck($length));
    },
    ByteBuffer: function ByteBuffer() {
    },
    TypedData: function TypedData() {
    },
    _TypedIntList: function _TypedIntList() {
    },
    _TypedFloatList: function _TypedFloatList() {
    },
    Endian: function Endian() {
    },
    ByteData: function ByteData() {
    },
    Int8List: function Int8List() {
    },
    Uint8List: function Uint8List() {
    },
    Uint8ClampedList: function Uint8ClampedList() {
    },
    Int16List: function Int16List() {
    },
    Uint16List: function Uint16List() {
    },
    Int32List: function Int32List() {
    },
    Uint32List: function Uint32List() {
    },
    Int64List: function Int64List() {
    },
    Uint64List: function Uint64List() {
    },
    Float32List: function Float32List() {
    },
    Float64List: function Float64List() {
    },
    Float32x4List: function Float32x4List() {
    },
    Int32x4List: function Int32x4List() {
    },
    Float64x2List: function Float64x2List() {
    },
    Float32x4: function Float32x4() {
    },
    Int32x4: function Int32x4() {
    },
    Float64x2: function Float64x2() {
    },
    UnmodifiableByteBufferView: function UnmodifiableByteBufferView() {
    },
    UnmodifiableByteDataView: function UnmodifiableByteDataView() {
    },
    _UnmodifiableListMixin: function _UnmodifiableListMixin() {
    },
    UnmodifiableUint8ListView: function UnmodifiableUint8ListView() {
    },
    UnmodifiableInt8ListView: function UnmodifiableInt8ListView() {
    },
    UnmodifiableUint8ClampedListView: function UnmodifiableUint8ClampedListView() {
    },
    UnmodifiableUint16ListView: function UnmodifiableUint16ListView() {
    },
    UnmodifiableInt16ListView: function UnmodifiableInt16ListView() {
    },
    UnmodifiableUint32ListView: function UnmodifiableUint32ListView() {
    },
    UnmodifiableInt32ListView: function UnmodifiableInt32ListView() {
    },
    UnmodifiableUint64ListView: function UnmodifiableUint64ListView() {
    },
    UnmodifiableInt64ListView: function UnmodifiableInt64ListView() {
    },
    UnmodifiableInt32x4ListView: function UnmodifiableInt32x4ListView() {
    },
    UnmodifiableFloat32x4ListView: function UnmodifiableFloat32x4ListView() {
    },
    UnmodifiableFloat64x2ListView: function UnmodifiableFloat64x2ListView() {
    },
    UnmodifiableFloat32ListView: function UnmodifiableFloat32ListView() {
    },
    UnmodifiableFloat64ListView: function UnmodifiableFloat64ListView() {
    },
    _UnmodifiableFloat32ListView_UnmodifiableListBase__UnmodifiableListMixin: function _UnmodifiableFloat32ListView_UnmodifiableListBase__UnmodifiableListMixin() {
    },
    _UnmodifiableFloat32x4ListView_UnmodifiableListBase__UnmodifiableListMixin: function _UnmodifiableFloat32x4ListView_UnmodifiableListBase__UnmodifiableListMixin() {
    },
    _UnmodifiableFloat64ListView_UnmodifiableListBase__UnmodifiableListMixin: function _UnmodifiableFloat64ListView_UnmodifiableListBase__UnmodifiableListMixin() {
    },
    _UnmodifiableFloat64x2ListView_UnmodifiableListBase__UnmodifiableListMixin: function _UnmodifiableFloat64x2ListView_UnmodifiableListBase__UnmodifiableListMixin() {
    },
    _UnmodifiableInt16ListView_UnmodifiableListBase__UnmodifiableListMixin: function _UnmodifiableInt16ListView_UnmodifiableListBase__UnmodifiableListMixin() {
    },
    _UnmodifiableInt32ListView_UnmodifiableListBase__UnmodifiableListMixin: function _UnmodifiableInt32ListView_UnmodifiableListBase__UnmodifiableListMixin() {
    },
    _UnmodifiableInt32x4ListView_UnmodifiableListBase__UnmodifiableListMixin: function _UnmodifiableInt32x4ListView_UnmodifiableListBase__UnmodifiableListMixin() {
    },
    _UnmodifiableInt64ListView_UnmodifiableListBase__UnmodifiableListMixin: function _UnmodifiableInt64ListView_UnmodifiableListBase__UnmodifiableListMixin() {
    },
    _UnmodifiableInt8ListView_UnmodifiableListBase__UnmodifiableListMixin: function _UnmodifiableInt8ListView_UnmodifiableListBase__UnmodifiableListMixin() {
    },
    _UnmodifiableUint16ListView_UnmodifiableListBase__UnmodifiableListMixin: function _UnmodifiableUint16ListView_UnmodifiableListBase__UnmodifiableListMixin() {
    },
    _UnmodifiableUint32ListView_UnmodifiableListBase__UnmodifiableListMixin: function _UnmodifiableUint32ListView_UnmodifiableListBase__UnmodifiableListMixin() {
    },
    _UnmodifiableUint64ListView_UnmodifiableListBase__UnmodifiableListMixin: function _UnmodifiableUint64ListView_UnmodifiableListBase__UnmodifiableListMixin() {
    },
    _UnmodifiableUint8ClampedListView_UnmodifiableListBase__UnmodifiableListMixin: function _UnmodifiableUint8ClampedListView_UnmodifiableListBase__UnmodifiableListMixin() {
    },
    _UnmodifiableUint8ListView_UnmodifiableListBase__UnmodifiableListMixin: function _UnmodifiableUint8ListView_UnmodifiableListBase__UnmodifiableListMixin() {
    },
    AnalyserNode: function AnalyserNode() {
    },
    AudioBuffer: function AudioBuffer() {
    },
    AudioBufferSourceNode: function AudioBufferSourceNode() {
    },
    AudioContext: function AudioContext() {
    },
    AudioDestinationNode: function AudioDestinationNode() {
    },
    AudioListener: function AudioListener() {
    },
    AudioNode: function AudioNode() {
    },
    AudioParam: function AudioParam() {
    },
    AudioParamMap: function AudioParamMap() {
    },
    AudioProcessingEvent: function AudioProcessingEvent() {
    },
    AudioScheduledSourceNode: function AudioScheduledSourceNode() {
    },
    AudioTrack: function AudioTrack() {
    },
    AudioTrackList: function AudioTrackList() {
    },
    AudioWorkletGlobalScope: function AudioWorkletGlobalScope() {
    },
    AudioWorkletNode: function AudioWorkletNode() {
    },
    AudioWorkletProcessor: function AudioWorkletProcessor() {
    },
    BaseAudioContext: function BaseAudioContext() {
    },
    BiquadFilterNode: function BiquadFilterNode() {
    },
    ChannelMergerNode: function ChannelMergerNode() {
    },
    ChannelSplitterNode: function ChannelSplitterNode() {
    },
    ConstantSourceNode: function ConstantSourceNode() {
    },
    ConvolverNode: function ConvolverNode() {
    },
    DelayNode: function DelayNode() {
    },
    DynamicsCompressorNode: function DynamicsCompressorNode() {
    },
    GainNode: function GainNode() {
    },
    IirFilterNode: function IirFilterNode() {
    },
    MediaElementAudioSourceNode: function MediaElementAudioSourceNode() {
    },
    MediaStreamAudioDestinationNode: function MediaStreamAudioDestinationNode() {
    },
    MediaStreamAudioSourceNode: function MediaStreamAudioSourceNode() {
    },
    OfflineAudioCompletionEvent: function OfflineAudioCompletionEvent() {
    },
    OfflineAudioContext: function OfflineAudioContext() {
    },
    OscillatorNode: function OscillatorNode() {
    },
    PannerNode: function PannerNode() {
    },
    PeriodicWave: function PeriodicWave() {
    },
    ScriptProcessorNode: function ScriptProcessorNode() {
    },
    StereoPannerNode: function StereoPannerNode() {
    },
    WaveShaperNode: function WaveShaperNode() {
    },
    _AudioParamMap_Interceptor_MapMixin: function _AudioParamMap_Interceptor_MapMixin() {
    },
    ActiveInfo: function ActiveInfo() {
    },
    AngleInstancedArrays: function AngleInstancedArrays() {
    },
    Buffer: function Buffer() {
    },
    Canvas: function Canvas() {
    },
    ColorBufferFloat: function ColorBufferFloat() {
    },
    CompressedTextureAstc: function CompressedTextureAstc() {
    },
    CompressedTextureAtc: function CompressedTextureAtc() {
    },
    CompressedTextureETC1: function CompressedTextureETC1() {
    },
    CompressedTextureEtc: function CompressedTextureEtc() {
    },
    CompressedTexturePvrtc: function CompressedTexturePvrtc() {
    },
    CompressedTextureS3TC: function CompressedTextureS3TC() {
    },
    CompressedTextureS3TCsRgb: function CompressedTextureS3TCsRgb() {
    },
    ContextEvent: function ContextEvent() {
    },
    DebugRendererInfo: function DebugRendererInfo() {
    },
    DebugShaders: function DebugShaders() {
    },
    DepthTexture: function DepthTexture() {
    },
    DrawBuffers: function DrawBuffers() {
    },
    EXTsRgb: function EXTsRgb() {
    },
    ExtBlendMinMax: function ExtBlendMinMax() {
    },
    ExtColorBufferFloat: function ExtColorBufferFloat() {
    },
    ExtColorBufferHalfFloat: function ExtColorBufferHalfFloat() {
    },
    ExtDisjointTimerQuery: function ExtDisjointTimerQuery() {
    },
    ExtDisjointTimerQueryWebGL2: function ExtDisjointTimerQueryWebGL2() {
    },
    ExtFragDepth: function ExtFragDepth() {
    },
    ExtShaderTextureLod: function ExtShaderTextureLod() {
    },
    ExtTextureFilterAnisotropic: function ExtTextureFilterAnisotropic() {
    },
    Framebuffer: function Framebuffer() {
    },
    GetBufferSubDataAsync: function GetBufferSubDataAsync() {
    },
    LoseContext: function LoseContext() {
    },
    OesElementIndexUint: function OesElementIndexUint() {
    },
    OesStandardDerivatives: function OesStandardDerivatives() {
    },
    OesTextureFloat: function OesTextureFloat() {
    },
    OesTextureFloatLinear: function OesTextureFloatLinear() {
    },
    OesTextureHalfFloat: function OesTextureHalfFloat() {
    },
    OesTextureHalfFloatLinear: function OesTextureHalfFloatLinear() {
    },
    OesVertexArrayObject: function OesVertexArrayObject() {
    },
    Program: function Program() {
    },
    Query: function Query() {
    },
    Renderbuffer: function Renderbuffer() {
    },
    RenderingContext: function RenderingContext() {
    },
    RenderingContext2: function RenderingContext2() {
    },
    Sampler: function Sampler() {
    },
    Shader: function Shader() {
    },
    ShaderPrecisionFormat: function ShaderPrecisionFormat() {
    },
    Sync: function Sync() {
    },
    Texture: function Texture() {
    },
    TimerQueryExt: function TimerQueryExt() {
    },
    TransformFeedback: function TransformFeedback() {
    },
    UniformLocation: function UniformLocation() {
    },
    VertexArrayObject: function VertexArrayObject() {
    },
    VertexArrayObjectOes: function VertexArrayObjectOes() {
    },
    WebGL: function WebGL() {
    },
    _WebGL2RenderingContextBase: function _WebGL2RenderingContextBase() {
    },
    _WebGLRenderingContextBase: function _WebGLRenderingContextBase() {
    },
    SqlDatabase: function SqlDatabase() {
    },
    SqlError: function SqlError() {
    },
    SqlResultSet: function SqlResultSet() {
    },
    SqlResultSetRowList: function SqlResultSetRowList() {
    },
    SqlTransaction: function SqlTransaction() {
    },
    _SqlResultSetRowList_Interceptor_ListMixin: function _SqlResultSetRowList_Interceptor_ListMixin() {
    },
    _SqlResultSetRowList_Interceptor_ListMixin_ImmutableListMixin: function _SqlResultSetRowList_Interceptor_ListMixin_ImmutableListMixin() {
    }
  },
  W = {HtmlElement: function HtmlElement() {
    }, AbortPaymentEvent: function AbortPaymentEvent() {
    }, AbsoluteOrientationSensor: function AbsoluteOrientationSensor() {
    }, AbstractWorker: function AbstractWorker() {
    }, Accelerometer: function Accelerometer() {
    }, AccessibleNode: function AccessibleNode() {
    }, AccessibleNodeList: function AccessibleNodeList() {
    }, AmbientLightSensor: function AmbientLightSensor() {
    }, AnchorElement: function AnchorElement() {
    }, Animation: function Animation() {
    }, AnimationEffectReadOnly: function AnimationEffectReadOnly() {
    }, AnimationEffectTiming: function AnimationEffectTiming() {
    }, AnimationEffectTimingReadOnly: function AnimationEffectTimingReadOnly() {
    }, AnimationEvent: function AnimationEvent() {
    }, AnimationPlaybackEvent: function AnimationPlaybackEvent() {
    }, AnimationTimeline: function AnimationTimeline() {
    }, AnimationWorkletGlobalScope: function AnimationWorkletGlobalScope() {
    }, ApplicationCache: function ApplicationCache() {
    }, ApplicationCacheErrorEvent: function ApplicationCacheErrorEvent() {
    }, AreaElement: function AreaElement() {
    }, AudioElement: function AudioElement() {
    }, AuthenticatorAssertionResponse: function AuthenticatorAssertionResponse() {
    }, AuthenticatorAttestationResponse: function AuthenticatorAttestationResponse() {
    }, AuthenticatorResponse: function AuthenticatorResponse() {
    }, BRElement: function BRElement() {
    }, BackgroundFetchClickEvent: function BackgroundFetchClickEvent() {
    }, BackgroundFetchEvent: function BackgroundFetchEvent() {
    }, BackgroundFetchFailEvent: function BackgroundFetchFailEvent() {
    }, BackgroundFetchFetch: function BackgroundFetchFetch() {
    }, BackgroundFetchManager: function BackgroundFetchManager() {
    }, BackgroundFetchRegistration: function BackgroundFetchRegistration() {
    }, BackgroundFetchSettledFetch: function BackgroundFetchSettledFetch() {
    }, BackgroundFetchedEvent: function BackgroundFetchedEvent() {
    }, BarProp: function BarProp() {
    }, BarcodeDetector: function BarcodeDetector() {
    }, BaseElement: function BaseElement() {
    }, BatteryManager: function BatteryManager() {
    }, BeforeInstallPromptEvent: function BeforeInstallPromptEvent() {
    }, BeforeUnloadEvent: function BeforeUnloadEvent() {
    }, Blob: function Blob() {
    }, BlobEvent: function BlobEvent() {
    }, BluetoothRemoteGattDescriptor: function BluetoothRemoteGattDescriptor() {
    }, Body: function Body() {
    }, BodyElement: function BodyElement() {
    }, BroadcastChannel: function BroadcastChannel() {
    }, BudgetState: function BudgetState() {
    }, ButtonElement: function ButtonElement() {
    }, CDataSection: function CDataSection() {
    }, CacheStorage: function CacheStorage() {
    }, CanMakePaymentEvent: function CanMakePaymentEvent() {
    }, CanvasCaptureMediaStreamTrack: function CanvasCaptureMediaStreamTrack() {
    }, CanvasElement: function CanvasElement() {
    }, CanvasGradient: function CanvasGradient() {
    }, CanvasPattern: function CanvasPattern() {
    }, CanvasRenderingContext: function CanvasRenderingContext() {
    }, CanvasRenderingContext2D: function CanvasRenderingContext2D() {
    }, CharacterData: function CharacterData() {
    }, ChildNode: function ChildNode() {
    }, Client: function Client() {
    }, Clients: function Clients() {
    }, ClipboardEvent: function ClipboardEvent() {
    }, CloseEvent: function CloseEvent() {
    }, Comment: function Comment() {
    }, CompositionEvent: function CompositionEvent() {
    }, ContentElement: function ContentElement() {
    }, CookieStore: function CookieStore() {
    }, Coordinates: function Coordinates() {
    }, Credential: function Credential() {
    }, CredentialUserData: function CredentialUserData() {
    }, CredentialsContainer: function CredentialsContainer() {
    }, Crypto: function Crypto() {
    }, CryptoKey: function CryptoKey() {
    }, Css: function Css() {
    }, CssCharsetRule: function CssCharsetRule() {
    }, CssConditionRule: function CssConditionRule() {
    }, CssFontFaceRule: function CssFontFaceRule() {
    }, CssGroupingRule: function CssGroupingRule() {
    }, CssImageValue: function CssImageValue() {
    }, CssImportRule: function CssImportRule() {
    }, CssKeyframeRule: function CssKeyframeRule() {
    }, CssKeyframesRule: function CssKeyframesRule() {
    }, CssKeywordValue: function CssKeywordValue() {
    }, CssMatrixComponent: function CssMatrixComponent() {
    }, CssMediaRule: function CssMediaRule() {
    }, CssNamespaceRule: function CssNamespaceRule() {
    }, CssNumericValue: function CssNumericValue() {
    }, CssPageRule: function CssPageRule() {
    }, CssPerspective: function CssPerspective() {
    }, CssPositionValue: function CssPositionValue() {
    }, CssResourceValue: function CssResourceValue() {
    }, CssRotation: function CssRotation() {
    }, CssRule: function CssRule() {
    }, CssScale: function CssScale() {
    }, CssSkew: function CssSkew() {
    }, CssStyleDeclaration: function CssStyleDeclaration() {
    }, _CssStyleDeclarationSet: function _CssStyleDeclarationSet() {
    }, CssStyleDeclarationBase: function CssStyleDeclarationBase() {
    }, CssStyleRule: function CssStyleRule() {
    }, CssStyleSheet: function CssStyleSheet() {
    }, CssStyleValue: function CssStyleValue() {
    }, CssSupportsRule: function CssSupportsRule() {
    }, CssTransformComponent: function CssTransformComponent() {
    }, CssTransformValue: function CssTransformValue() {
    }, CssTranslation: function CssTranslation() {
    }, CssUnitValue: function CssUnitValue() {
    }, CssUnparsedValue: function CssUnparsedValue() {
    }, CssVariableReferenceValue: function CssVariableReferenceValue() {
    }, CssViewportRule: function CssViewportRule() {
    }, CssurlImageValue: function CssurlImageValue() {
    }, CustomElementRegistry: function CustomElementRegistry() {
    }, CustomEvent: function CustomEvent() {
    }, DListElement: function DListElement() {
    }, DataElement: function DataElement() {
    }, DataListElement: function DataListElement() {
    }, DataTransfer: function DataTransfer() {
    }, DataTransferItem: function DataTransferItem() {
    }, DataTransferItemList: function DataTransferItemList() {
    }, DedicatedWorkerGlobalScope: function DedicatedWorkerGlobalScope() {
    }, DeprecatedStorageInfo: function DeprecatedStorageInfo() {
    }, DeprecatedStorageQuota: function DeprecatedStorageQuota() {
    }, DeprecationReport: function DeprecationReport() {
    }, DetailsElement: function DetailsElement() {
    }, DetectedBarcode: function DetectedBarcode() {
    }, DetectedFace: function DetectedFace() {
    }, DetectedText: function DetectedText() {
    }, DeviceAcceleration: function DeviceAcceleration() {
    }, DeviceMotionEvent: function DeviceMotionEvent() {
    }, DeviceOrientationEvent: function DeviceOrientationEvent() {
    }, DeviceRotationRate: function DeviceRotationRate() {
    }, DialogElement: function DialogElement() {
    }, DirectoryEntry: function DirectoryEntry() {
    }, DirectoryReader: function DirectoryReader() {
    }, DivElement: function DivElement() {
    }, Document: function Document() {
    }, DocumentFragment: function DocumentFragment() {
    }, DocumentOrShadowRoot: function DocumentOrShadowRoot() {
    }, DocumentTimeline: function DocumentTimeline() {
    }, DomError: function DomError() {
    }, DomException: function DomException() {
    }, DomImplementation: function DomImplementation() {
    }, DomIterator: function DomIterator() {
    }, DomMatrix: function DomMatrix() {
    }, DomMatrixReadOnly: function DomMatrixReadOnly() {
    }, DomParser: function DomParser() {
    }, DomPoint: function DomPoint() {
    }, DomPointReadOnly: function DomPointReadOnly() {
    }, DomQuad: function DomQuad() {
    }, DomRectList: function DomRectList() {
    }, DomRectReadOnly: function DomRectReadOnly() {
    }, DomStringList: function DomStringList() {
    }, DomStringMap: function DomStringMap() {
    }, DomTokenList: function DomTokenList() {
    }, _ChildrenElementList: function _ChildrenElementList() {
    }, ElementList: function ElementList() {
    }, _FrozenElementList: function _FrozenElementList() {
    }, Element: function Element() {
    }, _ElementFactoryProvider: function _ElementFactoryProvider() {
    }, ScrollAlignment: function ScrollAlignment() {
    }, EmbedElement: function EmbedElement() {
    }, Entry: function Entry() {
    }, ErrorEvent: function ErrorEvent() {
    }, Event0: function Event0() {
    }, EventSource: function EventSource() {
    }, Events: function Events() {
    }, ElementEvents: function ElementEvents() {
    }, EventTarget: function EventTarget() {
    }, ExtendableEvent: function ExtendableEvent() {
    }, ExtendableMessageEvent: function ExtendableMessageEvent() {
    }, External: function External() {
    }, FaceDetector: function FaceDetector() {
    }, FederatedCredential: function FederatedCredential() {
    }, FetchEvent: function FetchEvent() {
    }, FieldSetElement: function FieldSetElement() {
    }, File: function File() {
    }, FileEntry: function FileEntry() {
    }, FileList: function FileList() {
    }, FileReader: function FileReader() {
    }, FileSystem: function FileSystem() {
    }, FileWriter: function FileWriter() {
    }, FocusEvent: function FocusEvent() {
    }, FontFace: function FontFace() {
    }, FontFaceSet: function FontFaceSet() {
    }, FontFaceSetLoadEvent: function FontFaceSetLoadEvent() {
    }, FontFaceSource: function FontFaceSource() {
    }, ForeignFetchEvent: function ForeignFetchEvent() {
    }, FormData: function FormData() {
    }, FormElement: function FormElement() {
    }, Gamepad: function Gamepad() {
    }, GamepadButton: function GamepadButton() {
    }, GamepadEvent: function GamepadEvent() {
    }, GamepadPose: function GamepadPose() {
    }, Geolocation: function Geolocation() {
    }, _GeopositionWrapper: function _GeopositionWrapper() {
    }, Geoposition: function Geoposition() {
    }, GlobalEventHandlers: function GlobalEventHandlers() {
    }, Gyroscope: function Gyroscope() {
    }, HRElement: function HRElement() {
    }, HashChangeEvent: function HashChangeEvent() {
    }, HeadElement: function HeadElement() {
    }, Headers: function Headers() {
    }, HeadingElement: function HeadingElement() {
    }, History: function History() {
    }, HtmlCollection: function HtmlCollection() {
    }, HtmlDocument: function HtmlDocument() {
    }, HtmlFormControlsCollection: function HtmlFormControlsCollection() {
    }, HtmlHtmlElement: function HtmlHtmlElement() {
    }, HtmlHyperlinkElementUtils: function HtmlHyperlinkElementUtils() {
    }, HtmlOptionsCollection: function HtmlOptionsCollection() {
    }, HttpRequest0: function HttpRequest0() {
    }, HttpRequestEventTarget: function HttpRequestEventTarget() {
    }, HttpRequestUpload: function HttpRequestUpload() {
    }, IFrameElement: function IFrameElement() {
    }, IdleDeadline: function IdleDeadline() {
    }, ImageBitmap: function ImageBitmap() {
    }, ImageBitmapRenderingContext: function ImageBitmapRenderingContext() {
    }, ImageCapture: function ImageCapture() {
    }, ImageData: function ImageData() {
    }, ImageElement: function ImageElement() {
    }, InputDeviceCapabilities: function InputDeviceCapabilities() {
    }, InputElement: function InputElement() {
    }, InputElementBase: function InputElementBase() {
    }, HiddenInputElement: function HiddenInputElement() {
    }, TextInputElementBase: function TextInputElementBase() {
    }, SearchInputElement: function SearchInputElement() {
    }, TextInputElement: function TextInputElement() {
    }, UrlInputElement: function UrlInputElement() {
    }, TelephoneInputElement: function TelephoneInputElement() {
    }, EmailInputElement: function EmailInputElement() {
    }, PasswordInputElement: function PasswordInputElement() {
    }, RangeInputElementBase: function RangeInputElementBase() {
    }, DateInputElement: function DateInputElement() {
    }, MonthInputElement: function MonthInputElement() {
    }, WeekInputElement: function WeekInputElement() {
    }, TimeInputElement: function TimeInputElement() {
    }, LocalDateTimeInputElement: function LocalDateTimeInputElement() {
    }, NumberInputElement: function NumberInputElement() {
    }, RangeInputElement: function RangeInputElement() {
    }, CheckboxInputElement: function CheckboxInputElement() {
    }, RadioButtonInputElement: function RadioButtonInputElement() {
    }, FileUploadInputElement: function FileUploadInputElement() {
    }, SubmitButtonInputElement: function SubmitButtonInputElement() {
    }, ImageButtonInputElement: function ImageButtonInputElement() {
    }, ResetButtonInputElement: function ResetButtonInputElement() {
    }, ButtonInputElement: function ButtonInputElement() {
    }, InstallEvent: function InstallEvent() {
    }, IntersectionObserver: function IntersectionObserver() {
    }, IntersectionObserverEntry: function IntersectionObserverEntry() {
    }, InterventionReport: function InterventionReport() {
    }, KeyboardEvent: function KeyboardEvent() {
    }, KeyframeEffect: function KeyframeEffect() {
    }, KeyframeEffectReadOnly: function KeyframeEffectReadOnly() {
    }, LIElement: function LIElement() {
    }, LabelElement: function LabelElement() {
    }, LegendElement: function LegendElement() {
    }, LinearAccelerationSensor: function LinearAccelerationSensor() {
    }, LinkElement: function LinkElement() {
    }, Location: function Location() {
    }, Magnetometer: function Magnetometer() {
    }, MapElement: function MapElement() {
    }, MediaCapabilities: function MediaCapabilities() {
    }, MediaCapabilitiesInfo: function MediaCapabilitiesInfo() {
    }, MediaDeviceInfo: function MediaDeviceInfo() {
    }, MediaDevices: function MediaDevices() {
    }, MediaElement: function MediaElement() {
    }, MediaEncryptedEvent: function MediaEncryptedEvent() {
    }, MediaError: function MediaError() {
    }, MediaKeyMessageEvent: function MediaKeyMessageEvent() {
    }, MediaKeySession: function MediaKeySession() {
    }, MediaKeyStatusMap: function MediaKeyStatusMap() {
    }, MediaKeySystemAccess: function MediaKeySystemAccess() {
    }, MediaKeys: function MediaKeys() {
    }, MediaKeysPolicy: function MediaKeysPolicy() {
    }, MediaList: function MediaList() {
    }, MediaMetadata: function MediaMetadata() {
    }, MediaQueryList: function MediaQueryList() {
    }, MediaQueryListEvent: function MediaQueryListEvent() {
    }, MediaRecorder: function MediaRecorder() {
    }, MediaSession: function MediaSession() {
    }, MediaSettingsRange: function MediaSettingsRange() {
    }, MediaSource: function MediaSource() {
    }, MediaStream: function MediaStream() {
    }, MediaStreamEvent: function MediaStreamEvent() {
    }, MediaStreamTrack: function MediaStreamTrack() {
    }, MediaStreamTrackEvent: function MediaStreamTrackEvent() {
    }, MemoryInfo: function MemoryInfo() {
    }, MenuElement: function MenuElement() {
    }, MessageChannel: function MessageChannel() {
    }, MessageEvent: function MessageEvent() {
    }, MessagePort: function MessagePort() {
    }, MetaElement: function MetaElement() {
    }, Metadata: function Metadata() {
    }, MeterElement: function MeterElement() {
    }, MidiAccess: function MidiAccess() {
    }, MidiConnectionEvent: function MidiConnectionEvent() {
    }, MidiInput: function MidiInput() {
    }, MidiInputMap: function MidiInputMap() {
    }, MidiMessageEvent: function MidiMessageEvent() {
    }, MidiOutput: function MidiOutput() {
    }, MidiOutputMap: function MidiOutputMap() {
    }, MidiPort: function MidiPort() {
    }, MimeType: function MimeType() {
    }, MimeTypeArray: function MimeTypeArray() {
    }, ModElement: function ModElement() {
    }, MouseEvent: function MouseEvent() {
    }, MutationEvent: function MutationEvent() {
    }, MutationObserver: function MutationObserver() {
    }, MutationRecord: function MutationRecord() {
    }, NavigationPreloadManager: function NavigationPreloadManager() {
    }, Navigator: function Navigator() {
    }, NavigatorAutomationInformation: function NavigatorAutomationInformation() {
    }, NavigatorConcurrentHardware: function NavigatorConcurrentHardware() {
    }, NavigatorCookies: function NavigatorCookies() {
    }, NavigatorID: function NavigatorID() {
    }, NavigatorLanguage: function NavigatorLanguage() {
    }, NavigatorOnLine: function NavigatorOnLine() {
    }, NavigatorUserMediaError: function NavigatorUserMediaError() {
    }, NetworkInformation: function NetworkInformation() {
    }, _ChildNodeListLazy: function _ChildNodeListLazy() {
    }, Node: function Node() {
    }, NodeFilter: function NodeFilter() {
    }, NodeIterator: function NodeIterator() {
    }, NodeList: function NodeList() {
    }, NonDocumentTypeChildNode: function NonDocumentTypeChildNode() {
    }, NonElementParentNode: function NonElementParentNode() {
    }, NoncedElement: function NoncedElement() {
    }, Notification: function Notification() {
    }, NotificationEvent: function NotificationEvent() {
    }, OListElement: function OListElement() {
    }, ObjectElement: function ObjectElement() {
    }, OffscreenCanvas: function OffscreenCanvas() {
    }, OffscreenCanvasRenderingContext2D: function OffscreenCanvasRenderingContext2D() {
    }, OptGroupElement: function OptGroupElement() {
    }, OptionElement: function OptionElement() {
    }, OrientationSensor: function OrientationSensor() {
    }, OutputElement: function OutputElement() {
    }, OverconstrainedError: function OverconstrainedError() {
    }, PageTransitionEvent: function PageTransitionEvent() {
    }, PaintRenderingContext2D: function PaintRenderingContext2D() {
    }, PaintSize: function PaintSize() {
    }, PaintWorkletGlobalScope: function PaintWorkletGlobalScope() {
    }, ParagraphElement: function ParagraphElement() {
    }, ParamElement: function ParamElement() {
    }, ParentNode: function ParentNode() {
    }, PasswordCredential: function PasswordCredential() {
    }, Path2D: function Path2D() {
    }, PaymentAddress: function PaymentAddress() {
    }, PaymentInstruments: function PaymentInstruments() {
    }, PaymentManager: function PaymentManager() {
    }, PaymentRequest: function PaymentRequest() {
    }, PaymentRequestEvent: function PaymentRequestEvent() {
    }, PaymentRequestUpdateEvent: function PaymentRequestUpdateEvent() {
    }, PaymentResponse: function PaymentResponse() {
    }, Performance: function Performance() {
    }, PerformanceEntry: function PerformanceEntry() {
    }, PerformanceLongTaskTiming: function PerformanceLongTaskTiming() {
    }, PerformanceMark: function PerformanceMark() {
    }, PerformanceMeasure: function PerformanceMeasure() {
    }, PerformanceNavigation: function PerformanceNavigation() {
    }, PerformanceNavigationTiming: function PerformanceNavigationTiming() {
    }, PerformanceObserver: function PerformanceObserver() {
    }, PerformanceObserverEntryList: function PerformanceObserverEntryList() {
    }, PerformancePaintTiming: function PerformancePaintTiming() {
    }, PerformanceResourceTiming: function PerformanceResourceTiming() {
    }, PerformanceServerTiming: function PerformanceServerTiming() {
    }, PerformanceTiming: function PerformanceTiming() {
    }, PermissionStatus: function PermissionStatus() {
    }, Permissions: function Permissions() {
    }, PhotoCapabilities: function PhotoCapabilities() {
    }, PictureElement: function PictureElement() {
    }, Plugin: function Plugin() {
    }, PluginArray: function PluginArray() {
    }, PointerEvent: function PointerEvent() {
    }, PopStateEvent: function PopStateEvent() {
    }, PositionError: function PositionError() {
    }, PreElement: function PreElement() {
    }, Presentation: function Presentation() {
    }, PresentationAvailability: function PresentationAvailability() {
    }, PresentationConnection: function PresentationConnection() {
    }, PresentationConnectionAvailableEvent: function PresentationConnectionAvailableEvent() {
    }, PresentationConnectionCloseEvent: function PresentationConnectionCloseEvent() {
    }, PresentationConnectionList: function PresentationConnectionList() {
    }, PresentationReceiver: function PresentationReceiver() {
    }, PresentationRequest: function PresentationRequest() {
    }, ProcessingInstruction: function ProcessingInstruction() {
    }, ProgressElement: function ProgressElement() {
    }, ProgressEvent: function ProgressEvent() {
    }, PromiseRejectionEvent: function PromiseRejectionEvent() {
    }, PublicKeyCredential: function PublicKeyCredential() {
    }, PushEvent: function PushEvent() {
    }, PushManager: function PushManager() {
    }, PushMessageData: function PushMessageData() {
    }, PushSubscription: function PushSubscription() {
    }, PushSubscriptionOptions: function PushSubscriptionOptions() {
    }, QuoteElement: function QuoteElement() {
    }, Range: function Range() {
    }, RelatedApplication: function RelatedApplication() {
    }, RelativeOrientationSensor: function RelativeOrientationSensor() {
    }, RemotePlayback: function RemotePlayback() {
    }, ReportBody: function ReportBody() {
    }, ReportingObserver: function ReportingObserver() {
    }, ResizeObserver: function ResizeObserver() {
    }, ResizeObserverEntry: function ResizeObserverEntry() {
    }, RtcCertificate: function RtcCertificate() {
    }, RtcDataChannel: function RtcDataChannel() {
    }, RtcDataChannelEvent: function RtcDataChannelEvent() {
    }, RtcDtmfSender: function RtcDtmfSender() {
    }, RtcDtmfToneChangeEvent: function RtcDtmfToneChangeEvent() {
    }, RtcIceCandidate: function RtcIceCandidate() {
    }, RtcLegacyStatsReport: function RtcLegacyStatsReport() {
    }, RtcPeerConnection: function RtcPeerConnection() {
    }, RtcPeerConnectionIceEvent: function RtcPeerConnectionIceEvent() {
    }, RtcRtpContributingSource: function RtcRtpContributingSource() {
    }, RtcRtpReceiver: function RtcRtpReceiver() {
    }, RtcRtpSender: function RtcRtpSender() {
    }, RtcSessionDescription: function RtcSessionDescription() {
    }, RtcStatsReport: function RtcStatsReport() {
    }, RtcStatsResponse: function RtcStatsResponse() {
    }, RtcTrackEvent: function RtcTrackEvent() {
    }, Screen: function Screen() {
    }, ScreenOrientation: function ScreenOrientation() {
    }, ScriptElement: function ScriptElement() {
    }, ScrollState: function ScrollState() {
    }, ScrollTimeline: function ScrollTimeline() {
    }, SecurityPolicyViolationEvent: function SecurityPolicyViolationEvent() {
    }, SelectElement: function SelectElement() {
    }, Selection: function Selection() {
    }, Sensor: function Sensor() {
    }, SensorErrorEvent: function SensorErrorEvent() {
    }, ServiceWorker: function ServiceWorker() {
    }, ServiceWorkerContainer: function ServiceWorkerContainer() {
    }, ServiceWorkerGlobalScope: function ServiceWorkerGlobalScope() {
    }, ServiceWorkerRegistration: function ServiceWorkerRegistration() {
    }, ShadowElement: function ShadowElement() {
    }, ShadowRoot: function ShadowRoot() {
    }, SharedArrayBuffer: function SharedArrayBuffer() {
    }, SharedWorker: function SharedWorker() {
    }, SharedWorkerGlobalScope: function SharedWorkerGlobalScope() {
    }, SlotElement: function SlotElement() {
    }, SourceBuffer: function SourceBuffer() {
    }, SourceBufferList: function SourceBufferList() {
    }, SourceElement: function SourceElement() {
    }, SpanElement: function SpanElement() {
    }, SpeechGrammar: function SpeechGrammar() {
    }, SpeechGrammarList: function SpeechGrammarList() {
    }, SpeechRecognition: function SpeechRecognition() {
    }, SpeechRecognitionAlternative: function SpeechRecognitionAlternative() {
    }, SpeechRecognitionError: function SpeechRecognitionError() {
    }, SpeechRecognitionEvent: function SpeechRecognitionEvent() {
    }, SpeechRecognitionResult: function SpeechRecognitionResult() {
    }, SpeechSynthesis: function SpeechSynthesis() {
    }, SpeechSynthesisEvent: function SpeechSynthesisEvent() {
    }, SpeechSynthesisUtterance: function SpeechSynthesisUtterance() {
    }, SpeechSynthesisVoice: function SpeechSynthesisVoice() {
    }, StaticRange: function StaticRange() {
    }, Storage: function Storage() {
    }, StorageEvent: function StorageEvent() {
    }, StorageManager: function StorageManager() {
    }, StyleElement: function StyleElement() {
    }, StyleMedia: function StyleMedia() {
    }, StylePropertyMap: function StylePropertyMap() {
    }, StylePropertyMapReadonly: function StylePropertyMapReadonly() {
    }, StyleSheet: function StyleSheet() {
    }, SyncEvent: function SyncEvent() {
    }, SyncManager: function SyncManager() {
    }, TableCaptionElement: function TableCaptionElement() {
    }, TableCellElement: function TableCellElement() {
    }, TableColElement: function TableColElement() {
    }, TableElement: function TableElement() {
    }, TableRowElement: function TableRowElement() {
    }, TableSectionElement: function TableSectionElement() {
    }, TaskAttributionTiming: function TaskAttributionTiming() {
    }, TemplateElement: function TemplateElement() {
    }, Text: function Text() {
    }, TextAreaElement: function TextAreaElement() {
    }, TextDetector: function TextDetector() {
    }, TextEvent: function TextEvent() {
    }, TextMetrics: function TextMetrics() {
    }, TextTrack: function TextTrack() {
    }, TextTrackCue: function TextTrackCue() {
    }, TextTrackCueList: function TextTrackCueList() {
    }, TextTrackList: function TextTrackList() {
    }, TimeElement: function TimeElement() {
    }, TimeRanges: function TimeRanges() {
    }, TitleElement: function TitleElement() {
    }, Touch: function Touch() {
    }, TouchEvent: function TouchEvent() {
    }, TouchList: function TouchList() {
    }, TrackDefault: function TrackDefault() {
    }, TrackDefaultList: function TrackDefaultList() {
    }, TrackElement: function TrackElement() {
    }, TrackEvent: function TrackEvent() {
    }, TransitionEvent: function TransitionEvent() {
    }, TreeWalker: function TreeWalker() {
    }, TrustedHtml: function TrustedHtml() {
    }, TrustedScriptUrl: function TrustedScriptUrl() {
    }, TrustedUrl: function TrustedUrl() {
    }, UIEvent: function UIEvent() {
    }, UListElement: function UListElement() {
    }, UnderlyingSourceBase: function UnderlyingSourceBase() {
    }, UnknownElement: function UnknownElement() {
    }, Url: function Url() {
    }, UrlSearchParams: function UrlSearchParams() {
    }, UrlUtilsReadOnly: function UrlUtilsReadOnly() {
    }, VR: function VR() {
    }, VRCoordinateSystem: function VRCoordinateSystem() {
    }, VRDevice: function VRDevice() {
    }, VRDeviceEvent: function VRDeviceEvent() {
    }, VRDisplay: function VRDisplay() {
    }, VRDisplayCapabilities: function VRDisplayCapabilities() {
    }, VRDisplayEvent: function VRDisplayEvent() {
    }, VREyeParameters: function VREyeParameters() {
    }, VRFrameData: function VRFrameData() {
    }, VRFrameOfReference: function VRFrameOfReference() {
    }, VRPose: function VRPose() {
    }, VRSession: function VRSession() {
    }, VRSessionEvent: function VRSessionEvent() {
    }, VRStageBounds: function VRStageBounds() {
    }, VRStageBoundsPoint: function VRStageBoundsPoint() {
    }, VRStageParameters: function VRStageParameters() {
    }, ValidityState: function ValidityState() {
    }, VideoElement: function VideoElement() {
    }, VideoPlaybackQuality: function VideoPlaybackQuality() {
    }, VideoTrack: function VideoTrack() {
    }, VideoTrackList: function VideoTrackList() {
    }, VisualViewport: function VisualViewport() {
    }, VttCue: function VttCue() {
    }, VttRegion: function VttRegion() {
    }, WebSocket0: function WebSocket0() {
    }, WheelEvent: function WheelEvent() {
    }, Window: function Window() {
    }, _BeforeUnloadEvent: function _BeforeUnloadEvent() {
    }, _BeforeUnloadEventStreamProvider: function _BeforeUnloadEventStreamProvider() {
    }, WindowBase64: function WindowBase64() {
    }, WindowClient: function WindowClient() {
    }, WindowEventHandlers: function WindowEventHandlers() {
    }, Worker: function Worker() {
    }, WorkerGlobalScope: function WorkerGlobalScope() {
    }, WorkerPerformance: function WorkerPerformance() {
    }, WorkletAnimation: function WorkletAnimation() {
    }, WorkletGlobalScope: function WorkletGlobalScope() {
    }, XPathEvaluator: function XPathEvaluator() {
    }, XPathExpression: function XPathExpression() {
    }, XPathNSResolver: function XPathNSResolver() {
    }, XPathResult: function XPathResult() {
    }, XmlDocument: function XmlDocument() {
    }, XmlSerializer: function XmlSerializer() {
    }, XsltProcessor: function XsltProcessor() {
    }, _Attr: function _Attr() {
    }, _Bluetooth: function _Bluetooth() {
    }, _BluetoothCharacteristicProperties: function _BluetoothCharacteristicProperties() {
    }, _BluetoothDevice: function _BluetoothDevice() {
    }, _BluetoothRemoteGATTCharacteristic: function _BluetoothRemoteGATTCharacteristic() {
    }, _BluetoothRemoteGATTServer: function _BluetoothRemoteGATTServer() {
    }, _BluetoothRemoteGATTService: function _BluetoothRemoteGATTService() {
    }, _BluetoothUUID: function _BluetoothUUID() {
    }, _BudgetService: function _BudgetService() {
    }, _Cache: function _Cache() {
    }, _CanvasPath: function _CanvasPath() {
    }, _Clipboard: function _Clipboard() {
    }, _CssRuleList: function _CssRuleList() {
    }, _DOMFileSystemSync: function _DOMFileSystemSync() {
    }, _DirectoryEntrySync: function _DirectoryEntrySync() {
    }, _DirectoryReaderSync: function _DirectoryReaderSync() {
    }, _DocumentType: function _DocumentType() {
    }, _DomRect: function _DomRect() {
    }, _JenkinsSmiHash: function _JenkinsSmiHash() {
    }, _EntrySync: function _EntrySync() {
    }, _FileEntrySync: function _FileEntrySync() {
    }, _FileReaderSync: function _FileReaderSync() {
    }, _FileWriterSync: function _FileWriterSync() {
    }, _GamepadList: function _GamepadList() {
    }, _HTMLAllCollection: function _HTMLAllCollection() {
    }, _HTMLDirectoryElement: function _HTMLDirectoryElement() {
    }, _HTMLFontElement: function _HTMLFontElement() {
    }, _HTMLFrameElement: function _HTMLFrameElement() {
    }, _HTMLFrameSetElement: function _HTMLFrameSetElement() {
    }, _HTMLMarqueeElement: function _HTMLMarqueeElement() {
    }, _Mojo: function _Mojo() {
    }, _MojoHandle: function _MojoHandle() {
    }, _MojoInterfaceInterceptor: function _MojoInterfaceInterceptor() {
    }, _MojoInterfaceRequestEvent: function _MojoInterfaceRequestEvent() {
    }, _MojoWatcher: function _MojoWatcher() {
    }, _NFC: function _NFC() {
    }, _NamedNodeMap: function _NamedNodeMap() {
    }, _PagePopupController: function _PagePopupController() {
    }, _Report: function _Report() {
    }, _Request: function _Request() {
    }, _ResourceProgressEvent: function _ResourceProgressEvent() {
    }, _Response: function _Response() {
    }, _SpeechRecognitionResultList: function _SpeechRecognitionResultList() {
    }, _StyleSheetList: function _StyleSheetList() {
    }, _SubtleCrypto: function _SubtleCrypto() {
    }, _USB: function _USB() {
    }, _USBAlternateInterface: function _USBAlternateInterface() {
    }, _USBConfiguration: function _USBConfiguration() {
    }, _USBConnectionEvent: function _USBConnectionEvent() {
    }, _USBDevice: function _USBDevice() {
    }, _USBEndpoint: function _USBEndpoint() {
    }, _USBInTransferResult: function _USBInTransferResult() {
    }, _USBInterface: function _USBInterface() {
    }, _USBIsochronousInTransferPacket: function _USBIsochronousInTransferPacket() {
    }, _USBIsochronousInTransferResult: function _USBIsochronousInTransferResult() {
    }, _USBIsochronousOutTransferPacket: function _USBIsochronousOutTransferPacket() {
    }, _USBIsochronousOutTransferResult: function _USBIsochronousOutTransferResult() {
    }, _USBOutTransferResult: function _USBOutTransferResult() {
    }, _WindowTimers: function _WindowTimers() {
    }, _WorkerLocation: function _WorkerLocation() {
    }, _WorkerNavigator: function _WorkerNavigator() {
    }, _Worklet: function _Worklet() {
    }, _AttributeMap: function _AttributeMap() {
    }, _ElementAttributeMap: function _ElementAttributeMap() {
    }, _NamespacedAttributeMap: function _NamespacedAttributeMap() {
    }, _DataAttributeMap: function _DataAttributeMap() {
    }, CanvasImageSource: function CanvasImageSource() {
    }, WindowBase: function WindowBase() {
    }, LocationBase: function LocationBase() {
    }, HistoryBase: function HistoryBase() {
    }, CssClassSet: function CssClassSet() {
    }, _ContentCssRect: function _ContentCssRect() {
    }, _ContentCssListRect: function _ContentCssListRect() {
    }, _PaddingCssRect: function _PaddingCssRect() {
    }, _BorderCssRect: function _BorderCssRect() {
    }, _MarginCssRect: function _MarginCssRect() {
    }, CssRect: function CssRect() {
    }, _MultiElementCssClassSet: function _MultiElementCssClassSet() {
    }, _ElementCssClassSet: function _ElementCssClassSet() {
    }, Dimension: function Dimension() {
    }, EventStreamProvider: function EventStreamProvider() {
    }, ElementStream: function ElementStream() {
    }, _EventStream: function _EventStream() {
    }, _ElementEventStreamImpl: function _ElementEventStreamImpl() {
    }, _ElementListEventStreamImpl: function _ElementListEventStreamImpl() {
    }, _EventStreamSubscription: function _EventStreamSubscription() {
    }, CustomStream: function CustomStream() {
    }, _CustomEventStreamImpl: function _CustomEventStreamImpl() {
    }, _CustomKeyEventStreamImpl: function _CustomKeyEventStreamImpl() {
    }, _StreamPool: function _StreamPool() {
    }, _CustomEventStreamProvider: function _CustomEventStreamProvider() {
    }, _Html5NodeValidator: function _Html5NodeValidator() {
    }, ImmutableListMixin: function ImmutableListMixin() {
    }, KeyCode: function KeyCode() {
    }, KeyLocation: function KeyLocation() {
    }, _KeyName: function _KeyName() {
    }, _KeyboardEventHandler: function _KeyboardEventHandler() {
    }, KeyboardEventStream: function KeyboardEventStream() {
    }, NodeValidatorBuilder: function NodeValidatorBuilder() {
    }, _SimpleNodeValidator: function _SimpleNodeValidator() {
    }, _CustomElementNodeValidator: function _CustomElementNodeValidator() {
    }, _TemplatingNodeValidator: function _TemplatingNodeValidator() {
    }, _SvgNodeValidator: function _SvgNodeValidator() {
    }, ReadyState: function ReadyState() {
    }, _WrappedList: function _WrappedList() {
    }, _WrappedIterator: function _WrappedIterator() {
    }, _HttpRequestUtils: function _HttpRequestUtils() {
    }, FixedSizeListIterator: function FixedSizeListIterator() {
    }, _VariableSizeListIterator: function _VariableSizeListIterator() {
    }, Console: function Console() {
    }, _JSElementUpgrader: function _JSElementUpgrader() {
    }, _DOMWindowCrossFrame: function _DOMWindowCrossFrame() {
    }, _LocationCrossFrame: function _LocationCrossFrame() {
    }, _HistoryCrossFrame: function _HistoryCrossFrame() {
    }, KeyEvent: function KeyEvent() {
    }, Platform: function Platform() {
    }, _WrappedEvent: function _WrappedEvent() {
    }, ElementUpgrader: function ElementUpgrader() {
    }, NodeValidator: function NodeValidator() {
    }, NodeTreeSanitizer: function NodeTreeSanitizer() {
    }, _TrustedHtmlTreeSanitizer: function _TrustedHtmlTreeSanitizer() {
    }, UriPolicy: function UriPolicy() {
    }, _SameOriginUriPolicy: function _SameOriginUriPolicy() {
    }, _ThrowsNodeValidator: function _ThrowsNodeValidator() {
    }, _ValidatingTreeSanitizer: function _ValidatingTreeSanitizer() {
    }, _CssStyleDeclaration_Interceptor_CssStyleDeclarationBase: function _CssStyleDeclaration_Interceptor_CssStyleDeclarationBase() {
    }, _DomRectList_Interceptor_ListMixin: function _DomRectList_Interceptor_ListMixin() {
    }, _DomRectList_Interceptor_ListMixin_ImmutableListMixin: function _DomRectList_Interceptor_ListMixin_ImmutableListMixin() {
    }, _DomStringList_Interceptor_ListMixin: function _DomStringList_Interceptor_ListMixin() {
    }, _DomStringList_Interceptor_ListMixin_ImmutableListMixin: function _DomStringList_Interceptor_ListMixin_ImmutableListMixin() {
    }, _FileList_Interceptor_ListMixin: function _FileList_Interceptor_ListMixin() {
    }, _FileList_Interceptor_ListMixin_ImmutableListMixin: function _FileList_Interceptor_ListMixin_ImmutableListMixin() {
    }, _HtmlCollection_Interceptor_ListMixin: function _HtmlCollection_Interceptor_ListMixin() {
    }, _HtmlCollection_Interceptor_ListMixin_ImmutableListMixin: function _HtmlCollection_Interceptor_ListMixin_ImmutableListMixin() {
    }, _MidiInputMap_Interceptor_MapMixin: function _MidiInputMap_Interceptor_MapMixin() {
    }, _MidiOutputMap_Interceptor_MapMixin: function _MidiOutputMap_Interceptor_MapMixin() {
    }, _MimeTypeArray_Interceptor_ListMixin: function _MimeTypeArray_Interceptor_ListMixin() {
    }, _MimeTypeArray_Interceptor_ListMixin_ImmutableListMixin: function _MimeTypeArray_Interceptor_ListMixin_ImmutableListMixin() {
    }, _NodeList_Interceptor_ListMixin: function _NodeList_Interceptor_ListMixin() {
    }, _NodeList_Interceptor_ListMixin_ImmutableListMixin: function _NodeList_Interceptor_ListMixin_ImmutableListMixin() {
    }, _PluginArray_Interceptor_ListMixin: function _PluginArray_Interceptor_ListMixin() {
    }, _PluginArray_Interceptor_ListMixin_ImmutableListMixin: function _PluginArray_Interceptor_ListMixin_ImmutableListMixin() {
    }, _RtcStatsReport_Interceptor_MapMixin: function _RtcStatsReport_Interceptor_MapMixin() {
    }, _SourceBufferList_EventTarget_ListMixin: function _SourceBufferList_EventTarget_ListMixin() {
    }, _SourceBufferList_EventTarget_ListMixin_ImmutableListMixin: function _SourceBufferList_EventTarget_ListMixin_ImmutableListMixin() {
    }, _SpeechGrammarList_Interceptor_ListMixin: function _SpeechGrammarList_Interceptor_ListMixin() {
    }, _SpeechGrammarList_Interceptor_ListMixin_ImmutableListMixin: function _SpeechGrammarList_Interceptor_ListMixin_ImmutableListMixin() {
    }, _Storage_Interceptor_MapMixin: function _Storage_Interceptor_MapMixin() {
    }, _TextTrackCueList_Interceptor_ListMixin: function _TextTrackCueList_Interceptor_ListMixin() {
    }, _TextTrackCueList_Interceptor_ListMixin_ImmutableListMixin: function _TextTrackCueList_Interceptor_ListMixin_ImmutableListMixin() {
    }, _TextTrackList_EventTarget_ListMixin: function _TextTrackList_EventTarget_ListMixin() {
    }, _TextTrackList_EventTarget_ListMixin_ImmutableListMixin: function _TextTrackList_EventTarget_ListMixin_ImmutableListMixin() {
    }, _TouchList_Interceptor_ListMixin: function _TouchList_Interceptor_ListMixin() {
    }, _TouchList_Interceptor_ListMixin_ImmutableListMixin: function _TouchList_Interceptor_ListMixin_ImmutableListMixin() {
    }, __CssRuleList_Interceptor_ListMixin: function __CssRuleList_Interceptor_ListMixin() {
    }, __CssRuleList_Interceptor_ListMixin_ImmutableListMixin: function __CssRuleList_Interceptor_ListMixin_ImmutableListMixin() {
    }, __CssStyleDeclarationSet_Object_CssStyleDeclarationBase: function __CssStyleDeclarationSet_Object_CssStyleDeclarationBase() {
    }, __GamepadList_Interceptor_ListMixin: function __GamepadList_Interceptor_ListMixin() {
    }, __GamepadList_Interceptor_ListMixin_ImmutableListMixin: function __GamepadList_Interceptor_ListMixin_ImmutableListMixin() {
    }, __NamedNodeMap_Interceptor_ListMixin: function __NamedNodeMap_Interceptor_ListMixin() {
    }, __NamedNodeMap_Interceptor_ListMixin_ImmutableListMixin: function __NamedNodeMap_Interceptor_ListMixin_ImmutableListMixin() {
    }, __SpeechRecognitionResultList_Interceptor_ListMixin: function __SpeechRecognitionResultList_Interceptor_ListMixin() {
    }, __SpeechRecognitionResultList_Interceptor_ListMixin_ImmutableListMixin: function __SpeechRecognitionResultList_Interceptor_ListMixin_ImmutableListMixin() {
    }, __StyleSheetList_Interceptor_ListMixin: function __StyleSheetList_Interceptor_ListMixin() {
    }, __StyleSheetList_Interceptor_ListMixin_ImmutableListMixin: function __StyleSheetList_Interceptor_ListMixin_ImmutableListMixin() {
    }},
  K = {_ErrorCollector: function _ErrorCollector() {
    }, ContextRoot: function ContextRoot() {
    }, ContextRoot0: function ContextRoot0() {
    }, ByteStore: function ByteStore() {
    }, MemoryByteStore: function MemoryByteStore() {
    }, MemoryCachingByteStore: function MemoryCachingByteStore() {
    }, NullByteStore: function NullByteStore() {
    }, ContextRootImpl: function ContextRootImpl() {
    }, EnableString: function EnableString() {
    }, ExperimentStatus: function ExperimentStatus() {
    }, IsEnabledByDefault: function IsEnabledByDefault() {
    }, IsExpired: function IsExpired() {
    }, _LocalNameScope: function _LocalNameScope() {
    }, _ReferencedNamesComputer: function _ReferencedNamesComputer() {
    }, RestrictedAnalysisContext: function RestrictedAnalysisContext() {
    }, TopLevelDeclaration: function TopLevelDeclaration() {
    }, TopLevelDeclarationInSource: function TopLevelDeclarationInSource() {
    }, TopLevelDeclarationKind: function TopLevelDeclarationKind() {
    }, ClassElementHandle: function ClassElementHandle() {
    }, CompilationUnitElementHandle: function CompilationUnitElementHandle() {
    }, ConstructorElementHandle: function ConstructorElementHandle() {
    }, ElementHandle: function ElementHandle() {
    }, ElementResynthesizer: function ElementResynthesizer() {
    }, ExecutableElementHandle: function ExecutableElementHandle() {
    }, ExportElementHandle: function ExportElementHandle() {
    }, FieldElementHandle: function FieldElementHandle() {
    }, FunctionElementHandle: function FunctionElementHandle() {
    }, FunctionTypeAliasElementHandle: function FunctionTypeAliasElementHandle() {
    }, GenericTypeAliasElementHandle: function GenericTypeAliasElementHandle() {
    }, ImportElementHandle: function ImportElementHandle() {
    }, LabelElementHandle: function LabelElementHandle() {
    }, LibraryElementHandle: function LibraryElementHandle() {
    }, LocalVariableElementHandle: function LocalVariableElementHandle() {
    }, MethodElementHandle: function MethodElementHandle() {
    }, ParameterElementHandle: function ParameterElementHandle() {
    }, PrefixElementHandle: function PrefixElementHandle() {
    }, PropertyAccessorElementHandle: function PropertyAccessorElementHandle() {
    }, PropertyInducingElementHandle: function PropertyInducingElementHandle() {
    }, TopLevelVariableElementHandle: function TopLevelVariableElementHandle() {
    }, TypeParameterElementHandle: function TypeParameterElementHandle() {
    }, VariableElementHandle: function VariableElementHandle() {
    }, _ParameterElementHandle_VariableElementHandle_ParameterElementMixin: function _ParameterElementHandle_VariableElementHandle_ParameterElementMixin() {
    }, FileUtilities2: function FileUtilities2() {
    }, OSUtilities: function OSUtilities() {
    }, JenkinsSmiHash: function JenkinsSmiHash() {
    }, LimitedQueue: function LimitedQueue() {
    }, PerformanceTag: function PerformanceTag() {
    }, _PerformanceTagImpl: function _PerformanceTagImpl() {
    }, DartProject: function DartProject() {
    }, ProjectVisitor: function ProjectVisitor() {
    }, _ApiModel: function _ApiModel() {
    }, StringSource: function StringSource() {
    }, _ZipFileData: function _ZipFileData() {
    }, _ZipEncoderData: function _ZipEncoderData() {
    }, ZipEncoder: function ZipEncoder() {
    }, ModuleLibrary: function ModuleLibrary() {
    }, ParserError: function ParserError() {
    }, JsonKey: function JsonKey() {
    }, FieldRename: function FieldRename() {
    }, JsonSerializable: function JsonSerializable() {
    }, TransformerFlag: function TransformerFlag() {
    }, PathMap: function PathMap() {
    }, UnicodeGlyphSet: function UnicodeGlyphSet() {
    }},
  F = {AnalysisContext: function AnalysisContext() {
    }, Precedence: function Precedence() {
    }, DartObject: function DartObject() {
    }, DartType: function DartType() {
    }, FunctionType: function FunctionType() {
    }, InterfaceType: function InterfaceType() {
    }, ParameterizedType: function ParameterizedType() {
    }, TypeParameterType: function TypeParameterType() {
    }, SourceRange: function SourceRange() {
    }, BoolState: function BoolState() {
    }, ConstructorInvocation: function ConstructorInvocation() {
    }, DartObjectImpl: function DartObjectImpl() {
    }, DoubleState: function DoubleState() {
    }, DynamicState: function DynamicState() {
    }, EvaluationException: function EvaluationException() {
    }, FunctionState: function FunctionState() {
    }, GenericState: function GenericState() {
    }, InstanceState: function InstanceState() {
    }, IntState: function IntState() {
    }, ListState: function ListState() {
    }, MapState: function MapState() {
    }, NullState: function NullState() {
    }, NumState: function NumState() {
    }, SetState: function SetState() {
    }, StringState: function StringState() {
    }, SymbolState: function SymbolState() {
    }, TypeState: function TypeState() {
    }, BottomTypeImpl: function BottomTypeImpl() {
    }, CircularFunctionTypeImpl: function CircularFunctionTypeImpl() {
    }, CircularTypeImpl: function CircularTypeImpl() {
    }, DeferredFunctionTypeImpl: function DeferredFunctionTypeImpl() {
    }, DynamicTypeImpl: function DynamicTypeImpl() {
    }, FunctionTypeImpl: function FunctionTypeImpl() {
    }, InterfaceTypeImpl: function InterfaceTypeImpl() {
    }, Nullability: function Nullability() {
    }, TypeImpl0: function TypeImpl0() {
    }, TypeParameterTypeImpl: function TypeParameterTypeImpl() {
    }, UndefinedTypeImpl: function UndefinedTypeImpl() {
    }, VoidType: function VoidType() {
    }, VoidTypeImpl: function VoidTypeImpl() {
    }, _FunctionTypeImplLazy: function _FunctionTypeImplLazy() {
    }, _FunctionTypeImplStrict: function _FunctionTypeImplStrict() {
    }, TodoCode: function TodoCode() {
    }, Character: function Character() {
    }, Enum: function Enum() {
    }, PrintStringWriter: function PrintStringWriter() {
    }, PrintWriter: function PrintWriter() {
    }, CamelCaseString: function CamelCaseString() {
    }, DartLinter: function DartLinter() {
    }, FileGlobFilter: function FileGlobFilter() {
    }, Group: function Group() {
    }, Hyperlink: function Hyperlink() {
    }, LinterContext: function LinterContext() {
    }, LinterContextImpl: function LinterContextImpl() {
    }, LinterContextUnit: function LinterContextUnit() {
    }, LinterException: function LinterException() {
    }, LinterOptions: function LinterOptions() {
    }, LintFilter: function LintFilter() {
    }, LintRule: function LintRule() {
    }, Maturity: function Maturity() {
    }, NodeLintRule: function NodeLintRule() {
    }, NodeLintRuleWithContext: function NodeLintRuleWithContext() {
    }, PrintingReporter: function PrintingReporter() {
    }, Reporter: function Reporter() {
    }, SourceLinter: function SourceLinter() {
    }, _LintCode: function _LintCode() {
    }, LinterVisitor: function LinterVisitor() {
    }, NodeLintRegistry: function NodeLintRegistry() {
    }, _Subscription: function _Subscription() {
    }, AbstractConstExprSerializer: function AbstractConstExprSerializer() {
    }, LinkedUnitContext: function LinkedUnitContext() {
    }, Reference: function Reference() {
    }, FutureGroup: function FutureGroup() {
    }, ValueResult: function ValueResult() {
    }, StreamSinkTransformer: function StreamSinkTransformer() {
    }, FileDeletingBuilder: function FileDeletingBuilder() {
    }, PostProcessBuildStep: function PostProcessBuildStep() {
    }, MetaModuleBuilder: function MetaModuleBuilder() {
    }, Listener: function Listener() {
    }, UriTranslator: function UriTranslator() {
    }, Heap: function Heap() {
    },
    UrlStyle$: function() {
      return new F.UrlStyle(P.RegExp_RegExp("/", false), P.RegExp_RegExp("(^[a-zA-Z][-+.a-zA-Z\\d]*://|[^/])$", false), P.RegExp_RegExp("[a-zA-Z][-+.a-zA-Z\\d]*://[^/]*", false), P.RegExp_RegExp("^/", false), []);
    },
    UrlStyle: function UrlStyle(t0, t1, t2, t3, t4) {
      var _ = this;
      _.separatorPattern = t0;
      _.needsSeparatorPattern = t1;
      _.rootPattern = t2;
      _.relativeRootPattern = t3;
      _.$ti = t4;
    },
    FileWatcher: function FileWatcher() {
    }
  },
  R = {ContextLocator: function ContextLocator() {
    }, ContextBuilder: function ContextBuilder() {
    }, ContextBuilderOptions: function ContextBuilderOptions() {
    }, EmbedderYamlLocator: function EmbedderYamlLocator() {
    }, ContextLocatorImpl: function ContextLocatorImpl() {
    }, PerformanceLog: function PerformanceLog() {
    }, PerformanceLogSection: function PerformanceLogSection() {
    }, ApiElementBuilder: function ApiElementBuilder() {
    }, CompilationUnitBuilder: function CompilationUnitBuilder() {
    }, DirectiveElementBuilder: function DirectiveElementBuilder() {
    }, ElementBuilder: function ElementBuilder() {
    }, LocalElementBuilder: function LocalElementBuilder() {
    }, _BaseElementBuilder: function _BaseElementBuilder() {
    }, _ClassNotExecutableElementsBuilder: function _ClassNotExecutableElementsBuilder() {
    }, _NamespaceCombinatorBuilder: function _NamespaceCombinatorBuilder() {
    }, InheritanceManager: function InheritanceManager() {
    }, MemberMap: function MemberMap() {
    }, InheritanceOverrideVerifier: function InheritanceOverrideVerifier() {
    }, _ClassVerifier: function _ClassVerifier() {
    }, ErrorVerifier: function ErrorVerifier() {
    }, HiddenElements: function HiddenElements() {
    }, RequiredConstantsComputer: function RequiredConstantsComputer() {
    }, _HasTypedefSelfReferenceVisitor: function _HasTypedefSelfReferenceVisitor() {
    }, _InvocationCollector: function _InvocationCollector() {
    }, _UninstantiatedBoundChecker: function _UninstantiatedBoundChecker() {
    }, AstBinaryReader: function AstBinaryReader() {
    }, GetContentTask: function GetContentTask() {
    }, SourceBasedAnalysisTask: function SourceBasedAnalysisTask() {
    }, ArchiveException: function ArchiveException() {
    }, DelegatingFuture: function DelegatingFuture() {
    }, ResultFuture: function ResultFuture() {
    }, Builder0: function Builder0() {
    }, BuilderOptions: function BuilderOptions() {
    }, ModuleStrategy: function ModuleStrategy() {
    }, UnlinkedSummaryBuilder: function UnlinkedSummaryBuilder() {
    }, LinkedSummaryBuilder: function LinkedSummaryBuilder() {
    }, HexEncoder: function HexEncoder() {
    }, _HexEncoderSink: function _HexEncoderSink() {
    }, DigestSink: function DigestSink() {
    }, FileSystem0: function FileSystem0() {
    }, FileSystemEntity0: function FileSystemEntity0() {
    }, FileSystemException1: function FileSystemException1() {
    }, ForCondition: function ForCondition() {
    }, ForSpread: function ForSpread() {
    }, ForInSpread: function ForInSpread() {
    }, ForEntry: function ForEntry() {
    }, ForInEntry: function ForInEntry() {
    }, ForComplete: function ForComplete() {
    }, ForInComplete: function ForInComplete() {
    }, IfCondition: function IfCondition() {
    }, IfSpread: function IfSpread() {
    }, IfEntry: function IfEntry() {
    }, IfComplete: function IfComplete() {
    }, IfElse: function IfElse() {
    }, ElseSpread: function ElseSpread() {
    }, ElseEntry: function ElseEntry() {
    }, IfElseComplete: function IfElseComplete() {
    }, SpreadOperator: function SpreadOperator() {
    }, Nested: function Nested() {
    }, ClassHeaderRecoveryListener: function ClassHeaderRecoveryListener() {
    }, ImportRecoveryListener: function ImportRecoveryListener() {
    }, MixinHeaderRecoveryListener: function MixinHeaderRecoveryListener() {
    }, TokenStreamRewriter: function TokenStreamRewriter() {
    }, TokenStreamGhostWriter: function TokenStreamGhostWriter() {
    }, TypeInfo: function TypeInfo() {
    }, TypeParamOrArgInfo: function TypeParamOrArgInfo() {
    }, NullValue: function NullValue() {
    }, StackListener: function StackListener() {
    }, Stack: function Stack() {
    }, FixedNullableList: function FixedNullableList() {
    }, GrowableList: function GrowableList() {
    }, ParserRecovery: function ParserRecovery() {
    }, JsonConverter: function JsonConverter() {
    }, ParseError: function ParseError() {
    }, InvalidKernelVersionError: function InvalidKernelVersionError() {
    }, CanonicalNameError: function CanonicalNameError() {
    }, _ComponentIndex: function _ComponentIndex() {
    }, BinaryBuilder: function BinaryBuilder() {
    }, BinaryBuilderWithMetadata: function BinaryBuilderWithMetadata() {
    }, _MetadataSubsection: function _MetadataSubsection() {
    }, CloneVisitor: function CloneVisitor() {
    }, CloneWithoutBody: function CloneWithoutBody() {
    }, TargetFlags: function TargetFlags() {
    }, DiagnosticReporter: function DiagnosticReporter() {
    }, Target: function Target() {
    }, NoneTarget: function NoneTarget() {
    }, RelativeSpanScanner: function RelativeSpanScanner() {
    }, _SpanScannerState: function _SpanScannerState() {
    }, AsyncQueue: function AsyncQueue() {
    }, MacOSDirectoryWatcher: function MacOSDirectoryWatcher() {
    }, _MacOSDirectoryWatcher: function _MacOSDirectoryWatcher() {
    }, NativeFileWatcher: function NativeFileWatcher() {
    }, _NativeFileWatcher: function _NativeFileWatcher() {
    }},
  D = {DeclaredVariables: function DeclaredVariables() {
    }, FileTracker: function FileTracker() {
    }, LibraryCycle: function LibraryCycle() {
    }, _LibraryNode: function _LibraryNode() {
    }, _LibraryWalker: function _LibraryWalker() {
    }, CharacterRangeReader: function CharacterRangeReader() {
    }, PackageMapUriResolver: function PackageMapUriResolver() {
    }, ApiSignature: function ApiSignature() {
    }, AnalysisSessionForLink: function AnalysisSessionForLink() {
    }, ClassElementForLink: function ClassElementForLink() {
    }, ClassElementForLink_Class: function ClassElementForLink_Class() {
    }, ClassElementForLink_Enum: function ClassElementForLink_Enum() {
    }, CompilationUnitElementForLink: function CompilationUnitElementForLink() {
    }, CompilationUnitElementInBuildUnit: function CompilationUnitElementInBuildUnit() {
    }, CompilationUnitElementInDependency: function CompilationUnitElementInDependency() {
    }, ConstConstructorNode: function ConstConstructorNode() {
    }, ConstDependencyWalker: function ConstDependencyWalker() {
    }, ConstNode: function ConstNode() {
    }, ConstParameterNode: function ConstParameterNode() {
    }, ConstructorElementForLink: function ConstructorElementForLink() {
    }, ConstructorElementForLink_Synthetic: function ConstructorElementForLink_Synthetic() {
    }, ConstVariableNode: function ConstVariableNode() {
    }, ContextForLink: function ContextForLink() {
    }, DependencyWalker: function DependencyWalker() {
    }, ExecutableElementForLink: function ExecutableElementForLink() {
    }, ExecutableElementForLink_NonLocal: function ExecutableElementForLink_NonLocal() {
    }, ExprTypeComputer: function ExprTypeComputer() {
    }, FieldElementForLink: function FieldElementForLink() {
    }, FieldElementForLink_ClassField: function FieldElementForLink_ClassField() {
    }, FieldElementForLink_EnumField: function FieldElementForLink_EnumField() {
    }, FieldElementForLink_EnumField_index: function FieldElementForLink_EnumField_index() {
    }, FieldElementForLink_EnumField_value: function FieldElementForLink_EnumField_value() {
    }, FieldElementForLink_EnumField_values: function FieldElementForLink_EnumField_values() {
    }, FieldFormalParameterElementForLink: function FieldFormalParameterElementForLink() {
    }, FunctionElementForLink_FunctionTypedParam: function FunctionElementForLink_FunctionTypedParam() {
    }, FunctionElementForLink_Initializer: function FunctionElementForLink_Initializer() {
    }, FunctionElementForLink_Local: function FunctionElementForLink_Local() {
    }, FunctionElementForLink_Local_NonSynthetic: function FunctionElementForLink_Local_NonSynthetic() {
    }, FunctionElementForLink_Synthetic: function FunctionElementForLink_Synthetic() {
    }, FunctionTypeAliasElementForLink: function FunctionTypeAliasElementForLink() {
    }, GenericFunctionTypeElementForLink: function GenericFunctionTypeElementForLink() {
    }, GenericTypeAliasElementForLink: function GenericTypeAliasElementForLink() {
    }, InlineFunctionTypeParameterContext: function InlineFunctionTypeParameterContext() {
    }, LibraryCycleDependencyWalker: function LibraryCycleDependencyWalker() {
    }, LibraryCycleForLink: function LibraryCycleForLink() {
    }, LibraryCycleNode: function LibraryCycleNode() {
    }, LibraryDependencyWalker: function LibraryDependencyWalker() {
    }, LibraryElementForLink: function LibraryElementForLink() {
    }, LibraryElementInBuildUnit: function LibraryElementInBuildUnit() {
    }, LibraryElementInDependency: function LibraryElementInDependency() {
    }, LibraryNode: function LibraryNode() {
    }, Linker: function Linker() {
    }, MethodElementForLink: function MethodElementForLink() {
    }, Node0: function Node0() {
    }, NonstaticMemberElementForLink: function NonstaticMemberElementForLink() {
    }, ParameterElementForLink: function ParameterElementForLink() {
    }, ParameterElementForLink_VariableSetter: function ParameterElementForLink_VariableSetter() {
    }, ParameterParentElementForLink: function ParameterParentElementForLink() {
    }, PropertyAccessorElementForLink: function PropertyAccessorElementForLink() {
    }, PropertyAccessorElementForLink_EnumField: function PropertyAccessorElementForLink_EnumField() {
    }, PropertyAccessorElementForLink_Executable: function PropertyAccessorElementForLink_Executable() {
    }, PropertyAccessorElementForLink_Variable: function PropertyAccessorElementForLink_Variable() {
    }, ReferenceableElementForLink: function ReferenceableElementForLink() {
    }, SimplyBoundableForLinkMixin: function SimplyBoundableForLinkMixin() {
    }, SimplyBoundedDependencyWalker: function SimplyBoundedDependencyWalker() {
    }, SimplyBoundedNode: function SimplyBoundedNode() {
    }, SpecialTypeElementForLink: function SpecialTypeElementForLink() {
    }, SyntheticVariableElementForLink: function SyntheticVariableElementForLink() {
    }, TopLevelFunctionElementForLink: function TopLevelFunctionElementForLink() {
    }, TopLevelVariableElementForLink: function TopLevelVariableElementForLink() {
    }, TypeInferenceDependencyWalker: function TypeInferenceDependencyWalker() {
    }, TypeInferenceNode: function TypeInferenceNode() {
    }, TypeProviderForLink: function TypeProviderForLink() {
    }, UndefinedElementForLink: function UndefinedElementForLink() {
    }, VariableElementForLink: function VariableElementForLink() {
    }, _LibraryResynthesizer: function _LibraryResynthesizer() {
    }, _ReferenceInfo: function _ReferenceInfo() {
    }, _UnitResynthesizer: function _UnitResynthesizer() {
    }, _ClassElementForLink_Object_ReferenceableElementForLink: function _ClassElementForLink_Object_ReferenceableElementForLink() {
    }, _ClassElementForLink_Class_ClassElementForLink_TypeParameterizedElementMixin: function _ClassElementForLink_Class_ClassElementForLink_TypeParameterizedElementMixin() {
    }, _ClassElementForLink_Class_ClassElementForLink_TypeParameterizedElementMixin_SimplyBoundableForLinkMixin: function _ClassElementForLink_Class_ClassElementForLink_TypeParameterizedElementMixin_SimplyBoundableForLinkMixin() {
    }, _ConstructorElementForLink_ExecutableElementForLink_NonLocal_ReferenceableElementForLink: function _ConstructorElementForLink_ExecutableElementForLink_NonLocal_ReferenceableElementForLink() {
    }, _ExecutableElementForLink_Object_TypeParameterizedElementMixin: function _ExecutableElementForLink_Object_TypeParameterizedElementMixin() {
    }, _ExecutableElementForLink_Object_TypeParameterizedElementMixin_ParameterParentElementForLink: function _ExecutableElementForLink_Object_TypeParameterizedElementMixin_ParameterParentElementForLink() {
    }, _FunctionElementForLink_FunctionTypedParam_Object_ParameterParentElementForLink: function _FunctionElementForLink_FunctionTypedParam_Object_ParameterParentElementForLink() {
    }, _FunctionElementForLink_Initializer_Object_ReferenceableElementForLink: function _FunctionElementForLink_Initializer_Object_ReferenceableElementForLink() {
    }, _FunctionElementForLink_Initializer_Object_ReferenceableElementForLink_TypeParameterizedElementMixin: function _FunctionElementForLink_Initializer_Object_ReferenceableElementForLink_TypeParameterizedElementMixin() {
    }, _FunctionElementForLink_Local_NonSynthetic_ExecutableElementForLink_ReferenceableElementForLink: function _FunctionElementForLink_Local_NonSynthetic_ExecutableElementForLink_ReferenceableElementForLink() {
    }, _FunctionElementForLink_Synthetic_ExecutableElementForLink_ReferenceableElementForLink: function _FunctionElementForLink_Synthetic_ExecutableElementForLink_ReferenceableElementForLink() {
    }, _FunctionTypeAliasElementForLink_Object_TypeParameterizedElementMixin: function _FunctionTypeAliasElementForLink_Object_TypeParameterizedElementMixin() {
    }, _FunctionTypeAliasElementForLink_Object_TypeParameterizedElementMixin_ParameterParentElementForLink: function _FunctionTypeAliasElementForLink_Object_TypeParameterizedElementMixin_ParameterParentElementForLink() {
    }, _FunctionTypeAliasElementForLink_Object_TypeParameterizedElementMixin_ParameterParentElementForLink_ReferenceableElementForLink: function _FunctionTypeAliasElementForLink_Object_TypeParameterizedElementMixin_ParameterParentElementForLink_ReferenceableElementForLink() {
    }, _FunctionTypeAliasElementForLink_Object_TypeParameterizedElementMixin_ParameterParentElementForLink_ReferenceableElementForLink_SimplyBoundableForLinkMixin: function _FunctionTypeAliasElementForLink_Object_TypeParameterizedElementMixin_ParameterParentElementForLink_ReferenceableElementForLink_SimplyBoundableForLinkMixin() {
    }, _GenericFunctionTypeElementForLink_Object_TypeParameterizedElementMixin: function _GenericFunctionTypeElementForLink_Object_TypeParameterizedElementMixin() {
    }, _GenericFunctionTypeElementForLink_Object_TypeParameterizedElementMixin_ParameterParentElementForLink: function _GenericFunctionTypeElementForLink_Object_TypeParameterizedElementMixin_ParameterParentElementForLink() {
    }, _GenericFunctionTypeElementForLink_Object_TypeParameterizedElementMixin_ParameterParentElementForLink_ReferenceableElementForLink: function _GenericFunctionTypeElementForLink_Object_TypeParameterizedElementMixin_ParameterParentElementForLink_ReferenceableElementForLink() {
    }, _GenericTypeAliasElementForLink_Object_TypeParameterizedElementMixin: function _GenericTypeAliasElementForLink_Object_TypeParameterizedElementMixin() {
    }, _GenericTypeAliasElementForLink_Object_TypeParameterizedElementMixin_ParameterParentElementForLink: function _GenericTypeAliasElementForLink_Object_TypeParameterizedElementMixin_ParameterParentElementForLink() {
    }, _GenericTypeAliasElementForLink_Object_TypeParameterizedElementMixin_ParameterParentElementForLink_ReferenceableElementForLink: function _GenericTypeAliasElementForLink_Object_TypeParameterizedElementMixin_ParameterParentElementForLink_ReferenceableElementForLink() {
    }, _GenericTypeAliasElementForLink_Object_TypeParameterizedElementMixin_ParameterParentElementForLink_ReferenceableElementForLink_SimplyBoundableForLinkMixin: function _GenericTypeAliasElementForLink_Object_TypeParameterizedElementMixin_ParameterParentElementForLink_ReferenceableElementForLink_SimplyBoundableForLinkMixin() {
    }, _MethodElementForLink_ExecutableElementForLink_NonLocal_ReferenceableElementForLink: function _MethodElementForLink_ExecutableElementForLink_NonLocal_ReferenceableElementForLink() {
    }, _NonstaticMemberElementForLink_Object_ReferenceableElementForLink: function _NonstaticMemberElementForLink_Object_ReferenceableElementForLink() {
    }, _PropertyAccessorElementForLink_EnumField_Object_ReferenceableElementForLink: function _PropertyAccessorElementForLink_EnumField_Object_ReferenceableElementForLink() {
    }, _PropertyAccessorElementForLink_Executable_ExecutableElementForLink_NonLocal_ReferenceableElementForLink: function _PropertyAccessorElementForLink_Executable_ExecutableElementForLink_NonLocal_ReferenceableElementForLink() {
    }, _PropertyAccessorElementForLink_Variable_Object_ReferenceableElementForLink: function _PropertyAccessorElementForLink_Variable_Object_ReferenceableElementForLink() {
    }, _SpecialTypeElementForLink_Object_ReferenceableElementForLink: function _SpecialTypeElementForLink_Object_ReferenceableElementForLink() {
    }, _TopLevelFunctionElementForLink_ExecutableElementForLink_NonLocal_ReferenceableElementForLink: function _TopLevelFunctionElementForLink_ExecutableElementForLink_NonLocal_ReferenceableElementForLink() {
    }, _UndefinedElementForLink_Object_ReferenceableElementForLink: function _UndefinedElementForLink_Object_ReferenceableElementForLink() {
    }, __UnitResynthesizer_UnitResynthesizer_UnitResynthesizerMixin: function __UnitResynthesizer_UnitResynthesizer_UnitResynthesizerMixin() {
    }, GnWorkspace: function GnWorkspace() {
    }, GnWorkspacePackage: function GnWorkspacePackage() {
    }, Archive: function Archive() {
    }, BZip2Encoder: function BZip2Encoder() {
    }, GZipEncoder: function GZipEncoder() {
    }, ReleaseStreamTransformer: function ReleaseStreamTransformer() {
    }, _TransformedSubscription: function _TransformedSubscription() {
    }, AssetReader: function AssetReader() {
    }, MultiPackageAssetReader: function MultiPackageAssetReader() {
    }, Hmac: function Hmac() {
    }, _HmacSink: function _HmacSink() {
    }, TypeLabeler: function TypeLabeler() {
    }, LabeledClassName: function LabeledClassName() {
    }, ErrorDelegationListener: function ErrorDelegationListener() {
    }, IdentifierContext: function IdentifierContext() {
    }, Node1: function Node1() {
    }, StringCanonicalizer: function StringCanonicalizer() {
    }, StringToken0: function StringToken0() {
    }, SyntheticStringToken0: function SyntheticStringToken0() {
    }, CommentToken0: function CommentToken0() {
    }, DartDocToken: function DartDocToken() {
    }, _LazySubstring: function _LazySubstring() {
    }, _CompactLazySubstring: function _CompactLazySubstring() {
    }, _FullLazySubstring: function _FullLazySubstring() {
    }, CharacterReader: function CharacterReader() {
    }, CharSequenceReader: function CharSequenceReader() {
    }, SubSequenceReader: function SubSequenceReader() {
    }, StringUtilities0: function StringUtilities0() {
    }, Glob: function Glob() {
    }, CheckedFromJsonException: function CheckedFromJsonException() {
    }, CoqLib: function CoqLib() {
    }, TextEditTransaction: function TextEditTransaction() {
    }, _TextEdit: function _TextEdit() {
    }, SourceLocationMixin: function SourceLocationMixin() {
    }, EagerSpanScanner: function EagerSpanScanner() {
    }, _EagerSpanScannerState: function _EagerSpanScannerState() {
    }, PollingDirectoryWatcher: function PollingDirectoryWatcher() {
    }, _PollingDirectoryWatcher: function _PollingDirectoryWatcher() {
    }, PollingFileWatcher: function PollingFileWatcher() {
    }, _PollingFileWatcher: function _PollingFileWatcher() {
    },
    LazyMapping$: function(_provider) {
      return new D.LazyMapping(T.MappingBundle$(), _provider, []);
    },
    mapper: function(rawStackTrace) {
      var trace;
      H.stringTypeCheck(rawStackTrace);
      if ($._mapping == null)
        throw H.wrapException(P.StateError$("Source maps are not done loading."));
      trace = Y.Trace_Trace$parse(rawStackTrace);
      return J.toString$0$(O.mapStackTrace($._mapping, trace, $.$get$roots()));
    },
    setSourceMapProvider: function(provider) {
      $._mapping = D.LazyMapping$(H.functionTypeCheck(provider, {func: 1, args: [P.String]}));
    },
    main: function() {
      var t1 = {mapper: P.allowInterop(D.stack_trace_mapper__mapper$closure(), {func: 1, ret: P.String, args: [P.String]}), setSourceMapProvider: P.allowInterop(D.stack_trace_mapper__setSourceMapProvider$closure(), {func: 1, ret: -1, args: [{func: 1, args: [P.String]}]})};
      self.$dartStackTraceUtility = t1;
    },
    DartStackTraceUtility: function DartStackTraceUtility() {
    },
    LazyMapping: function LazyMapping(t0, t1, t2) {
      this._bundle = t0;
      this._provider = t1;
      this.$ti = t2;
    },
    closure0: function closure0(t0) {
      this.$ti = t0;
    },
    current: function() {
      var path, lastIndex,
        uri = P.Uri_base();
      if (J.$eq$(uri, $._currentUriBase))
        return $._current;
      $._currentUriBase = uri;
      if (J.$eq$($.$get$Style_platform(), $.$get$Style_url()))
        return $._current = J.toString$0$(uri.resolve$1("."));
      else {
        path = uri.toFilePath$0();
        lastIndex = path.length - 1;
        return $._current = lastIndex === 0 ? path : J.substring$2$s(path, 0, lastIndex);
      }
    },
    absolute: function(part1) {
      var _null = null;
      H.stringTypeCheck(part1);
      return $.$get$context().absolute$7(part1, _null, _null, _null, _null, _null, _null);
    },
    dirname: function(path) {
      H.stringTypeCheck(path);
      return $.$get$context().dirname$1(path);
    },
    fromUri: function(uri) {
      return $.$get$context().fromUri$1(uri);
    },
    toUri: function(path) {
      H.stringTypeCheck(path);
      return $.$get$context().toUri$1(path);
    },
    prettyUri: function(uri) {
      return $.$get$context().prettyUri$1(uri);
    }
  },
  B = {AnalysisResult: function AnalysisResult() {
    }, AnalysisResultWithErrors: function AnalysisResultWithErrors() {
    }, ElementDeclarationResult: function ElementDeclarationResult() {
    }, ErrorsResult: function ErrorsResult() {
    }, FileResult: function FileResult() {
    }, ParsedLibraryResult: function ParsedLibraryResult() {
    }, ParsedUnitResult: function ParsedUnitResult() {
    }, ParseResult: function ParseResult() {
    }, ResolvedLibraryResult: function ResolvedLibraryResult() {
    }, ResolvedUnitResult: function ResolvedUnitResult() {
    }, ResolveResult: function ResolveResult() {
    }, ResultState: function ResultState() {
    }, UnitElementResult: function UnitElementResult() {
    }, BreadthFirstVisitor: function BreadthFirstVisitor() {
    }, DelegatingAstVisitor: function DelegatingAstVisitor() {
    }, GeneralizingAstVisitor: function GeneralizingAstVisitor() {
    }, RecursiveAstVisitor: function RecursiveAstVisitor() {
    }, SimpleAstVisitor: function SimpleAstVisitor() {
    }, ThrowingAstVisitor: function ThrowingAstVisitor() {
    }, TimedAstVisitor: function TimedAstVisitor() {
    }, UnifyingAstVisitor: function UnifyingAstVisitor() {
    }, _BreadthFirstChildVisitor: function _BreadthFirstChildVisitor() {
    }, _GeneralizingAstVisitor_Object_UIAsCodeVisitorMixin: function _GeneralizingAstVisitor_Object_UIAsCodeVisitorMixin() {
    }, _RecursiveAstVisitor_Object_UIAsCodeVisitorMixin: function _RecursiveAstVisitor_Object_UIAsCodeVisitorMixin() {
    }, _SimpleAstVisitor_Object_UIAsCodeVisitorMixin: function _SimpleAstVisitor_Object_UIAsCodeVisitorMixin() {
    }, _ThrowingAstVisitor_Object_UIAsCodeVisitorMixin: function _ThrowingAstVisitor_Object_UIAsCodeVisitorMixin() {
    }, _TimedAstVisitor_Object_UIAsCodeVisitorMixin: function _TimedAstVisitor_Object_UIAsCodeVisitorMixin() {
    }, _UnifyingAstVisitor_Object_UIAsCodeVisitorMixin: function _UnifyingAstVisitor_Object_UIAsCodeVisitorMixin() {
    }, GeneralizingElementVisitor: function GeneralizingElementVisitor() {
    }, RecursiveElementVisitor: function RecursiveElementVisitor() {
    }, SimpleElementVisitor: function SimpleElementVisitor() {
    }, ThrowingElementVisitor: function ThrowingElementVisitor() {
    }, CancelableCompleter: function CancelableCompleter() {
    }, CancelableFuture: function CancelableFuture() {
    }, FutureCanceledError: function FutureCanceledError() {
    }, _CancelableCompleterFuture: function _CancelableCompleterFuture() {
    }, _WrappedFuture: function _WrappedFuture() {
    }, AnalysisCache: function AnalysisCache() {
    }, CacheEntry: function CacheEntry() {
    }, CacheFlushManager: function CacheFlushManager() {
    }, CachePartition: function CachePartition() {
    }, Delta: function Delta() {
    }, DeltaResult: function DeltaResult() {
    }, InvalidatedResult: function InvalidatedResult() {
    }, PackageCachePartition: function PackageCachePartition() {
    }, ReentrantSynchronousStream: function ReentrantSynchronousStream() {
    }, ReentrantSynchronousStreamSubscription: function ReentrantSynchronousStreamSubscription() {
    }, ResultData: function ResultData() {
    }, SdkCachePartition: function SdkCachePartition() {
    }, UniversalCachePartition: function UniversalCachePartition() {
    }, UnlimitedCacheFlushManager: function UnlimitedCacheFlushManager() {
    }, Cache: function Cache() {
    }, AnalysisResultImpl: function AnalysisResultImpl() {
    }, ElementDeclarationResultImpl: function ElementDeclarationResultImpl() {
    }, ErrorsResultImpl: function ErrorsResultImpl() {
    }, FileResultImpl: function FileResultImpl() {
    }, ParsedLibraryResultImpl: function ParsedLibraryResultImpl() {
    }, ParsedUnitResultImpl: function ParsedUnitResultImpl() {
    }, ResolvedLibraryResultImpl: function ResolvedLibraryResultImpl() {
    }, ResolvedUnitResultImpl: function ResolvedUnitResultImpl() {
    }, UnitElementResultImpl: function UnitElementResultImpl() {
    }, _DeclarationByElementLocator: function _DeclarationByElementLocator() {
    }, _ConstantNode: function _ConstantNode() {
    }, _ConstantWalker: function _ConstantWalker() {
    }, ElementFactory: function ElementFactory() {
    }, TimestampedData: function TimestampedData() {
    }, SdkConstraintVerifier: function SdkConstraintVerifier() {
    }, DriverOptions: function DriverOptions() {
    }, LintDriver: function LintDriver() {
    }, StdLogger: function StdLogger() {
    }, PSDependency: function PSDependency() {
    }, PSDependencyList: function PSDependencyList() {
    }, PSEntry: function PSEntry() {
    }, PSGitRepo: function PSGitRepo() {
    }, PSHost: function PSHost() {
    }, PSNode: function PSNode() {
    }, PSNodeList: function PSNodeList() {
    }, Pubspec: function Pubspec() {
    }, PubspecVisitor: function PubspecVisitor() {
    }, _PSDependency: function _PSDependency() {
    }, _PSDependencyList: function _PSDependencyList() {
    }, _PSGitRepo: function _PSGitRepo() {
    }, _PSHost: function _PSHost() {
    }, _PSNode: function _PSNode() {
    }, _PSNodeList: function _PSNodeList() {
    }, _Pubspec: function _Pubspec() {
    }, _StringBuilder: function _StringBuilder() {
    }, _PSDependencyList_Object_IterableMixin: function _PSDependencyList_Object_IterableMixin() {
    }, _PSNodeList_Object_IterableMixin: function _PSNodeList_Object_IterableMixin() {
    }, OptionsValidator: function OptionsValidator() {
    }, FileSource: function FileSource() {
    }, AnalysisDriverExceptionContext: function AnalysisDriverExceptionContext() {
    }, AnalysisDriverExceptionFile: function AnalysisDriverExceptionFile() {
    }, AnalysisDriverResolvedUnit: function AnalysisDriverResolvedUnit() {
    }, AnalysisDriverSubtype: function AnalysisDriverSubtype() {
    }, AnalysisDriverUnitError: function AnalysisDriverUnitError() {
    }, AnalysisDriverUnitIndex: function AnalysisDriverUnitIndex() {
    }, AnalysisDriverUnlinkedUnit: function AnalysisDriverUnlinkedUnit() {
    }, AvailableDeclaration: function AvailableDeclaration() {
    }, AvailableDeclarationKind: function AvailableDeclarationKind() {
    }, AvailableFile: function AvailableFile() {
    }, AvailableFileExport: function AvailableFileExport() {
    }, AvailableFileExportCombinator: function AvailableFileExportCombinator() {
    }, CodeRange: function CodeRange() {
    }, EntityRef: function EntityRef() {
    }, EntityRefKind: function EntityRefKind() {
    }, IndexNameKind: function IndexNameKind() {
    }, IndexRelationKind: function IndexRelationKind() {
    }, IndexSyntheticElementKind: function IndexSyntheticElementKind() {
    }, LinkedDependency: function LinkedDependency() {
    }, LinkedExportName: function LinkedExportName() {
    }, LinkedLibrary: function LinkedLibrary() {
    }, LinkedNode: function LinkedNode() {
    }, LinkedNodeBundle: function LinkedNodeBundle() {
    }, LinkedNodeCommentType: function LinkedNodeCommentType() {
    }, LinkedNodeFormalParameterKind: function LinkedNodeFormalParameterKind() {
    }, LinkedNodeKind: function LinkedNodeKind() {
    }, LinkedNodeLibrary: function LinkedNodeLibrary() {
    }, LinkedNodeReferences: function LinkedNodeReferences() {
    }, LinkedNodeType: function LinkedNodeType() {
    }, LinkedNodeTypeKind: function LinkedNodeTypeKind() {
    }, LinkedNodeUnit: function LinkedNodeUnit() {
    }, LinkedNodeVariablesDeclaration: function LinkedNodeVariablesDeclaration() {
    }, LinkedReference: function LinkedReference() {
    }, LinkedUnit: function LinkedUnit() {
    }, PackageBundle: function PackageBundle() {
    }, PackageDependencyInfo: function PackageDependencyInfo() {
    }, PackageIndex: function PackageIndex() {
    }, ReferenceKind: function ReferenceKind() {
    }, TopLevelInferenceError: function TopLevelInferenceError() {
    }, TopLevelInferenceErrorKind: function TopLevelInferenceErrorKind() {
    }, TypedefStyle: function TypedefStyle() {
    }, UnitIndex: function UnitIndex() {
    }, UnlinkedClass: function UnlinkedClass() {
    }, UnlinkedCombinator: function UnlinkedCombinator() {
    }, UnlinkedConfiguration: function UnlinkedConfiguration() {
    }, UnlinkedConstructorInitializer: function UnlinkedConstructorInitializer() {
    }, UnlinkedConstructorInitializerKind: function UnlinkedConstructorInitializerKind() {
    }, UnlinkedDocumentationComment: function UnlinkedDocumentationComment() {
    }, UnlinkedEnum: function UnlinkedEnum() {
    }, UnlinkedEnumValue: function UnlinkedEnumValue() {
    }, UnlinkedExecutable: function UnlinkedExecutable() {
    }, UnlinkedExecutableKind: function UnlinkedExecutableKind() {
    }, UnlinkedExportNonPublic: function UnlinkedExportNonPublic() {
    }, UnlinkedExportPublic: function UnlinkedExportPublic() {
    }, UnlinkedExpr: function UnlinkedExpr() {
    }, UnlinkedExprAssignOperator: function UnlinkedExprAssignOperator() {
    }, UnlinkedExprOperation: function UnlinkedExprOperation() {
    }, UnlinkedImport: function UnlinkedImport() {
    }, UnlinkedParam: function UnlinkedParam() {
    }, UnlinkedParamKind: function UnlinkedParamKind() {
    }, UnlinkedPart: function UnlinkedPart() {
    }, UnlinkedPublicName: function UnlinkedPublicName() {
    }, UnlinkedPublicNamespace: function UnlinkedPublicNamespace() {
    }, UnlinkedReference: function UnlinkedReference() {
    }, UnlinkedTokenKind: function UnlinkedTokenKind() {
    }, UnlinkedTokens: function UnlinkedTokens() {
    }, UnlinkedTokenType: function UnlinkedTokenType() {
    }, UnlinkedTypedef: function UnlinkedTypedef() {
    }, UnlinkedTypeParam: function UnlinkedTypeParam() {
    }, UnlinkedUnit: function UnlinkedUnit() {
    }, UnlinkedVariable: function UnlinkedVariable() {
    }, AnalyzerOptions: function AnalyzerOptions() {
    }, AnalyzerOptionsValidator: function AnalyzerOptionsValidator() {
    }, CompositeValidator: function CompositeValidator() {
    }, EnabledExperimentsValidator: function EnabledExperimentsValidator() {
    }, ErrorBuilder: function ErrorBuilder() {
    }, ErrorFilterOptionValidator: function ErrorFilterOptionValidator() {
    }, GenerateOptionsErrorsTask: function GenerateOptionsErrorsTask() {
    }, LanguageOptionValidator: function LanguageOptionValidator() {
    }, LinterOptionsValidator: function LinterOptionsValidator() {
    }, OptionsFileValidator: function OptionsFileValidator() {
    }, StrongModeOptionValueValidator: function StrongModeOptionValueValidator() {
    }, TopLevelAnalyzerOptionsValidator: function TopLevelAnalyzerOptionsValidator() {
    }, TopLevelOptionValidator: function TopLevelOptionValidator() {
    }, TrueOrFalseValueErrorBuilder: function TrueOrFalseValueErrorBuilder() {
    }, _OptionsProcessor: function _OptionsProcessor() {
    }, CodeChecker: function CodeChecker() {
    }, _OverrideChecker: function _OverrideChecker() {
    }, _TopLevelInitializerValidator: function _TopLevelInitializerValidator() {
    }, Merger: function Merger() {
    }, PubWorkspace: function PubWorkspace() {
    }, PubWorkspacePackage: function PubWorkspacePackage() {
    }, ArchiveFile: function ArchiveFile() {
    }, SingleSubscriptionTransformer: function SingleSubscriptionTransformer() {
    }, MultiplexingBuilder: function MultiplexingBuilder() {
    }, Dart2JsArchiveExtractor: function Dart2JsArchiveExtractor() {
    }, WebCompiler: function WebCompiler() {
    }, WebEntrypointBuilder: function WebEntrypointBuilder() {
    }, CombinedListView: function CombinedListView() {
    }, Pair: function Pair() {
    }, PercentDecoder: function PercentDecoder() {
    }, _PercentDecoderSink: function _PercentDecoderSink() {
    }, _PercentDecoderByteSink: function _PercentDecoderByteSink() {
    }, PercentEncoder: function PercentEncoder() {
    }, _PercentEncoderSink: function _PercentEncoderSink() {
    }, Digest: function Digest() {
    }, Code: function Code() {
    }, Message: function Message() {
    }, MessageCode: function MessageCode() {
    }, Template: function Template() {
    }, LocatedMessage: function LocatedMessage() {
    }, FormattedMessage: function FormattedMessage() {
    }, DiagnosticMessageFromJson: function DiagnosticMessageFromJson() {
    }, Utf8BytesScanner: function Utf8BytesScanner() {
    }, Range0: function Range0() {
    }, GlobMatch: function GlobMatch() {
    }, _CrawlAsync: function _CrawlAsync() {
    }, InternalStyle: function InternalStyle() {
    }, PathSet: function PathSet() {
    }, DirectoryWatcher: function DirectoryWatcher() {
    }, PathSet0: function PathSet0() {
    }, _Entry: function _Entry() {
    }, BatchedStreamTransformer: function BatchedStreamTransformer() {
    }, Pair0: function Pair0() {
    },
    isAlphabetic: function(char) {
      var t1;
      H.intTypeCheck(char);
      if (typeof char !== "number")
        return char.$ge();
      if (!(char >= 65 && char <= 90))
        t1 = char >= 97 && char <= 122;
      else
        t1 = true;
      return t1;
    },
    isDriveLetter: function(path, index) {
      var t1, t2;
      H.stringTypeCheck(path);
      H.intTypeCheck(index);
      t1 = path.length;
      if (typeof index !== "number")
        return index.$add();
      t2 = index + 2;
      if (t1 < t2)
        return false;
      if (!B.isAlphabetic(J.getInterceptor$s(path).codeUnitAt$1(path, index)))
        return false;
      if (!J.$eq$(C.JSString_methods.codeUnitAt$1(path, index + 1), 58))
        return false;
      if (t1 === t2)
        return true;
      return J.$eq$(C.JSString_methods.codeUnitAt$1(path, t2), 47);
    }
  },
  L = {AnalysisSession: function AnalysisSession() {
    }, InconsistentAnalysisException: function InconsistentAnalysisException() {
    }, AnalysisDriver: function AnalysisDriver() {
    }, AnalysisDriverGeneric: function AnalysisDriverGeneric() {
    }, AnalysisDriverPriority: function AnalysisDriverPriority() {
    }, AnalysisDriverScheduler: function AnalysisDriverScheduler() {
    }, AnalysisDriverTestView: function AnalysisDriverTestView() {
    }, AnalysisResult0: function AnalysisResult0() {
    }, DriverPerformance: function DriverPerformance() {
    }, DriverWatcher: function DriverWatcher() {
    }, ExceptionResult: function ExceptionResult() {
    }, SchedulerWorker: function SchedulerWorker() {
    }, _DiscoverAvailableFilesTask: function _DiscoverAvailableFilesTask() {
    }, _ExceptionState: function _ExceptionState() {
    }, _FilesDefiningClassMemberNameTask: function _FilesDefiningClassMemberNameTask() {
    }, _FilesReferencingNameTask: function _FilesReferencingNameTask() {
    }, _TopLevelNameDeclarationsTask: function _TopLevelNameDeclarationsTask() {
    }, AnalysisSessionImpl: function AnalysisSessionImpl() {
    }, ConstantEvaluator0: function ConstantEvaluator0() {
    }, ResolutionContext: function ResolutionContext() {
    }, ResolutionContextBuilder: function ResolutionContextBuilder() {
    }, AstRewriteVisitor: function AstRewriteVisitor() {
    }, BestPracticesVerifier: function BestPracticesVerifier() {
    }, BuildLibraryElementUtils: function BuildLibraryElementUtils() {
    }, Dart2JSVerifier: function Dart2JSVerifier() {
    }, DeadCodeVerifier: function DeadCodeVerifier() {
    }, DirectiveResolver: function DirectiveResolver() {
    }, ElementHolder: function ElementHolder() {
    }, EnumMemberBuilder: function EnumMemberBuilder() {
    }, GatherUsedImportedElementsVisitor: function GatherUsedImportedElementsVisitor() {
    }, GatherUsedLocalElementsVisitor: function GatherUsedLocalElementsVisitor() {
    }, ImportsVerifier: function ImportsVerifier() {
    }, InferenceContext: function InferenceContext() {
    }, INIT_STATE: function INIT_STATE() {
    }, InstanceFieldResolverVisitor: function InstanceFieldResolverVisitor() {
    }, OverrideVerifier: function OverrideVerifier() {
    }, PartialResolverVisitor: function PartialResolverVisitor() {
    }, RedirectingConstructorKind: function RedirectingConstructorKind() {
    }, ResolverErrorCode: function ResolverErrorCode() {
    }, ResolverVisitor: function ResolverVisitor() {
    }, ScopedVisitor: function ScopedVisitor() {
    }, ToDoFinder: function ToDoFinder() {
    }, TypeNameResolver: function TypeNameResolver() {
    }, TypeParameterBoundsResolver: function TypeParameterBoundsResolver() {
    }, TypePromotionManager: function TypePromotionManager() {
    }, TypePromotionManager_TypePromoteScope: function TypePromotionManager_TypePromoteScope() {
    }, TypeProvider: function TypeProvider() {
    }, TypeProviderBase: function TypeProviderBase() {
    }, TypeProviderImpl: function TypeProviderImpl() {
    }, TypeResolverMode: function TypeResolverMode() {
    }, TypeResolverVisitor: function TypeResolverVisitor() {
    }, UnusedLocalElementsVerifier: function UnusedLocalElementsVerifier() {
    }, UsedImportedElements: function UsedImportedElements() {
    }, UsedLocalElements: function UsedLocalElements() {
    }, VariableResolverVisitor: function VariableResolverVisitor() {
    }, _InvalidAccessVerifier: function _InvalidAccessVerifier() {
    }, _LabelTracker: function _LabelTracker() {
    }, _LeafElements: function _LeafElements() {
    }, _LiteralResolution: function _LiteralResolution() {
    }, _LiteralResolutionKind: function _LiteralResolutionKind() {
    }, _ResolverVisitor_isVariableAccessedInClosure: function _ResolverVisitor_isVariableAccessedInClosure() {
    }, _ResolverVisitor_isVariablePotentiallyMutatedIn: function _ResolverVisitor_isVariablePotentiallyMutatedIn() {
    }, BooleanArray: function BooleanArray() {
    }, MapIterator: function MapIterator() {
    }, MultipleMapIterator: function MultipleMapIterator() {
    }, SingleMapIterator: function SingleMapIterator() {
    }, TokenMap: function TokenMap() {
    }, AnalysisDriver0: function AnalysisDriver0() {
    }, CycleAwareDependencyWalker: function CycleAwareDependencyWalker() {
    }, ExtendedAnalysisContext: function ExtendedAnalysisContext() {
    }, InfiniteTaskLoopException: function InfiniteTaskLoopException() {
    }, StronglyConnectedComponent: function StronglyConnectedComponent() {
    }, WorkItem: function WorkItem() {
    }, WorkOrder: function WorkOrder() {
    }, _WorkOrderDependencyWalker: function _WorkOrderDependencyWalker() {
    }, BZip2Decoder: function BZip2Decoder() {
    }, RestartableTimer: function RestartableTimer() {
    }, StreamGroup: function StreamGroup() {
    }, _StreamGroupState: function _StreamGroupState() {
    }, StreamZip: function StreamZip() {
    }, BazelWorkerDriver: function BazelWorkerDriver() {
    }, _WorkAttempt: function _WorkAttempt() {
    }, Resolver: function Resolver() {
    }, ReleasableResolver: function ReleasableResolver() {
    }, Resolvers: function Resolvers() {
    }, NonLibraryAssetException: function NonLibraryAssetException() {
    }, KernelBuilder: function KernelBuilder() {
    }, _ModuleNode: function _ModuleNode() {
    }, CombinedMapView: function CombinedMapView() {
    }, NonGrowableListView: function NonGrowableListView() {
    }, NonGrowableListMixin: function NonGrowableListMixin() {
    }, UnmodifiableSetView: function UnmodifiableSetView() {
    }, UnmodifiableSetMixin: function UnmodifiableSetMixin() {
    }, UnmodifiableMapMixin: function UnmodifiableMapMixin() {
    }, _NonGrowableListView_DelegatingList_NonGrowableListMixin: function _NonGrowableListView_DelegatingList_NonGrowableListMixin() {
    }, _UnmodifiableSetView_DelegatingSet_UnmodifiableSetMixin: function _UnmodifiableSetView_DelegatingSet_UnmodifiableSetMixin() {
    }, Sha1: function Sha1() {
    }, _Sha1Sink: function _Sha1Sink() {
    }, BeginToken: function BeginToken() {
    }, CommentToken: function CommentToken() {
    }, DocumentationCommentToken: function DocumentationCommentToken() {
    }, Keyword: function Keyword() {
    }, KeywordToken: function KeywordToken() {
    }, SimpleToken: function SimpleToken() {
    }, StringToken: function StringToken() {
    }, SyntheticBeginToken: function SyntheticBeginToken() {
    }, SyntheticKeywordToken: function SyntheticKeywordToken() {
    }, SyntheticStringToken: function SyntheticStringToken() {
    }, SyntheticToken: function SyntheticToken() {
    }, Token: function Token() {
    }, TokenClass: function TokenClass() {
    }, TokenType: function TokenType() {
    },
    WindowsStyle$: function() {
      return new L.WindowsStyle(P.RegExp_RegExp("[/\\\\]", false), P.RegExp_RegExp("[^/\\\\]$", false), P.RegExp_RegExp("^(\\\\\\\\[^\\\\]+\\\\[^\\\\/]+|[a-zA-Z]:[/\\\\])", false), P.RegExp_RegExp("^[/\\\\](?![/\\\\])", false), []);
    },
    WindowsStyle: function WindowsStyle(t0, t1, t2, t3, t4) {
      var _ = this;
      _.separatorPattern = t0;
      _.needsSeparatorPattern = t1;
      _.rootPattern = t2;
      _.relativeRootPattern = t3;
      _.$ti = t4;
    },
    WindowsStyle_absolutePathToUri_closure: function WindowsStyle_absolutePathToUri_closure(t0) {
      this.$ti = t0;
    },
    SourceMapBuilder: function SourceMapBuilder() {
    },
    Entry0: function Entry0() {
    },
    encodeVlq: function(value) {
      var t1, res, signBit, digit,
        _s64_ = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
      H.intTypeCheck(value);
      t1 = $.$get$MIN_INT32();
      if (typeof value !== "number")
        return value.$lt();
      if (typeof t1 !== "number")
        return H.iae(t1);
      if (!(value < t1)) {
        t1 = $.$get$MAX_INT32();
        if (typeof t1 !== "number")
          return H.iae(t1);
        t1 = value > t1;
      } else
        t1 = true;
      if (t1)
        throw H.wrapException(P.ArgumentError$("expected 32 bit int, got: " + value));
      res = H.setRuntimeTypeInfo([], [P.String]);
      if (value < 0) {
        value = -value;
        signBit = 1;
      } else
        signBit = 0;
      value = value << 1 | signBit;
      do {
        digit = value & 31;
        value = value >>> 5;
        t1 = value > 0;
        if (t1)
          digit |= 32;
        if (digit >= 64)
          return H.ioore(_s64_, digit);
        C.JSArray_methods.add$1(res, _s64_[digit]);
      } while (t1);
      return res;
    },
    decodeVlq: function(chars) {
      var result, $stop, shift, char, t1, digit, result0, _null = null;
      H.assertSubtype(chars, "$isIterator", [P.String], "$asIterator");
      for (result = 0, $stop = false, shift = 0; !$stop;) {
        if (!chars.moveNext$0())
          throw H.wrapException(P.StateError$("incomplete VLQ value"));
        char = chars.get$current();
        t1 = $.$get$_digits();
        if (!t1.containsKey$1(char))
          throw H.wrapException(P.FormatException$("invalid character in VLQ encoding: " + H.S(char), _null, _null));
        digit = J.$index$asx(t1, char);
        if (typeof digit !== "number")
          return digit.$and();
        $stop = (digit & 32) === 0;
        result += C.JSInt_methods._shlPositive$1(digit & 31, shift);
        shift += 5;
      }
      result0 = result >>> 1;
      result = (result & 1) === 1 ? -result0 : result0;
      t1 = $.$get$MIN_INT32();
      if (typeof t1 !== "number")
        return H.iae(t1);
      if (!(result < t1)) {
        t1 = $.$get$MAX_INT32();
        if (typeof t1 !== "number")
          return H.iae(t1);
        t1 = result > t1;
      } else
        t1 = true;
      if (t1)
        throw H.wrapException(P.FormatException$("expected an encoded 32 bit int, but we got: " + result, _null, _null));
      return result;
    },
    closure: function closure(t0) {
      this.$ti = t0;
    },
    WindowsDirectoryWatcher: function WindowsDirectoryWatcher() {
    },
    _EventBatcher: function _EventBatcher() {
    },
    _WindowsDirectoryWatcher: function _WindowsDirectoryWatcher() {
    },
    Token0: function Token0() {
    },
    VersionDirectiveToken: function VersionDirectiveToken() {
    },
    TagDirectiveToken: function TagDirectiveToken() {
    },
    AnchorToken: function AnchorToken() {
    },
    AliasToken: function AliasToken() {
    },
    TagToken: function TagToken() {
    },
    ScalarToken: function ScalarToken() {
    },
    TokenType0: function TokenType0() {
    },
    YamlDocument: function YamlDocument() {
    },
    VersionDirective: function VersionDirective() {
    },
    TagDirective: function TagDirective() {
    }
  },
  N = {UriConverter: function UriConverter() {
    }, TypeSystem: function TypeSystem() {
    }, DriverBasedUriConverter: function DriverBasedUriConverter() {
    }, ConstantEvaluator: function ConstantEvaluator() {
    }, FastaErrorReporter: function FastaErrorReporter() {
    }, AstTestFactory: function AstTestFactory() {
    }, Dart2TypeSystem: function Dart2TypeSystem() {
    }, GenericInferrer: function GenericInferrer() {
    }, TypeComparison: function TypeComparison() {
    }, TypeSystem0: function TypeSystem0() {
    }, UnknownInferredType: function UnknownInferredType() {
    }, UnknownInferredTypeElement: function UnknownInferredTypeElement() {
    }, _TypeConstraint: function _TypeConstraint() {
    }, _TypeConstraintFromArgument: function _TypeConstraintFromArgument() {
    }, _TypeConstraintFromExtendsClause: function _TypeConstraintFromExtendsClause() {
    }, _TypeConstraintFromFunctionContext: function _TypeConstraintFromFunctionContext() {
    }, _TypeConstraintFromReturnType: function _TypeConstraintFromReturnType() {
    }, _TypeConstraintOrigin: function _TypeConstraintOrigin() {
    }, _TypeRange: function _TypeRange() {
    }, NameFilter: function NameFilter() {
    }, LibraryResynthesizer: function LibraryResynthesizer() {
    }, LibraryResynthesizerContextMixin: function LibraryResynthesizerContextMixin() {
    }, LibraryResynthesizerMixin: function LibraryResynthesizerMixin() {
    }, RecursiveInstantiateToBounds: function RecursiveInstantiateToBounds() {
    }, ReferenceInfo: function ReferenceInfo() {
    }, SummaryResynthesizer: function SummaryResynthesizer() {
    }, SummaryResynthesizerContext: function SummaryResynthesizerContext() {
    }, UnitResynthesizer: function UnitResynthesizer() {
    }, UnitResynthesizerMixin: function UnitResynthesizerMixin() {
    }, _DeferredInitializerElement: function _DeferredInitializerElement() {
    }, _LibraryResynthesizer0: function _LibraryResynthesizer0() {
    }, _LibraryResynthesizerContext: function _LibraryResynthesizerContext() {
    }, _ReferenceInfo0: function _ReferenceInfo0() {
    }, _UnitResynthesizer0: function _UnitResynthesizer0() {
    }, __UnitResynthesizer_UnitResynthesizer_UnitResynthesizerMixin0: function __UnitResynthesizer_UnitResynthesizer_UnitResynthesizerMixin0() {
    }, ArgParser: function ArgParser() {
    }, StreamSplitter: function StreamSplitter() {
    }, DriverConnection: function DriverConnection() {
    }, StdDriverConnection: function StdDriverConnection() {
    }, IsolateDriverConnection: function IsolateDriverConnection() {
    }, AsyncWorkerLoop: function AsyncWorkerLoop() {
    }, AssetId: function AssetId() {
    }, MetaModuleCleanBuilder: function MetaModuleCleanBuilder() {
    }, EqualityMap: function EqualityMap() {
    }, HexCodec: function HexCodec() {
    }, StringAccumulatorSink: function StringAccumulatorSink() {
    }, FormalParameterKind: function FormalParameterKind() {
    }, LiteralEntryInfo: function LiteralEntryInfo() {
    }, Link0: function Link0() {
    }, LinkBuilder: function LinkBuilder() {
    }, Logger0: function Logger0() {
    }, Level: function Level() {
    }, LogRecord: function LogRecord() {
    },
    UnparsedFrame$: function(member) {
      return new N.UnparsedFrame(P._Uri__Uri(null, "unparsed", null, null), member, []);
    },
    UnparsedFrame: function UnparsedFrame(t0, t1, t2) {
      this.uri = t0;
      this.member = t1;
      this.$ti = t2;
    },
    _TypedDataBuffer: function _TypedDataBuffer() {
    },
    _IntBuffer: function _IntBuffer() {
    },
    _FloatBuffer: function _FloatBuffer() {
    },
    Uint8Buffer: function Uint8Buffer() {
    },
    Int8Buffer: function Int8Buffer() {
    },
    Uint8ClampedBuffer: function Uint8ClampedBuffer() {
    },
    Uint16Buffer: function Uint16Buffer() {
    },
    Int16Buffer: function Int16Buffer() {
    },
    Uint32Buffer: function Uint32Buffer() {
    },
    Int32Buffer: function Int32Buffer() {
    },
    Uint64Buffer: function Uint64Buffer() {
    },
    Int64Buffer: function Int64Buffer() {
    },
    Float32Buffer: function Float32Buffer() {
    },
    Float64Buffer: function Float64Buffer() {
    },
    Int32x4Buffer: function Int32x4Buffer() {
    },
    Float32x4Buffer: function Float32x4Buffer() {
    },
    NullSpan: function NullSpan() {
    }
  },
  U = {AdjacentStrings: function AdjacentStrings() {
    }, AnnotatedNode: function AnnotatedNode() {
    }, Annotation: function Annotation() {
    }, ArgumentList: function ArgumentList() {
    }, AsExpression: function AsExpression() {
    }, AssertInitializer: function AssertInitializer() {
    }, Assertion: function Assertion() {
    }, AssertStatement: function AssertStatement() {
    }, AssignmentExpression: function AssignmentExpression() {
    }, AstNode: function AstNode() {
    }, AstVisitor: function AstVisitor() {
    }, AwaitExpression: function AwaitExpression() {
    }, BinaryExpression: function BinaryExpression() {
    }, Block: function Block() {
    }, BlockFunctionBody: function BlockFunctionBody() {
    }, BooleanLiteral: function BooleanLiteral() {
    }, BreakStatement: function BreakStatement() {
    }, CascadeExpression: function CascadeExpression() {
    }, CatchClause: function CatchClause() {
    }, ClassDeclaration: function ClassDeclaration() {
    }, ClassMember: function ClassMember() {
    }, ClassOrMixinDeclaration: function ClassOrMixinDeclaration() {
    }, ClassTypeAlias: function ClassTypeAlias() {
    }, CollectionElement: function CollectionElement() {
    }, Combinator: function Combinator() {
    }, Comment1: function Comment1() {
    }, CommentReference: function CommentReference() {
    }, CompilationUnit: function CompilationUnit() {
    }, CompilationUnitMember: function CompilationUnitMember() {
    }, ConditionalExpression: function ConditionalExpression() {
    }, Configuration: function Configuration() {
    }, ConstructorDeclaration: function ConstructorDeclaration() {
    }, ConstructorFieldInitializer: function ConstructorFieldInitializer() {
    }, ConstructorInitializer: function ConstructorInitializer() {
    }, ConstructorName: function ConstructorName() {
    }, ConstructorReferenceNode: function ConstructorReferenceNode() {
    }, ContinueStatement: function ContinueStatement() {
    }, Declaration: function Declaration() {
    }, DeclaredIdentifier: function DeclaredIdentifier() {
    }, DefaultFormalParameter: function DefaultFormalParameter() {
    }, Directive: function Directive() {
    }, DoStatement: function DoStatement() {
    }, DottedName: function DottedName() {
    }, DoubleLiteral: function DoubleLiteral() {
    }, EmptyFunctionBody: function EmptyFunctionBody() {
    }, EmptyStatement: function EmptyStatement() {
    }, EnumConstantDeclaration: function EnumConstantDeclaration() {
    }, EnumDeclaration: function EnumDeclaration() {
    }, ExportDirective: function ExportDirective() {
    }, Expression: function Expression() {
    }, ExpressionFunctionBody: function ExpressionFunctionBody() {
    }, ExpressionStatement: function ExpressionStatement() {
    }, ExtendsClause: function ExtendsClause() {
    }, FieldDeclaration: function FieldDeclaration() {
    }, FieldFormalParameter: function FieldFormalParameter() {
    }, ForEachParts: function ForEachParts() {
    }, ForEachPartsWithDeclaration: function ForEachPartsWithDeclaration() {
    }, ForEachPartsWithIdentifier: function ForEachPartsWithIdentifier() {
    }, ForEachStatement: function ForEachStatement() {
    }, ForElement: function ForElement() {
    }, ForLoopParts: function ForLoopParts() {
    }, FormalParameter: function FormalParameter() {
    }, FormalParameterList: function FormalParameterList() {
    }, ForParts: function ForParts() {
    }, ForPartsWithDeclarations: function ForPartsWithDeclarations() {
    }, ForPartsWithExpression: function ForPartsWithExpression() {
    }, ForStatement: function ForStatement() {
    }, ForStatement2: function ForStatement2() {
    }, FunctionBody: function FunctionBody() {
    }, FunctionDeclaration: function FunctionDeclaration() {
    }, FunctionDeclarationStatement: function FunctionDeclarationStatement() {
    }, FunctionExpression: function FunctionExpression() {
    }, FunctionExpressionInvocation: function FunctionExpressionInvocation() {
    }, FunctionTypeAlias: function FunctionTypeAlias() {
    }, FunctionTypedFormalParameter: function FunctionTypedFormalParameter() {
    }, GenericFunctionType: function GenericFunctionType() {
    }, GenericTypeAlias: function GenericTypeAlias() {
    }, HideCombinator: function HideCombinator() {
    }, Identifier: function Identifier() {
    }, IfElement: function IfElement() {
    }, IfStatement: function IfStatement() {
    }, ImplementsClause: function ImplementsClause() {
    }, ImportDirective: function ImportDirective() {
    }, IndexExpression: function IndexExpression() {
    }, InstanceCreationExpression: function InstanceCreationExpression() {
    }, IntegerLiteral: function IntegerLiteral() {
    }, InterpolationElement: function InterpolationElement() {
    }, InterpolationExpression: function InterpolationExpression() {
    }, InterpolationString: function InterpolationString() {
    }, InvocationExpression: function InvocationExpression() {
    }, IsExpression: function IsExpression() {
    }, Label: function Label() {
    }, LabeledStatement: function LabeledStatement() {
    }, LibraryDirective: function LibraryDirective() {
    }, LibraryIdentifier: function LibraryIdentifier() {
    }, ListLiteral: function ListLiteral() {
    }, ListLiteral2: function ListLiteral2() {
    }, Literal: function Literal() {
    }, MapLiteral: function MapLiteral() {
    }, MapLiteral2: function MapLiteral2() {
    }, MapLiteralEntry: function MapLiteralEntry() {
    }, MethodDeclaration: function MethodDeclaration() {
    }, MethodInvocation: function MethodInvocation() {
    }, MethodReferenceExpression: function MethodReferenceExpression() {
    }, MixinDeclaration: function MixinDeclaration() {
    }, NamedCompilationUnitMember: function NamedCompilationUnitMember() {
    }, NamedExpression: function NamedExpression() {
    }, NamedType: function NamedType() {
    }, NamespaceDirective: function NamespaceDirective() {
    }, NativeClause: function NativeClause() {
    }, NativeFunctionBody: function NativeFunctionBody() {
    }, NodeList0: function NodeList0() {
    }, NormalFormalParameter: function NormalFormalParameter() {
    }, NullLiteral: function NullLiteral() {
    }, OnClause: function OnClause() {
    }, ParenthesizedExpression: function ParenthesizedExpression() {
    }, PartDirective: function PartDirective() {
    }, PartOfDirective: function PartOfDirective() {
    }, PostfixExpression: function PostfixExpression() {
    }, PrefixedIdentifier: function PrefixedIdentifier() {
    }, PrefixExpression: function PrefixExpression() {
    }, PropertyAccess: function PropertyAccess() {
    }, RedirectingConstructorInvocation: function RedirectingConstructorInvocation() {
    }, RethrowExpression: function RethrowExpression() {
    }, ReturnStatement: function ReturnStatement() {
    }, ScriptTag: function ScriptTag() {
    }, SetLiteral: function SetLiteral() {
    }, SetLiteral2: function SetLiteral2() {
    }, SetOrMapLiteral: function SetOrMapLiteral() {
    }, ShowCombinator: function ShowCombinator() {
    }, SimpleFormalParameter: function SimpleFormalParameter() {
    }, SimpleIdentifier: function SimpleIdentifier() {
    }, SimpleStringLiteral: function SimpleStringLiteral() {
    }, SingleStringLiteral: function SingleStringLiteral() {
    }, SpreadElement: function SpreadElement() {
    }, Statement: function Statement() {
    }, StringInterpolation: function StringInterpolation() {
    }, StringLiteral: function StringLiteral() {
    }, SuperConstructorInvocation: function SuperConstructorInvocation() {
    }, SuperExpression: function SuperExpression() {
    }, SwitchCase: function SwitchCase() {
    }, SwitchDefault: function SwitchDefault() {
    }, SwitchMember: function SwitchMember() {
    }, SwitchStatement: function SwitchStatement() {
    }, SymbolLiteral: function SymbolLiteral() {
    }, ThisExpression: function ThisExpression() {
    }, ThrowExpression: function ThrowExpression() {
    }, TopLevelVariableDeclaration: function TopLevelVariableDeclaration() {
    }, TryStatement: function TryStatement() {
    }, TypeAlias: function TypeAlias() {
    }, TypeAnnotation: function TypeAnnotation() {
    }, TypeArgumentList: function TypeArgumentList() {
    }, TypedLiteral: function TypedLiteral() {
    }, TypeName: function TypeName() {
    }, TypeParameter: function TypeParameter() {
    }, TypeParameterList: function TypeParameterList() {
    }, UriBasedDirective: function UriBasedDirective() {
    }, VariableDeclaration: function VariableDeclaration() {
    }, VariableDeclarationList: function VariableDeclarationList() {
    }, VariableDeclarationStatement: function VariableDeclarationStatement() {
    }, WhileStatement: function WhileStatement() {
    }, WithClause: function WithClause() {
    }, YieldStatement: function YieldStatement() {
    }, LibraryContext: function LibraryContext() {
    }, AdjacentStringsImpl: function AdjacentStringsImpl() {
    }, AnnotatedNodeImpl: function AnnotatedNodeImpl() {
    }, AnnotationImpl: function AnnotationImpl() {
    }, ArgumentListImpl: function ArgumentListImpl() {
    }, AsExpressionImpl: function AsExpressionImpl() {
    }, AssertInitializerImpl: function AssertInitializerImpl() {
    }, AssertStatementImpl: function AssertStatementImpl() {
    }, AssignmentExpressionImpl: function AssignmentExpressionImpl() {
    }, AstNodeImpl: function AstNodeImpl() {
    }, AwaitExpressionImpl: function AwaitExpressionImpl() {
    }, BinaryExpressionImpl: function BinaryExpressionImpl() {
    }, BlockFunctionBodyImpl: function BlockFunctionBodyImpl() {
    }, BlockImpl: function BlockImpl() {
    }, BooleanLiteralImpl: function BooleanLiteralImpl() {
    }, BreakStatementImpl: function BreakStatementImpl() {
    }, CascadeExpressionImpl: function CascadeExpressionImpl() {
    }, CatchClauseImpl: function CatchClauseImpl() {
    }, ChildEntities: function ChildEntities() {
    }, ClassDeclarationImpl: function ClassDeclarationImpl() {
    }, ClassMemberImpl: function ClassMemberImpl() {
    }, ClassOrMixinDeclarationImpl: function ClassOrMixinDeclarationImpl() {
    }, ClassTypeAliasImpl: function ClassTypeAliasImpl() {
    }, CollectionElementImpl: function CollectionElementImpl() {
    }, CombinatorImpl: function CombinatorImpl() {
    }, CommentImpl: function CommentImpl() {
    }, CommentReferenceImpl: function CommentReferenceImpl() {
    }, CommentType: function CommentType() {
    }, CompilationUnitImpl: function CompilationUnitImpl() {
    }, CompilationUnitMemberImpl: function CompilationUnitMemberImpl() {
    }, ConditionalExpressionImpl: function ConditionalExpressionImpl() {
    }, ConfigurationImpl: function ConfigurationImpl() {
    }, ConstantAnalysisErrorListener: function ConstantAnalysisErrorListener() {
    }, ConstructorDeclarationImpl: function ConstructorDeclarationImpl() {
    }, ConstructorFieldInitializerImpl: function ConstructorFieldInitializerImpl() {
    }, ConstructorInitializerImpl: function ConstructorInitializerImpl() {
    }, ConstructorNameImpl: function ConstructorNameImpl() {
    }, ContinueStatementImpl: function ContinueStatementImpl() {
    }, DeclarationImpl: function DeclarationImpl() {
    }, DeclaredIdentifierImpl: function DeclaredIdentifierImpl() {
    }, DeclaredSimpleIdentifier: function DeclaredSimpleIdentifier() {
    }, DefaultFormalParameterImpl: function DefaultFormalParameterImpl() {
    }, DirectiveImpl: function DirectiveImpl() {
    }, DoStatementImpl: function DoStatementImpl() {
    }, DottedNameImpl: function DottedNameImpl() {
    }, DoubleLiteralImpl: function DoubleLiteralImpl() {
    }, EmptyFunctionBodyImpl: function EmptyFunctionBodyImpl() {
    }, EmptyStatementImpl: function EmptyStatementImpl() {
    }, EnumConstantDeclarationImpl: function EnumConstantDeclarationImpl() {
    }, EnumDeclarationImpl: function EnumDeclarationImpl() {
    }, EphemeralIdentifier: function EphemeralIdentifier() {
    }, ExportDirectiveImpl: function ExportDirectiveImpl() {
    }, ExpressionFunctionBodyImpl: function ExpressionFunctionBodyImpl() {
    }, ExpressionImpl: function ExpressionImpl() {
    }, ExpressionStatementImpl: function ExpressionStatementImpl() {
    }, ExtendsClauseImpl: function ExtendsClauseImpl() {
    }, FieldDeclarationImpl: function FieldDeclarationImpl() {
    }, FieldFormalParameterImpl: function FieldFormalParameterImpl() {
    }, ForEachPartsImpl: function ForEachPartsImpl() {
    }, ForEachPartsWithDeclarationImpl: function ForEachPartsWithDeclarationImpl() {
    }, ForEachPartsWithIdentifierImpl: function ForEachPartsWithIdentifierImpl() {
    }, ForEachStatementImpl: function ForEachStatementImpl() {
    }, ForElementImpl: function ForElementImpl() {
    }, ForLoopPartsImpl: function ForLoopPartsImpl() {
    }, FormalParameterImpl: function FormalParameterImpl() {
    }, FormalParameterListImpl: function FormalParameterListImpl() {
    }, ForMixin: function ForMixin() {
    }, ForPartsImpl: function ForPartsImpl() {
    }, ForPartsWithDeclarationsImpl: function ForPartsWithDeclarationsImpl() {
    }, ForPartsWithExpressionImpl: function ForPartsWithExpressionImpl() {
    }, ForStatement2Impl: function ForStatement2Impl() {
    }, ForStatementImpl: function ForStatementImpl() {
    }, FunctionBodyImpl: function FunctionBodyImpl() {
    }, FunctionDeclarationImpl: function FunctionDeclarationImpl() {
    }, FunctionDeclarationStatementImpl: function FunctionDeclarationStatementImpl() {
    }, FunctionExpressionImpl: function FunctionExpressionImpl() {
    }, FunctionExpressionInvocationImpl: function FunctionExpressionInvocationImpl() {
    }, FunctionTypeAliasImpl: function FunctionTypeAliasImpl() {
    }, FunctionTypedFormalParameterImpl: function FunctionTypedFormalParameterImpl() {
    }, GenericFunctionTypeImpl: function GenericFunctionTypeImpl() {
    }, GenericTypeAliasImpl: function GenericTypeAliasImpl() {
    }, HideCombinatorImpl: function HideCombinatorImpl() {
    }, IdentifierImpl: function IdentifierImpl() {
    }, IfElementImpl: function IfElementImpl() {
    }, IfMixin: function IfMixin() {
    }, IfStatementImpl: function IfStatementImpl() {
    }, ImplementsClauseImpl: function ImplementsClauseImpl() {
    }, ImportDirectiveImpl: function ImportDirectiveImpl() {
    }, IndexExpressionImpl: function IndexExpressionImpl() {
    }, InstanceCreationExpressionImpl: function InstanceCreationExpressionImpl() {
    }, IntegerLiteralImpl: function IntegerLiteralImpl() {
    }, InterpolationElementImpl: function InterpolationElementImpl() {
    }, InterpolationExpressionImpl: function InterpolationExpressionImpl() {
    }, InterpolationStringImpl: function InterpolationStringImpl() {
    }, InvocationExpressionImpl: function InvocationExpressionImpl() {
    }, IsExpressionImpl: function IsExpressionImpl() {
    }, LabeledStatementImpl: function LabeledStatementImpl() {
    }, LabelImpl: function LabelImpl() {
    }, LibraryDirectiveImpl: function LibraryDirectiveImpl() {
    }, LibraryIdentifierImpl: function LibraryIdentifierImpl() {
    }, ListLiteral2Impl: function ListLiteral2Impl() {
    }, ListLiteralImpl: function ListLiteralImpl() {
    }, LiteralImpl: function LiteralImpl() {
    }, LocalVariableInfo: function LocalVariableInfo() {
    }, MapLiteral2Impl: function MapLiteral2Impl() {
    }, MapLiteralEntryImpl: function MapLiteralEntryImpl() {
    }, MapLiteralImpl: function MapLiteralImpl() {
    }, MethodDeclarationImpl: function MethodDeclarationImpl() {
    }, MethodInvocationImpl: function MethodInvocationImpl() {
    }, MixinDeclarationImpl: function MixinDeclarationImpl() {
    }, NamedCompilationUnitMemberImpl: function NamedCompilationUnitMemberImpl() {
    }, NamedExpressionImpl: function NamedExpressionImpl() {
    }, NamespaceDirectiveImpl: function NamespaceDirectiveImpl() {
    }, NativeClauseImpl: function NativeClauseImpl() {
    }, NativeFunctionBodyImpl: function NativeFunctionBodyImpl() {
    }, NodeListImpl: function NodeListImpl() {
    }, NormalFormalParameterImpl: function NormalFormalParameterImpl() {
    }, NullLiteralImpl: function NullLiteralImpl() {
    }, OnClauseImpl: function OnClauseImpl() {
    }, ParenthesizedExpressionImpl: function ParenthesizedExpressionImpl() {
    }, PartDirectiveImpl: function PartDirectiveImpl() {
    }, PartOfDirectiveImpl: function PartOfDirectiveImpl() {
    }, PostfixExpressionImpl: function PostfixExpressionImpl() {
    }, PrefixedIdentifierImpl: function PrefixedIdentifierImpl() {
    }, PrefixExpressionImpl: function PrefixExpressionImpl() {
    }, PropertyAccessImpl: function PropertyAccessImpl() {
    }, RedirectingConstructorInvocationImpl: function RedirectingConstructorInvocationImpl() {
    }, RethrowExpressionImpl: function RethrowExpressionImpl() {
    }, ReturnStatementImpl: function ReturnStatementImpl() {
    }, ScriptTagImpl: function ScriptTagImpl() {
    }, SetLiteral2Impl: function SetLiteral2Impl() {
    }, SetLiteralImpl: function SetLiteralImpl() {
    }, SetOrMapLiteralImpl: function SetOrMapLiteralImpl() {
    }, ShowCombinatorImpl: function ShowCombinatorImpl() {
    }, SimpleFormalParameterImpl: function SimpleFormalParameterImpl() {
    }, SimpleIdentifierImpl: function SimpleIdentifierImpl() {
    }, SimpleStringLiteralImpl: function SimpleStringLiteralImpl() {
    }, SingleStringLiteralImpl: function SingleStringLiteralImpl() {
    }, SpreadElementImpl: function SpreadElementImpl() {
    }, StatementImpl: function StatementImpl() {
    }, StringInterpolationImpl: function StringInterpolationImpl() {
    }, StringLexemeHelper: function StringLexemeHelper() {
    }, StringLiteralImpl: function StringLiteralImpl() {
    }, SuperConstructorInvocationImpl: function SuperConstructorInvocationImpl() {
    }, SuperExpressionImpl: function SuperExpressionImpl() {
    }, SwitchCaseImpl: function SwitchCaseImpl() {
    }, SwitchDefaultImpl: function SwitchDefaultImpl() {
    }, SwitchMemberImpl: function SwitchMemberImpl() {
    }, SwitchStatementImpl: function SwitchStatementImpl() {
    }, SymbolLiteralImpl: function SymbolLiteralImpl() {
    }, ThisExpressionImpl: function ThisExpressionImpl() {
    }, ThrowExpressionImpl: function ThrowExpressionImpl() {
    }, TopLevelVariableDeclarationImpl: function TopLevelVariableDeclarationImpl() {
    }, TryStatementImpl: function TryStatementImpl() {
    }, TypeAliasImpl: function TypeAliasImpl() {
    }, TypeAnnotationImpl: function TypeAnnotationImpl() {
    }, TypeArgumentListImpl: function TypeArgumentListImpl() {
    }, TypedLiteralImpl: function TypedLiteralImpl() {
    }, TypeNameImpl: function TypeNameImpl() {
    }, TypeParameterImpl: function TypeParameterImpl() {
    }, TypeParameterListImpl: function TypeParameterListImpl() {
    }, UriBasedDirectiveImpl: function UriBasedDirectiveImpl() {
    }, UriValidationCode: function UriValidationCode() {
    }, VariableDeclarationImpl: function VariableDeclarationImpl() {
    }, VariableDeclarationListImpl: function VariableDeclarationListImpl() {
    }, VariableDeclarationStatementImpl: function VariableDeclarationStatementImpl() {
    }, WhileStatementImpl: function WhileStatementImpl() {
    }, WithClauseImpl: function WithClauseImpl() {
    }, YieldStatementImpl: function YieldStatementImpl() {
    }, _SetOrMapKind: function _SetOrMapKind() {
    }, _ChildEntities_Object_IterableMixin: function _ChildEntities_Object_IterableMixin() {
    }, _ForElementImpl_CollectionElementImpl_ForMixin: function _ForElementImpl_CollectionElementImpl_ForMixin() {
    }, _ForStatement2Impl_StatementImpl_ForMixin: function _ForStatement2Impl_StatementImpl_ForMixin() {
    }, _IfElementImpl_CollectionElementImpl_IfMixin: function _IfElementImpl_CollectionElementImpl_IfMixin() {
    }, _IfStatementImpl_StatementImpl_IfMixin: function _IfStatementImpl_StatementImpl_IfMixin() {
    }, _NodeListImpl_Object_ListMixin: function _NodeListImpl_Object_ListMixin() {
    }, _CombinatorEncoder: function _CombinatorEncoder() {
    }, _PublicNamespaceVisitor: function _PublicNamespaceVisitor() {
    }, _ConstExprSerializer: function _ConstExprSerializer() {
    }, _Scope: function _Scope() {
    }, _ScopedClassMember: function _ScopedClassMember() {
    }, _ScopedEntity: function _ScopedEntity() {
    }, _ScopedTypeParameter: function _ScopedTypeParameter() {
    }, _SummarizeAstVisitor: function _SummarizeAstVisitor() {
    }, _TypeParameterScope: function _TypeParameterScope() {
    }, BZip2: function BZip2() {
    }, CaptureSink: function CaptureSink() {
    }, Module: function Module() {
    }, _AssetIdConverter: function _AssetIdConverter() {
    }, _DartPlatformConverter: function _DartPlatformConverter() {
    }, Equality: function Equality() {
    }, EqualityBy: function EqualityBy() {
    }, DefaultEquality: function DefaultEquality() {
    }, IdentityEquality: function IdentityEquality() {
    }, IterableEquality: function IterableEquality() {
    }, ListEquality: function ListEquality() {
    }, _UnorderedEquality: function _UnorderedEquality() {
    }, UnorderedIterableEquality: function UnorderedIterableEquality() {
    }, SetEquality: function SetEquality() {
    }, _MapEntry: function _MapEntry() {
    }, MapEquality: function MapEquality() {
    }, MultiEquality: function MultiEquality() {
    }, DeepCollectionEquality: function DeepCollectionEquality() {
    }, CaseInsensitiveEquality: function CaseInsensitiveEquality() {
    }, PercentCodec: function PercentCodec() {
    }, DiagnosticMessage: function DiagnosticMessage() {
    }, AbstractScanner: function AbstractScanner() {
    }, LineStarts: function LineStarts() {
    }, _LineStarts_Object_ListMixin: function _LineStarts_Object_ListMixin() {
    }, KeywordState: function KeywordState() {
    }, ArrayKeywordState: function ArrayKeywordState() {
    }, LowerCaseArrayKeywordState: function LowerCaseArrayKeywordState() {
    }, UpperCaseArrayKeywordState: function UpperCaseArrayKeywordState() {
    }, LeafKeywordState: function LeafKeywordState() {
    }, AstNode0: function AstNode0() {
    }, SequenceNode: function SequenceNode() {
    }, StarNode: function StarNode() {
    }, DoubleStarNode: function DoubleStarNode() {
    }, AnyCharNode: function AnyCharNode() {
    }, RangeNode: function RangeNode() {
    }, OptionsNode: function OptionsNode() {
    }, LiteralNode: function LiteralNode() {
    }, Namer: function Namer() {
    }, NormalNamer: function NormalNamer() {
    }, ConstantNamer: function ConstantNamer() {
    }, Disambiguator: function Disambiguator() {
    }, NameSystem: function NameSystem() {
    }, Annotator: function Annotator() {
    }, Printer: function Printer() {
    }, Precedence0: function Precedence0() {
    }, ExpressionPrinter: function ExpressionPrinter() {
    }, _ConstantNamer_RecursiveVisitor_Namer: function _ConstantNamer_RecursiveVisitor_Namer() {
    }, ExpressionVisitor: function ExpressionVisitor() {
    }, StatementVisitor: function StatementVisitor() {
    }, MemberVisitor: function MemberVisitor() {
    }, InitializerVisitor: function InitializerVisitor() {
    }, TreeVisitor: function TreeVisitor() {
    }, DartTypeVisitor: function DartTypeVisitor() {
    }, DartTypeVisitor1: function DartTypeVisitor1() {
    }, ConstantVisitor0: function ConstantVisitor0() {
    }, MemberReferenceVisitor: function MemberReferenceVisitor() {
    }, Visitor: function Visitor() {
    }, RecursiveVisitor: function RecursiveVisitor() {
    }, Transformer: function Transformer() {
    }, ExpressionVisitor1: function ExpressionVisitor1() {
    }, StatementVisitor1: function StatementVisitor1() {
    }, BodyVisitor1: function BodyVisitor1() {
    }, VersionConstraint: function VersionConstraint() {
    }, _EmptyVersion: function _EmptyVersion() {
    }, ScratchSpace: function ScratchSpace() {
    }, Highlighter: function Highlighter() {
    },
    Chain_Chain$parse: function(chain) {
      var _s26_ = "<asynchronous suspension>\n",
        _s51_ = "===== asynchronous gap ===========================\n";
      H.stringTypeCheck(chain);
      if (J.getInterceptor$asx(chain).get$isEmpty(chain))
        return U.Chain$(H.setRuntimeTypeInfo([], [Y.Trace]));
      if (C.JSString_methods.contains$1(chain, _s26_))
        return U.Chain$(C.JSArray_methods.map$1$1(H.setRuntimeTypeInfo(chain.split(_s26_), [P.String]), new U.Chain_Chain$parse_closure(), Y.Trace));
      if (!C.JSString_methods.contains$1(chain, _s51_))
        return U.Chain$(H.setRuntimeTypeInfo([Y.Trace_Trace$parse(chain)], [Y.Trace]));
      return U.Chain$(C.JSArray_methods.map$1$1(H.setRuntimeTypeInfo(chain.split(_s51_), [P.String]), new U.Chain_Chain$parse_closure0(), Y.Trace));
    },
    Chain$: function(traces) {
      return new U.Chain(P.List_List$unmodifiable(traces, Y.Trace), []);
    },
    Chain: function Chain(t0, t1) {
      this.traces = t0;
      this.$ti = t1;
    },
    Chain_Chain$parse_closure: function Chain_Chain$parse_closure(t0) {
      this.$ti = t0;
    },
    Chain_Chain$parse_closure0: function Chain_Chain$parse_closure0(t0) {
      this.$ti = t0;
    },
    Chain_toTrace_closure: function Chain_toTrace_closure(t0) {
      this.$ti = t0;
    },
    Chain_toString_closure0: function Chain_toString_closure0(t0) {
      this.$ti = t0;
    },
    Chain_toString__closure0: function Chain_toString__closure0(t0) {
      this.$ti = t0;
    },
    Chain_toString_closure: function Chain_toString_closure(t0, t1) {
      this.longest = t0;
      this.$ti = t1;
    },
    Chain_toString__closure: function Chain_toString__closure(t0, t1) {
      this.longest = t0;
      this.$ti = t1;
    },
    _DeepEquals: function _DeepEquals() {
    }
  },
  A = {AstFactory: function AstFactory() {
    }, DefinedNames: function DefinedNames() {
    }, AstFactoryImpl: function AstFactoryImpl() {
    }, MixinSuperInvokedNamesCollector: function MixinSuperInvokedNamesCollector() {
    }, AstCloner: function AstCloner() {
    }, AstComparator: function AstComparator() {
    }, DeferredLibraryReferenceDetector: function DeferredLibraryReferenceDetector() {
    }, ExceptionHandlingDelegatingAstVisitor: function ExceptionHandlingDelegatingAstVisitor() {
    }, IncrementalAstCloner: function IncrementalAstCloner() {
    }, NodeLocator: function NodeLocator() {
    }, NodeLocator2: function NodeLocator2() {
    }, NodeReplacer: function NodeReplacer() {
    }, ResolutionCopier: function ResolutionCopier() {
    }, ScopedNameFinder: function ScopedNameFinder() {
    }, ToSourceVisitor: function ToSourceVisitor() {
    }, ToSourceVisitor2: function ToSourceVisitor2() {
    }, UIAsCodeVisitorMixin: function UIAsCodeVisitorMixin() {
    }, _AstCloner_Object_UIAsCodeVisitorMixin: function _AstCloner_Object_UIAsCodeVisitorMixin() {
    }, _AstComparator_Object_UIAsCodeVisitorMixin: function _AstComparator_Object_UIAsCodeVisitorMixin() {
    }, _IncrementalAstCloner_Object_UIAsCodeVisitorMixin: function _IncrementalAstCloner_Object_UIAsCodeVisitorMixin() {
    }, _NodeReplacer_Object_UIAsCodeVisitorMixin: function _NodeReplacer_Object_UIAsCodeVisitorMixin() {
    }, _ResolutionCopier_Object_UIAsCodeVisitorMixin: function _ResolutionCopier_Object_UIAsCodeVisitorMixin() {
    }, _ToSourceVisitor_Object_UIAsCodeVisitorMixin: function _ToSourceVisitor_Object_UIAsCodeVisitorMixin() {
    }, _ToSourceVisitor2_Object_UIAsCodeVisitorMixin: function _ToSourceVisitor2_Object_UIAsCodeVisitorMixin() {
    }, ConstantAstCloner: function ConstantAstCloner() {
    }, ConstantExpressionsDependenciesFinder: function ConstantExpressionsDependenciesFinder() {
    }, ConstantFinder: function ConstantFinder() {
    }, ReferenceFinder: function ReferenceFinder() {
    }, CheckedModeCompileTimeErrorCode: function CheckedModeCompileTimeErrorCode() {
    }, CompileTimeErrorCode: function CompileTimeErrorCode() {
    }, StaticTypeWarningCode: function StaticTypeWarningCode() {
    }, StaticWarningCode: function StaticWarningCode() {
    }, StrongModeCode: function StrongModeCode() {
    }, DeclarationResolver: function DeclarationResolver() {
    }, ElementWalker: function ElementWalker() {
    }, _ElementMismatchException: function _ElementMismatchException() {
    }, Linter: function Linter() {
    }, LintRegistry: function LintRegistry() {
    }, Bz2BitReader: function Bz2BitReader() {
    }, ReleaseSink: function ReleaseSink() {
    }, _WorkerException: function _WorkerException() {
    }, AnalyzerSummaryException: function AnalyzerSummaryException() {
    }, KernelException: function KernelException() {
    }, MissingModulesException: function MissingModulesException() {
    }, _WorkerException0: function _WorkerException0() {
    }, AnalyzerSummaryException0: function AnalyzerSummaryException0() {
    }, DartDevcCompilationException: function DartDevcCompilationException() {
    }, KernelSummaryException: function KernelSummaryException() {
    }, IterableZip: function IterableZip() {
    }, _IteratorZip: function _IteratorZip() {
    }, ByteAccumulatorSink: function ByteAccumulatorSink() {
    }, HexDecoder: function HexDecoder() {
    }, _HexDecoderSink: function _HexDecoderSink() {
    }, _HexDecoderByteSink: function _HexDecoderByteSink() {
    }, Hash: function Hash() {
    }, ErrorCode: function ErrorCode() {
    }, ErrorSeverity: function ErrorSeverity() {
    }, ErrorType: function ErrorType() {
    }, DirectiveContext: function DirectiveContext() {
    }, DirectiveState: function DirectiveState() {
    }, Parser1: function Parser1() {
    }, ScannerErrorCode: function ScannerErrorCode() {
    }, Printer0: function Printer0() {
    }, NestedPrinter: function NestedPrinter() {
    }, NestedItem: function NestedItem() {
    },
    Frame_Frame$parseVM: function(frame) {
      H.stringTypeCheck(frame);
      return A.Frame__catchFormatException(frame, new A.Frame_Frame$parseVM_closure(frame));
    },
    Frame_Frame$parseV8: function(frame) {
      H.stringTypeCheck(frame);
      return A.Frame__catchFormatException(frame, new A.Frame_Frame$parseV8_closure(frame));
    },
    Frame_Frame$parseFirefox: function(frame) {
      H.stringTypeCheck(frame);
      return A.Frame__catchFormatException(frame, new A.Frame_Frame$parseFirefox_closure(frame));
    },
    Frame_Frame$parseFriendly: function(frame) {
      H.stringTypeCheck(frame);
      return A.Frame__catchFormatException(frame, new A.Frame_Frame$parseFriendly_closure(frame));
    },
    Frame__uriOrPathToUri: function(uriOrPath) {
      H.stringTypeCheck(uriOrPath);
      if (J.getInterceptor$asx(uriOrPath).contains$1(uriOrPath, $.$get$Frame__uriRegExp()))
        return P.Uri_parse(uriOrPath);
      else if (C.JSString_methods.contains$1(uriOrPath, $.$get$Frame__windowsRegExp()))
        return P._Uri__Uri$file(uriOrPath, true);
      else if (C.JSString_methods.startsWith$1(uriOrPath, "/"))
        return P._Uri__Uri$file(uriOrPath, false);
      if (C.JSString_methods.contains$1(uriOrPath, "\\"))
        return $.$get$windows().toUri$1(uriOrPath);
      return P.Uri_parse(uriOrPath);
    },
    Frame__catchFormatException: function(text, body) {
      var t1, exception;
      H.stringTypeCheck(text);
      H.functionTypeCheck(body, {func: 1, ret: A.Frame});
      try {
        t1 = body.call$0();
        return t1;
      } catch (exception) {
        if (H.unwrapException(exception) instanceof P.FormatException)
          return N.UnparsedFrame$(text);
        else
          throw exception;
      }
    },
    Frame$: function(uri, line, column, member) {
      return new A.Frame(uri, line, column, member, []);
    },
    Frame: function Frame(t0, t1, t2, t3, t4) {
      var _ = this;
      _.uri = t0;
      _.line = t1;
      _.column = t2;
      _.member = t3;
      _.$ti = t4;
    },
    Frame_Frame$parseVM_closure: function Frame_Frame$parseVM_closure(t0, t1) {
      this.frame = t0;
      this.$ti = t1;
    },
    Frame_Frame$parseV8_closure: function Frame_Frame$parseV8_closure(t0, t1) {
      this.frame = t0;
      this.$ti = t1;
    },
    Frame_Frame$parseV8_closure_parseLocation: function Frame_Frame$parseV8_closure_parseLocation(t0, t1) {
      this.frame = t0;
      this.$ti = t1;
    },
    Frame_Frame$parseFirefox_closure: function Frame_Frame$parseFirefox_closure(t0, t1) {
      this.frame = t0;
      this.$ti = t1;
    },
    Frame_Frame$parseFriendly_closure: function Frame_Frame$parseFriendly_closure(t0, t1) {
      this.frame = t0;
      this.$ti = t1;
    },
    AsciiGlyphSet: function AsciiGlyphSet() {
    },
    Loader: function Loader() {
    },
    YamlMapWrapper: function YamlMapWrapper() {
    },
    _YamlMapNodes: function _YamlMapNodes() {
    },
    YamlListWrapper: function YamlListWrapper() {
    },
    _YamlListNodes: function _YamlListNodes() {
    },
    _YamlMapWrapper_MapBase_UnmodifiableMapMixin: function _YamlMapWrapper_MapBase_UnmodifiableMapMixin() {
    },
    __YamlMapNodes_MapBase_UnmodifiableMapMixin: function __YamlMapNodes_MapBase_UnmodifiableMapMixin() {
    }
  },
  Y = {ResolutionMap: function ResolutionMap() {
    }, ResolutionMapImpl: function ResolutionMapImpl() {
    }, FileNameUtilities: function FileNameUtilities() {
    }, StringUtilities: function StringUtilities() {
    }, UUID: function UUID() {
    }, TokensContext: function TokensContext() {
    }, Workspace: function Workspace() {
    }, WorkspacePackage: function WorkspacePackage() {
    }, HuffmanTable: function HuffmanTable() {
    }, AllowAnythingParser: function AllowAnythingParser() {
    }, DelegatingStream: function DelegatingStream() {
    }, DelegatingStreamSubscription: function DelegatingStreamSubscription() {
    }, StreamCompleter: function StreamCompleter() {
    }, _CompleterStream: function _CompleterStream() {
    }, TypeSafeStreamSubscription: function TypeSafeStreamSubscription() {
    }, MessageGrouperState: function MessageGrouperState() {
    }, _LengthReader: function _LengthReader() {
    }, _MessageReader: function _MessageReader() {
    }, Resource0: function Resource0() {
    }, ResourceManager: function ResourceManager() {
    }, PriorityQueue: function PriorityQueue() {
    }, HeapPriorityQueue: function HeapPriorityQueue() {
    }, UnionSetController: function UnionSetController() {
    }, AccumulatorSink: function AccumulatorSink() {
    }, ForwardingListener: function ForwardingListener() {
    }, Quote: function Quote() {
    }, UnescapeErrorListener: function UnescapeErrorListener() {
    }, Severity: function Severity() {
    }, ListTree: function ListTree() {
    }, _ListTreeNode: function _ListTreeNode() {
    }, JsonValue: function JsonValue() {
    }, ImportTable: function ImportTable() {
    }, ComponentImportTable: function ComponentImportTable() {
    }, LibraryImportTable: function LibraryImportTable() {
    }, _ImportTableBuilder: function _ImportTableBuilder() {
    }, LibraryIndex: function LibraryIndex() {
    }, _ClassTable: function _ClassTable() {
    }, _MemberTable: function _MemberTable() {
    },
    SourceFile$fromString: function(text, url) {
      var t1 = J.get$codeUnits$s(text),
        t2 = H.setRuntimeTypeInfo([0], [P.int]);
      t2 = new Y.SourceFile(H.interceptedTypeCheck(typeof url === "string" ? P.Uri_parse(url) : url, "$isUri"), t2, H.NativeUint32List_NativeUint32List$fromList(J.toList$0$ax(t1)), null, []);
      t2.SourceFile$decoded$2$url(t1, url);
      return t2;
    },
    FileLocation$_: function(file, offset) {
      var t1 = new Y.FileLocation(file, offset, []);
      t1.FileLocation$_$2(file, offset);
      return t1;
    },
    _FileSpan$: function(file, _start, _end) {
      var t1 = new Y._FileSpan(file, _start, _end, []);
      t1._FileSpan$3(file, _start, _end);
      return t1;
    },
    SourceFile: function SourceFile(t0, t1, t2, t3, t4) {
      var _ = this;
      _.url = t0;
      _._lineStarts = t1;
      _._decodedChars = t2;
      _._cachedLine = t3;
      _.$ti = t4;
    },
    FileLocation: function FileLocation(t0, t1, t2) {
      this.file = t0;
      this.offset = t1;
      this.$ti = t2;
    },
    FileSpan: function FileSpan() {
    },
    _FileSpan: function _FileSpan(t0, t1, t2, t3) {
      var _ = this;
      _.file = t0;
      _._file$_start = t1;
      _._end = t2;
      _.$ti = t3;
    },
    SourceSpanMixin: function SourceSpanMixin() {
    },
    Trace_Trace$from: function(trace) {
      H.interceptedTypeCheck(trace, "$isStackTrace");
      if (trace == null)
        throw H.wrapException(P.ArgumentError$("Cannot create a Trace from null."));
      if (!!trace.$isTrace)
        return trace;
      if (!!trace.$isChain)
        return trace.toTrace$0();
      return T.LazyTrace$(new Y.Trace_Trace$from_closure(trace));
    },
    Trace_Trace$parse: function(trace) {
      var error, t1, exception;
      H.stringTypeCheck(trace);
      try {
        if (J.get$isEmpty$asx(trace)) {
          t1 = Y.Trace$(H.setRuntimeTypeInfo([], [A.Frame]), null);
          return t1;
        }
        if (J.contains$1$asx(trace, $.$get$_v8Trace())) {
          t1 = Y.Trace$parseV8(trace);
          return t1;
        }
        if (J.contains$1$asx(trace, "\tat ")) {
          t1 = Y.Trace$parseJSCore(trace);
          return t1;
        }
        if (J.contains$1$asx(trace, $.$get$_firefoxSafariTrace())) {
          t1 = Y.Trace$parseFirefox(trace);
          return t1;
        }
        if (J.contains$1$asx(trace, "===== asynchronous gap ===========================\n")) {
          t1 = U.Chain_Chain$parse(trace).toTrace$0();
          return t1;
        }
        if (J.contains$1$asx(trace, $.$get$_friendlyTrace())) {
          t1 = Y.Trace$parseFriendly(trace);
          return t1;
        }
        t1 = Y.Trace$parseVM(trace);
        return t1;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        if (t1 instanceof P.FormatException) {
          error = t1;
          throw H.wrapException(P.FormatException$(H.S(J.get$message$z(error)) + "\nStack trace:\n" + H.S(trace), null, null));
        } else
          throw exception;
      }
    },
    Trace$parseVM: function(trace) {
      return new Y.Trace(P.List_List$unmodifiable(Y.Trace__parseVM(trace), A.Frame), P._StringStackTrace$(trace), []);
    },
    Trace__parseVM: function(trace) {
      var lines = J.split$1$s(J.replaceAll$2$s(J.trim$0$s(H.stringTypeCheck(trace)), "<asynchronous suspension>\n", ""), "\n"),
        t1 = J.getInterceptor$asx(lines),
        $frames = J.toList$0$ax(J.map$1$1$ax(t1.take$1(lines, J.$sub$n(t1.get$length(lines), 1)), new Y.Trace__parseVM_closure(), A.Frame));
      if (!J.endsWith$1$s(t1.get$last(lines), ".da"))
        J.add$1$ax($frames, A.Frame_Frame$parseVM(t1.get$last(lines)));
      return $frames;
    },
    Trace$parseV8: function(trace) {
      var t1 = A.Frame;
      return new Y.Trace(P.List_List$unmodifiable(J.map$1$1$ax(J.skipWhile$1$ax(C.JSArray_methods.skip$1(H.setRuntimeTypeInfo(trace.split("\n"), [P.String]), 1), new Y.Trace$parseV8_closure()), new Y.Trace$parseV8_closure0(), t1), t1), P._StringStackTrace$(trace), []);
    },
    Trace$parseJSCore: function(trace) {
      var t1 = A.Frame;
      return new Y.Trace(P.List_List$unmodifiable(J.map$1$1$ax(C.JSArray_methods.where$1(H.setRuntimeTypeInfo(trace.split("\n"), [P.String]), new Y.Trace$parseJSCore_closure()), new Y.Trace$parseJSCore_closure0(), t1), t1), P._StringStackTrace$(trace), []);
    },
    Trace$parseFirefox: function(trace) {
      var t1 = A.Frame;
      return new Y.Trace(P.List_List$unmodifiable(J.map$1$1$ax(J.where$1$ax(J.split$1$s(J.trim$0$s(trace), "\n"), new Y.Trace$parseFirefox_closure()), new Y.Trace$parseFirefox_closure0(), t1), t1), P._StringStackTrace$(trace), []);
    },
    Trace$parseFriendly: function(trace) {
      var t1 = A.Frame;
      return new Y.Trace(P.List_List$unmodifiable(J.get$isEmpty$asx(trace) ? H.setRuntimeTypeInfo([], [t1]) : J.map$1$1$ax(J.where$1$ax(J.split$1$s(C.JSString_methods.trim$0(trace), "\n"), new Y.Trace$parseFriendly_closure()), new Y.Trace$parseFriendly_closure0(), t1), t1), P._StringStackTrace$(trace), []);
    },
    Trace$: function($frames, original) {
      return new Y.Trace(P.List_List$unmodifiable($frames, A.Frame), P._StringStackTrace$(original), []);
    },
    Trace: function Trace(t0, t1, t2) {
      this.frames = t0;
      this.original = t1;
      this.$ti = t2;
    },
    Trace_Trace$from_closure: function Trace_Trace$from_closure(t0, t1) {
      this.trace = t0;
      this.$ti = t1;
    },
    Trace__parseVM_closure: function Trace__parseVM_closure(t0) {
      this.$ti = t0;
    },
    Trace$parseV8_closure: function Trace$parseV8_closure(t0) {
      this.$ti = t0;
    },
    Trace$parseV8_closure0: function Trace$parseV8_closure0(t0) {
      this.$ti = t0;
    },
    Trace$parseJSCore_closure: function Trace$parseJSCore_closure(t0) {
      this.$ti = t0;
    },
    Trace$parseJSCore_closure0: function Trace$parseJSCore_closure0(t0) {
      this.$ti = t0;
    },
    Trace$parseFirefox_closure: function Trace$parseFirefox_closure(t0) {
      this.$ti = t0;
    },
    Trace$parseFirefox_closure0: function Trace$parseFirefox_closure0(t0) {
      this.$ti = t0;
    },
    Trace$parseFriendly_closure: function Trace$parseFriendly_closure(t0) {
      this.$ti = t0;
    },
    Trace$parseFriendly_closure0: function Trace$parseFriendly_closure0(t0) {
      this.$ti = t0;
    },
    Trace_foldFrames_closure: function Trace_foldFrames_closure() {
    },
    Trace_foldFrames_closure0: function Trace_foldFrames_closure0() {
    },
    Trace_toString_closure0: function Trace_toString_closure0(t0) {
      this.$ti = t0;
    },
    Trace_toString_closure: function Trace_toString_closure(t0, t1) {
      this.longest = t0;
      this.$ti = t1;
    }
  },
  G = {ClassElement: function ClassElement() {
    }, ClassMemberElement: function ClassMemberElement() {
    }, CompilationUnitElement: function CompilationUnitElement() {
    }, ConstructorElement: function ConstructorElement() {
    }, Element0: function Element0() {
    }, ElementAnnotation: function ElementAnnotation() {
    }, ElementKind: function ElementKind() {
    }, ElementLocation: function ElementLocation() {
    }, ElementVisitor: function ElementVisitor() {
    }, ExecutableElement: function ExecutableElement() {
    }, ExportElement: function ExportElement() {
    }, FieldElement: function FieldElement() {
    }, FieldFormalParameterElement: function FieldFormalParameterElement() {
    }, FunctionElement: function FunctionElement() {
    }, FunctionTypeAliasElement: function FunctionTypeAliasElement() {
    }, FunctionTypedElement: function FunctionTypedElement() {
    }, GenericFunctionTypeElement: function GenericFunctionTypeElement() {
    }, GenericTypeAliasElement: function GenericTypeAliasElement() {
    }, HideElementCombinator: function HideElementCombinator() {
    }, ImportElement: function ImportElement() {
    }, LabelElement0: function LabelElement0() {
    }, LibraryElement: function LibraryElement() {
    }, LocalElement: function LocalElement() {
    }, LocalVariableElement: function LocalVariableElement() {
    }, MethodElement: function MethodElement() {
    }, MultiplyDefinedElement: function MultiplyDefinedElement() {
    }, MultiplyInheritedExecutableElement: function MultiplyInheritedExecutableElement() {
    }, NamespaceCombinator: function NamespaceCombinator() {
    }, ParameterElement: function ParameterElement() {
    }, PrefixElement: function PrefixElement() {
    }, PropertyAccessorElement: function PropertyAccessorElement() {
    }, PropertyInducingElement: function PropertyInducingElement() {
    }, ShowElementCombinator: function ShowElementCombinator() {
    }, TopLevelVariableElement: function TopLevelVariableElement() {
    }, TypeDefiningElement: function TypeDefiningElement() {
    }, TypeParameterElement: function TypeParameterElement() {
    }, TypeParameterizedElement: function TypeParameterizedElement() {
    }, UndefinedElement: function UndefinedElement() {
    }, UriReferencedElement: function UriReferencedElement() {
    }, VariableElement: function VariableElement() {
    }, LibraryAnalyzer: function LibraryAnalyzer() {
    }, UnitAnalysisResult: function UnitAnalysisResult() {
    }, _NameOrSource: function _NameOrSource() {
    }, AbstractClassElementImpl: function AbstractClassElementImpl() {
    }, AuxiliaryElements: function AuxiliaryElements() {
    }, ClassElementImpl: function ClassElementImpl() {
    }, CompilationUnitElementImpl: function CompilationUnitElementImpl() {
    }, ConstFieldElementImpl: function ConstFieldElementImpl() {
    }, ConstFieldElementImpl_EnumValue: function ConstFieldElementImpl_EnumValue() {
    }, ConstFieldElementImpl_EnumValues: function ConstFieldElementImpl_EnumValues() {
    }, ConstFieldElementImpl_ofEnum: function ConstFieldElementImpl_ofEnum() {
    }, ConstLocalVariableElementImpl: function ConstLocalVariableElementImpl() {
    }, ConstructorElementImpl: function ConstructorElementImpl() {
    }, ConstTopLevelVariableElementImpl: function ConstTopLevelVariableElementImpl() {
    }, ConstVariableElement: function ConstVariableElement() {
    }, DefaultFieldFormalParameterElementImpl: function DefaultFieldFormalParameterElementImpl() {
    }, DefaultParameterElementImpl: function DefaultParameterElementImpl() {
    }, DynamicElementImpl: function DynamicElementImpl() {
    }, ElementAnnotationImpl: function ElementAnnotationImpl() {
    }, ElementImpl: function ElementImpl() {
    }, ElementLocationImpl: function ElementLocationImpl() {
    }, EnumElementImpl: function EnumElementImpl() {
    }, ExecutableElementImpl: function ExecutableElementImpl() {
    }, ExportElementImpl: function ExportElementImpl() {
    }, FieldElementImpl: function FieldElementImpl() {
    }, FieldFormalParameterElementImpl: function FieldFormalParameterElementImpl() {
    }, FunctionElementImpl: function FunctionElementImpl() {
    }, FunctionElementImpl_forFunctionTypedParameter: function FunctionElementImpl_forFunctionTypedParameter() {
    }, FunctionElementImpl_forLUB: function FunctionElementImpl_forLUB() {
    }, FunctionTypedElementImpl: function FunctionTypedElementImpl() {
    }, GenericFunctionTypeElementImpl: function GenericFunctionTypeElementImpl() {
    }, GenericTypeAliasElementImpl: function GenericTypeAliasElementImpl() {
    }, HideElementCombinatorImpl: function HideElementCombinatorImpl() {
    }, ImportElementImpl: function ImportElementImpl() {
    }, LabelElementImpl: function LabelElementImpl() {
    }, LibraryElementImpl: function LibraryElementImpl() {
    }, LibraryResolutionCapability: function LibraryResolutionCapability() {
    }, LibraryResynthesizerContext: function LibraryResynthesizerContext() {
    }, LocalVariableElementImpl: function LocalVariableElementImpl() {
    }, MethodElementImpl: function MethodElementImpl() {
    }, MixinElementImpl: function MixinElementImpl() {
    }, Modifier: function Modifier() {
    }, MultiplyDefinedElementImpl: function MultiplyDefinedElementImpl() {
    }, MultiplyInheritedMethodElementImpl: function MultiplyInheritedMethodElementImpl() {
    }, MultiplyInheritedPropertyAccessorElementImpl: function MultiplyInheritedPropertyAccessorElementImpl() {
    }, NonParameterVariableElementImpl: function NonParameterVariableElementImpl() {
    }, ParameterElementImpl: function ParameterElementImpl() {
    }, ParameterElementImpl_ofImplicitSetter: function ParameterElementImpl_ofImplicitSetter() {
    }, ParameterElementMixin: function ParameterElementMixin() {
    }, PrefixElementImpl: function PrefixElementImpl() {
    }, PropertyAccessorElementImpl: function PropertyAccessorElementImpl() {
    }, PropertyAccessorElementImpl_ImplicitGetter: function PropertyAccessorElementImpl_ImplicitGetter() {
    }, PropertyAccessorElementImpl_ImplicitSetter: function PropertyAccessorElementImpl_ImplicitSetter() {
    }, PropertyInducingElementImpl: function PropertyInducingElementImpl() {
    }, ResynthesizerContext: function ResynthesizerContext() {
    }, ShowElementCombinatorImpl: function ShowElementCombinatorImpl() {
    }, SimplyBoundableMixin: function SimplyBoundableMixin() {
    }, TopLevelVariableElementImpl: function TopLevelVariableElementImpl() {
    }, TypeParameterElementImpl: function TypeParameterElementImpl() {
    }, TypeParameterizedElementMixin: function TypeParameterizedElementMixin() {
    }, TypeParameterSerializationContext: function TypeParameterSerializationContext() {
    }, UnitExplicitTopLevelAccessors: function UnitExplicitTopLevelAccessors() {
    }, UnitExplicitTopLevelVariables: function UnitExplicitTopLevelVariables() {
    }, UriReferencedElementImpl: function UriReferencedElementImpl() {
    }, VariableElementImpl: function VariableElementImpl() {
    }, _ClassElementImpl_AbstractClassElementImpl_TypeParameterizedElementMixin: function _ClassElementImpl_AbstractClassElementImpl_TypeParameterizedElementMixin() {
    }, _ClassElementImpl_AbstractClassElementImpl_TypeParameterizedElementMixin_SimplyBoundableMixin: function _ClassElementImpl_AbstractClassElementImpl_TypeParameterizedElementMixin_SimplyBoundableMixin() {
    }, _ConstFieldElementImpl_FieldElementImpl_ConstVariableElement: function _ConstFieldElementImpl_FieldElementImpl_ConstVariableElement() {
    }, _ConstLocalVariableElementImpl_LocalVariableElementImpl_ConstVariableElement: function _ConstLocalVariableElementImpl_LocalVariableElementImpl_ConstVariableElement() {
    }, _ConstTopLevelVariableElementImpl_TopLevelVariableElementImpl_ConstVariableElement: function _ConstTopLevelVariableElementImpl_TopLevelVariableElementImpl_ConstVariableElement() {
    }, _DefaultFieldFormalParameterElementImpl_FieldFormalParameterElementImpl_ConstVariableElement: function _DefaultFieldFormalParameterElementImpl_FieldFormalParameterElementImpl_ConstVariableElement() {
    }, _DefaultParameterElementImpl_ParameterElementImpl_ConstVariableElement: function _DefaultParameterElementImpl_ParameterElementImpl_ConstVariableElement() {
    }, _ExecutableElementImpl_ElementImpl_TypeParameterizedElementMixin: function _ExecutableElementImpl_ElementImpl_TypeParameterizedElementMixin() {
    }, _GenericFunctionTypeElementImpl_ElementImpl_TypeParameterizedElementMixin: function _GenericFunctionTypeElementImpl_ElementImpl_TypeParameterizedElementMixin() {
    }, _GenericTypeAliasElementImpl_ElementImpl_TypeParameterizedElementMixin: function _GenericTypeAliasElementImpl_ElementImpl_TypeParameterizedElementMixin() {
    }, _GenericTypeAliasElementImpl_ElementImpl_TypeParameterizedElementMixin_SimplyBoundableMixin: function _GenericTypeAliasElementImpl_ElementImpl_TypeParameterizedElementMixin_SimplyBoundableMixin() {
    }, _ParameterElementImpl_VariableElementImpl_ParameterElementMixin: function _ParameterElementImpl_VariableElementImpl_ParameterElementMixin() {
    }, AstBuilder: function AstBuilder() {
    }, _ConstructorNameWithInvalidTypeArgs: function _ConstructorNameWithInvalidTypeArgs() {
    }, _InvalidCollectionElement: function _InvalidCollectionElement() {
    }, _Modifiers: function _Modifiers() {
    }, _OperatorName: function _OperatorName() {
    }, _OptionalFormalParameters: function _OptionalFormalParameters() {
    }, _ParameterDefaultValue: function _ParameterDefaultValue() {
    }, _RedirectingFactoryBody: function _RedirectingFactoryBody() {
    }, SdkConstraintExtractor: function SdkConstraintExtractor() {
    }, LinkedElementFactory: function LinkedElementFactory() {
    }, _ElementRequest: function _ElementRequest() {
    }, _Library: function _Library() {
    }, DartWorkManager: function DartWorkManager() {
    }, PackageBuildFileUriResolver: function PackageBuildFileUriResolver() {
    }, PackageBuildPackageUriResolver: function PackageBuildPackageUriResolver() {
    }, PackageBuildWorkspace: function PackageBuildWorkspace() {
    }, PackageBuildWorkspacePackage: function PackageBuildWorkspacePackage() {
    }, _ZLibDecoder: function _ZLibDecoder() {
    }, Option: function Option() {
    }, OptionType: function OptionType() {
    }, Parser0: function Parser0() {
    }, Usage: function Usage() {
    }, DelegatingStreamConsumer: function DelegatingStreamConsumer() {
    }, StreamQueue: function StreamQueue() {
    }, StreamQueueTransaction: function StreamQueueTransaction() {
    }, _EventRequest: function _EventRequest() {
    }, _NextRequest: function _NextRequest() {
    }, _PeekRequest: function _PeekRequest() {
    }, _SkipRequest: function _SkipRequest() {
    }, _ListRequest: function _ListRequest() {
    }, _TakeRequest: function _TakeRequest() {
    }, _LookAheadRequest: function _LookAheadRequest() {
    }, _CancelRequest: function _CancelRequest() {
    }, _RestRequest: function _RestRequest() {
    }, _HasNextRequest: function _HasNextRequest() {
    }, _TransactionRequest: function _TransactionRequest() {
    }, AsyncMessageGrouper: function AsyncMessageGrouper() {
    }, PostProcessBuilder: function PostProcessBuilder() {
    }, HashSink: function HashSink() {
    }, CompilerOptions: function CompilerOptions() {
    }, CompilerContext: function CompilerContext() {
    }, CatchParameterIdentifierContext: function CatchParameterIdentifierContext() {
    }, ClassOrMixinIdentifierContext: function ClassOrMixinIdentifierContext() {
    }, CombinatorIdentifierContext: function CombinatorIdentifierContext() {
    }, ConstructorReferenceIdentifierContext: function ConstructorReferenceIdentifierContext() {
    }, DottedNameIdentifierContext: function DottedNameIdentifierContext() {
    }, EnumDeclarationIdentifierContext: function EnumDeclarationIdentifierContext() {
    }, EnumValueDeclarationIdentifierContext: function EnumValueDeclarationIdentifierContext() {
    }, ExpressionIdentifierContext: function ExpressionIdentifierContext() {
    }, FieldDeclarationIdentifierContext: function FieldDeclarationIdentifierContext() {
    }, FieldInitializerIdentifierContext: function FieldInitializerIdentifierContext() {
    }, FormalParameterDeclarationIdentifierContext: function FormalParameterDeclarationIdentifierContext() {
    }, ImportPrefixIdentifierContext: function ImportPrefixIdentifierContext() {
    }, LiteralSymbolIdentifierContext: function LiteralSymbolIdentifierContext() {
    }, LocalFunctionDeclarationIdentifierContext: function LocalFunctionDeclarationIdentifierContext() {
    }, LabelDeclarationIdentifierContext: function LabelDeclarationIdentifierContext() {
    }, LabelReferenceIdentifierContext: function LabelReferenceIdentifierContext() {
    }, LibraryIdentifierContext: function LibraryIdentifierContext() {
    }, LocalVariableDeclarationIdentifierContext: function LocalVariableDeclarationIdentifierContext() {
    }, MetadataReferenceIdentifierContext: function MetadataReferenceIdentifierContext() {
    }, MethodDeclarationIdentifierContext: function MethodDeclarationIdentifierContext() {
    }, NamedArgumentReferenceIdentifierContext: function NamedArgumentReferenceIdentifierContext() {
    }, TopLevelDeclarationIdentifierContext: function TopLevelDeclarationIdentifierContext() {
    }, TypedefDeclarationIdentifierContext: function TypedefDeclarationIdentifierContext() {
    }, TypeReferenceIdentifierContext: function TypeReferenceIdentifierContext() {
    }, TypeVariableDeclarationIdentifierContext: function TypeVariableDeclarationIdentifierContext() {
    }, Scanner0: function Scanner0() {
    }, ScannerResult: function ScannerResult() {
    }, Ticker: function Ticker() {
    }, Parser2: function Parser2() {
    }, BadKeyException: function BadKeyException() {
    }, UnrecognizedKeysException: function UnrecognizedKeysException() {
    }, MissingRequiredKeysException: function MissingRequiredKeysException() {
    }, DisallowedNullValueException: function DisallowedNullValueException() {
    }, BinaryPrinter: function BinaryPrinter() {
    }, VariableIndexer: function VariableIndexer() {
    }, LabelIndexer: function LabelIndexer() {
    }, SwitchCaseIndexer: function SwitchCaseIndexer() {
    }, ConstantIndexer: function ConstantIndexer() {
    }, TypeParameterIndexer: function TypeParameterIndexer() {
    }, StringIndexer: function StringIndexer() {
    }, UriIndexer: function UriIndexer() {
    }, BufferedSink: function BufferedSink() {
    }, _MetadataSubsection0: function _MetadataSubsection0() {
    }, BytesSink: function BytesSink() {
    }, NotQuiteString: function NotQuiteString() {
    },
    SourceMapSpan$: function(start, end, text, isIdentifier) {
      var t1 = new G.SourceMapSpan(start, end, text, []);
      t1.SourceSpanBase$3(start, end, text);
      return t1;
    },
    SourceMapSpan$identifier: function(start, text) {
      var t3, t4,
        t1 = start.get$offset(),
        t2 = text.length;
      t1 = J.$add$ansx(t1, t2);
      t3 = start.get$sourceUrl();
      t4 = start.get$line();
      t3 = V.SourceLocation$(t1, J.$add$ansx(start.get$column(), t2), t4, t3);
      t4 = new G.SourceMapSpan(start, t3, text, []);
      t4.SourceSpanBase$3(start, t3, text);
      return t4;
    },
    SourceMapFileSpan$: function(_inner, isIdentifier) {
      return new G.SourceMapFileSpan(_inner, []);
    },
    SourceMapSpan: function SourceMapSpan(t0, t1, t2, t3) {
      var _ = this;
      _.start = t0;
      _.end = t1;
      _.text = t2;
      _.$ti = t3;
    },
    SourceMapFileSpan: function SourceMapFileSpan(t0, t1) {
      this._inner = t0;
      this.$ti = t1;
    },
    SourceSpanException: function SourceSpanException() {
    },
    SourceSpanFormatException: function SourceSpanFormatException() {
    },
    Watcher: function Watcher() {
    },
    Parser3: function Parser3() {
    },
    _State0: function _State0() {
    }
  },
  V = {AnalysisError: function AnalysisError() {
    }, ConstantVerifier: function ConstantVerifier() {
    }, _ConstantVerifier_validateInitializerExpression: function _ConstantVerifier_validateInitializerExpression() {
    }, _ConstLiteralVerifier: function _ConstLiteralVerifier() {
    }, AnalyzerError: function AnalyzerError() {
    }, AnalyzerErrorGroup: function AnalyzerErrorGroup() {
    }, Id: function Id() {
    }, SummaryClass: function SummaryClass() {
    }, TopLevel: function TopLevel() {
    }, Variant: function Variant() {
    }, VariantId: function VariantId() {
    }, ConstantTaskInput: function ConstantTaskInput() {
    }, ConstantTaskInputBuilder: function ConstantTaskInputBuilder() {
    }, ListTaskInputImpl: function ListTaskInputImpl() {
    }, ListTaskInputMixin: function ListTaskInputMixin() {
    }, ListToFlattenListTaskInput: function ListToFlattenListTaskInput() {
    }, ListToFlattenListTaskInputBuilder: function ListToFlattenListTaskInputBuilder() {
    }, ListToListTaskInput: function ListToListTaskInput() {
    }, ListToListTaskInputBuilder: function ListToListTaskInputBuilder() {
    }, ListToMapTaskInput: function ListToMapTaskInput() {
    }, ListToMapTaskInputBuilder: function ListToMapTaskInputBuilder() {
    }, MapTaskInputMixin: function MapTaskInputMixin() {
    }, MapToFlattenListTaskInput: function MapToFlattenListTaskInput() {
    }, MapToFlattenListTaskInputBuilder: function MapToFlattenListTaskInputBuilder() {
    }, ObjectToListTaskInput: function ObjectToListTaskInput() {
    }, ObjectToListTaskInputBuilder: function ObjectToListTaskInputBuilder() {
    }, SimpleTaskInput: function SimpleTaskInput() {
    }, SimpleTaskInputBuilder: function SimpleTaskInputBuilder() {
    }, TaskInputImpl: function TaskInputImpl() {
    }, TopLevelTaskInputBuilder: function TopLevelTaskInputBuilder() {
    }, _ListToCollectionTaskInput: function _ListToCollectionTaskInput() {
    }, _ListToCollectionTaskInputBuilder: function _ListToCollectionTaskInputBuilder() {
    }, _ListTaskInputImpl_SimpleTaskInput_ListTaskInputMixin: function _ListTaskInputImpl_SimpleTaskInput_ListTaskInputMixin() {
    }, _ListToFlattenListTaskInput__ListToCollectionTaskInput_ListTaskInputMixin: function _ListToFlattenListTaskInput__ListToCollectionTaskInput_ListTaskInputMixin() {
    }, _ListToListTaskInput__ListToCollectionTaskInput_ListTaskInputMixin: function _ListToListTaskInput__ListToCollectionTaskInput_ListTaskInputMixin() {
    }, _ListToMapTaskInput__ListToCollectionTaskInput_MapTaskInputMixin: function _ListToMapTaskInput__ListToCollectionTaskInput_MapTaskInputMixin() {
    }, _ObjectToListTaskInput_TaskInputImpl_ListTaskInputMixin: function _ObjectToListTaskInput_TaskInputImpl_ListTaskInputMixin() {
    }, BazelFileUriResolver: function BazelFileUriResolver() {
    }, BazelPackageUriResolver: function BazelPackageUriResolver() {
    }, BazelWorkspace: function BazelWorkspace() {
    }, BazelWorkspacePackage: function BazelWorkspacePackage() {
    }, TarFile: function TarFile() {
    }, ArgResults: function ArgResults() {
    }, DelegatingEventSink: function DelegatingEventSink() {
    }, LazyStream: function LazyStream() {
    }, ErrorResult: function ErrorResult() {
    }, BuildStepImpl: function BuildStepImpl() {
    }, _DelayedResolver: function _DelayedResolver() {
    }, Sha256: function Sha256() {
    }, _Sha256Sink: function _Sha256Sink() {
    }, Int32: function Int32() {
    }, Int64: function Int64() {
    }, IntX: function IntX() {
    }, AsyncModifier: function AsyncModifier() {
    }, ArrayBasedScanner: function ArrayBasedScanner() {
    }, ConstantsTransformer: function ConstantsTransformer() {
    }, ConstantEvaluator1: function ConstantEvaluator1() {
    }, InstanceBuilder: function InstanceBuilder() {
    }, EvaluationEnvironment: function EvaluationEnvironment() {
    }, NumberSemantics: function NumberSemantics() {
    }, ConstantsBackend: function ConstantsBackend() {
    }, _AbortCurrentEvaluation: function _AbortCurrentEvaluation() {
    }, ErrorReporter0: function ErrorReporter0() {
    }, SimpleErrorReporter: function SimpleErrorReporter() {
    }, IsInstantiatedVisitor: function IsInstantiatedVisitor() {
    }, TypeEnvironment: function TypeEnvironment() {
    }, SubtypeTester: function SubtypeTester() {
    },
    SourceLocation$: function(offset, column, line, sourceUrl) {
      var t1 = H.interceptedTypeCheck(typeof sourceUrl === "string" ? P.Uri_parse(sourceUrl) : sourceUrl, "$isUri"),
        t2 = line == null ? 0 : line,
        t3 = column == null ? offset : column;
      t3 = new V.SourceLocation(t1, offset, t2, t3, []);
      t3.SourceLocation$4$column$line$sourceUrl(offset, column, line, sourceUrl);
      return t3;
    },
    SourceLocation: function SourceLocation(t0, t1, t2, t3, t4) {
      var _ = this;
      _.sourceUrl = t0;
      _.offset = t1;
      _.line = t2;
      _.column = t3;
      _.$ti = t4;
    },
    SourceLocationBase: function SourceLocationBase() {
    },
    SourceSpan_SourceSpan: function(start, end, text) {
      return V.SourceSpanBase$(H.interceptedTypeCheck(start, "$isSourceLocation"), H.interceptedTypeCheck(end, "$isSourceLocation"), H.stringTypeCheck(text));
    },
    SourceSpanBase$: function(start, end, text) {
      var t1 = new V.SourceSpanBase(start, end, text, []);
      t1.SourceSpanBase$3(start, end, text);
      return t1;
    },
    SourceSpan: function SourceSpan() {
    },
    SourceSpanBase: function SourceSpanBase(t0, t1, t2, t3) {
      var _ = this;
      _.start = t0;
      _.end = t1;
      _.text = t2;
      _.$ti = t3;
    },
    _ConstructableFileSystemEvent: function _ConstructableFileSystemEvent() {
    },
    ConstructableFileSystemCreateEvent: function ConstructableFileSystemCreateEvent() {
    },
    ConstructableFileSystemDeleteEvent: function ConstructableFileSystemDeleteEvent() {
    },
    ConstructableFileSystemModifyEvent: function ConstructableFileSystemModifyEvent() {
    },
    ConstructableFileSystemMoveEvent: function ConstructableFileSystemMoveEvent() {
    }
  },
  Z = {AnalysisErrorListener: function AnalysisErrorListener() {
    }, BooleanErrorListener: function BooleanErrorListener() {
    }, ErrorReporter: function ErrorReporter() {
    }, RecordingErrorListener: function RecordingErrorListener() {
    }, _NullErrorListener: function _NullErrorListener() {
    }, _TypeToConvert: function _TypeToConvert() {
    }, AnalysisOptionsErrorCode: function AnalysisOptionsErrorCode() {
    }, AnalysisOptionsHintCode: function AnalysisOptionsHintCode() {
    }, AnalysisOptionsWarningCode: function AnalysisOptionsWarningCode() {
    }, SourceFactoryImpl: function SourceFactoryImpl() {
    }, DriverBasedAnalysisContext: function DriverBasedAnalysisContext() {
    }, Conflict: function Conflict() {
    }, InheritanceManager2: function InheritanceManager2() {
    }, Interface: function Interface() {
    }, Name: function Name() {
    }, BasicSource: function BasicSource() {
    }, ContentCache: function ContentCache() {
    }, CustomUriResolver: function CustomUriResolver() {
    }, DartUriResolver: function DartUriResolver() {
    }, LineInfo_Location: function LineInfo_Location() {
    }, LocalSourcePredicate: function LocalSourcePredicate() {
    }, LocalSourcePredicate_FALSE: function LocalSourcePredicate_FALSE() {
    }, LocalSourcePredicate_NOT_SDK: function LocalSourcePredicate_NOT_SDK() {
    }, LocalSourcePredicate_TRUE: function LocalSourcePredicate_TRUE() {
    }, NonExistingSource: function NonExistingSource() {
    }, Source: function Source() {
    }, Source_ContentReceiver: function Source_ContentReceiver() {
    }, SourceContainer: function SourceContainer() {
    }, SourceFactory: function SourceFactory() {
    }, SourceKind: function SourceKind() {
    }, UriKind: function UriKind() {
    }, UriResolver: function UriResolver() {
    }, ExprBuilder: function ExprBuilder() {
    }, AnalysisContextTarget: function AnalysisContextTarget() {
    }, AnalysisTarget: function AnalysisTarget() {
    }, AnalysisTask: function AnalysisTask() {
    }, ListResultDescriptor: function ListResultDescriptor() {
    }, ListTaskInput: function ListTaskInput() {
    }, MapTaskInput: function MapTaskInput() {
    }, ModificationTimeMismatchError: function ModificationTimeMismatchError() {
    }, ResultCachingPolicy: function ResultCachingPolicy() {
    }, ResultDescriptor: function ResultDescriptor() {
    }, TargetedResult: function TargetedResult() {
    }, TaskDescriptor: function TaskDescriptor() {
    }, TaskInput: function TaskInput() {
    }, TaskInputBuilder: function TaskInputBuilder() {
    }, TaskSuitability: function TaskSuitability() {
    }, WorkManager: function WorkManager() {
    }, WorkOrderPriority: function WorkOrderPriority() {
    }, ListResultDescriptorImpl: function ListResultDescriptorImpl() {
    }, ResultDescriptorImpl: function ResultDescriptorImpl() {
    }, SimpleResultCachingPolicy: function SimpleResultCachingPolicy() {
    }, TaskDescriptorImpl: function TaskDescriptorImpl() {
    }, ZLibDecoderBase: function ZLibDecoderBase() {
    }, ZLibDecoder0: function ZLibDecoder0() {
    }, ArgParserException: function ArgParserException() {
    }, CaptureStreamTransformer: function CaptureStreamTransformer() {
    }, MetaModule: function MetaModule() {
    }, _CleanMetaModuleCache: function _CleanMetaModuleCache() {
    }, ModuleBuilder: function ModuleBuilder() {
    }, ProcessedOptions: function ProcessedOptions() {
    }, HermeticFileSystem: function HermeticFileSystem() {
    }, HermeticAccessException: function HermeticAccessException() {
    }, HierarchyBasedTypeEnvironment: function HierarchyBasedTypeEnvironment() {
    }, NoPackages: function NoPackages() {
    }, PackagesBase: function PackagesBase() {
    }, MapPackages: function MapPackages() {
    }, NonFilePackagesDirectoryPackages: function NonFilePackagesDirectoryPackages() {
    }, LineScanner: function LineScanner() {
    }, LineScannerState: function LineScannerState() {
    }, YamlException: function YamlException() {
    }, YamlNode: function YamlNode() {
    }, YamlMap: function YamlMap() {
    }, YamlList: function YamlList() {
    }, YamlScalar: function YamlScalar() {
    }, _YamlList_YamlNode_ListMixin: function _YamlList_YamlNode_ListMixin() {
    }, _YamlMap_YamlNode_MapMixin: function _YamlMap_YamlNode_MapMixin() {
    }, _YamlMap_YamlNode_MapMixin_UnmodifiableMapMixin: function _YamlMap_YamlNode_MapMixin_UnmodifiableMapMixin() {
    }},
  E = {AnalysisException: function AnalysisException() {
    }, CaughtException: function CaughtException() {
    }, File1: function File1() {
    }, FileSystemException0: function FileSystemException0() {
    }, Folder: function Folder() {
    }, Resource: function Resource() {
    }, ResourceProvider: function ResourceProvider() {
    }, CharacterLocation: function CharacterLocation() {
    }, LineInfo: function LineInfo() {
    }, IndexElementInfo: function IndexElementInfo() {
    }, _ElementInfo: function _ElementInfo() {
    }, _ElementRelationInfo: function _ElementRelationInfo() {
    }, _IndexAssembler: function _IndexAssembler() {
    }, _IndexContributor: function _IndexContributor() {
    }, _NameRelationInfo: function _NameRelationInfo() {
    }, _StringInfo: function _StringInfo() {
    }, _SubtypeInfo: function _SubtypeInfo() {
    }, AnalysisStatus: function AnalysisStatus() {
    }, Monitor: function Monitor() {
    }, StatusSupport: function StatusSupport() {
    }, ParserErrorCode: function ParserErrorCode() {
    }, AbstractDartSdk: function AbstractDartSdk() {
    }, EmbedderSdk: function EmbedderSdk() {
    }, FolderBasedDartSdk: function FolderBasedDartSdk() {
    }, SdkExtensionFinder: function SdkExtensionFinder() {
    }, SdkLibrariesReader: function SdkLibrariesReader() {
    }, ResourceUriResolver: function ResourceUriResolver() {
    }, MappedInterner: function MappedInterner() {
    }, JavaFile: function JavaFile() {
    }, JavaSystemIO: function JavaSystemIO() {
    }, DartSdk: function DartSdk() {
    }, DartSdkManager: function DartSdkManager() {
    }, LibraryMap: function LibraryMap() {
    }, SdkDescription: function SdkDescription() {
    }, SdkLibrariesReader_LibraryBuilder: function SdkLibrariesReader_LibraryBuilder() {
    }, SdkLibrary: function SdkLibrary() {
    }, SdkLibraryImpl: function SdkLibraryImpl() {
    }, Registry: function Registry() {
    }, _Registry_Object_IterableMixin: function _Registry_Object_IterableMixin() {
    }, ConflictingSummaryException: function ConflictingSummaryException() {
    }, InputPackagesResultProvider: function InputPackagesResultProvider() {
    }, InSummaryPackageUriResolver: function InSummaryPackageUriResolver() {
    }, InSummarySource: function InSummarySource() {
    }, InSummaryUriResolver: function InSummaryUriResolver() {
    }, ResynthesizerResultProvider: function ResynthesizerResultProvider() {
    }, StoreBasedSummaryResynthesizer: function StoreBasedSummaryResynthesizer() {
    }, SummaryDataStore: function SummaryDataStore() {
    }, SummaryBasedDartSdk: function SummaryBasedDartSdk() {
    }, SummaryTypeProvider: function SummaryTypeProvider() {
    }, ZipDirectory: function ZipDirectory() {
    }, CancelableOperation: function CancelableOperation() {
    }, CancelableCompleter0: function CancelableCompleter0() {
    }, Result: function Result() {
    }, EqualitySet: function EqualitySet() {
    }, _IdentityConverter: function _IdentityConverter() {
    }, IdentityCodec: function IdentityCodec() {
    }, StandardFileSystem: function StandardFileSystem() {
    }, _IoFileSystemEntity: function _IoFileSystemEntity() {
    }, DataFileSystemEntity: function DataFileSystemEntity() {
    }, Crash: function Crash() {
    }, ErrorCollectingListener: function ErrorCollectingListener() {
    }, LoopState: function LoopState() {
    }, Interner: function Interner() {
    }, NullInterner: function NullInterner() {
    }, JsonLiteral: function JsonLiteral() {
    },
    PosixStyle$: function() {
      return new E.PosixStyle(P.RegExp_RegExp("/", false), P.RegExp_RegExp("[^/]$", false), P.RegExp_RegExp("^/", false), []);
    },
    PosixStyle: function PosixStyle(t0, t1, t2, t3) {
      var _ = this;
      _.separatorPattern = t0;
      _.needsSeparatorPattern = t1;
      _.rootPattern = t2;
      _.$ti = t3;
    },
    VersionUnion: function VersionUnion() {
    },
    StringScannerException: function StringScannerException() {
    },
    GlyphSet: function GlyphSet() {
    },
    LinuxDirectoryWatcher: function LinuxDirectoryWatcher() {
    },
    _LinuxDirectoryWatcher: function _LinuxDirectoryWatcher() {
    },
    WatchEvent: function WatchEvent() {
    },
    ChangeType: function ChangeType() {
    }
  },
  X = {MemoryResourceProvider: function MemoryResourceProvider() {
    }, _MemoryDummyLink: function _MemoryDummyLink() {
    }, _MemoryFile: function _MemoryFile() {
    }, _MemoryFolder: function _MemoryFolder() {
    }, _MemoryResource: function _MemoryResource() {
    }, LintCode: function LintCode() {
    }, ElementResolver: function ElementResolver() {
    }, SyntheticIdentifier: function SyntheticIdentifier() {
    }, CommentAndMetadata: function CommentAndMetadata() {
    }, FinalConstVarOrType: function FinalConstVarOrType() {
    }, Modifiers: function Modifiers() {
    }, Parser: function Parser() {
    }, _TooDeepTreeError: function _TooDeepTreeError() {
    }, ParserAdapter: function ParserAdapter() {
    }, _Parser2: function _Parser2() {
    }, ExplicitSourceResolver: function ExplicitSourceResolver() {
    }, FileBasedSource: function FileBasedSource() {
    }, FileUriResolver: function FileUriResolver() {
    }, LocalSourcePredicate0: function LocalSourcePredicate0() {
    }, LocalSourcePredicate_FALSE0: function LocalSourcePredicate_FALSE0() {
    }, LocalSourcePredicate_NOT_SDK0: function LocalSourcePredicate_NOT_SDK0() {
    }, LocalSourcePredicate_TRUE0: function LocalSourcePredicate_TRUE0() {
    }, PackageUriResolver: function PackageUriResolver() {
    }, RelativeFileUriResolver: function RelativeFileUriResolver() {
    }, TokenFactory: function TokenFactory() {
    }, LinterRuleOptionsValidator: function LinterRuleOptionsValidator() {
    }, _AvailableDeclarationKindReader: function _AvailableDeclarationKindReader() {
    }, _EntityRefKindReader: function _EntityRefKindReader() {
    }, _IndexNameKindReader: function _IndexNameKindReader() {
    }, _IndexRelationKindReader: function _IndexRelationKindReader() {
    }, _IndexSyntheticElementKindReader: function _IndexSyntheticElementKindReader() {
    }, _LinkedNodeCommentTypeReader: function _LinkedNodeCommentTypeReader() {
    }, _LinkedNodeFormalParameterKindReader: function _LinkedNodeFormalParameterKindReader() {
    }, _LinkedNodeKindReader: function _LinkedNodeKindReader() {
    }, _LinkedNodeTypeKindReader: function _LinkedNodeTypeKindReader() {
    }, _ReferenceKindReader: function _ReferenceKindReader() {
    }, _TopLevelInferenceErrorKindReader: function _TopLevelInferenceErrorKindReader() {
    }, _TypedefStyleReader: function _TypedefStyleReader() {
    }, _UnlinkedConstructorInitializerKindReader: function _UnlinkedConstructorInitializerKindReader() {
    }, _UnlinkedExecutableKindReader: function _UnlinkedExecutableKindReader() {
    }, _UnlinkedExprAssignOperatorReader: function _UnlinkedExprAssignOperatorReader() {
    }, _UnlinkedExprOperationReader: function _UnlinkedExprOperationReader() {
    }, _UnlinkedParamKindReader: function _UnlinkedParamKindReader() {
    }, _UnlinkedTokenKindReader: function _UnlinkedTokenKindReader() {
    }, _UnlinkedTokenTypeReader: function _UnlinkedTokenTypeReader() {
    }, AnalysisDriverExceptionContextBuilder: function AnalysisDriverExceptionContextBuilder() {
    }, _AnalysisDriverExceptionContextReader: function _AnalysisDriverExceptionContextReader() {
    }, _AnalysisDriverExceptionContextImpl: function _AnalysisDriverExceptionContextImpl() {
    }, _AnalysisDriverExceptionContextMixin: function _AnalysisDriverExceptionContextMixin() {
    }, AnalysisDriverExceptionFileBuilder: function AnalysisDriverExceptionFileBuilder() {
    }, _AnalysisDriverExceptionFileReader: function _AnalysisDriverExceptionFileReader() {
    }, _AnalysisDriverExceptionFileImpl: function _AnalysisDriverExceptionFileImpl() {
    }, _AnalysisDriverExceptionFileMixin: function _AnalysisDriverExceptionFileMixin() {
    }, AnalysisDriverResolvedUnitBuilder: function AnalysisDriverResolvedUnitBuilder() {
    }, _AnalysisDriverResolvedUnitReader: function _AnalysisDriverResolvedUnitReader() {
    }, _AnalysisDriverResolvedUnitImpl: function _AnalysisDriverResolvedUnitImpl() {
    }, _AnalysisDriverResolvedUnitMixin: function _AnalysisDriverResolvedUnitMixin() {
    }, AnalysisDriverSubtypeBuilder: function AnalysisDriverSubtypeBuilder() {
    }, _AnalysisDriverSubtypeReader: function _AnalysisDriverSubtypeReader() {
    }, _AnalysisDriverSubtypeImpl: function _AnalysisDriverSubtypeImpl() {
    }, _AnalysisDriverSubtypeMixin: function _AnalysisDriverSubtypeMixin() {
    }, AnalysisDriverUnitErrorBuilder: function AnalysisDriverUnitErrorBuilder() {
    }, _AnalysisDriverUnitErrorReader: function _AnalysisDriverUnitErrorReader() {
    }, _AnalysisDriverUnitErrorImpl: function _AnalysisDriverUnitErrorImpl() {
    }, _AnalysisDriverUnitErrorMixin: function _AnalysisDriverUnitErrorMixin() {
    }, AnalysisDriverUnitIndexBuilder: function AnalysisDriverUnitIndexBuilder() {
    }, _AnalysisDriverUnitIndexReader: function _AnalysisDriverUnitIndexReader() {
    }, _AnalysisDriverUnitIndexImpl: function _AnalysisDriverUnitIndexImpl() {
    }, _AnalysisDriverUnitIndexMixin: function _AnalysisDriverUnitIndexMixin() {
    }, AnalysisDriverUnlinkedUnitBuilder: function AnalysisDriverUnlinkedUnitBuilder() {
    }, _AnalysisDriverUnlinkedUnitReader: function _AnalysisDriverUnlinkedUnitReader() {
    }, _AnalysisDriverUnlinkedUnitImpl: function _AnalysisDriverUnlinkedUnitImpl() {
    }, _AnalysisDriverUnlinkedUnitMixin: function _AnalysisDriverUnlinkedUnitMixin() {
    }, AvailableDeclarationBuilder: function AvailableDeclarationBuilder() {
    }, _AvailableDeclarationReader: function _AvailableDeclarationReader() {
    }, _AvailableDeclarationImpl: function _AvailableDeclarationImpl() {
    }, _AvailableDeclarationMixin: function _AvailableDeclarationMixin() {
    }, AvailableFileBuilder: function AvailableFileBuilder() {
    }, _AvailableFileReader: function _AvailableFileReader() {
    }, _AvailableFileImpl: function _AvailableFileImpl() {
    }, _AvailableFileMixin: function _AvailableFileMixin() {
    }, AvailableFileExportBuilder: function AvailableFileExportBuilder() {
    }, _AvailableFileExportReader: function _AvailableFileExportReader() {
    }, _AvailableFileExportImpl: function _AvailableFileExportImpl() {
    }, _AvailableFileExportMixin: function _AvailableFileExportMixin() {
    }, AvailableFileExportCombinatorBuilder: function AvailableFileExportCombinatorBuilder() {
    }, _AvailableFileExportCombinatorReader: function _AvailableFileExportCombinatorReader() {
    }, _AvailableFileExportCombinatorImpl: function _AvailableFileExportCombinatorImpl() {
    }, _AvailableFileExportCombinatorMixin: function _AvailableFileExportCombinatorMixin() {
    }, CodeRangeBuilder: function CodeRangeBuilder() {
    }, _CodeRangeReader: function _CodeRangeReader() {
    }, _CodeRangeImpl: function _CodeRangeImpl() {
    }, _CodeRangeMixin: function _CodeRangeMixin() {
    }, EntityRefBuilder: function EntityRefBuilder() {
    }, _EntityRefReader: function _EntityRefReader() {
    }, _EntityRefImpl: function _EntityRefImpl() {
    }, _EntityRefMixin: function _EntityRefMixin() {
    }, LinkedDependencyBuilder: function LinkedDependencyBuilder() {
    }, _LinkedDependencyReader: function _LinkedDependencyReader() {
    }, _LinkedDependencyImpl: function _LinkedDependencyImpl() {
    }, _LinkedDependencyMixin: function _LinkedDependencyMixin() {
    }, LinkedExportNameBuilder: function LinkedExportNameBuilder() {
    }, _LinkedExportNameReader: function _LinkedExportNameReader() {
    }, _LinkedExportNameImpl: function _LinkedExportNameImpl() {
    }, _LinkedExportNameMixin: function _LinkedExportNameMixin() {
    }, LinkedLibraryBuilder: function LinkedLibraryBuilder() {
    }, _LinkedLibraryReader: function _LinkedLibraryReader() {
    }, _LinkedLibraryImpl: function _LinkedLibraryImpl() {
    }, _LinkedLibraryMixin: function _LinkedLibraryMixin() {
    }, LinkedNodeBuilder: function LinkedNodeBuilder() {
    }, _LinkedNodeReader: function _LinkedNodeReader() {
    }, _LinkedNodeImpl: function _LinkedNodeImpl() {
    }, _LinkedNodeMixin: function _LinkedNodeMixin() {
    }, LinkedNodeBundleBuilder: function LinkedNodeBundleBuilder() {
    }, _LinkedNodeBundleReader: function _LinkedNodeBundleReader() {
    }, _LinkedNodeBundleImpl: function _LinkedNodeBundleImpl() {
    }, _LinkedNodeBundleMixin: function _LinkedNodeBundleMixin() {
    }, LinkedNodeLibraryBuilder: function LinkedNodeLibraryBuilder() {
    }, _LinkedNodeLibraryReader: function _LinkedNodeLibraryReader() {
    }, _LinkedNodeLibraryImpl: function _LinkedNodeLibraryImpl() {
    }, _LinkedNodeLibraryMixin: function _LinkedNodeLibraryMixin() {
    }, LinkedNodeReferencesBuilder: function LinkedNodeReferencesBuilder() {
    }, _LinkedNodeReferencesReader: function _LinkedNodeReferencesReader() {
    }, _LinkedNodeReferencesImpl: function _LinkedNodeReferencesImpl() {
    }, _LinkedNodeReferencesMixin: function _LinkedNodeReferencesMixin() {
    }, LinkedNodeTypeBuilder: function LinkedNodeTypeBuilder() {
    }, _LinkedNodeTypeReader: function _LinkedNodeTypeReader() {
    }, _LinkedNodeTypeImpl: function _LinkedNodeTypeImpl() {
    }, _LinkedNodeTypeMixin: function _LinkedNodeTypeMixin() {
    }, LinkedNodeUnitBuilder: function LinkedNodeUnitBuilder() {
    }, _LinkedNodeUnitReader: function _LinkedNodeUnitReader() {
    }, _LinkedNodeUnitImpl: function _LinkedNodeUnitImpl() {
    }, _LinkedNodeUnitMixin: function _LinkedNodeUnitMixin() {
    }, LinkedNodeVariablesDeclarationBuilder: function LinkedNodeVariablesDeclarationBuilder() {
    }, _LinkedNodeVariablesDeclarationReader: function _LinkedNodeVariablesDeclarationReader() {
    }, _LinkedNodeVariablesDeclarationImpl: function _LinkedNodeVariablesDeclarationImpl() {
    }, _LinkedNodeVariablesDeclarationMixin: function _LinkedNodeVariablesDeclarationMixin() {
    }, LinkedReferenceBuilder: function LinkedReferenceBuilder() {
    }, _LinkedReferenceReader: function _LinkedReferenceReader() {
    }, _LinkedReferenceImpl: function _LinkedReferenceImpl() {
    }, _LinkedReferenceMixin: function _LinkedReferenceMixin() {
    }, LinkedUnitBuilder: function LinkedUnitBuilder() {
    }, _LinkedUnitReader: function _LinkedUnitReader() {
    }, _LinkedUnitImpl: function _LinkedUnitImpl() {
    }, _LinkedUnitMixin: function _LinkedUnitMixin() {
    }, PackageBundleBuilder: function PackageBundleBuilder() {
    }, _PackageBundleReader: function _PackageBundleReader() {
    }, _PackageBundleImpl: function _PackageBundleImpl() {
    }, _PackageBundleMixin: function _PackageBundleMixin() {
    }, PackageIndexBuilder: function PackageIndexBuilder() {
    }, _PackageIndexReader: function _PackageIndexReader() {
    }, _PackageIndexImpl: function _PackageIndexImpl() {
    }, _PackageIndexMixin: function _PackageIndexMixin() {
    }, TopLevelInferenceErrorBuilder: function TopLevelInferenceErrorBuilder() {
    }, _TopLevelInferenceErrorReader: function _TopLevelInferenceErrorReader() {
    }, _TopLevelInferenceErrorImpl: function _TopLevelInferenceErrorImpl() {
    }, _TopLevelInferenceErrorMixin: function _TopLevelInferenceErrorMixin() {
    }, UnitIndexBuilder: function UnitIndexBuilder() {
    }, _UnitIndexReader: function _UnitIndexReader() {
    }, _UnitIndexImpl: function _UnitIndexImpl() {
    }, _UnitIndexMixin: function _UnitIndexMixin() {
    }, UnlinkedClassBuilder: function UnlinkedClassBuilder() {
    }, _UnlinkedClassReader: function _UnlinkedClassReader() {
    }, _UnlinkedClassImpl: function _UnlinkedClassImpl() {
    }, _UnlinkedClassMixin: function _UnlinkedClassMixin() {
    }, UnlinkedCombinatorBuilder: function UnlinkedCombinatorBuilder() {
    }, _UnlinkedCombinatorReader: function _UnlinkedCombinatorReader() {
    }, _UnlinkedCombinatorImpl: function _UnlinkedCombinatorImpl() {
    }, _UnlinkedCombinatorMixin: function _UnlinkedCombinatorMixin() {
    }, UnlinkedConfigurationBuilder: function UnlinkedConfigurationBuilder() {
    }, _UnlinkedConfigurationReader: function _UnlinkedConfigurationReader() {
    }, _UnlinkedConfigurationImpl: function _UnlinkedConfigurationImpl() {
    }, _UnlinkedConfigurationMixin: function _UnlinkedConfigurationMixin() {
    }, UnlinkedConstructorInitializerBuilder: function UnlinkedConstructorInitializerBuilder() {
    }, _UnlinkedConstructorInitializerReader: function _UnlinkedConstructorInitializerReader() {
    }, _UnlinkedConstructorInitializerImpl: function _UnlinkedConstructorInitializerImpl() {
    }, _UnlinkedConstructorInitializerMixin: function _UnlinkedConstructorInitializerMixin() {
    }, UnlinkedDocumentationCommentBuilder: function UnlinkedDocumentationCommentBuilder() {
    }, _UnlinkedDocumentationCommentReader: function _UnlinkedDocumentationCommentReader() {
    }, _UnlinkedDocumentationCommentImpl: function _UnlinkedDocumentationCommentImpl() {
    }, _UnlinkedDocumentationCommentMixin: function _UnlinkedDocumentationCommentMixin() {
    }, UnlinkedEnumBuilder: function UnlinkedEnumBuilder() {
    }, _UnlinkedEnumReader: function _UnlinkedEnumReader() {
    }, _UnlinkedEnumImpl: function _UnlinkedEnumImpl() {
    }, _UnlinkedEnumMixin: function _UnlinkedEnumMixin() {
    }, UnlinkedEnumValueBuilder: function UnlinkedEnumValueBuilder() {
    }, _UnlinkedEnumValueReader: function _UnlinkedEnumValueReader() {
    }, _UnlinkedEnumValueImpl: function _UnlinkedEnumValueImpl() {
    }, _UnlinkedEnumValueMixin: function _UnlinkedEnumValueMixin() {
    }, UnlinkedExecutableBuilder: function UnlinkedExecutableBuilder() {
    }, _UnlinkedExecutableReader: function _UnlinkedExecutableReader() {
    }, _UnlinkedExecutableImpl: function _UnlinkedExecutableImpl() {
    }, _UnlinkedExecutableMixin: function _UnlinkedExecutableMixin() {
    }, UnlinkedExportNonPublicBuilder: function UnlinkedExportNonPublicBuilder() {
    }, _UnlinkedExportNonPublicReader: function _UnlinkedExportNonPublicReader() {
    }, _UnlinkedExportNonPublicImpl: function _UnlinkedExportNonPublicImpl() {
    }, _UnlinkedExportNonPublicMixin: function _UnlinkedExportNonPublicMixin() {
    }, UnlinkedExportPublicBuilder: function UnlinkedExportPublicBuilder() {
    }, _UnlinkedExportPublicReader: function _UnlinkedExportPublicReader() {
    }, _UnlinkedExportPublicImpl: function _UnlinkedExportPublicImpl() {
    }, _UnlinkedExportPublicMixin: function _UnlinkedExportPublicMixin() {
    }, UnlinkedExprBuilder: function UnlinkedExprBuilder() {
    }, _UnlinkedExprReader: function _UnlinkedExprReader() {
    }, _UnlinkedExprImpl: function _UnlinkedExprImpl() {
    }, _UnlinkedExprMixin: function _UnlinkedExprMixin() {
    }, UnlinkedImportBuilder: function UnlinkedImportBuilder() {
    }, _UnlinkedImportReader: function _UnlinkedImportReader() {
    }, _UnlinkedImportImpl: function _UnlinkedImportImpl() {
    }, _UnlinkedImportMixin: function _UnlinkedImportMixin() {
    }, UnlinkedParamBuilder: function UnlinkedParamBuilder() {
    }, _UnlinkedParamReader: function _UnlinkedParamReader() {
    }, _UnlinkedParamImpl: function _UnlinkedParamImpl() {
    }, _UnlinkedParamMixin: function _UnlinkedParamMixin() {
    }, UnlinkedPartBuilder: function UnlinkedPartBuilder() {
    }, _UnlinkedPartReader: function _UnlinkedPartReader() {
    }, _UnlinkedPartImpl: function _UnlinkedPartImpl() {
    }, _UnlinkedPartMixin: function _UnlinkedPartMixin() {
    }, UnlinkedPublicNameBuilder: function UnlinkedPublicNameBuilder() {
    }, _UnlinkedPublicNameReader: function _UnlinkedPublicNameReader() {
    }, _UnlinkedPublicNameImpl: function _UnlinkedPublicNameImpl() {
    }, _UnlinkedPublicNameMixin: function _UnlinkedPublicNameMixin() {
    }, UnlinkedPublicNamespaceBuilder: function UnlinkedPublicNamespaceBuilder() {
    }, _UnlinkedPublicNamespaceReader: function _UnlinkedPublicNamespaceReader() {
    }, _UnlinkedPublicNamespaceImpl: function _UnlinkedPublicNamespaceImpl() {
    }, _UnlinkedPublicNamespaceMixin: function _UnlinkedPublicNamespaceMixin() {
    }, UnlinkedReferenceBuilder: function UnlinkedReferenceBuilder() {
    }, _UnlinkedReferenceReader: function _UnlinkedReferenceReader() {
    }, _UnlinkedReferenceImpl: function _UnlinkedReferenceImpl() {
    }, _UnlinkedReferenceMixin: function _UnlinkedReferenceMixin() {
    }, UnlinkedTokensBuilder: function UnlinkedTokensBuilder() {
    }, _UnlinkedTokensReader: function _UnlinkedTokensReader() {
    }, _UnlinkedTokensImpl: function _UnlinkedTokensImpl() {
    }, _UnlinkedTokensMixin: function _UnlinkedTokensMixin() {
    }, UnlinkedTypedefBuilder: function UnlinkedTypedefBuilder() {
    }, _UnlinkedTypedefReader: function _UnlinkedTypedefReader() {
    }, _UnlinkedTypedefImpl: function _UnlinkedTypedefImpl() {
    }, _UnlinkedTypedefMixin: function _UnlinkedTypedefMixin() {
    }, UnlinkedTypeParamBuilder: function UnlinkedTypeParamBuilder() {
    }, _UnlinkedTypeParamReader: function _UnlinkedTypeParamReader() {
    }, _UnlinkedTypeParamImpl: function _UnlinkedTypeParamImpl() {
    }, _UnlinkedTypeParamMixin: function _UnlinkedTypeParamMixin() {
    }, UnlinkedUnitBuilder: function UnlinkedUnitBuilder() {
    }, _UnlinkedUnitReader: function _UnlinkedUnitReader() {
    }, _UnlinkedUnitImpl: function _UnlinkedUnitImpl() {
    }, _UnlinkedUnitMixin: function _UnlinkedUnitMixin() {
    }, UnlinkedVariableBuilder: function UnlinkedVariableBuilder() {
    }, _UnlinkedVariableReader: function _UnlinkedVariableReader() {
    }, _UnlinkedVariableImpl: function _UnlinkedVariableImpl() {
    }, _UnlinkedVariableMixin: function _UnlinkedVariableMixin() {
    }, _AnalysisDriverExceptionContextBuilder_Object__AnalysisDriverExceptionContextMixin: function _AnalysisDriverExceptionContextBuilder_Object__AnalysisDriverExceptionContextMixin() {
    }, _AnalysisDriverExceptionFileBuilder_Object__AnalysisDriverExceptionFileMixin: function _AnalysisDriverExceptionFileBuilder_Object__AnalysisDriverExceptionFileMixin() {
    }, _AnalysisDriverResolvedUnitBuilder_Object__AnalysisDriverResolvedUnitMixin: function _AnalysisDriverResolvedUnitBuilder_Object__AnalysisDriverResolvedUnitMixin() {
    }, _AnalysisDriverSubtypeBuilder_Object__AnalysisDriverSubtypeMixin: function _AnalysisDriverSubtypeBuilder_Object__AnalysisDriverSubtypeMixin() {
    }, _AnalysisDriverUnitErrorBuilder_Object__AnalysisDriverUnitErrorMixin: function _AnalysisDriverUnitErrorBuilder_Object__AnalysisDriverUnitErrorMixin() {
    }, _AnalysisDriverUnitIndexBuilder_Object__AnalysisDriverUnitIndexMixin: function _AnalysisDriverUnitIndexBuilder_Object__AnalysisDriverUnitIndexMixin() {
    }, _AnalysisDriverUnlinkedUnitBuilder_Object__AnalysisDriverUnlinkedUnitMixin: function _AnalysisDriverUnlinkedUnitBuilder_Object__AnalysisDriverUnlinkedUnitMixin() {
    }, _AvailableDeclarationBuilder_Object__AvailableDeclarationMixin: function _AvailableDeclarationBuilder_Object__AvailableDeclarationMixin() {
    }, _AvailableFileBuilder_Object__AvailableFileMixin: function _AvailableFileBuilder_Object__AvailableFileMixin() {
    }, _AvailableFileExportBuilder_Object__AvailableFileExportMixin: function _AvailableFileExportBuilder_Object__AvailableFileExportMixin() {
    }, _AvailableFileExportCombinatorBuilder_Object__AvailableFileExportCombinatorMixin: function _AvailableFileExportCombinatorBuilder_Object__AvailableFileExportCombinatorMixin() {
    }, _CodeRangeBuilder_Object__CodeRangeMixin: function _CodeRangeBuilder_Object__CodeRangeMixin() {
    }, _EntityRefBuilder_Object__EntityRefMixin: function _EntityRefBuilder_Object__EntityRefMixin() {
    }, _LinkedDependencyBuilder_Object__LinkedDependencyMixin: function _LinkedDependencyBuilder_Object__LinkedDependencyMixin() {
    }, _LinkedExportNameBuilder_Object__LinkedExportNameMixin: function _LinkedExportNameBuilder_Object__LinkedExportNameMixin() {
    }, _LinkedLibraryBuilder_Object__LinkedLibraryMixin: function _LinkedLibraryBuilder_Object__LinkedLibraryMixin() {
    }, _LinkedNodeBuilder_Object__LinkedNodeMixin: function _LinkedNodeBuilder_Object__LinkedNodeMixin() {
    }, _LinkedNodeBundleBuilder_Object__LinkedNodeBundleMixin: function _LinkedNodeBundleBuilder_Object__LinkedNodeBundleMixin() {
    }, _LinkedNodeLibraryBuilder_Object__LinkedNodeLibraryMixin: function _LinkedNodeLibraryBuilder_Object__LinkedNodeLibraryMixin() {
    }, _LinkedNodeReferencesBuilder_Object__LinkedNodeReferencesMixin: function _LinkedNodeReferencesBuilder_Object__LinkedNodeReferencesMixin() {
    }, _LinkedNodeTypeBuilder_Object__LinkedNodeTypeMixin: function _LinkedNodeTypeBuilder_Object__LinkedNodeTypeMixin() {
    }, _LinkedNodeUnitBuilder_Object__LinkedNodeUnitMixin: function _LinkedNodeUnitBuilder_Object__LinkedNodeUnitMixin() {
    }, _LinkedNodeVariablesDeclarationBuilder_Object__LinkedNodeVariablesDeclarationMixin: function _LinkedNodeVariablesDeclarationBuilder_Object__LinkedNodeVariablesDeclarationMixin() {
    }, _LinkedReferenceBuilder_Object__LinkedReferenceMixin: function _LinkedReferenceBuilder_Object__LinkedReferenceMixin() {
    }, _LinkedUnitBuilder_Object__LinkedUnitMixin: function _LinkedUnitBuilder_Object__LinkedUnitMixin() {
    }, _PackageBundleBuilder_Object__PackageBundleMixin: function _PackageBundleBuilder_Object__PackageBundleMixin() {
    }, _PackageIndexBuilder_Object__PackageIndexMixin: function _PackageIndexBuilder_Object__PackageIndexMixin() {
    }, _TopLevelInferenceErrorBuilder_Object__TopLevelInferenceErrorMixin: function _TopLevelInferenceErrorBuilder_Object__TopLevelInferenceErrorMixin() {
    }, _UnitIndexBuilder_Object__UnitIndexMixin: function _UnitIndexBuilder_Object__UnitIndexMixin() {
    }, _UnlinkedClassBuilder_Object__UnlinkedClassMixin: function _UnlinkedClassBuilder_Object__UnlinkedClassMixin() {
    }, _UnlinkedCombinatorBuilder_Object__UnlinkedCombinatorMixin: function _UnlinkedCombinatorBuilder_Object__UnlinkedCombinatorMixin() {
    }, _UnlinkedConfigurationBuilder_Object__UnlinkedConfigurationMixin: function _UnlinkedConfigurationBuilder_Object__UnlinkedConfigurationMixin() {
    }, _UnlinkedConstructorInitializerBuilder_Object__UnlinkedConstructorInitializerMixin: function _UnlinkedConstructorInitializerBuilder_Object__UnlinkedConstructorInitializerMixin() {
    }, _UnlinkedDocumentationCommentBuilder_Object__UnlinkedDocumentationCommentMixin: function _UnlinkedDocumentationCommentBuilder_Object__UnlinkedDocumentationCommentMixin() {
    }, _UnlinkedEnumBuilder_Object__UnlinkedEnumMixin: function _UnlinkedEnumBuilder_Object__UnlinkedEnumMixin() {
    }, _UnlinkedEnumValueBuilder_Object__UnlinkedEnumValueMixin: function _UnlinkedEnumValueBuilder_Object__UnlinkedEnumValueMixin() {
    }, _UnlinkedExecutableBuilder_Object__UnlinkedExecutableMixin: function _UnlinkedExecutableBuilder_Object__UnlinkedExecutableMixin() {
    }, _UnlinkedExportNonPublicBuilder_Object__UnlinkedExportNonPublicMixin: function _UnlinkedExportNonPublicBuilder_Object__UnlinkedExportNonPublicMixin() {
    }, _UnlinkedExportPublicBuilder_Object__UnlinkedExportPublicMixin: function _UnlinkedExportPublicBuilder_Object__UnlinkedExportPublicMixin() {
    }, _UnlinkedExprBuilder_Object__UnlinkedExprMixin: function _UnlinkedExprBuilder_Object__UnlinkedExprMixin() {
    }, _UnlinkedImportBuilder_Object__UnlinkedImportMixin: function _UnlinkedImportBuilder_Object__UnlinkedImportMixin() {
    }, _UnlinkedParamBuilder_Object__UnlinkedParamMixin: function _UnlinkedParamBuilder_Object__UnlinkedParamMixin() {
    }, _UnlinkedPartBuilder_Object__UnlinkedPartMixin: function _UnlinkedPartBuilder_Object__UnlinkedPartMixin() {
    }, _UnlinkedPublicNameBuilder_Object__UnlinkedPublicNameMixin: function _UnlinkedPublicNameBuilder_Object__UnlinkedPublicNameMixin() {
    }, _UnlinkedPublicNamespaceBuilder_Object__UnlinkedPublicNamespaceMixin: function _UnlinkedPublicNamespaceBuilder_Object__UnlinkedPublicNamespaceMixin() {
    }, _UnlinkedReferenceBuilder_Object__UnlinkedReferenceMixin: function _UnlinkedReferenceBuilder_Object__UnlinkedReferenceMixin() {
    }, _UnlinkedTokensBuilder_Object__UnlinkedTokensMixin: function _UnlinkedTokensBuilder_Object__UnlinkedTokensMixin() {
    }, _UnlinkedTypeParamBuilder_Object__UnlinkedTypeParamMixin: function _UnlinkedTypeParamBuilder_Object__UnlinkedTypeParamMixin() {
    }, _UnlinkedTypedefBuilder_Object__UnlinkedTypedefMixin: function _UnlinkedTypedefBuilder_Object__UnlinkedTypedefMixin() {
    }, _UnlinkedUnitBuilder_Object__UnlinkedUnitMixin: function _UnlinkedUnitBuilder_Object__UnlinkedUnitMixin() {
    }, _UnlinkedVariableBuilder_Object__UnlinkedVariableMixin: function _UnlinkedVariableBuilder_Object__UnlinkedVariableMixin() {
    }, __AnalysisDriverExceptionContextImpl_Object__AnalysisDriverExceptionContextMixin: function __AnalysisDriverExceptionContextImpl_Object__AnalysisDriverExceptionContextMixin() {
    }, __AnalysisDriverExceptionFileImpl_Object__AnalysisDriverExceptionFileMixin: function __AnalysisDriverExceptionFileImpl_Object__AnalysisDriverExceptionFileMixin() {
    }, __AnalysisDriverResolvedUnitImpl_Object__AnalysisDriverResolvedUnitMixin: function __AnalysisDriverResolvedUnitImpl_Object__AnalysisDriverResolvedUnitMixin() {
    }, __AnalysisDriverSubtypeImpl_Object__AnalysisDriverSubtypeMixin: function __AnalysisDriverSubtypeImpl_Object__AnalysisDriverSubtypeMixin() {
    }, __AnalysisDriverUnitErrorImpl_Object__AnalysisDriverUnitErrorMixin: function __AnalysisDriverUnitErrorImpl_Object__AnalysisDriverUnitErrorMixin() {
    }, __AnalysisDriverUnitIndexImpl_Object__AnalysisDriverUnitIndexMixin: function __AnalysisDriverUnitIndexImpl_Object__AnalysisDriverUnitIndexMixin() {
    }, __AnalysisDriverUnlinkedUnitImpl_Object__AnalysisDriverUnlinkedUnitMixin: function __AnalysisDriverUnlinkedUnitImpl_Object__AnalysisDriverUnlinkedUnitMixin() {
    }, __AvailableDeclarationImpl_Object__AvailableDeclarationMixin: function __AvailableDeclarationImpl_Object__AvailableDeclarationMixin() {
    }, __AvailableFileExportCombinatorImpl_Object__AvailableFileExportCombinatorMixin: function __AvailableFileExportCombinatorImpl_Object__AvailableFileExportCombinatorMixin() {
    }, __AvailableFileExportImpl_Object__AvailableFileExportMixin: function __AvailableFileExportImpl_Object__AvailableFileExportMixin() {
    }, __AvailableFileImpl_Object__AvailableFileMixin: function __AvailableFileImpl_Object__AvailableFileMixin() {
    }, __CodeRangeImpl_Object__CodeRangeMixin: function __CodeRangeImpl_Object__CodeRangeMixin() {
    }, __EntityRefImpl_Object__EntityRefMixin: function __EntityRefImpl_Object__EntityRefMixin() {
    }, __LinkedDependencyImpl_Object__LinkedDependencyMixin: function __LinkedDependencyImpl_Object__LinkedDependencyMixin() {
    }, __LinkedExportNameImpl_Object__LinkedExportNameMixin: function __LinkedExportNameImpl_Object__LinkedExportNameMixin() {
    }, __LinkedLibraryImpl_Object__LinkedLibraryMixin: function __LinkedLibraryImpl_Object__LinkedLibraryMixin() {
    }, __LinkedNodeBundleImpl_Object__LinkedNodeBundleMixin: function __LinkedNodeBundleImpl_Object__LinkedNodeBundleMixin() {
    }, __LinkedNodeImpl_Object__LinkedNodeMixin: function __LinkedNodeImpl_Object__LinkedNodeMixin() {
    }, __LinkedNodeLibraryImpl_Object__LinkedNodeLibraryMixin: function __LinkedNodeLibraryImpl_Object__LinkedNodeLibraryMixin() {
    }, __LinkedNodeReferencesImpl_Object__LinkedNodeReferencesMixin: function __LinkedNodeReferencesImpl_Object__LinkedNodeReferencesMixin() {
    }, __LinkedNodeTypeImpl_Object__LinkedNodeTypeMixin: function __LinkedNodeTypeImpl_Object__LinkedNodeTypeMixin() {
    }, __LinkedNodeUnitImpl_Object__LinkedNodeUnitMixin: function __LinkedNodeUnitImpl_Object__LinkedNodeUnitMixin() {
    }, __LinkedNodeVariablesDeclarationImpl_Object__LinkedNodeVariablesDeclarationMixin: function __LinkedNodeVariablesDeclarationImpl_Object__LinkedNodeVariablesDeclarationMixin() {
    }, __LinkedReferenceImpl_Object__LinkedReferenceMixin: function __LinkedReferenceImpl_Object__LinkedReferenceMixin() {
    }, __LinkedUnitImpl_Object__LinkedUnitMixin: function __LinkedUnitImpl_Object__LinkedUnitMixin() {
    }, __PackageBundleImpl_Object__PackageBundleMixin: function __PackageBundleImpl_Object__PackageBundleMixin() {
    }, __PackageIndexImpl_Object__PackageIndexMixin: function __PackageIndexImpl_Object__PackageIndexMixin() {
    }, __TopLevelInferenceErrorImpl_Object__TopLevelInferenceErrorMixin: function __TopLevelInferenceErrorImpl_Object__TopLevelInferenceErrorMixin() {
    }, __UnitIndexImpl_Object__UnitIndexMixin: function __UnitIndexImpl_Object__UnitIndexMixin() {
    }, __UnlinkedClassImpl_Object__UnlinkedClassMixin: function __UnlinkedClassImpl_Object__UnlinkedClassMixin() {
    }, __UnlinkedCombinatorImpl_Object__UnlinkedCombinatorMixin: function __UnlinkedCombinatorImpl_Object__UnlinkedCombinatorMixin() {
    }, __UnlinkedConfigurationImpl_Object__UnlinkedConfigurationMixin: function __UnlinkedConfigurationImpl_Object__UnlinkedConfigurationMixin() {
    }, __UnlinkedConstructorInitializerImpl_Object__UnlinkedConstructorInitializerMixin: function __UnlinkedConstructorInitializerImpl_Object__UnlinkedConstructorInitializerMixin() {
    }, __UnlinkedDocumentationCommentImpl_Object__UnlinkedDocumentationCommentMixin: function __UnlinkedDocumentationCommentImpl_Object__UnlinkedDocumentationCommentMixin() {
    }, __UnlinkedEnumImpl_Object__UnlinkedEnumMixin: function __UnlinkedEnumImpl_Object__UnlinkedEnumMixin() {
    }, __UnlinkedEnumValueImpl_Object__UnlinkedEnumValueMixin: function __UnlinkedEnumValueImpl_Object__UnlinkedEnumValueMixin() {
    }, __UnlinkedExecutableImpl_Object__UnlinkedExecutableMixin: function __UnlinkedExecutableImpl_Object__UnlinkedExecutableMixin() {
    }, __UnlinkedExportNonPublicImpl_Object__UnlinkedExportNonPublicMixin: function __UnlinkedExportNonPublicImpl_Object__UnlinkedExportNonPublicMixin() {
    }, __UnlinkedExportPublicImpl_Object__UnlinkedExportPublicMixin: function __UnlinkedExportPublicImpl_Object__UnlinkedExportPublicMixin() {
    }, __UnlinkedExprImpl_Object__UnlinkedExprMixin: function __UnlinkedExprImpl_Object__UnlinkedExprMixin() {
    }, __UnlinkedImportImpl_Object__UnlinkedImportMixin: function __UnlinkedImportImpl_Object__UnlinkedImportMixin() {
    }, __UnlinkedParamImpl_Object__UnlinkedParamMixin: function __UnlinkedParamImpl_Object__UnlinkedParamMixin() {
    }, __UnlinkedPartImpl_Object__UnlinkedPartMixin: function __UnlinkedPartImpl_Object__UnlinkedPartMixin() {
    }, __UnlinkedPublicNameImpl_Object__UnlinkedPublicNameMixin: function __UnlinkedPublicNameImpl_Object__UnlinkedPublicNameMixin() {
    }, __UnlinkedPublicNamespaceImpl_Object__UnlinkedPublicNamespaceMixin: function __UnlinkedPublicNamespaceImpl_Object__UnlinkedPublicNamespaceMixin() {
    }, __UnlinkedReferenceImpl_Object__UnlinkedReferenceMixin: function __UnlinkedReferenceImpl_Object__UnlinkedReferenceMixin() {
    }, __UnlinkedTokensImpl_Object__UnlinkedTokensMixin: function __UnlinkedTokensImpl_Object__UnlinkedTokensMixin() {
    }, __UnlinkedTypeParamImpl_Object__UnlinkedTypeParamMixin: function __UnlinkedTypeParamImpl_Object__UnlinkedTypeParamMixin() {
    }, __UnlinkedTypedefImpl_Object__UnlinkedTypedefMixin: function __UnlinkedTypedefImpl_Object__UnlinkedTypedefMixin() {
    }, __UnlinkedUnitImpl_Object__UnlinkedUnitMixin: function __UnlinkedUnitImpl_Object__UnlinkedUnitMixin() {
    }, __UnlinkedVariableImpl_Object__UnlinkedVariableMixin: function __UnlinkedVariableImpl_Object__UnlinkedVariableMixin() {
    }, Crc32: function Crc32() {
    }, _Crc32Sink: function _Crc32Sink() {
    }, ZipFileHeader: function ZipFileHeader() {
    }, ZLibEncoder0: function ZLibEncoder0() {
    }, HandlerTransformer: function HandlerTransformer() {
    }, _HandlerSink: function _HandlerSink() {
    }, _SafeCloseSink: function _SafeCloseSink() {
    }, SyncMessageGrouper: function SyncMessageGrouper() {
    }, AssetWriter: function AssetWriter() {
    }, AssetWriterSpy: function AssetWriterSpy() {
    }, LibrariesSpecification: function LibrariesSpecification() {
    }, TargetLibrariesSpecification: function TargetLibrariesSpecification() {
    }, LibraryInfo: function LibraryInfo() {
    }, LibrariesSpecificationException: function LibrariesSpecificationException() {
    }, ModifierRecoveryContext: function ModifierRecoveryContext() {
    }, DebugAbort: function DebugAbort() {
    },
    ParsedPath_ParsedPath$parse: function(path, style) {
      var root, isRootRelative, t1, parts, separators, start, i;
      H.stringTypeCheck(path);
      H.interceptedTypeCheck(style, "$isInternalStyle");
      root = style.getRoot$1(path);
      isRootRelative = style.isRootRelative$1(path);
      if (root != null)
        path = J.substring$1$s(path, root.length);
      t1 = [P.String];
      parts = H.setRuntimeTypeInfo([], t1);
      separators = H.setRuntimeTypeInfo([], t1);
      if (J.get$isNotEmpty$asx(path) && style.isSeparator$1(C.JSString_methods._codeUnitAt$1(path, 0))) {
        if (0 >= path.length)
          return H.ioore(path, 0);
        C.JSArray_methods.add$1(separators, path[0]);
        start = 1;
      } else {
        C.JSArray_methods.add$1(separators, "");
        start = 0;
      }
      for (t1 = path.length, i = start; i < t1; ++i)
        if (style.isSeparator$1(C.JSString_methods._codeUnitAt$1(path, i))) {
          C.JSArray_methods.add$1(parts, C.JSString_methods.substring$2(path, start, i));
          C.JSArray_methods.add$1(separators, path[i]);
          start = i + 1;
        }
      if (start < t1) {
        C.JSArray_methods.add$1(parts, C.JSString_methods.substring$1(path, start));
        C.JSArray_methods.add$1(separators, "");
      }
      return X.ParsedPath$_(style, root, isRootRelative, parts, separators);
    },
    ParsedPath$_: function(style, root, isRootRelative, parts, separators) {
      return new X.ParsedPath(style, root, parts, separators, []);
    },
    ParsedPath: function ParsedPath(t0, t1, t2, t3, t4) {
      var _ = this;
      _.style = t0;
      _.root = t1;
      _.parts = t2;
      _.separators = t3;
      _.$ti = t4;
    },
    ParsedPath_normalize_closure: function ParsedPath_normalize_closure(t0, t1) {
      this.$this = t0;
      this.$ti = t1;
    },
    PathException$: function(message) {
      return new X.PathException(message, []);
    },
    PathException: function PathException(t0, t1) {
      this.message = t0;
      this.$ti = t1;
    },
    VersionRange: function VersionRange() {
    },
    CompatibleWithVersionRange: function CompatibleWithVersionRange() {
    },
    SourceSpanWithContext: function SourceSpanWithContext() {
    },
    LazyChain: function LazyChain() {
    },
    StringScanner0: function StringScanner0() {
    },
    Event1: function Event1() {
    },
    DocumentStartEvent: function DocumentStartEvent() {
    },
    DocumentEndEvent: function DocumentEndEvent() {
    },
    AliasEvent: function AliasEvent() {
    },
    _ValueEvent: function _ValueEvent() {
    },
    ScalarEvent: function ScalarEvent() {
    },
    SequenceStartEvent: function SequenceStartEvent() {
    },
    MappingStartEvent: function MappingStartEvent() {
    },
    EventType: function EventType() {
    }
  },
  T = {PhysicalResourceProvider: function PhysicalResourceProvider() {
    }, _PhysicalFile: function _PhysicalFile() {
    }, _PhysicalFolder: function _PhysicalFolder() {
    }, _PhysicalResource: function _PhysicalResource() {
    }, ConflictingFlagLists: function ConflictingFlagLists() {
    }, ConflictingFlags: function ConflictingFlags() {
    }, ExperimentalFeature: function ExperimentalFeature() {
    }, IllegalUseOfExpiredFlag: function IllegalUseOfExpiredFlag() {
    }, UnnecessaryUseOfExpiredFlag: function UnnecessaryUseOfExpiredFlag() {
    }, UnrecognizedFlag: function UnrecognizedFlag() {
    }, ValidationResult: function ValidationResult() {
    }, PendingError: function PendingError() {
    }, PendingMissingRequiredParameterError: function PendingMissingRequiredParameterError() {
    }, LintConfig: function LintConfig() {
    }, RuleConfig: function RuleConfig() {
    }, _LintConfig: function _LintConfig() {
    }, _RuleConfig: function _RuleConfig() {
    }, BasicWorkspace: function BasicWorkspace() {
    }, BasicWorkspacePackage: function BasicWorkspacePackage() {
    }, Adler32: function Adler32() {
    }, _Adler32Sink: function _Adler32Sink() {
    }, InputStreamBase: function InputStreamBase() {
    }, InputStream: function InputStream() {
    }, MemPtr: function MemPtr() {
    }, Deflate: function Deflate() {
    }, _DeflaterConfig: function _DeflaterConfig() {
    }, _HuffmanTree: function _HuffmanTree() {
    }, _StaticTree: function _StaticTree() {
    }, StreamSinkCompleter: function StreamSinkCompleter() {
    }, _CompleterSink: function _CompleterSink() {
    }, SubscriptionStream: function SubscriptionStream() {
    }, _CancelOnErrorSubscriptionWrapper: function _CancelOnErrorSubscriptionWrapper() {
    }, AssetNotFoundException: function AssetNotFoundException() {
    }, PackageNotFoundException: function PackageNotFoundException() {
    }, InvalidOutputException: function InvalidOutputException() {
    }, InvalidInputException: function InvalidInputException() {
    }, BuildStepCompletedException: function BuildStepCompletedException() {
    }, UnresolvableAssetException: function UnresolvableAssetException() {
    }, UnexpectedOutputException: function UnexpectedOutputException() {
    }, DartPlatform: function DartPlatform() {
    }, SyntacticEntity: function SyntacticEntity() {
    }, StringScanner: function StringScanner() {
    }, $JsonMapWrapper: function $JsonMapWrapper() {
    }, _MappingList: function _MappingList() {
    }, _MappingMap: function _MappingMap() {
    }, Node2: function Node2() {
    }, TreeNode: function TreeNode() {
    }, NamedNode: function NamedNode() {
    }, FileUriNode: function FileUriNode() {
    }, Reference0: function Reference0() {
    }, Library: function Library() {
    }, LibraryDependency: function LibraryDependency() {
    }, LibraryPart: function LibraryPart() {
    }, Combinator0: function Combinator0() {
    }, Typedef: function Typedef() {
    }, ClassLevel: function ClassLevel() {
    }, Class: function Class() {
    }, Member0: function Member0() {
    }, Field: function Field() {
    }, Constructor: function Constructor() {
    }, RedirectingFactoryConstructor: function RedirectingFactoryConstructor() {
    }, Procedure: function Procedure() {
    }, ProcedureKind: function ProcedureKind() {
    }, Initializer: function Initializer() {
    }, InvalidInitializer: function InvalidInitializer() {
    }, FieldInitializer: function FieldInitializer() {
    }, SuperInitializer: function SuperInitializer() {
    }, RedirectingInitializer: function RedirectingInitializer() {
    }, LocalInitializer: function LocalInitializer() {
    }, AssertInitializer0: function AssertInitializer0() {
    }, FunctionNode: function FunctionNode() {
    }, AsyncMarker: function AsyncMarker() {
    }, Expression0: function Expression0() {
    }, InvalidExpression: function InvalidExpression() {
    }, VariableGet: function VariableGet() {
    }, VariableSet: function VariableSet() {
    }, PropertyGet: function PropertyGet() {
    }, PropertySet: function PropertySet() {
    }, DirectPropertyGet: function DirectPropertyGet() {
    }, DirectPropertySet: function DirectPropertySet() {
    }, DirectMethodInvocation: function DirectMethodInvocation() {
    }, SuperPropertyGet: function SuperPropertyGet() {
    }, SuperPropertySet: function SuperPropertySet() {
    }, StaticGet: function StaticGet() {
    }, StaticSet: function StaticSet() {
    }, Arguments: function Arguments() {
    }, NamedExpression0: function NamedExpression0() {
    }, InvocationExpression0: function InvocationExpression0() {
    }, MethodInvocation0: function MethodInvocation0() {
    }, SuperMethodInvocation: function SuperMethodInvocation() {
    }, StaticInvocation: function StaticInvocation() {
    }, ConstructorInvocation0: function ConstructorInvocation0() {
    }, Instantiation0: function Instantiation0() {
    }, Not: function Not() {
    }, LogicalExpression: function LogicalExpression() {
    }, ConditionalExpression0: function ConditionalExpression0() {
    }, StringConcatenation: function StringConcatenation() {
    }, ListConcatenation: function ListConcatenation() {
    }, SetConcatenation: function SetConcatenation() {
    }, MapConcatenation: function MapConcatenation() {
    }, IsExpression0: function IsExpression0() {
    }, AsExpression0: function AsExpression0() {
    }, BasicLiteral: function BasicLiteral() {
    }, StringLiteral0: function StringLiteral0() {
    }, IntLiteral: function IntLiteral() {
    }, DoubleLiteral0: function DoubleLiteral0() {
    }, BoolLiteral: function BoolLiteral() {
    }, NullLiteral0: function NullLiteral0() {
    }, SymbolLiteral0: function SymbolLiteral0() {
    }, TypeLiteral: function TypeLiteral() {
    }, ThisExpression0: function ThisExpression0() {
    }, Rethrow: function Rethrow() {
    }, Throw: function Throw() {
    }, ListLiteral0: function ListLiteral0() {
    }, SetLiteral0: function SetLiteral0() {
    }, MapLiteral0: function MapLiteral0() {
    }, MapEntry0: function MapEntry0() {
    }, AwaitExpression0: function AwaitExpression0() {
    }, FunctionExpression0: function FunctionExpression0() {
    }, ConstantExpression: function ConstantExpression() {
    }, Let: function Let() {
    }, BlockExpression: function BlockExpression() {
    }, LoadLibrary: function LoadLibrary() {
    }, CheckLibraryIsLoaded: function CheckLibraryIsLoaded() {
    }, Statement0: function Statement0() {
    }, ExpressionStatement0: function ExpressionStatement0() {
    }, Block0: function Block0() {
    }, AssertBlock: function AssertBlock() {
    }, EmptyStatement0: function EmptyStatement0() {
    }, AssertStatement0: function AssertStatement0() {
    }, LabeledStatement0: function LabeledStatement0() {
    }, BreakStatement0: function BreakStatement0() {
    }, WhileStatement0: function WhileStatement0() {
    }, DoStatement0: function DoStatement0() {
    }, ForStatement0: function ForStatement0() {
    }, ForInStatement: function ForInStatement() {
    }, SwitchStatement0: function SwitchStatement0() {
    }, SwitchCase0: function SwitchCase0() {
    }, ContinueSwitchStatement: function ContinueSwitchStatement() {
    }, IfStatement0: function IfStatement0() {
    }, ReturnStatement0: function ReturnStatement0() {
    }, TryCatch: function TryCatch() {
    }, Catch: function Catch() {
    }, TryFinally: function TryFinally() {
    }, YieldStatement0: function YieldStatement0() {
    }, VariableDeclaration0: function VariableDeclaration0() {
    }, FunctionDeclaration0: function FunctionDeclaration0() {
    }, Name0: function Name0() {
    }, _PrivateName: function _PrivateName() {
    }, _PublicName: function _PublicName() {
    }, DartType0: function DartType0() {
    }, InvalidType: function InvalidType() {
    }, DynamicType: function DynamicType() {
    }, VoidType1: function VoidType1() {
    }, BottomType: function BottomType() {
    }, InterfaceType0: function InterfaceType0() {
    }, FunctionType0: function FunctionType0() {
    }, TypedefType: function TypedefType() {
    }, NamedType0: function NamedType0() {
    }, TypeParameterType0: function TypeParameterType0() {
    }, TypeParameter0: function TypeParameter0() {
    }, Supertype: function Supertype() {
    }, Constant: function Constant() {
    }, PrimitiveConstant: function PrimitiveConstant() {
    }, NullConstant: function NullConstant() {
    }, BoolConstant: function BoolConstant() {
    }, IntConstant: function IntConstant() {
    }, DoubleConstant: function DoubleConstant() {
    }, StringConstant: function StringConstant() {
    }, SymbolConstant: function SymbolConstant() {
    }, MapConstant: function MapConstant() {
    }, ConstantMapEntry: function ConstantMapEntry() {
    }, ListConstant: function ListConstant() {
    }, SetConstant: function SetConstant() {
    }, InstanceConstant: function InstanceConstant() {
    }, PartialInstantiationConstant: function PartialInstantiationConstant() {
    }, TearOffConstant: function TearOffConstant() {
    }, TypeLiteralConstant: function TypeLiteralConstant() {
    }, UnevaluatedConstant: function UnevaluatedConstant() {
    }, Component: function Component() {
    }, Location0: function Location0() {
    }, MetadataRepository: function MetadataRepository() {
    }, BinarySink: function BinarySink() {
    }, BinarySource: function BinarySource() {
    }, _ChildReplacer: function _ChildReplacer() {
    }, Source0: function Source0() {
    }, CanonicalName: function CanonicalName() {
    }, MixinInferrer: function MixinInferrer() {
    }, ClassHierarchy: function ClassHierarchy() {
    }, ClassHierarchySubtypes: function ClassHierarchySubtypes() {
    }, _ClassInfoSubtype: function _ClassInfoSubtype() {
    }, _ClosedWorldClassHierarchySubtypes: function _ClosedWorldClassHierarchySubtypes() {
    }, ClosedWorldClassHierarchy: function ClosedWorldClassHierarchy() {
    }, _IntervalListBuilder: function _IntervalListBuilder() {
    }, _ClassInfo: function _ClassInfo() {
    }, ClassSet: function ClassSet() {
    }, _LubHeap: function _LubHeap() {
    }, Version: function Version() {
    },
    parse: function(jsonMap) {
      return T.parseJson(H.interceptedTypeCheck(P.jsonDecode(H.stringTypeCheck(jsonMap)), "$isMap"), null, null);
    },
    parseJson: function(map, mapUrl, otherMaps) {
      var _s8_ = "sections";
      H.interceptedTypeCheck(map, "$isMap");
      H.assertSubtype(otherMaps, "$isMap", [P.String, [P.Map,,,]], "$asMap");
      if (!J.$eq$(map.$index(0, "version"), 3))
        throw H.wrapException(P.ArgumentError$("unexpected source map version: " + H.S(map.$index(0, "version")) + ". Only version 3 is supported."));
      if (map.containsKey$1(_s8_)) {
        if (map.containsKey$1("mappings") || map.containsKey$1("sources") || map.containsKey$1("names"))
          throw H.wrapException(P.FormatException$('map containing "sections" cannot contain "mappings", "sources", or "names".', null, null));
        return T.MultiSectionMapping$fromJson(H.listTypeCheck(map.$index(0, _s8_)), otherMaps, mapUrl);
      }
      return T.SingleMapping$fromJson(map, mapUrl);
    },
    MultiSectionMapping$fromJson: function(sections, otherMaps, mapUrl) {
      var t1 = [P.int];
      t1 = new T.MultiSectionMapping(H.setRuntimeTypeInfo([], t1), H.setRuntimeTypeInfo([], t1), H.setRuntimeTypeInfo([], [T.Mapping]), []);
      t1.MultiSectionMapping$fromJson$3$mapUrl(sections, otherMaps, mapUrl);
      return t1;
    },
    MappingBundle$: function() {
      return new T.MappingBundle(P.LinkedHashMap_LinkedHashMap$_empty(P.String, T.SingleMapping), []);
    },
    SingleMapping$fromJson: function(map, mapUrl) {
      var t6, t7,
        t1 = H.stringTypeCheck(map.$index(0, "file")),
        t2 = P.String,
        t3 = P.List_List$from(H.listSuperNativeTypeCheck(map.$index(0, "sources"), "$isIterable"), true, t2),
        t4 = P.List_List$from(H.listSuperNativeTypeCheck(map.$index(0, "names"), "$isIterable"), true, t2),
        t5 = H.intTypeCheck(J.get$length$asx(map.$index(0, "sources")));
      if (typeof t5 !== "number")
        return H.iae(t5);
      t5 = new Array(t5);
      t5.fixed$length = Array;
      t5 = H.setRuntimeTypeInfo(t5, [Y.SourceFile]);
      t6 = H.stringTypeCheck(map.$index(0, "sourceRoot"));
      t7 = H.setRuntimeTypeInfo([], [T.TargetLineEntry]);
      t1 = new T.SingleMapping(t3, t4, t5, t7, t1, t6, H.interceptedTypeCheck(typeof mapUrl === "string" ? P.Uri_parse(mapUrl) : mapUrl, "$isUri"), P.LinkedHashMap_LinkedHashMap$_empty(t2, null), []);
      t1.SingleMapping$fromJson$2$mapUrl(map, mapUrl);
      return t1;
    },
    SingleMapping__append: function(buff, oldValue, newValue) {
      H.interceptedTypeCheck(buff, "$isStringBuffer");
      H.intTypeCheck(oldValue);
      H.intTypeCheck(newValue);
      if (typeof newValue !== "number")
        return newValue.$sub();
      if (typeof oldValue !== "number")
        return H.iae(oldValue);
      buff.writeAll$1(L.encodeVlq(newValue - oldValue));
      return newValue;
    },
    TargetLineEntry$: function(line, entries) {
      return new T.TargetLineEntry(line, entries, []);
    },
    TargetEntry$: function(column, sourceUrlId, sourceLine, sourceColumn, sourceNameId) {
      return new T.TargetEntry(column, sourceUrlId, sourceLine, sourceColumn, sourceNameId, []);
    },
    _MappingTokenizer$: function(internal) {
      return new T._MappingTokenizer(internal, internal.length, []);
    },
    Mapping: function Mapping() {
    },
    MultiSectionMapping: function MultiSectionMapping(t0, t1, t2, t3) {
      var _ = this;
      _._lineStart = t0;
      _._columnStart = t1;
      _._maps = t2;
      _.$ti = t3;
    },
    MappingBundle: function MappingBundle(t0, t1) {
      this._mappings = t0;
      this.$ti = t1;
    },
    MappingBundle_toJson_closure: function MappingBundle_toJson_closure(t0) {
      this.$ti = t0;
    },
    SingleMapping: function SingleMapping(t0, t1, t2, t3, t4, t5, t6, t7, t8) {
      var _ = this;
      _.urls = t0;
      _.names = t1;
      _.files = t2;
      _.lines = t3;
      _.targetUrl = t4;
      _.sourceRoot = t5;
      _._mapUrl = t6;
      _.extensions = t7;
      _.$ti = t8;
    },
    SingleMapping$fromJson_closure: function SingleMapping$fromJson_closure(t0, t1) {
      this.$this = t0;
      this.$ti = t1;
    },
    SingleMapping_toJson_closure0: function SingleMapping_toJson_closure0() {
    },
    SingleMapping_toJson_closure: function SingleMapping_toJson_closure(t0, t1) {
      this.result = t0;
      this.$ti = t1;
    },
    SingleMapping__findLine_closure: function SingleMapping__findLine_closure(t0, t1) {
      this.line = t0;
      this.$ti = t1;
    },
    SingleMapping__findColumn_closure: function SingleMapping__findColumn_closure(t0, t1) {
      this.column = t0;
      this.$ti = t1;
    },
    TargetLineEntry: function TargetLineEntry(t0, t1, t2) {
      this.line = t0;
      this.entries = t1;
      this.$ti = t2;
    },
    TargetEntry: function TargetEntry(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.column = t0;
      _.sourceUrlId = t1;
      _.sourceLine = t2;
      _.sourceColumn = t3;
      _.sourceNameId = t4;
      _.$ti = t5;
    },
    _MappingTokenizer: function _MappingTokenizer(t0, t1, t2) {
      var _ = this;
      _._internal = t0;
      _._parser$_length = t1;
      _.index = -1;
      _.$ti = t2;
    },
    _TokenKind: function _TokenKind(t0, t1, t2, t3) {
      var _ = this;
      _.isNewLine = t0;
      _.isNewSegment = t1;
      _.isEof = t2;
      _.$ti = t3;
    },
    LazyTrace$: function(_thunk) {
      return new T.LazyTrace(_thunk, []);
    },
    LazyTrace: function LazyTrace(t0, t1) {
      this._thunk = t0;
      this._lazy_trace$_inner = null;
      this.$ti = t1;
    }
  },
  M = {AnalysisPerformanceKind: function AnalysisPerformanceKind() {
    }, InstrumentationServer: function InstrumentationServer() {
    }, InstrumentationService: function InstrumentationService() {
    }, MulticastInstrumentationServer: function MulticastInstrumentationServer() {
    }, PluginData: function PluginData() {
    }, ErrorConfig: function ErrorConfig() {
    }, ErrorProcessor: function ErrorProcessor() {
    }, AnalysisContextImpl: function AnalysisContextImpl() {
    }, PartitionManager: function PartitionManager() {
    }, ResultProvider: function ResultProvider() {
    }, SdkAnalysisContext: function SdkAnalysisContext() {
    }, FileContentOverlay: function FileContentOverlay() {
    }, FileState: function FileState() {
    }, FileStateTestView: function FileStateTestView() {
    }, FileSystemState: function FileSystemState() {
    }, FileSystemStateTestView: function FileSystemStateTestView() {
    }, _ExportedDeclarations: function _ExportedDeclarations() {
    }, _FileContent: function _FileContent() {
    }, _FileContentCache: function _FileContentCache() {
    }, ExitDetector: function ExitDetector() {
    }, MethodInvocationResolver: function MethodInvocationResolver() {
    }, Spelunker: function Spelunker() {
    }, _ErrorListener: function _ErrorListener() {
    }, _SourceVisitor: function _SourceVisitor() {
    }, _ClassMeaning: function _ClassMeaning() {
    }, _ExportNamespace: function _ExportNamespace() {
    }, _Meaning: function _Meaning() {
    }, _Namespace0: function _Namespace0() {
    }, _PrefixMeaning: function _PrefixMeaning() {
    }, _Prelinker: function _Prelinker() {
    }, LinkedBundleContext: function LinkedBundleContext() {
    }, SimpleWorkspace: function SimpleWorkspace() {
    }, Bz2BitWriter: function Bz2BitWriter() {
    }, GZipDecoder: function GZipDecoder() {
    }, TypeSafeStreamSinkTransformer: function TypeSafeStreamSinkTransformer() {
    }, _TypeSafeStreamTransformer: function _TypeSafeStreamTransformer() {
    }, MessageGrouper: function MessageGrouper() {
    }, SyncWorkerLoop: function SyncWorkerLoop() {
    }, Input: function Input() {
    }, WorkRequest: function WorkRequest() {
    }, WorkResponse: function WorkResponse() {
    }, BuildStep: function BuildStep() {
    }, StageTracker: function StageTracker() {
    }, NoOpStageTracker: function NoOpStageTracker() {
    }, Dart2JsBatchWorkerPool: function Dart2JsBatchWorkerPool() {
    }, _Dart2JsWorker: function _Dart2JsWorker() {
    }, _Dart2JsJob: function _Dart2JsJob() {
    }, Dart2JsResult: function Dart2JsResult() {
    }, CanonicalizedMap: function CanonicalizedMap() {
    }, UnionSet: function UnionSet() {
    }, _UnionSet_SetBase_UnmodifiableSetMixin: function _UnionSet_SetBase_UnmodifiableSetMixin() {
    }, _DelegatingIterableBase: function _DelegatingIterableBase() {
    }, DelegatingIterable: function DelegatingIterable() {
    }, DelegatingList: function DelegatingList() {
    }, DelegatingSet: function DelegatingSet() {
    }, DelegatingQueue: function DelegatingQueue() {
    }, DelegatingMap: function DelegatingMap() {
    }, MapKeySet: function MapKeySet() {
    }, MapValueSet: function MapValueSet() {
    }, _MapKeySet__DelegatingIterableBase_UnmodifiableSetMixin: function _MapKeySet__DelegatingIterableBase_UnmodifiableSetMixin() {
    }, MD5: function MD5() {
    }, _MD5Sink: function _MD5Sink() {
    }, Assert: function Assert() {
    }, ClassMemberParser: function ClassMemberParser() {
    }, FreshTypeParameters: function FreshTypeParameters() {
    }, Substitution: function Substitution() {
    }, _NullSubstitution: function _NullSubstitution() {
    }, _MapSubstitution: function _MapSubstitution() {
    }, _TopSubstitutor: function _TopSubstitutor() {
    }, _ClassBottomSubstitution: function _ClassBottomSubstitution() {
    }, _CombinedSubstitution: function _CombinedSubstitution() {
    }, _FilteredSubstitution: function _FilteredSubstitution() {
    }, _InnerTypeSubstitutor: function _InnerTypeSubstitutor() {
    }, _TypeSubstitutor: function _TypeSubstitutor() {
    }, _DeepTypeSubstitutor: function _DeepTypeSubstitutor() {
    }, _TypeUnification: function _TypeUnification() {
    }, _OccurrenceVisitor: function _OccurrenceVisitor() {
    }, Packages: function Packages() {
    },
    createInternal: function() {
      return M.Context$_internal();
    },
    Context_Context: function(style) {
      var current;
      H.interceptedTypeCheck(style, "$isStyle");
      current = style == null ? D.current() : ".";
      if (style == null)
        style = $.$get$Style_platform();
      return M.Context$_(style, current);
    },
    Context$_internal: function() {
      return new M.Context(H.interceptedTypeCast($.$get$Style_platform(), "$isInternalStyle"), null, []);
    },
    Context$_: function(style, _current) {
      return new M.Context(style, _current, []);
    },
    _parseUri: function(uri) {
      if (typeof uri === "string")
        return P.Uri_parse(uri);
      if (!!J.getInterceptor$(uri).$isUri)
        return uri;
      throw H.wrapException(P.ArgumentError$value(uri, "uri", "Value must be a String or a Uri"));
    },
    _validateArgList: function(method, args) {
      var t1, t2, i, t3, numArgs, numArgs0, message;
      H.stringTypeCheck(method);
      t1 = P.String;
      H.assertSubtype(args, "$isList", [t1], "$asList");
      t2 = J.getInterceptor$asx(args);
      i = 1;
      while (true) {
        t3 = t2.get$length(args);
        if (typeof t3 !== "number")
          return H.iae(t3);
        if (!(i < t3))
          break;
        c$0: {
          if (t2.$index(args, i) == null || t2.$index(args, i - 1) != null)
            break c$0;
          numArgs = t2.get$length(args);
          while (true) {
            if (typeof numArgs !== "number")
              return numArgs.$ge();
            if (!(numArgs >= 1))
              break;
            numArgs0 = numArgs - 1;
            if (t2.$index(args, numArgs0) != null)
              break;
            numArgs = numArgs0;
          }
          message = P.StringBuffer$("");
          message.write$1(H.S(method) + "(");
          message.write$1(J.join$1$ax(J.map$1$1$ax(t2.take$1(args, numArgs), new M._validateArgList_closure(), t1), ", "));
          message.write$1("): part " + (i - 1) + " was null, but part " + i + " was not.");
          throw H.wrapException(P.ArgumentError$(message.toString$0(0)));
        }
        ++i;
      }
    },
    Context: function Context(t0, t1, t2) {
      this.style = t0;
      this._context$_current = t1;
      this.$ti = t2;
    },
    Context_join_closure: function Context_join_closure(t0) {
      this.$ti = t0;
    },
    Context_joinAll_closure: function Context_joinAll_closure(t0) {
      this.$ti = t0;
    },
    Context_split_closure: function Context_split_closure(t0) {
      this.$ti = t0;
    },
    _validateArgList_closure: function _validateArgList_closure(t0) {
      this.$ti = t0;
    },
    _PathDirection: function _PathDirection(t0, t1) {
      this.name = t0;
      this.$ti = t1;
    },
    _PathRelation: function _PathRelation(t0, t1) {
      this.name = t0;
      this.$ti = t1;
    },
    BuilderInfo: function BuilderInfo() {
    },
    CodedBufferReader: function CodedBufferReader() {
    },
    CodedBufferWriter: function CodedBufferWriter() {
    },
    EventPlugin: function EventPlugin() {
    },
    InvalidProtocolBufferException: function InvalidProtocolBufferException() {
    },
    Extension: function Extension() {
    },
    _ExtensionFieldSet: function _ExtensionFieldSet() {
    },
    ExtensionRegistry: function ExtensionRegistry() {
    },
    _EmptyExtensionRegistry: function _EmptyExtensionRegistry() {
    },
    FieldInfo: function FieldInfo() {
    },
    MapFieldInfo: function MapFieldInfo() {
    },
    _FieldSet: function _FieldSet() {
    },
    PbFieldType: function PbFieldType() {
    },
    GeneratedMessage: function GeneratedMessage() {
    },
    PackageName: function PackageName() {
    },
    ServerContext: function ServerContext() {
    },
    GeneratedService: function GeneratedService() {
    },
    FrozenPbList: function FrozenPbList() {
    },
    PbList: function PbList() {
    },
    PbListBase: function PbListBase() {
    },
    PbMap: function PbMap() {
    },
    ProtobufEnum: function ProtobufEnum() {
    },
    ReadonlyMessageMixin: function ReadonlyMessageMixin() {
    },
    ClientContext: function ClientContext() {
    },
    RpcClient: function RpcClient() {
    },
    UnknownFieldSet: function UnknownFieldSet() {
    },
    UnknownFieldSetField: function UnknownFieldSetField() {
    }
  },
  Q = {AnalysisOptionsProvider: function AnalysisOptionsProvider() {
    }, OptionsFormatException: function OptionsFormatException() {
    }, ParameterKind: function ParameterKind() {
    }, IgnoreInfo: function IgnoreInfo() {
    }, BoolListReader: function BoolListReader() {
    }, BoolReader: function BoolReader() {
    }, BufferContext: function BufferContext() {
    }, Builder: function Builder() {
    }, Float64ListReader: function Float64ListReader() {
    }, Int32Reader: function Int32Reader() {
    }, Int8Reader: function Int8Reader() {
    }, ListReader: function ListReader() {
    }, Offset: function Offset() {
    }, Reader: function Reader() {
    }, StringReader: function StringReader() {
    }, TableReader: function TableReader() {
    }, Uint32ListReader: function Uint32ListReader() {
    }, Uint32Reader: function Uint32Reader() {
    }, Uint8ListReader: function Uint8ListReader() {
    }, Uint8Reader: function Uint8Reader() {
    }, Float64Reader: function Float64Reader() {
    }, _FbBoolList: function _FbBoolList() {
    }, _FbFloat64List: function _FbFloat64List() {
    }, _FbGenericList: function _FbGenericList() {
    }, _FbList: function _FbList() {
    }, _FbUint32List: function _FbUint32List() {
    }, _FbUint8List: function _FbUint8List() {
    }, _VTable: function _VTable() {
    }, __FbBoolList_Object_ListMixin: function __FbBoolList_Object_ListMixin() {
    }, __FbList_Object_ListMixin: function __FbList_Object_ListMixin() {
    }, TaskManager: function TaskManager() {
    }, InstanceMemberInferrer: function InstanceMemberInferrer() {
    }, VariableGatherer: function VariableGatherer() {
    }, _CycleException: function _CycleException() {
    }, _FieldOverrideInferenceResult: function _FieldOverrideInferenceResult() {
    }, TarDecoder: function TarDecoder() {
    }, OutputStreamBase: function OutputStreamBase() {
    }, OutputStream: function OutputStream() {
    }, ZipFile: function ZipFile() {
    }, ZipDecoder: function ZipDecoder() {
    }, StreamTransformerWrapper: function StreamTransformerWrapper() {
    }, _StreamTransformerWrapperSink: function _StreamTransformerWrapperSink() {
    },
    fixSourceMapSources: function(uris) {
      var t1 = P.String;
      return J.toList$0$ax(J.map$1$1$ax(H.assertSubtype(uris, "$isList", [t1], "$asList"), new Q.fixSourceMapSources_closure(), t1));
    },
    DevCompilerBuilder: function DevCompilerBuilder() {
    },
    fixSourceMapSources_closure: function fixSourceMapSources_closure(t0) {
      this.$ti = t0;
    },
    QueueList: function QueueList() {
    },
    _CastQueueList: function _CastQueueList() {
    },
    _QueueList_Object_ListMixin: function _QueueList_Object_ListMixin() {
    },
    TopLevelParser: function TopLevelParser() {
    },
    JS: function JS() {
    },
    _Anonymous: function _Anonymous() {
    },
    CoreTypes: function CoreTypes() {
    },
    Immutable: function Immutable() {
    },
    Required: function Required() {
    },
    _AlwaysThrows: function _AlwaysThrows() {
    },
    _Checked: function _Checked() {
    },
    _Experimental: function _Experimental() {
    },
    _Factory: function _Factory() {
    },
    _IsTest: function _IsTest() {
    },
    _IsTestGroup: function _IsTestGroup() {
    },
    _Literal: function _Literal() {
    },
    _MustCallSuper: function _MustCallSuper() {
    },
    _OptionalTypeArgs: function _OptionalTypeArgs() {
    },
    _Protected: function _Protected() {
    },
    _Sealed: function _Sealed() {
    },
    _Virtual: function _Virtual() {
    },
    _VisibleForOverriding: function _VisibleForOverriding() {
    },
    _VisibleForTesting: function _VisibleForTesting() {
    },
    VMTrace: function VMTrace() {
    }
  },
  S = {Declaration0: function Declaration0() {
    }, DeclarationKind: function DeclarationKind() {
    }, Search: function Search() {
    }, SearchedFiles: function SearchedFiles() {
    }, SearchResult: function SearchResult() {
    }, SearchResultKind: function SearchResultKind() {
    }, SubtypeResult: function SubtypeResult() {
    }, _ContainingElementFinder: function _ContainingElementFinder() {
    }, _ImportElementReferencesVisitor: function _ImportElementReferencesVisitor() {
    }, _IndexRequest: function _IndexRequest() {
    }, _LocalReferencesVisitor: function _LocalReferencesVisitor() {
    }, _MaxNumberOfDeclarationsError: function _MaxNumberOfDeclarationsError() {
    }, _UnlinkedParameterComposer: function _UnlinkedParameterComposer() {
    }, ConstantEvaluationEngine: function ConstantEvaluationEngine() {
    }, ConstantEvaluationTarget: function ConstantEvaluationTarget() {
    }, ConstantEvaluationValidator: function ConstantEvaluationValidator() {
    }, ConstantEvaluationValidator_ForProduction: function ConstantEvaluationValidator_ForProduction() {
    }, ConstantVisitor: function ConstantVisitor() {
    }, DartObjectComputer: function DartObjectComputer() {
    }, EvaluationResult: function EvaluationResult() {
    }, EvaluationResultImpl: function EvaluationResultImpl() {
    }, BlockScope: function BlockScope() {
    }, ClassScope: function ClassScope() {
    }, ConstructorInitializerScope: function ConstructorInitializerScope() {
    }, EnclosedScope: function EnclosedScope() {
    }, FunctionScope: function FunctionScope() {
    }, FunctionTypeScope: function FunctionTypeScope() {
    }, ImplicitLabelScope: function ImplicitLabelScope() {
    }, LabelScope: function LabelScope() {
    }, LibraryImportScope: function LibraryImportScope() {
    }, LibraryScope: function LibraryScope() {
    }, Namespace: function Namespace() {
    }, NamespaceBuilder: function NamespaceBuilder() {
    }, PrefixedNamespace: function PrefixedNamespace() {
    }, Scope: function Scope() {
    }, TypeParameterScope: function TypeParameterScope() {
    }, SdkPatcher: function SdkPatcher() {
    }, StaticTypeAnalyzer: function StaticTypeAnalyzer() {
    }, _InferredCollectionElementTypeInformation: function _InferredCollectionElementTypeInformation() {
    }, TarEncoder: function TarEncoder() {
    }, Inflate: function Inflate() {
    }, AsyncCache: function AsyncCache() {
    }, AsyncMemoizer: function AsyncMemoizer() {
    }, NullStreamSink: function NullStreamSink() {
    }, WorkerConnection: function WorkerConnection() {
    }, AsyncWorkerConnection: function AsyncWorkerConnection() {
    }, SyncWorkerConnection: function SyncWorkerConnection() {
    }, StdAsyncWorkerConnection: function StdAsyncWorkerConnection() {
    }, SendPortAsyncWorkerConnection: function SendPortAsyncWorkerConnection() {
    }, StdSyncWorkerConnection: function StdSyncWorkerConnection() {
    }, ModuleLibraryBuilder: function ModuleLibraryBuilder() {
    }, CombinedIterableView: function CombinedIterableView() {
    }, _CombinedIterator: function _CombinedIterator() {
    }, ExperimentalFlag: function ExperimentalFlag() {
    }, MemberKind: function MemberKind() {
    }, ErrorToken: function ErrorToken() {
    }, EncodingErrorToken: function EncodingErrorToken() {
    }, NonAsciiIdentifierToken: function NonAsciiIdentifierToken() {
    }, NonAsciiWhitespaceToken: function NonAsciiWhitespaceToken() {
    }, AsciiControlCharacterToken: function AsciiControlCharacterToken() {
    }, UnsupportedOperator: function UnsupportedOperator() {
    }, UnterminatedString: function UnterminatedString() {
    }, UnterminatedToken: function UnterminatedToken() {
    }, UnmatchedToken: function UnmatchedToken() {
    }, LinkIterator: function LinkIterator() {
    }, MappedLinkIterator: function MappedLinkIterator() {
    }, MappedLinkIterable: function MappedLinkIterable() {
    }, LinkEntry: function LinkEntry() {
    }, LinkBuilderImplementation: function LinkBuilderImplementation() {
    }, Tag: function Tag() {
    }, ConstantTag: function ConstantTag() {
    }, SpanScanner: function SpanScanner() {
    }, _SpanScannerState0: function _SpanScannerState0() {
    }},
  O = {ConstructorMember: function ConstructorMember() {
    }, ExecutableMember: function ExecutableMember() {
    }, FieldFormalParameterMember: function FieldFormalParameterMember() {
    }, FieldMember: function FieldMember() {
    }, FunctionMember: function FunctionMember() {
    }, Member: function Member() {
    }, MethodMember: function MethodMember() {
    }, ParameterMember: function ParameterMember() {
    }, PropertyAccessorMember: function PropertyAccessorMember() {
    }, TypeParameterMember: function TypeParameterMember() {
    }, VariableMember: function VariableMember() {
    }, _ParameterMember_VariableMember_ParameterElementMixin: function _ParameterMember_VariableMember_ParameterElementMixin() {
    }, HintCode: function HintCode() {
    }, Scanner: function Scanner() {
    }, ToAnalyzerTokenStreamConverter: function ToAnalyzerTokenStreamConverter() {
    }, AnalysisContext0: function AnalysisContext0() {
    }, AnalysisDelta: function AnalysisDelta() {
    }, AnalysisEngine: function AnalysisEngine() {
    }, AnalysisErrorInfo: function AnalysisErrorInfo() {
    }, AnalysisErrorInfoImpl: function AnalysisErrorInfoImpl() {
    }, AnalysisLevel: function AnalysisLevel() {
    }, AnalysisListener: function AnalysisListener() {
    }, AnalysisNotScheduledError: function AnalysisNotScheduledError() {
    }, AnalysisOptions: function AnalysisOptions() {
    }, AnalysisOptionsImpl: function AnalysisOptionsImpl() {
    }, AnalysisResult1: function AnalysisResult1() {
    }, CacheConsistencyValidationStatistics: function CacheConsistencyValidationStatistics() {
    }, CacheConsistencyValidator: function CacheConsistencyValidator() {
    }, CacheState: function CacheState() {
    }, ChangeNotice: function ChangeNotice() {
    }, ChangeNoticeImpl: function ChangeNoticeImpl() {
    }, ChangeSet: function ChangeSet() {
    }, ChangeSet_ContentChange: function ChangeSet_ContentChange() {
    }, ComputedResult: function ComputedResult() {
    }, ImplicitAnalysisEvent: function ImplicitAnalysisEvent() {
    }, InternalAnalysisContext: function InternalAnalysisContext() {
    }, Logger: function Logger() {
    }, NullLogger: function NullLogger() {
    }, ObsoleteSourceAnalysisException: function ObsoleteSourceAnalysisException() {
    }, PerformanceStatistics: function PerformanceStatistics() {
    }, ResolutionEraser: function ResolutionEraser() {
    }, ResultChangedEvent: function ResultChangedEvent() {
    }, SourcesChangedEvent: function SourcesChangedEvent() {
    }, HtmlErrorCode: function HtmlErrorCode() {
    }, HtmlWarningCode: function HtmlWarningCode() {
    }, TokensResult: function TokensResult() {
    }, TokensWriter: function TokensWriter() {
    }, LibrarySpecificUnit: function LibrarySpecificUnit() {
    }, BuildCompilationUnitElementTask: function BuildCompilationUnitElementTask() {
    }, BuildDirectiveElementsTask: function BuildDirectiveElementsTask() {
    }, BuildEnumMemberElementsTask: function BuildEnumMemberElementsTask() {
    }, BuildExportNamespaceTask: function BuildExportNamespaceTask() {
    }, BuildLibraryElementTask: function BuildLibraryElementTask() {
    }, BuildPublicNamespaceTask: function BuildPublicNamespaceTask() {
    }, BuildSourceExportClosureTask: function BuildSourceExportClosureTask() {
    }, BuildTypeProviderTask: function BuildTypeProviderTask() {
    }, ComputeConstantDependenciesTask: function ComputeConstantDependenciesTask() {
    }, ComputeConstantValueTask: function ComputeConstantValueTask() {
    }, ComputeInferableStaticVariableDependenciesTask: function ComputeInferableStaticVariableDependenciesTask() {
    }, ComputeLibraryCycleTask: function ComputeLibraryCycleTask() {
    }, ComputeRequiredConstantsTask: function ComputeRequiredConstantsTask() {
    }, ConstantEvaluationAnalysisTask: function ConstantEvaluationAnalysisTask() {
    }, ContainingLibrariesTask: function ContainingLibrariesTask() {
    }, DartErrorsTask: function DartErrorsTask() {
    }, EvaluateUnitConstantsTask: function EvaluateUnitConstantsTask() {
    }, GatherUsedImportedElementsTask: function GatherUsedImportedElementsTask() {
    }, GatherUsedLocalElementsTask: function GatherUsedLocalElementsTask() {
    }, GenerateHintsTask: function GenerateHintsTask() {
    }, GenerateLintsTask: function GenerateLintsTask() {
    }, InferInstanceMembersInUnitTask: function InferInstanceMembersInUnitTask() {
    }, InferStaticVariableTask: function InferStaticVariableTask() {
    }, InferStaticVariableTypesInUnitTask: function InferStaticVariableTypesInUnitTask() {
    }, InferStaticVariableTypeTask: function InferStaticVariableTypeTask() {
    }, LibraryErrorsReadyTask: function LibraryErrorsReadyTask() {
    }, LibraryUnitErrorsTask: function LibraryUnitErrorsTask() {
    }, ParseDartTask: function ParseDartTask() {
    }, PartiallyResolveUnitReferencesTask: function PartiallyResolveUnitReferencesTask() {
    }, ReadyLibraryElement2Task: function ReadyLibraryElement2Task() {
    }, ReadyLibraryElement5Task: function ReadyLibraryElement5Task() {
    }, ReadyLibraryElement7Task: function ReadyLibraryElement7Task() {
    }, ReadyResolvedUnitTask: function ReadyResolvedUnitTask() {
    }, ResolveConstantExpressionTask: function ResolveConstantExpressionTask() {
    }, ResolveDirectiveElementsTask: function ResolveDirectiveElementsTask() {
    }, ResolvedUnit7InLibraryClosureTask: function ResolvedUnit7InLibraryClosureTask() {
    }, ResolvedUnit7InLibraryTask: function ResolvedUnit7InLibraryTask() {
    }, ResolveInstanceFieldsInUnitTask: function ResolveInstanceFieldsInUnitTask() {
    }, ResolveLibraryReferencesTask: function ResolveLibraryReferencesTask() {
    }, ResolveLibraryTask: function ResolveLibraryTask() {
    }, ResolveLibraryTypeNamesTask: function ResolveLibraryTypeNamesTask() {
    }, ResolveTopLevelLibraryTypeBoundsTask: function ResolveTopLevelLibraryTypeBoundsTask() {
    }, ResolveTopLevelUnitTypeBoundsTask: function ResolveTopLevelUnitTypeBoundsTask() {
    }, ResolveUnitTask: function ResolveUnitTask() {
    }, ResolveUnitTypeNamesTask: function ResolveUnitTypeNamesTask() {
    }, ResolveVariableReferencesTask: function ResolveVariableReferencesTask() {
    }, ScanDartTask: function ScanDartTask() {
    }, StrongModeVerifyUnitTask: function StrongModeVerifyUnitTask() {
    }, VerifyUnitTask: function VerifyUnitTask() {
    }, _ExportSourceClosureTaskInput: function _ExportSourceClosureTaskInput() {
    }, _NameOrSource0: function _NameOrSource0() {
    }, _SourceClosureKind: function _SourceClosureKind() {
    }, _SourceClosureTaskInputBuilder: function _SourceClosureTaskInputBuilder() {
    }, DelegatingSink: function DelegatingSink() {
    }, DelegatingStreamSink: function DelegatingStreamSink() {
    }, WorkerLoop: function WorkerLoop() {
    }, EmptyUnmodifiableSet: function EmptyUnmodifiableSet() {
    }, NoType: function NoType() {
    }, PrefixedType: function PrefixedType() {
    }, SimpleNullableTypeWith1Argument: function SimpleNullableTypeWith1Argument() {
    }, SimpleTypeWith1Argument: function SimpleTypeWith1Argument() {
    }, SimpleNullableType: function SimpleNullableType() {
    }, SimpleType: function SimpleType() {
    }, VoidType0: function VoidType0() {
    }, ComplexTypeInfo: function ComplexTypeInfo() {
    }, NoTypeParamOrArg: function NoTypeParamOrArg() {
    }, SimpleTypeArgument1: function SimpleTypeArgument1() {
    }, SimpleTypeArgument1GtEq: function SimpleTypeArgument1GtEq() {
    }, SimpleTypeArgument1GtGt: function SimpleTypeArgument1GtGt() {
    }, ComplexTypeParamOrArgInfo: function ComplexTypeParamOrArgInfo() {
    },
    Style__getPlatformStyle: function() {
      if (!J.$eq$(P.Uri_base().get$scheme(), "file"))
        return $.$get$Style_url();
      if (!J.endsWith$1$s(J.get$path$z(P.Uri_base()), "/"))
        return $.$get$Style_url();
      if (J.$eq$(P._Uri__Uri(null, "a/b", null, null).toFilePath$0(), "a\\b"))
        return $.$get$Style_windows();
      return $.$get$Style_posix();
    },
    Style: function Style() {
    },
    Pool: function Pool() {
    },
    PoolResource: function PoolResource() {
    },
    StackZoneSpecification: function StackZoneSpecification() {
    },
    _Node: function _Node() {
    },
    ResubscribableWatcher: function ResubscribableWatcher() {
    },
    ManuallyClosedWatcher: function ManuallyClosedWatcher() {
    },
    Scanner1: function Scanner1() {
    },
    _SimpleKey: function _SimpleKey() {
    },
    _Chomping: function _Chomping() {
    },
    ScalarStyle: function ScalarStyle() {
    },
    CollectionStyle: function CollectionStyle() {
    },
    mapStackTrace: function(sourceMap, stackTrace, roots) {
      H.interceptedTypeCheck(sourceMap, "$isMapping");
      H.interceptedTypeCheck(stackTrace, "$isStackTrace");
      H.assertSubtype(roots, "$isList", [P.String], "$asList");
      if (stackTrace instanceof U.Chain)
        return U.Chain$(J.map$1$1$ax(stackTrace.traces, new O.mapStackTrace_closure(sourceMap, roots), Y.Trace));
      return Y.Trace$(J.where$1$ax(J.map$1$1$ax(Y.Trace_Trace$from(stackTrace).get$frames(), new O.mapStackTrace_closure0(sourceMap, roots), A.Frame), new O.mapStackTrace_closure1()), null).foldFrames$1(new O.mapStackTrace_closure2());
    },
    _prettifyMember: function(member) {
      var last, suffix;
      H.stringTypeCheck(member);
      last = J.getInterceptor$s(member).lastIndexOf$1(member, ".");
      if (typeof last !== "number")
        return last.$lt();
      if (last < 0)
        return member;
      suffix = C.JSString_methods.substring$1(member, last + 1);
      return suffix === "fn" ? member : suffix;
    },
    mapStackTrace_closure: function mapStackTrace_closure(t0, t1, t2) {
      this.sourceMap = t0;
      this.roots = t1;
      this.$ti = t2;
    },
    mapStackTrace_closure0: function mapStackTrace_closure0(t0, t1, t2) {
      this.sourceMap = t0;
      this.roots = t1;
      this.$ti = t2;
    },
    mapStackTrace_closure1: function mapStackTrace_closure1(t0) {
      this.$ti = t0;
    },
    mapStackTrace_closure2: function mapStackTrace_closure2(t0) {
      this.$ti = t0;
    },
    binarySearch: function(list, matches) {
      var t1, max, min, half;
      H.listTypeCheck(list);
      H.functionTypeCheck(matches, {func: 1, ret: P.bool, args: [,]});
      t1 = J.getInterceptor$asx(list);
      if (J.$eq$(t1.get$length(list), 0))
        return -1;
      if (matches.call$1(t1.get$first(list)))
        return 0;
      if (!matches.call$1(t1.get$last(list)))
        return t1.get$length(list);
      max = J.$sub$n(t1.get$length(list), 1);
      min = 0;
      while (true) {
        if (typeof max !== "number")
          return H.iae(max);
        if (!(min < max))
          break;
        half = min + C.JSInt_methods._tdivFast$1(max - min, 2);
        if (matches.call$1(t1.$index(list, half)))
          max = half;
        else
          min = half + 1;
      }
      return max;
    }
  };
  var holders = [C, H, J, P, W, K, F, R, D, B, L, N, U, A, Y, G, V, Z, E, X, T, M, Q, S, O];
  hunkHelpers.setFunctionNamesIfNecessary(holders);
  var $ = {};
  H.ChromeObject.prototype = {};
  H.Rule.prototype = {};
  H.Event.prototype = {};
  H.API_ChromeApp.prototype = {};
  H.API_Chrome.prototype = {};
  H.AppWindowBounds.prototype = {};
  H.AppWindowCreateWindowOptions.prototype = {};
  H.AppWindowAppWindow.prototype = {};
  H.Event_app_window_onBoundsChanged.prototype = {};
  H.Event_app_window_onClosed.prototype = {};
  H.Event_app_window_onFullscreened.prototype = {};
  H.Event_app_window_onMaximized.prototype = {};
  H.Event_app_window_onMinimized.prototype = {};
  H.Event_app_window_onRestored.prototype = {};
  H.API_app_window.prototype = {};
  H.AppRuntimeLaunchItem.prototype = {};
  H.AppRuntimeLaunchData.prototype = {};
  H.Event_app_runtime_onLaunched.prototype = {};
  H.Event_app_runtime_onRestarted.prototype = {};
  H.API_app_runtime.prototype = {};
  H.FilesystemAcceptOption.prototype = {};
  H.FilesystemChooseEntryOptions.prototype = {};
  H.API_file_system.prototype = {};
  H.JS_CONST.prototype = {};
  H._CryptoUtils.prototype = {};
  H._HashBase.prototype = {};
  H._MD5.prototype = {};
  H._SHA1.prototype = {};
  H.HttpServer.prototype = {$isStream: 1,
    $asStream: function() {
      return [H.HttpRequest];
    }
  };
  H.HttpConnectionsInfo.prototype = {};
  H.HttpHeaders.prototype = {};
  H.HeaderValue.prototype = {};
  H.HttpSession.prototype = {$isMap: 1,
    $asMap: function() {
    }
  };
  H.ContentType.prototype = {$isHeaderValue: 1};
  H.Cookie.prototype = {};
  H.HttpRequest.prototype = {$isStream: 1,
    $asStream: function() {
      return [[P.List, P.int]];
    }
  };
  H.HttpResponse.prototype = {$isEventSink: 1,
    $asEventSink: function() {
      return [[P.List, P.int]];
    },
    $isStreamConsumer: 1,
    $asStreamConsumer: function() {
      return [[P.List, P.int]];
    },
    $isStreamSink: 1,
    $asStreamSink: function() {
      return [[P.List, P.int]];
    },
    $isSink: 1,
    $asSink: function() {
      return [[P.List, P.int]];
    },
    $isStringSink: 1,
    $isIOSink: 1
  };
  H.HttpClient.prototype = {};
  H.HttpClientRequest.prototype = {$isEventSink: 1,
    $asEventSink: function() {
      return [[P.List, P.int]];
    },
    $isStreamConsumer: 1,
    $asStreamConsumer: function() {
      return [[P.List, P.int]];
    },
    $isStreamSink: 1,
    $asStreamSink: function() {
      return [[P.List, P.int]];
    },
    $isSink: 1,
    $asSink: function() {
      return [[P.List, P.int]];
    },
    $isStringSink: 1,
    $isIOSink: 1
  };
  H.HttpClientResponse.prototype = {$isStream: 1,
    $asStream: function() {
      return [[P.List, P.int]];
    }
  };
  H.HttpClientCredentials.prototype = {};
  H.HttpClientBasicCredentials.prototype = {};
  H.HttpClientDigestCredentials.prototype = {};
  H.HttpConnectionInfo.prototype = {};
  H.RedirectInfo.prototype = {};
  H.DetachedSocket.prototype = {};
  H.HttpException.prototype = {$isException: 1, $isIOException: 1};
  H.RedirectException.prototype = {$isHttpException: 1, $isException: 1, $isIOException: 1};
  H.HttpDate.prototype = {};
  H._HttpHeaders.prototype = {$isHttpHeaders: 1};
  H._HeaderValue.prototype = {$isHeaderValue: 1};
  H._ContentType.prototype = {$isContentType: 1};
  H._Cookie.prototype = {$isCookie: 1};
  H._ServiceObject.prototype = {};
  H._CopyingBytesBuilder.prototype = {$isBytesBuilder: 1};
  H._HttpIncoming.prototype = {
    $asStream: function() {
      return [[P.List, P.int]];
    }
  };
  H._HttpInboundMessage.prototype = {
    $asStream: function() {
      return [[P.List, P.int]];
    }
  };
  H._HttpRequest.prototype = {$isHttpRequest: 1};
  H._HttpClientResponse.prototype = {$isHttpClientResponse: 1};
  H._StreamSinkImpl.prototype = {$isEventSink: 1, $isStreamConsumer: 1, $isStreamSink: 1, $isSink: 1};
  H._IOSinkImpl.prototype = {
    $as_StreamSinkImpl: function() {
      return [[P.List, P.int]];
    },
    $asEventSink: function() {
      return [[P.List, P.int]];
    },
    $asStreamConsumer: function() {
      return [[P.List, P.int]];
    },
    $asStreamSink: function() {
      return [[P.List, P.int]];
    },
    $asSink: function() {
      return [[P.List, P.int]];
    },
    $isStringSink: 1,
    $isIOSink: 1
  };
  H._HttpOutboundMessage.prototype = {};
  H._HttpResponse.prototype = {$isHttpResponse: 1,
    $as_StreamSinkImpl: function() {
      return [[P.List, P.int]];
    },
    $as_HttpOutboundMessage: function() {
      return [H.HttpResponse];
    },
    $asEventSink: function() {
      return [[P.List, P.int]];
    },
    $asStreamConsumer: function() {
      return [[P.List, P.int]];
    },
    $asStreamSink: function() {
      return [[P.List, P.int]];
    },
    $asSink: function() {
      return [[P.List, P.int]];
    }
  };
  H._HttpClientRequest.prototype = {$isHttpClientRequest: 1,
    $as_StreamSinkImpl: function() {
      return [[P.List, P.int]];
    },
    $as_HttpOutboundMessage: function() {
      return [H.HttpClientResponse];
    },
    $asEventSink: function() {
      return [[P.List, P.int]];
    },
    $asStreamConsumer: function() {
      return [[P.List, P.int]];
    },
    $asStreamSink: function() {
      return [[P.List, P.int]];
    },
    $asSink: function() {
      return [[P.List, P.int]];
    }
  };
  H._HttpGZipSink.prototype = {};
  H._HttpOutgoing.prototype = {$isStreamConsumer: 1,
    $asStreamConsumer: function() {
      return [[P.List, P.int]];
    }
  };
  H._HttpClientConnection.prototype = {};
  H._ConnectionInfo.prototype = {};
  H._ConnectionTarget.prototype = {};
  H._HttpClient.prototype = {$isHttpClient: 1};
  H._HttpConnection.prototype = {$is_ServiceObject: 1,
    $asLinkedListEntry: function() {
      return [H._HttpConnection];
    }
  };
  H._HttpServer.prototype = {$isHttpServer: 1, $is_ServiceObject: 1,
    $asStream: function() {
      return [H.HttpRequest];
    }
  };
  H._ProxyConfiguration.prototype = {};
  H._Proxy.prototype = {};
  H._HttpConnectionInfo.prototype = {$isHttpConnectionInfo: 1};
  H._DetachedSocket.prototype = {
    $asStream: function() {
      return [[P.List, P.int]];
    },
    $isEventSink: 1,
    $asEventSink: function() {
      return [[P.List, P.int]];
    },
    $isStreamConsumer: 1,
    $asStreamConsumer: function() {
      return [[P.List, P.int]];
    },
    $isStreamSink: 1,
    $asStreamSink: function() {
      return [[P.List, P.int]];
    },
    $isSink: 1,
    $asSink: function() {
      return [[P.List, P.int]];
    },
    $isStringSink: 1,
    $isIOSink: 1,
    $isSocket: 1
  };
  H._AuthenticationScheme.prototype = {};
  H._Credentials.prototype = {};
  H._SiteCredentials.prototype = {};
  H._ProxyCredentials.prototype = {};
  H._HttpClientCredentials.prototype = {$isHttpClientCredentials: 1};
  H._HttpClientBasicCredentials.prototype = {$isHttpClientBasicCredentials: 1};
  H._HttpClientDigestCredentials.prototype = {$isHttpClientDigestCredentials: 1};
  H._RedirectInfo.prototype = {$isRedirectInfo: 1};
  H._Const.prototype = {};
  H._CharCode.prototype = {};
  H._State.prototype = {};
  H._HttpVersion.prototype = {};
  H._MessageType.prototype = {};
  H._HttpDetachedStreamSubscription.prototype = {$isStreamSubscription: 1,
    $asStreamSubscription: function() {
      return [[P.List, P.int]];
    }
  };
  H._HttpDetachedIncoming.prototype = {
    $asStream: function() {
      return [[P.List, P.int]];
    }
  };
  H._HttpParser.prototype = {
    $asStream: function() {
      return [H._HttpIncoming];
    }
  };
  H._HttpSession.prototype = {$isHttpSession: 1, $isMap: 1,
    $asMap: function() {
    }
  };
  H._HttpSessionManager.prototype = {};
  H.HttpOverrides.prototype = {};
  H._HttpOverridesScope.prototype = {};
  H.WebSocketStatus.prototype = {};
  H.CompressionOptions.prototype = {};
  H.WebSocketTransformer.prototype = {$isStreamTransformer: 1,
    $asStreamTransformer: function() {
      return [H.HttpRequest, H.WebSocket];
    }
  };
  H.WebSocket.prototype = {$isStream: 1,
    $asStream: function() {
    },
    $isEventSink: 1,
    $asEventSink: function() {
    },
    $isStreamConsumer: 1,
    $asStreamConsumer: function() {
    },
    $isStreamSink: 1,
    $asStreamSink: function() {
    },
    $isSink: 1,
    $asSink: function() {
    }
  };
  H.WebSocketException.prototype = {$isException: 1, $isIOException: 1};
  H._WebSocketMessageType.prototype = {};
  H._WebSocketOpcode.prototype = {};
  H._EncodedString.prototype = {};
  H._CompressionMaxWindowBits.prototype = {};
  H._WebSocketProtocolTransformer.prototype = {$isEventSink: 1,
    $asEventSink: function() {
      return [[P.List, P.int]];
    },
    $asStreamTransformer: function() {
      return [[P.List, P.int], null];
    },
    $asStreamTransformerBase: function() {
      return [[P.List, P.int], null];
    },
    $isSink: 1,
    $asSink: function() {
      return [[P.List, P.int]];
    }
  };
  H._WebSocketPing.prototype = {};
  H._WebSocketPong.prototype = {};
  H._WebSocketTransformerImpl.prototype = {$isWebSocketTransformer: 1,
    $asStreamTransformer: function() {
      return [H.HttpRequest, H.WebSocket];
    },
    $asStreamTransformerBase: function() {
      return [H.HttpRequest, H.WebSocket];
    }
  };
  H._WebSocketPerMessageDeflate.prototype = {};
  H._WebSocketOutgoingTransformer.prototype = {$isEventSink: 1,
    $asEventSink: function() {
    },
    $asStreamTransformer: function() {
      return [null, [P.List, P.int]];
    },
    $asStreamTransformerBase: function() {
      return [null, [P.List, P.int]];
    },
    $isSink: 1,
    $asSink: function() {
    }
  };
  H._WebSocketConsumer.prototype = {$isStreamConsumer: 1,
    $asStreamConsumer: function() {
    }
  };
  H._WebSocketImpl.prototype = {$is_ServiceObject: 1, $isWebSocket: 1,
    $asStream: function() {
    },
    $isEventSink: 1,
    $asEventSink: function() {
    },
    $isStreamConsumer: 1,
    $asStreamConsumer: function() {
    },
    $isStreamSink: 1,
    $asStreamSink: function() {
    },
    $isSink: 1,
    $asSink: function() {
    }
  };
  H.__HttpConnection_LinkedListEntry__ServiceObject.prototype = {$is_ServiceObject: 1,
    $asLinkedListEntry: function() {
      return [H._HttpConnection];
    }
  };
  H.__HttpServer_Stream__ServiceObject.prototype = {$is_ServiceObject: 1,
    $asStream: function() {
      return [H.HttpRequest];
    }
  };
  H.__WebSocketImpl_Stream__ServiceObject.prototype = {$is_ServiceObject: 1,
    $asStream: function() {
    }
  };
  J.Interceptor.prototype = {
    $eq: function(receiver, other) {
      return receiver === other;
    },
    get$hashCode: function(receiver) {
      return H.Primitives_objectHashCode(receiver);
    },
    toString$0: function(receiver) {
      return H.Primitives_objectToHumanReadableString(receiver);
    },
    noSuchMethod$1: function(receiver, invocation) {
      H.interceptedTypeCheck(invocation, "$isInvocation");
      throw H.wrapException(P.NoSuchMethodError$(receiver, invocation.get$memberName(), invocation.get$positionalArguments(), invocation.get$namedArguments()));
    }
  };
  J.JSBool.prototype = {
    toString$0: function(receiver) {
      return String(receiver);
    },
    $and: function(receiver, other) {
      return H.checkBool(H.boolTypeCheck(other)) && receiver;
    },
    get$hashCode: function(receiver) {
      return receiver ? 519018 : 218159;
    },
    $isbool: 1
  };
  J.JSNull.prototype = {
    $eq: function(receiver, other) {
      return null == other;
    },
    toString$0: function(receiver) {
      return "null";
    },
    get$hashCode: function(receiver) {
      return 0;
    },
    noSuchMethod$1: function(receiver, invocation) {
      return this.super$Interceptor$noSuchMethod(receiver, H.interceptedTypeCheck(invocation, "$isInvocation"));
    },
    $isNull: 1
  };
  J.JSIndexable.prototype = {};
  J.JSMutableIndexable.prototype = {};
  J.JSObject.prototype = {};
  J.JavaScriptObject.prototype = {
    get$hashCode: function(receiver) {
      return 0;
    },
    toString$0: function(receiver) {
      return String(receiver);
    },
    $isJSObject: 1,
    $isDartStackTraceUtility: 1
  };
  J.PlainJavaScriptObject.prototype = {};
  J.UnknownJavaScriptObject.prototype = {};
  J.JavaScriptFunction.prototype = {
    toString$0: function(receiver) {
      var dartClosure = receiver[$.$get$DART_CLOSURE_PROPERTY_NAME()];
      if (dartClosure == null)
        return this.super$JavaScriptObject$toString(receiver);
      return "JavaScript function for " + H.S(J.toString$0$(dartClosure));
    },
    $signature: function() {
      return {func: 1, opt: [,,,,,,,,,,,,,,,,]};
    },
    $isFunction: 1
  };
  J._Growable.prototype = {};
  J.JSArray.prototype = {
    checkMutable$1: function(receiver, reason) {
      if (!!receiver.immutable$list)
        throw H.wrapException(P.UnsupportedError$(H.stringTypeCheck(reason)));
    },
    checkGrowable$1: function(receiver, reason) {
      if (!!receiver.fixed$length)
        throw H.wrapException(P.UnsupportedError$(H.stringTypeCheck(reason)));
    },
    cast$1$0: function(receiver, $R) {
      return P.List_castFrom(receiver, H.getTypeArgumentByIndex(receiver, 0), $R);
    },
    cast$0: function($receiver) {
      return this.cast$1$0($receiver, null);
    },
    add$1: function(receiver, value) {
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(receiver, 0));
      this.checkGrowable$1(receiver, "add");
      receiver.push(value);
    },
    removeAt$1: function(receiver, index) {
      H.intTypeCheck(index);
      this.checkGrowable$1(receiver, "removeAt");
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(H.argumentErrorValue(index));
      if (index < 0 || index >= receiver.length)
        throw H.wrapException(P.RangeError$value(index, null));
      return receiver.splice(index, 1)[0];
    },
    insert$2: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(receiver, 0));
      this.checkGrowable$1(receiver, "insert");
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(H.argumentErrorValue(index));
      if (index < 0 || index > receiver.length)
        throw H.wrapException(P.RangeError$value(index, null));
      receiver.splice(index, 0, value);
    },
    insertAll$2: function(receiver, index, iterable) {
      var t1, insertionLength, end, _this = this;
      H.intTypeCheck(index);
      H.assertSubtype(iterable, "$isIterable", [H.getTypeArgumentByIndex(receiver, 0)], "$asIterable");
      _this.checkGrowable$1(receiver, "insertAll");
      P.RangeError_checkValueInInterval(index, 0, receiver.length, "index");
      t1 = J.getInterceptor$(iterable);
      if (!t1.$isEfficientLengthIterable)
        iterable = t1.toList$0(iterable);
      insertionLength = J.get$length$asx(iterable);
      t1 = receiver.length;
      if (typeof insertionLength !== "number")
        return H.iae(insertionLength);
      _this.set$length(receiver, t1 + insertionLength);
      if (typeof index !== "number")
        return index.$add();
      end = index + insertionLength;
      _this.setRange$4(receiver, end, receiver.length, receiver, index);
      _this.setRange$3(receiver, index, end, iterable);
    },
    setAll$2: function(receiver, index, iterable) {
      var t1, element, index0;
      H.intTypeCheck(index);
      H.assertSubtype(iterable, "$isIterable", [H.getTypeArgumentByIndex(receiver, 0)], "$asIterable");
      this.checkMutable$1(receiver, "setAll");
      P.RangeError_checkValueInInterval(index, 0, receiver.length, "index");
      for (t1 = J.get$iterator$ax(iterable); t1.moveNext$0(); index = index0) {
        element = t1.get$current();
        if (typeof index !== "number")
          return index.$add();
        index0 = index + 1;
        this.$indexSet(receiver, index, element);
      }
    },
    removeLast$0: function(receiver) {
      this.checkGrowable$1(receiver, "removeLast");
      if (receiver.length === 0)
        throw H.wrapException(H.diagnoseIndexError(receiver, -1));
      return receiver.pop();
    },
    where$1: function(receiver, f) {
      var t1 = H.getTypeArgumentByIndex(receiver, 0);
      return H.WhereIterable$(receiver, H.functionTypeCheck(f, {func: 1, ret: P.bool, args: [t1]}), t1);
    },
    expand$1$1: function(receiver, f, $T) {
      var t1 = H.getTypeArgumentByIndex(receiver, 0);
      return H.ExpandIterable$(receiver, H.functionTypeCheck(f, {func: 1, ret: [P.Iterable, $T], args: [t1]}), t1, $T);
    },
    expand$1: function($receiver, f) {
      return this.expand$1$1($receiver, f, null);
    },
    addAll$1: function(receiver, collection) {
      var t1;
      H.assertSubtype(collection, "$isIterable", [H.getTypeArgumentByIndex(receiver, 0)], "$asIterable");
      this.checkGrowable$1(receiver, "addAll");
      for (t1 = J.get$iterator$ax(collection); t1.moveNext$0();)
        receiver.push(t1.get$current());
    },
    clear$0: function(receiver) {
      this.set$length(receiver, 0);
    },
    forEach$1: function(receiver, f) {
      var end, i;
      H.functionTypeCheck(f, {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(receiver, 0)]});
      end = receiver.length;
      for (i = 0; i < end; ++i) {
        f.call$1(receiver[i]);
        if (receiver.length !== end)
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
    },
    map$1$1: function(receiver, f, $T) {
      var t1 = H.getTypeArgumentByIndex(receiver, 0);
      return H.MappedListIterable$(receiver, H.functionTypeCheck(f, {func: 1, ret: $T, args: [t1]}), t1, $T);
    },
    map$1: function($receiver, f) {
      return this.map$1$1($receiver, f, null);
    },
    join$1: function(receiver, separator) {
      var list, i;
      H.stringTypeCheck(separator);
      list = new Array(receiver.length);
      list.fixed$length = Array;
      for (i = 0; i < receiver.length; ++i)
        this.$indexSet(list, i, H.S(receiver[i]));
      return list.join(separator);
    },
    join$0: function($receiver) {
      return this.join$1($receiver, "");
    },
    take$1: function(receiver, n) {
      return H.SubListIterable$(receiver, 0, H.intTypeCheck(n), H.getTypeArgumentByIndex(receiver, 0));
    },
    skip$1: function(receiver, n) {
      return H.SubListIterable$(receiver, H.intTypeCheck(n), null, H.getTypeArgumentByIndex(receiver, 0));
    },
    skipWhile$1: function(receiver, test) {
      var t1 = H.getTypeArgumentByIndex(receiver, 0);
      return H.SkipWhileIterable$(receiver, H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [t1]}), t1);
    },
    fold$1$2: function(receiver, initialValue, combine, $T) {
      var $length, value, i;
      H.assertSubtypeOfRuntimeType(initialValue, $T);
      H.functionTypeCheck(combine, {func: 1, ret: $T, args: [$T, H.getTypeArgumentByIndex(receiver, 0)]});
      $length = receiver.length;
      for (value = initialValue, i = 0; i < $length; ++i) {
        value = combine.call$2(value, receiver[i]);
        if (receiver.length !== $length)
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
      return value;
    },
    fold$2: function($receiver, initialValue, combine) {
      return this.fold$1$2($receiver, initialValue, combine, null);
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, H.intTypeCheck(index));
    },
    sublist$2: function(receiver, start, end) {
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      H.checkNull(start);
      if (typeof start !== "number" || Math.floor(start) !== start)
        throw H.wrapException(H.argumentErrorValue(start));
      if (start < 0 || start > receiver.length)
        throw H.wrapException(P.RangeError$range(start, 0, receiver.length, "start", null));
      if (end == null)
        end = receiver.length;
      else if (end < start || end > receiver.length)
        throw H.wrapException(P.RangeError$range(end, start, receiver.length, "end", null));
      if (start === end)
        return H.setRuntimeTypeInfo([], [H.getTypeArgumentByIndex(receiver, 0)]);
      return J.JSArray_JSArray$markGrowable(receiver.slice(start, end), H.getTypeArgumentByIndex(receiver, 0));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(H.IterableElementError_noElement());
    },
    get$last: function(receiver) {
      var t1 = receiver.length;
      if (t1 > 0)
        return receiver[t1 - 1];
      throw H.wrapException(H.IterableElementError_noElement());
    },
    setRange$4: function(receiver, start, end, iterable, skipCount) {
      var t1, $length, t2, otherStart, otherList, i;
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      t1 = H.getTypeArgumentByIndex(receiver, 0);
      H.assertSubtype(iterable, "$isIterable", [t1], "$asIterable");
      H.intTypeCheck(skipCount);
      this.checkMutable$1(receiver, "setRange");
      P.RangeError_checkValidRange(start, end, receiver.length);
      if (typeof end !== "number")
        return end.$sub();
      if (typeof start !== "number")
        return H.iae(start);
      $length = end - start;
      if ($length === 0)
        return;
      P.RangeError_checkNotNegative(skipCount, "skipCount");
      t2 = J.getInterceptor$(iterable);
      if (!!t2.$isList) {
        H.assertSubtype(iterable, "$isList", [t1], "$asList");
        otherStart = skipCount;
        otherList = iterable;
      } else {
        otherList = J.toList$1$growable$ax(t2.skip$1(iterable, skipCount), false);
        otherStart = 0;
      }
      if (typeof otherStart !== "number")
        return otherStart.$add();
      t1 = J.getInterceptor$asx(otherList);
      t2 = t1.get$length(otherList);
      if (typeof t2 !== "number")
        return H.iae(t2);
      if (otherStart + $length > t2)
        throw H.wrapException(H.IterableElementError_tooFew());
      if (otherStart < start)
        for (i = $length - 1; i >= 0; --i)
          receiver[start + i] = t1.$index(otherList, otherStart + i);
      else
        for (i = 0; i < $length; ++i)
          receiver[start + i] = t1.$index(otherList, otherStart + i);
    },
    setRange$3: function($receiver, start, end, iterable) {
      return this.setRange$4($receiver, start, end, iterable, 0);
    },
    replaceRange$3: function(receiver, start, end, replacement) {
      var t1, removeLength, insertLength, insertEnd, delta, newLength, _this = this;
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      H.assertSubtype(replacement, "$isIterable", [H.getTypeArgumentByIndex(receiver, 0)], "$asIterable");
      _this.checkGrowable$1(receiver, "replaceRange");
      P.RangeError_checkValidRange(start, end, receiver.length);
      t1 = J.getInterceptor$(replacement);
      if (!t1.$isEfficientLengthIterable)
        replacement = t1.toList$0(replacement);
      if (typeof end !== "number")
        return end.$sub();
      if (typeof start !== "number")
        return H.iae(start);
      removeLength = end - start;
      insertLength = J.get$length$asx(replacement);
      if (typeof insertLength !== "number")
        return H.iae(insertLength);
      t1 = receiver.length;
      insertEnd = start + insertLength;
      if (removeLength >= insertLength) {
        delta = removeLength - insertLength;
        newLength = t1 - delta;
        _this.setRange$3(receiver, start, insertEnd, replacement);
        if (delta !== 0) {
          _this.setRange$4(receiver, insertEnd, newLength, receiver, end);
          _this.set$length(receiver, newLength);
        }
      } else {
        newLength = t1 + (insertLength - removeLength);
        _this.set$length(receiver, newLength);
        _this.setRange$4(receiver, insertEnd, newLength, receiver, end);
        _this.setRange$3(receiver, start, insertEnd, replacement);
      }
    },
    get$reversed: function(receiver) {
      return H.ReversedListIterable$(receiver, H.getTypeArgumentByIndex(receiver, 0));
    },
    contains$1: function(receiver, other) {
      var i;
      for (i = 0; i < receiver.length; ++i)
        if (J.$eq$(receiver[i], other))
          return true;
      return false;
    },
    get$isEmpty: function(receiver) {
      return receiver.length === 0;
    },
    get$isNotEmpty: function(receiver) {
      return !this.get$isEmpty(receiver);
    },
    toString$0: function(receiver) {
      return P.ListBase_listToString(receiver);
    },
    toList$1$growable: function(receiver, growable) {
      return H.boolTypeCheck(growable) ? this._toListGrowable$0(receiver) : this._toListFixed$0(receiver);
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    _toListGrowable$0: function(receiver) {
      return J.JSArray_JSArray$markGrowable(receiver.slice(0), H.getTypeArgumentByIndex(receiver, 0));
    },
    _toListFixed$0: function(receiver) {
      return J.JSArray_JSArray$markFixed(receiver.slice(0), H.getTypeArgumentByIndex(receiver, 0));
    },
    get$iterator: function(receiver) {
      return J.ArrayIterator$(receiver, H.getTypeArgumentByIndex(receiver, 0));
    },
    get$hashCode: function(receiver) {
      return H.Primitives_objectHashCode(receiver);
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    set$length: function(receiver, newLength) {
      var _s9_ = "newLength";
      H.intTypeCheck(newLength);
      this.checkGrowable$1(receiver, "set length");
      if (typeof newLength !== "number" || Math.floor(newLength) !== newLength)
        throw H.wrapException(P.ArgumentError$value(newLength, _s9_, null));
      if (newLength < 0)
        throw H.wrapException(P.RangeError$range(newLength, 0, null, _s9_, null));
      receiver.length = newLength;
    },
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      if (index >= receiver.length || index < 0)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(receiver, 0));
      this.checkMutable$1(receiver, "indexed set");
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      if (index >= receiver.length || index < 0)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      receiver[index] = value;
    },
    followedBy$1: function(receiver, other) {
      var t1 = H.getTypeArgumentByIndex(receiver, 0);
      return H.FollowedByIterable_FollowedByIterable$firstEfficient(receiver, H.assertSubtype(other, "$isIterable", [t1], "$asIterable"), t1);
    },
    $add: function(receiver, other) {
      var t2, t3, totalLength,
        t1 = [H.getTypeArgumentByIndex(receiver, 0)];
      H.assertSubtype(other, "$isList", t1, "$asList");
      t2 = receiver.length;
      t3 = J.get$length$asx(other);
      if (typeof t3 !== "number")
        return H.iae(t3);
      totalLength = t2 + t3;
      t1 = H.setRuntimeTypeInfo([], t1);
      this.set$length(t1, totalLength);
      this.setRange$3(t1, 0, receiver.length, receiver);
      this.setRange$3(t1, receiver.length, totalLength, other);
      return t1;
    },
    $isJSIndexable: 1,
    $asJSIndexable: function() {
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  J.JSUnmodifiableArray.prototype = {};
  J.ArrayIterator.prototype = {
    get$current: function() {
      return this._current;
    },
    moveNext$0: function() {
      var _this = this,
        t1 = _this._iterable,
        t2 = J.getInterceptor$asx(t1),
        $length = t2.get$length(t1);
      if (!J.$eq$(_this._length, $length))
        throw H.wrapException(H.throwConcurrentModificationError(t1));
      if (J.$ge$n(_this._index, $length)) {
        _this.set$_current(null);
        return false;
      }
      _this.set$_current(t2.$index(t1, _this._index));
      _this._index = H.intTypeCheck(J.$add$ansx(_this._index, 1));
      return true;
    },
    set$_current: function(_current) {
      this._current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 0));
    },
    $isIterator: 1
  };
  J.JSNumber.prototype = {
    get$isFinite: function(receiver) {
      return isFinite(receiver);
    },
    abs$0: function(receiver) {
      return Math.abs(receiver);
    },
    toRadixString$1: function(receiver, radix) {
      var result;
      H.intTypeCheck(radix);
      H.checkInt(radix);
      if (typeof radix !== "number")
        return radix.$lt();
      if (radix < 2 || radix > 36)
        throw H.wrapException(P.RangeError$range(radix, 2, 36, "radix", null));
      result = receiver.toString(radix);
      if (!J.$eq$(C.JSString_methods.codeUnitAt$1(result, result.length - 1), 41))
        return result;
      return J.JSNumber__handleIEtoString(result);
    },
    toString$0: function(receiver) {
      if (receiver === 0 && 1 / receiver < 0)
        return "-0.0";
      else
        return "" + receiver;
    },
    get$hashCode: function(receiver) {
      var absolute, floorLog2, factor, scaled,
        intValue = receiver | 0;
      if (receiver === intValue)
        return 536870911 & intValue;
      absolute = Math.abs(receiver);
      floorLog2 = Math.log(absolute) / 0.6931471805599453 | 0;
      factor = Math.pow(2, floorLog2);
      scaled = absolute < 1 ? absolute / factor : factor / absolute;
      return 536870911 & ((scaled * 9007199254740992 | 0) + (scaled * 3542243181176521 | 0)) * 599197 + floorLog2 * 1259;
    },
    $negate: function(receiver) {
      return -receiver;
    },
    $add: function(receiver, other) {
      H.numTypeCheck(other);
      if (typeof other !== "number")
        throw H.wrapException(H.argumentErrorValue(other));
      return receiver + other;
    },
    $sub: function(receiver, other) {
      H.numTypeCheck(other);
      if (typeof other !== "number")
        throw H.wrapException(H.argumentErrorValue(other));
      return receiver - other;
    },
    $mul: function(receiver, other) {
      H.numTypeCheck(other);
      if (typeof other !== "number")
        throw H.wrapException(H.argumentErrorValue(other));
      return receiver * other;
    },
    $mod: function(receiver, other) {
      var result;
      H.numTypeCheck(other);
      if (typeof other !== "number")
        throw H.wrapException(H.argumentErrorValue(other));
      result = receiver % other;
      if (result === 0)
        return 0;
      if (result > 0)
        return result;
      if (other < 0)
        return result - other;
      else
        return result + other;
    },
    _isInt32$1: function(receiver, value) {
      return (value | 0) === value;
    },
    _tdivFast$1: function(receiver, other) {
      H.numTypeCheck(other);
      return this._isInt32$1(receiver, receiver) ? receiver / other | 0 : this._tdivSlow$1(receiver, other);
    },
    _tdivSlow$1: function(receiver, other) {
      var quotient;
      H.numTypeCheck(other);
      quotient = receiver / other;
      if (quotient >= -2147483648 && quotient <= 2147483647)
        return quotient | 0;
      if (quotient > 0) {
        if (quotient !== 1 / 0)
          return Math.floor(quotient);
      } else if (quotient > -1 / 0)
        return Math.ceil(quotient);
      throw H.wrapException(P.UnsupportedError$("Result of truncating division is " + H.S(quotient) + ": " + H.S(receiver) + " ~/ " + H.S(other)));
    },
    $shl: function(receiver, other) {
      H.numTypeCheck(other);
      if (typeof other !== "number")
        throw H.wrapException(H.argumentErrorValue(other));
      if (other < 0)
        throw H.wrapException(H.argumentErrorValue(other));
      return this._shlPositive$1(receiver, other);
    },
    _shlPositive$1: function(receiver, other) {
      H.numTypeCheck(other);
      return other > 31 ? 0 : receiver << other >>> 0;
    },
    $shr: function(receiver, other) {
      H.numTypeCheck(other);
      if (typeof other !== "number")
        throw H.wrapException(H.argumentErrorValue(other));
      if (other < 0)
        throw H.wrapException(H.argumentErrorValue(other));
      return this._shrOtherPositive$1(receiver, other);
    },
    _shrOtherPositive$1: function(receiver, other) {
      var t1;
      H.numTypeCheck(other);
      if (receiver > 0)
        t1 = this._shrBothPositive$1(receiver, other);
      else {
        if (typeof other !== "number")
          return other.$gt();
        if (other > 31)
          t1 = 31;
        else
          t1 = other;
        t1 = receiver >> t1 >>> 0;
      }
      return t1;
    },
    _shrBothPositive$1: function(receiver, other) {
      H.numTypeCheck(other);
      return other > 31 ? 0 : receiver >>> other;
    },
    $and: function(receiver, other) {
      H.numTypeCheck(other);
      if (typeof other !== "number")
        throw H.wrapException(H.argumentErrorValue(other));
      return (receiver & other) >>> 0;
    },
    $or: function(receiver, other) {
      H.numTypeCheck(other);
      if (typeof other !== "number")
        throw H.wrapException(H.argumentErrorValue(other));
      return (receiver | other) >>> 0;
    },
    $xor: function(receiver, other) {
      H.numTypeCheck(other);
      if (typeof other !== "number")
        throw H.wrapException(H.argumentErrorValue(other));
      return (receiver ^ other) >>> 0;
    },
    $lt: function(receiver, other) {
      H.numTypeCheck(other);
      if (typeof other !== "number")
        throw H.wrapException(H.argumentErrorValue(other));
      return receiver < other;
    },
    $gt: function(receiver, other) {
      H.numTypeCheck(other);
      if (typeof other !== "number")
        throw H.wrapException(H.argumentErrorValue(other));
      return receiver > other;
    },
    $le: function(receiver, other) {
      H.numTypeCheck(other);
      if (typeof other !== "number")
        throw H.wrapException(H.argumentErrorValue(other));
      return receiver <= other;
    },
    $ge: function(receiver, other) {
      H.numTypeCheck(other);
      if (typeof other !== "number")
        throw H.wrapException(H.argumentErrorValue(other));
      return receiver >= other;
    },
    $isComparable: 1,
    $asComparable: function() {
      return [P.num];
    },
    $isdouble: 1,
    $isnum: 1
  };
  J.JSInt.prototype = {
    abs$0: function(receiver) {
      return Math.abs(receiver);
    },
    $negate: function(receiver) {
      return -receiver;
    },
    get$isOdd: function(receiver) {
      return (receiver & 1) === 1;
    },
    $not: function(receiver) {
      return ~receiver >>> 0;
    },
    $isint: 1
  };
  J.JSDouble.prototype = {};
  J.JSString.prototype = {
    codeUnitAt$1: function(receiver, index) {
      H.intTypeCheck(index);
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      if (index < 0)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      return this._codeUnitAt$1(receiver, index);
    },
    _codeUnitAt$1: function(receiver, index) {
      H.intTypeCheck(index);
      if (typeof index !== "number")
        return index.$ge();
      if (index >= receiver.length)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      return receiver.charCodeAt(index);
    },
    allMatches$2: function(receiver, string, start) {
      H.stringTypeCheck(string);
      H.intTypeCheck(start);
      H.checkString(string);
      H.checkInt(start);
      if (typeof start !== "number")
        return H.iae(start);
      if (0 > start || start > string.length)
        throw H.wrapException(P.RangeError$range(start, 0, string.length, null, null));
      return H.allMatchesInStringUnchecked(receiver, string, start);
    },
    allMatches$1: function($receiver, string) {
      return this.allMatches$2($receiver, string, 0);
    },
    matchAsPrefix$2: function(receiver, string, start) {
      var t1, t2, i;
      H.stringTypeCheck(string);
      H.intTypeCheck(start);
      if (typeof start !== "number")
        return start.$lt();
      if (start < 0 || start > string.length)
        throw H.wrapException(P.RangeError$range(start, 0, string.length, null, null));
      t1 = receiver.length;
      if (start + t1 > string.length)
        return;
      for (t2 = J.getInterceptor$s(string), i = 0; i < t1; ++i)
        if (!J.$eq$(t2.codeUnitAt$1(string, start + i), this._codeUnitAt$1(receiver, i)))
          return;
      return H.StringMatch$(start, string, receiver);
    },
    $add: function(receiver, other) {
      H.stringTypeCheck(other);
      if (typeof other !== "string")
        throw H.wrapException(P.ArgumentError$value(other, null, null));
      return receiver + other;
    },
    endsWith$1: function(receiver, other) {
      var otherLength, t1;
      H.stringTypeCheck(other);
      H.checkString(other);
      otherLength = other.length;
      t1 = receiver.length;
      if (otherLength > t1)
        return false;
      t1 = this.substring$1(receiver, t1 - otherLength);
      return other == null ? t1 == null : other === t1;
    },
    replaceAll$2: function(receiver, from, to) {
      return H.stringTypeCheck(H.stringReplaceAllUnchecked(receiver, H.stringSuperNativeTypeCheck(from, "$isPattern"), H.checkString(H.stringTypeCheck(to))));
    },
    replaceFirst$2: function(receiver, from, to) {
      H.stringSuperNativeTypeCheck(from, "$isPattern");
      H.stringTypeCheck(to);
      H.checkString(to);
      P.RangeError_checkValueInInterval(0, 0, receiver.length, "startIndex");
      return H.stringTypeCheck(H.stringReplaceFirstUnchecked(receiver, from, to, 0));
    },
    split$1: function(receiver, pattern) {
      H.stringSuperNativeTypeCheck(pattern, "$isPattern");
      H.checkNull(pattern);
      if (typeof pattern === "string")
        return H.stringSplitUnchecked(receiver, pattern);
      else if (pattern instanceof H.JSSyntaxRegExp && J.$eq$(H.regExpCaptureCount(pattern), 0))
        return H.stringSplitUnchecked(receiver, H.regExpGetNative(pattern));
      else
        return this._defaultSplit$1(receiver, pattern);
    },
    replaceRange$3: function(receiver, start, end, replacement) {
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      H.stringTypeCheck(replacement);
      H.checkString(replacement);
      H.checkInt(start);
      end = P.RangeError_checkValidRange(start, end, receiver.length);
      H.checkInt(end);
      return H.stringReplaceRangeUnchecked(receiver, start, end, replacement);
    },
    _defaultSplit$1: function(receiver, pattern) {
      var result, t1, start, $length, t2, matchStart, matchEnd;
      H.stringSuperNativeTypeCheck(pattern, "$isPattern");
      result = H.setRuntimeTypeInfo([], [P.String]);
      for (t1 = J.get$iterator$ax(J.allMatches$1$s(pattern, receiver)), start = 0, $length = 1; t1.moveNext$0();) {
        t2 = t1.get$current();
        matchStart = t2.get$start();
        matchEnd = t2.get$end();
        if (typeof matchEnd !== "number")
          return matchEnd.$sub();
        if (typeof matchStart !== "number")
          return H.iae(matchStart);
        $length = matchEnd - matchStart;
        if ($length === 0 && start === matchStart)
          continue;
        C.JSArray_methods.add$1(result, this.substring$2(receiver, start, matchStart));
        start = matchEnd;
      }
      if (start < receiver.length || $length > 0)
        C.JSArray_methods.add$1(result, this.substring$1(receiver, start));
      return result;
    },
    startsWith$2: function(receiver, pattern, index) {
      var endIndex;
      H.stringSuperNativeTypeCheck(pattern, "$isPattern");
      H.intTypeCheck(index);
      H.checkInt(index);
      if (typeof index !== "number")
        return index.$lt();
      if (index < 0 || index > receiver.length)
        throw H.wrapException(P.RangeError$range(index, 0, receiver.length, null, null));
      if (typeof pattern === "string") {
        endIndex = index + pattern.length;
        if (endIndex > receiver.length)
          return false;
        return pattern === receiver.substring(index, endIndex);
      }
      return J.matchAsPrefix$2$s(pattern, receiver, index) != null;
    },
    startsWith$1: function($receiver, pattern) {
      return this.startsWith$2($receiver, pattern, 0);
    },
    substring$2: function(receiver, startIndex, endIndex) {
      H.intTypeCheck(startIndex);
      H.intTypeCheck(endIndex);
      H.checkInt(startIndex);
      if (endIndex == null)
        endIndex = receiver.length;
      if (typeof startIndex !== "number")
        return startIndex.$lt();
      if (startIndex < 0)
        throw H.wrapException(P.RangeError$value(startIndex, null));
      if (startIndex > endIndex)
        throw H.wrapException(P.RangeError$value(startIndex, null));
      if (endIndex > receiver.length)
        throw H.wrapException(P.RangeError$value(endIndex, null));
      return receiver.substring(startIndex, endIndex);
    },
    substring$1: function($receiver, startIndex) {
      return this.substring$2($receiver, startIndex, null);
    },
    toLowerCase$0: function(receiver) {
      return receiver.toLowerCase();
    },
    toUpperCase$0: function(receiver) {
      return receiver.toUpperCase();
    },
    trim$0: function(receiver) {
      var startIndex, t1, endIndex0,
        result = receiver.trim(),
        endIndex = result.length;
      if (endIndex === 0)
        return result;
      if (this._codeUnitAt$1(result, 0) === 133) {
        startIndex = J.JSString__skipLeadingWhitespace(result, 1);
        if (startIndex === endIndex)
          return "";
      } else
        startIndex = 0;
      t1 = endIndex - 1;
      endIndex0 = this.codeUnitAt$1(result, t1) === 133 ? J.JSString__skipTrailingWhitespace(result, t1) : endIndex;
      if (startIndex === 0 && endIndex0 === endIndex)
        return result;
      return result.substring(startIndex, endIndex0);
    },
    $mul: function(receiver, times) {
      var s, result;
      H.intTypeCheck(times);
      if (typeof times !== "number")
        return H.iae(times);
      if (0 >= times)
        return "";
      if (times === 1 || receiver.length === 0)
        return receiver;
      if (times !== times >>> 0)
        throw H.wrapException(C.C_OutOfMemoryError);
      for (s = receiver, result = ""; true;) {
        if ((times & 1) === 1)
          result = J.$add$ansx(s, result);
        times = times >>> 1;
        if (times === 0)
          break;
        s = H.stringTypeCheck(J.$add$ansx(s, s));
      }
      return result;
    },
    padRight$1: function(receiver, width) {
      var delta;
      H.intTypeCheck(width);
      if (typeof width !== "number")
        return width.$sub();
      delta = width - receiver.length;
      if (delta <= 0)
        return receiver;
      return this.$add(receiver, this.$mul(" ", delta));
    },
    get$codeUnits: function(receiver) {
      return H.CodeUnits$(receiver);
    },
    indexOf$2: function(receiver, pattern, start) {
      var t1, match, t2, i;
      H.stringSuperNativeTypeCheck(pattern, "$isPattern");
      H.intTypeCheck(start);
      H.checkNull(pattern);
      if (typeof start !== "number" || Math.floor(start) !== start)
        throw H.wrapException(H.argumentErrorValue(start));
      if (start < 0 || start > receiver.length)
        throw H.wrapException(P.RangeError$range(start, 0, receiver.length, null, null));
      if (typeof pattern === "string")
        return H.intTypeCheck(H.stringIndexOfStringUnchecked(receiver, pattern, start));
      t1 = J.getInterceptor$(pattern);
      if (!!t1.$isJSSyntaxRegExp) {
        match = H.firstMatchAfter(pattern, receiver, start);
        return match == null ? -1 : match.get$start();
      }
      for (t2 = receiver.length, i = start; i <= t2; ++i)
        if (t1.matchAsPrefix$2(pattern, receiver, i) != null)
          return i;
      return -1;
    },
    indexOf$1: function($receiver, pattern) {
      return this.indexOf$2($receiver, pattern, 0);
    },
    lastIndexOf$2: function(receiver, pattern, start) {
      var t1, t2, i;
      H.stringSuperNativeTypeCheck(pattern, "$isPattern");
      H.intTypeCheck(start);
      H.checkNull(pattern);
      if (start == null)
        start = receiver.length;
      else if (start < 0 || start > receiver.length)
        throw H.wrapException(P.RangeError$range(start, 0, receiver.length, null, null));
      if (typeof pattern === "string") {
        t1 = pattern.length;
        t2 = receiver.length;
        return H.intTypeCheck(H.stringLastIndexOfUnchecked(receiver, pattern, start + t1 > t2 ? t2 - t1 : start));
      }
      for (t1 = J.getInterceptor$s(pattern), i = start; i >= 0; --i)
        if (t1.matchAsPrefix$2(pattern, receiver, i) != null)
          return i;
      return -1;
    },
    lastIndexOf$1: function($receiver, pattern) {
      return this.lastIndexOf$2($receiver, pattern, null);
    },
    contains$1: function(receiver, other) {
      H.stringSuperNativeTypeCheck(other, "$isPattern");
      H.checkNull(other);
      return H.boolTypeCheck(H.stringContainsUnchecked(receiver, other, 0));
    },
    get$isEmpty: function(receiver) {
      return receiver.length === 0;
    },
    get$isNotEmpty: function(receiver) {
      return !this.get$isEmpty(receiver);
    },
    toString$0: function(receiver) {
      return receiver;
    },
    get$hashCode: function(receiver) {
      var t1, hash, i;
      for (t1 = receiver.length, hash = 0, i = 0; i < t1; ++i) {
        hash = 536870911 & hash + receiver.charCodeAt(i);
        hash = 536870911 & hash + ((524287 & hash) << 10);
        hash ^= hash >> 6;
      }
      hash = 536870911 & hash + ((67108863 & hash) << 3);
      hash ^= hash >> 11;
      return 536870911 & hash + ((16383 & hash) << 15);
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      if (index >= receiver.length || index < 0)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      return receiver[index];
    },
    $isJSIndexable: 1,
    $asJSIndexable: function() {
    },
    $isComparable: 1,
    $asComparable: function() {
      return [P.String];
    },
    $isPattern: 1,
    $isString: 1
  };
  H.CastStream.prototype = {
    $asStream: function($S, $T) {
      return [$T];
    }
  };
  H.CastStreamSubscription.prototype = {$isStreamSubscription: 1,
    $asStreamSubscription: function($S, $T) {
      return [$T];
    }
  };
  H.CastStreamTransformer.prototype = {
    $asStreamTransformer: function(SS, ST, TS, TT) {
      return [TS, TT];
    },
    $asStreamTransformerBase: function(SS, ST, TS, TT) {
      return [TS, TT];
    }
  };
  H.CastConverter.prototype = {
    $asStreamTransformer: function(SS, ST, TS, TT) {
      return [TS, TT];
    },
    $asStreamTransformerBase: function(SS, ST, TS, TT) {
      return [TS, TT];
    },
    $asConverter: function(SS, ST, TS, TT) {
      return [TS, TT];
    }
  };
  H._CastIterableBase.prototype = {
    get$iterator: function(_) {
      return H.CastIterator$(J.get$iterator$ax(this.get$_source()), H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1));
    },
    get$length: function(_) {
      return J.get$length$asx(this.get$_source());
    },
    get$isEmpty: function(_) {
      return J.get$isEmpty$asx(this.get$_source());
    },
    get$isNotEmpty: function(_) {
      return J.get$isNotEmpty$asx(this.get$_source());
    },
    skip$1: function(_, count) {
      H.intTypeCheck(count);
      return H.CastIterable_CastIterable(J.skip$1$ax(this.get$_source(), count), H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1));
    },
    take$1: function(_, count) {
      H.intTypeCheck(count);
      return H.CastIterable_CastIterable(J.take$1$ax(this.get$_source(), count), H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1));
    },
    elementAt$1: function(_, index) {
      H.intTypeCheck(index);
      return H.subtypeOfRuntimeTypeCast(J.elementAt$1$ax(this.get$_source(), index), H.getTypeArgumentByIndex(this, 1));
    },
    get$first: function(_) {
      return H.subtypeOfRuntimeTypeCast(J.get$first$ax(this.get$_source()), H.getTypeArgumentByIndex(this, 1));
    },
    get$last: function(_) {
      return H.subtypeOfRuntimeTypeCast(J.get$last$ax(this.get$_source()), H.getTypeArgumentByIndex(this, 1));
    },
    contains$1: function(_, other) {
      return J.contains$1$asx(this.get$_source(), other);
    },
    toString$0: function(_) {
      return J.toString$0$(this.get$_source());
    },
    $asIterable: function($S, $T) {
      return [$T];
    }
  };
  H.CastIterator.prototype = {
    moveNext$0: function() {
      return this._source.moveNext$0();
    },
    get$current: function() {
      return H.subtypeOfRuntimeTypeCast(this._source.get$current(), H.getTypeArgumentByIndex(this, 1));
    },
    $isIterator: 1,
    $asIterator: function($S, $T) {
      return [$T];
    }
  };
  H.CastIterable.prototype = {
    get$_source: function() {
      return this._source;
    }
  };
  H._EfficientLengthCastIterable.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function($S, $T) {
      return [$T];
    }
  };
  H._CastListBase.prototype = {
    $index: function(_, index) {
      return H.subtypeOfRuntimeTypeCast(J.$index$asx(this._source, H.intTypeCheck(index)), H.getTypeArgumentByIndex(this, 1));
    },
    $indexSet: function(_, index, value) {
      J.$indexSet$ax(this._source, H.intTypeCheck(index), H.subtypeOfRuntimeTypeCast(H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(this, 1)), H.getTypeArgumentByIndex(this, 0)));
    },
    set$length: function(_, $length) {
      J.set$length$asx(this._source, H.intTypeCheck($length));
    },
    add$1: function(_, value) {
      J.add$1$ax(this._source, H.subtypeOfRuntimeTypeCast(H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(this, 1)), H.getTypeArgumentByIndex(this, 0)));
    },
    addAll$1: function(_, values) {
      var t1 = H.getTypeArgumentByIndex(this, 1);
      J.addAll$1$ax(this._source, H.CastIterable_CastIterable(H.assertSubtype(values, "$isIterable", [t1], "$asIterable"), t1, H.getTypeArgumentByIndex(this, 0)));
    },
    insert$2: function(_, index, element) {
      J.insert$2$ax(this._source, H.intTypeCheck(index), H.subtypeOfRuntimeTypeCast(H.assertSubtypeOfRuntimeType(element, H.getTypeArgumentByIndex(this, 1)), H.getTypeArgumentByIndex(this, 0)));
    },
    insertAll$2: function(_, index, elements) {
      var t1 = H.getTypeArgumentByIndex(this, 1);
      J.insertAll$2$ax(this._source, H.intTypeCheck(index), H.CastIterable_CastIterable(H.assertSubtype(elements, "$isIterable", [t1], "$asIterable"), t1, H.getTypeArgumentByIndex(this, 0)));
    },
    setAll$2: function(_, index, elements) {
      var t1 = H.getTypeArgumentByIndex(this, 1);
      J.setAll$2$ax(this._source, H.intTypeCheck(index), H.CastIterable_CastIterable(H.assertSubtype(elements, "$isIterable", [t1], "$asIterable"), t1, H.getTypeArgumentByIndex(this, 0)));
    },
    removeAt$1: function(_, index) {
      return H.subtypeOfRuntimeTypeCast(J.removeAt$1$ax(this._source, H.intTypeCheck(index)), H.getTypeArgumentByIndex(this, 1));
    },
    removeLast$0: function(_) {
      return H.subtypeOfRuntimeTypeCast(J.removeLast$0$ax(this._source), H.getTypeArgumentByIndex(this, 1));
    },
    setRange$4: function(_, start, end, iterable, skipCount) {
      var t1;
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      t1 = H.getTypeArgumentByIndex(this, 1);
      H.assertSubtype(iterable, "$isIterable", [t1], "$asIterable");
      H.intTypeCheck(skipCount);
      J.setRange$4$ax(this._source, start, end, H.CastIterable_CastIterable(iterable, t1, H.getTypeArgumentByIndex(this, 0)), skipCount);
    },
    setRange$3: function($receiver, start, end, iterable) {
      return this.setRange$4($receiver, start, end, iterable, 0);
    },
    replaceRange$3: function(_, start, end, replacement) {
      var t1 = H.getTypeArgumentByIndex(this, 1);
      J.replaceRange$3$asx(this._source, H.intTypeCheck(start), H.intTypeCheck(end), H.CastIterable_CastIterable(H.assertSubtype(replacement, "$isIterable", [t1], "$asIterable"), t1, H.getTypeArgumentByIndex(this, 0)));
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function($S, $T) {
      return [$T];
    },
    $isListMixin: 1,
    $asListMixin: function($S, $T) {
      return [$T];
    },
    $isList: 1,
    $asList: function($S, $T) {
      return [$T];
    }
  };
  H.CastList.prototype = {
    cast$1$0: function(_, $R) {
      return H.CastList$(this._source, H.getTypeArgumentByIndex(this, 0), $R);
    },
    cast$0: function($receiver) {
      return this.cast$1$0($receiver, null);
    },
    get$_source: function() {
      return this._source;
    }
  };
  H.CastSet.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function($S, $T) {
      return [$T];
    },
    $isSet: 1,
    $asSet: function($S, $T) {
      return [$T];
    }
  };
  H.CastMap.prototype = {
    $asMapBase: function(SK, SV, $K, $V) {
      return [$K, $V];
    },
    $asMapMixin: function(SK, SV, $K, $V) {
      return [$K, $V];
    },
    $asMap: function(SK, SV, $K, $V) {
      return [$K, $V];
    }
  };
  H.CastQueue.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function($S, $T) {
      return [$T];
    },
    $isQueue: 1,
    $asQueue: function($S, $T) {
      return [$T];
    }
  };
  H.CodeUnits.prototype = {
    get$length: function(_) {
      return J.get$length$asx(this.__internal$_string);
    },
    $index: function(_, i) {
      return J.codeUnitAt$1$s(this.__internal$_string, H.intTypeCheck(i));
    },
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $asUnmodifiableListMixin: function() {
      return [P.int];
    },
    $asUnmodifiableListBase: function() {
      return [P.int];
    },
    $asListBase: function() {
      return [P.int];
    },
    $asListMixin: function() {
      return [P.int];
    },
    $asIterable: function() {
      return [P.int];
    },
    $asList: function() {
      return [P.int];
    },
    $as_ListBase_Object_ListMixin: function() {
      return [P.int];
    }
  };
  H.ExternalName.prototype = {};
  H.Since.prototype = {};
  H.HttpStatus.prototype = {};
  H.EfficientLengthIterable.prototype = {};
  H.ListIterable.prototype = {
    get$iterator: function(_) {
      return H.ListIterator$(this, H.getRuntimeTypeArgument(this, "ListIterable", 0));
    },
    get$isEmpty: function(_) {
      return J.$eq$(this.get$length(this), 0);
    },
    get$first: function(_) {
      if (J.$eq$(this.get$length(this), 0))
        throw H.wrapException(H.IterableElementError_noElement());
      return this.elementAt$1(0, 0);
    },
    get$last: function(_) {
      var _this = this;
      if (J.$eq$(_this.get$length(_this), 0))
        throw H.wrapException(H.IterableElementError_noElement());
      return _this.elementAt$1(0, J.$sub$n(_this.get$length(_this), 1));
    },
    contains$1: function(_, element) {
      var i, _this = this,
        $length = _this.get$length(_this);
      if (typeof $length !== "number")
        return H.iae($length);
      i = 0;
      for (; i < $length; ++i) {
        if (J.$eq$(_this.elementAt$1(0, i), element))
          return true;
        if ($length !== _this.get$length(_this))
          throw H.wrapException(P.ConcurrentModificationError$(_this));
      }
      return false;
    },
    join$1: function(_, separator) {
      var $length, first, t1, buffer, i, _this = this;
      H.stringTypeCheck(separator);
      $length = _this.get$length(_this);
      if (!J.get$isEmpty$asx(separator)) {
        if ($length === 0)
          return "";
        first = H.S(_this.elementAt$1(0, 0));
        t1 = _this.get$length(_this);
        if ($length == null ? t1 != null : $length !== t1)
          throw H.wrapException(P.ConcurrentModificationError$(_this));
        buffer = P.StringBuffer$(first);
        if (typeof $length !== "number")
          return H.iae($length);
        i = 1;
        for (; i < $length; ++i) {
          buffer.write$1(separator);
          buffer.write$1(_this.elementAt$1(0, i));
          if ($length !== _this.get$length(_this))
            throw H.wrapException(P.ConcurrentModificationError$(_this));
        }
        return buffer.toString$0(0);
      } else {
        buffer = P.StringBuffer$("");
        if (typeof $length !== "number")
          return H.iae($length);
        i = 0;
        for (; i < $length; ++i) {
          buffer.write$1(_this.elementAt$1(0, i));
          if ($length !== _this.get$length(_this))
            throw H.wrapException(P.ConcurrentModificationError$(_this));
        }
        return buffer.toString$0(0);
      }
    },
    join$0: function($receiver) {
      return this.join$1($receiver, "");
    },
    where$1: function(_, test) {
      return this.super$Iterable$where(0, H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [H.getRuntimeTypeArgument(this, "ListIterable", 0)]}));
    },
    map$1$1: function(_, f, $T) {
      var t1 = H.getRuntimeTypeArgument(this, "ListIterable", 0);
      return H.MappedListIterable$(this, H.functionTypeCheck(f, {func: 1, ret: $T, args: [t1]}), t1, $T);
    },
    map$1: function($receiver, f) {
      return this.map$1$1($receiver, f, null);
    },
    fold$1$2: function(_, initialValue, combine, $T) {
      var $length, value, i, _this = this;
      H.assertSubtypeOfRuntimeType(initialValue, $T);
      H.functionTypeCheck(combine, {func: 1, ret: $T, args: [$T, H.getRuntimeTypeArgument(_this, "ListIterable", 0)]});
      $length = _this.get$length(_this);
      if (typeof $length !== "number")
        return H.iae($length);
      value = initialValue;
      i = 0;
      for (; i < $length; ++i) {
        value = combine.call$2(value, _this.elementAt$1(0, i));
        if ($length !== _this.get$length(_this))
          throw H.wrapException(P.ConcurrentModificationError$(_this));
      }
      return value;
    },
    fold$2: function($receiver, initialValue, combine) {
      return this.fold$1$2($receiver, initialValue, combine, null);
    },
    skip$1: function(_, count) {
      return H.SubListIterable$(this, H.intTypeCheck(count), null, H.getRuntimeTypeArgument(this, "ListIterable", 0));
    },
    skipWhile$1: function(_, test) {
      return this.super$Iterable$skipWhile(0, H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [H.getRuntimeTypeArgument(this, "ListIterable", 0)]}));
    },
    take$1: function(_, count) {
      return H.SubListIterable$(this, 0, H.intTypeCheck(count), H.getRuntimeTypeArgument(this, "ListIterable", 0));
    },
    toList$1$growable: function(_, growable) {
      var result, t2, i, _this = this,
        t1 = H.getRuntimeTypeArgument(_this, "ListIterable", 0);
      if (H.boolTypeCheck(growable)) {
        result = H.setRuntimeTypeInfo([], [t1]);
        C.JSArray_methods.set$length(result, _this.get$length(_this));
      } else {
        t2 = _this.get$length(_this);
        if (typeof t2 !== "number")
          return H.iae(t2);
        t2 = new Array(t2);
        t2.fixed$length = Array;
        result = H.setRuntimeTypeInfo(t2, [t1]);
      }
      i = 0;
      while (true) {
        t1 = _this.get$length(_this);
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (!(i < t1))
          break;
        C.JSArray_methods.$indexSet(result, i, _this.elementAt$1(0, i));
        ++i;
      }
      return result;
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    }
  };
  H.SubListIterable.prototype = {
    SubListIterable$3: function(_iterable, _start, _endOrLength, $E) {
      var t2,
        t1 = this._start;
      P.RangeError_checkNotNegative(t1, "start");
      t2 = this._endOrLength;
      if (t2 != null) {
        P.RangeError_checkNotNegative(t2, "end");
        if (J.$gt$n(t1, t2))
          throw H.wrapException(P.RangeError$range(t1, 0, t2, "start", null));
      }
    },
    get$_endIndex: function() {
      var $length = J.get$length$asx(this.__internal$_iterable),
        t1 = this._endOrLength;
      if (t1 == null || J.$gt$n(t1, $length))
        return $length;
      return t1;
    },
    get$_startIndex: function() {
      var $length = J.get$length$asx(this.__internal$_iterable),
        t1 = this._start;
      if (J.$gt$n(t1, $length))
        return $length;
      return t1;
    },
    get$length: function(_) {
      var t2,
        $length = J.get$length$asx(this.__internal$_iterable),
        t1 = this._start;
      if (J.$ge$n(t1, $length))
        return 0;
      t2 = this._endOrLength;
      if (t2 == null || J.$ge$n(t2, $length)) {
        if (typeof $length !== "number")
          return $length.$sub();
        if (typeof t1 !== "number")
          return H.iae(t1);
        return $length - t1;
      }
      return J.$sub$n(t2, t1);
    },
    elementAt$1: function(_, index) {
      var realIndex, t1, _this = this;
      H.intTypeCheck(index);
      realIndex = J.$add$ansx(_this.get$_startIndex(), index);
      if (typeof index !== "number")
        return index.$lt();
      if (index >= 0) {
        t1 = _this.get$_endIndex();
        if (typeof realIndex !== "number")
          return realIndex.$ge();
        if (typeof t1 !== "number")
          return H.iae(t1);
        t1 = realIndex >= t1;
      } else
        t1 = true;
      if (t1)
        throw H.wrapException(P.IndexError$(index, _this, "index", null, null));
      return J.elementAt$1$ax(_this.__internal$_iterable, realIndex);
    },
    skip$1: function(_, count) {
      var newStart, t1, t2, _this = this;
      H.intTypeCheck(count);
      P.RangeError_checkNotNegative(count, "count");
      newStart = J.$add$ansx(_this._start, count);
      t1 = _this._endOrLength;
      if (t1 != null) {
        if (typeof newStart !== "number")
          return newStart.$ge();
        if (typeof t1 !== "number")
          return H.iae(t1);
        t2 = newStart >= t1;
      } else
        t2 = false;
      if (t2)
        return H.EmptyIterable$(H.getTypeArgumentByIndex(_this, 0));
      return H.SubListIterable$(_this.__internal$_iterable, newStart, t1, H.getTypeArgumentByIndex(_this, 0));
    },
    take$1: function(_, count) {
      var t1, t2, newEnd, _this = this;
      H.intTypeCheck(count);
      P.RangeError_checkNotNegative(count, "count");
      t1 = _this._endOrLength;
      t2 = _this._start;
      if (t1 == null)
        return H.SubListIterable$(_this.__internal$_iterable, t2, J.$add$ansx(t2, count), H.getTypeArgumentByIndex(_this, 0));
      else {
        newEnd = J.$add$ansx(t2, count);
        if (J.$lt$n(t1, newEnd))
          return _this;
        return H.SubListIterable$(_this.__internal$_iterable, t2, newEnd, H.getTypeArgumentByIndex(_this, 0));
      }
    },
    toList$1$growable: function(_, growable) {
      var start, t1, t2, end, end0, $length, t3, result, t4, i, _this = this;
      H.boolTypeCheck(growable);
      start = _this._start;
      t1 = _this.__internal$_iterable;
      t2 = J.getInterceptor$asx(t1);
      end = t2.get$length(t1);
      end0 = _this._endOrLength;
      if (end0 != null && J.$lt$n(end0, end))
        end = end0;
      if (typeof end !== "number")
        return end.$sub();
      if (typeof start !== "number")
        return H.iae(start);
      $length = end - start;
      if ($length < 0)
        $length = 0;
      t3 = _this.$ti;
      if (growable) {
        result = H.setRuntimeTypeInfo([], t3);
        C.JSArray_methods.set$length(result, $length);
      } else {
        t4 = new Array($length);
        t4.fixed$length = Array;
        result = H.setRuntimeTypeInfo(t4, t3);
      }
      for (i = 0; i < $length; ++i) {
        C.JSArray_methods.$indexSet(result, i, t2.elementAt$1(t1, start + i));
        if (J.$lt$n(t2.get$length(t1), end))
          throw H.wrapException(P.ConcurrentModificationError$(_this));
      }
      return result;
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    }
  };
  H.ListIterator.prototype = {
    get$current: function() {
      return this.__internal$_current;
    },
    moveNext$0: function() {
      var _this = this,
        t1 = _this.__internal$_iterable,
        t2 = J.getInterceptor$asx(t1),
        $length = t2.get$length(t1);
      if (!J.$eq$(_this.__internal$_length, $length))
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      if (J.$ge$n(_this.__internal$_index, $length)) {
        _this.set$__internal$_current(null);
        return false;
      }
      _this.set$__internal$_current(t2.elementAt$1(t1, _this.__internal$_index));
      _this.__internal$_index = H.intTypeCheck(J.$add$ansx(_this.__internal$_index, 1));
      return true;
    },
    set$__internal$_current: function(_current) {
      this.__internal$_current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 0));
    },
    $isIterator: 1
  };
  H.MappedIterable.prototype = {
    get$iterator: function(_) {
      var _this = this;
      return H.MappedIterator$(J.get$iterator$ax(_this.__internal$_iterable), _this._f, H.getTypeArgumentByIndex(_this, 0), H.getTypeArgumentByIndex(_this, 1));
    },
    get$length: function(_) {
      return J.get$length$asx(this.__internal$_iterable);
    },
    get$isEmpty: function(_) {
      return J.get$isEmpty$asx(this.__internal$_iterable);
    },
    get$first: function(_) {
      return this._f.call$1(J.get$first$ax(this.__internal$_iterable));
    },
    get$last: function(_) {
      return this._f.call$1(J.get$last$ax(this.__internal$_iterable));
    },
    elementAt$1: function(_, index) {
      return this._f.call$1(J.elementAt$1$ax(this.__internal$_iterable, H.intTypeCheck(index)));
    },
    $asIterable: function($S, $T) {
      return [$T];
    }
  };
  H.EfficientLengthMappedIterable.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function($S, $T) {
      return [$T];
    }
  };
  H.MappedIterator.prototype = {
    moveNext$0: function() {
      var _this = this,
        t1 = _this._iterator;
      if (t1.moveNext$0()) {
        _this.set$__internal$_current(_this._f.call$1(t1.get$current()));
        return true;
      }
      _this.set$__internal$_current(null);
      return false;
    },
    get$current: function() {
      return this.__internal$_current;
    },
    set$__internal$_current: function(_current) {
      this.__internal$_current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 1));
    },
    $asIterator: function($S, $T) {
      return [$T];
    }
  };
  H.MappedListIterable.prototype = {
    get$length: function(_) {
      return J.get$length$asx(this._source);
    },
    elementAt$1: function(_, index) {
      return this._f.call$1(J.elementAt$1$ax(this._source, H.intTypeCheck(index)));
    },
    $asEfficientLengthIterable: function($S, $T) {
      return [$T];
    },
    $asListIterable: function($S, $T) {
      return [$T];
    },
    $asIterable: function($S, $T) {
      return [$T];
    }
  };
  H.WhereIterable.prototype = {
    get$iterator: function(_) {
      return H.WhereIterator$(J.get$iterator$ax(this.__internal$_iterable), this._f, H.getTypeArgumentByIndex(this, 0));
    },
    map$1$1: function(_, f, $T) {
      var t1 = H.getTypeArgumentByIndex(this, 0);
      return H.MappedIterable$_(this, H.functionTypeCheck(f, {func: 1, ret: $T, args: [t1]}), t1, $T);
    },
    map$1: function($receiver, f) {
      return this.map$1$1($receiver, f, null);
    }
  };
  H.WhereIterator.prototype = {
    moveNext$0: function() {
      var t1, t2;
      for (t1 = this._iterator, t2 = this._f; t1.moveNext$0();)
        if (t2.call$1(t1.get$current()))
          return true;
      return false;
    },
    get$current: function() {
      return this._iterator.get$current();
    }
  };
  H.ExpandIterable.prototype = {
    get$iterator: function(_) {
      var _this = this;
      return H.ExpandIterator$(J.get$iterator$ax(_this.__internal$_iterable), _this._f, H.getTypeArgumentByIndex(_this, 0), H.getTypeArgumentByIndex(_this, 1));
    },
    $asIterable: function($S, $T) {
      return [$T];
    }
  };
  H.ExpandIterator.prototype = {
    get$current: function() {
      return this.__internal$_current;
    },
    moveNext$0: function() {
      var t1, t2, _this = this;
      if (_this._currentExpansion == null)
        return false;
      for (t1 = _this._iterator, t2 = _this._f; !_this._currentExpansion.moveNext$0();) {
        _this.set$__internal$_current(null);
        if (t1.moveNext$0()) {
          _this.set$_currentExpansion(null);
          _this.set$_currentExpansion(J.get$iterator$ax(t2.call$1(t1.get$current())));
        } else
          return false;
      }
      _this.set$__internal$_current(_this._currentExpansion.get$current());
      return true;
    },
    set$_currentExpansion: function(_currentExpansion) {
      this._currentExpansion = H.assertSubtype(_currentExpansion, "$isIterator", [H.getTypeArgumentByIndex(this, 1)], "$asIterator");
    },
    set$__internal$_current: function(_current) {
      this.__internal$_current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 1));
    },
    $isIterator: 1,
    $asIterator: function($S, $T) {
      return [$T];
    }
  };
  H.TakeIterable.prototype = {
    get$iterator: function(_) {
      return H.TakeIterator$(J.get$iterator$ax(this.__internal$_iterable), this._takeCount, H.getTypeArgumentByIndex(this, 0));
    }
  };
  H.EfficientLengthTakeIterable.prototype = {
    get$length: function(_) {
      var iterableLength = J.get$length$asx(this.__internal$_iterable),
        t1 = this._takeCount;
      if (typeof iterableLength !== "number")
        return iterableLength.$gt();
      if (typeof t1 !== "number")
        return H.iae(t1);
      if (iterableLength > t1)
        return t1;
      return iterableLength;
    },
    $isEfficientLengthIterable: 1
  };
  H.TakeIterator.prototype = {
    TakeIterator$2: function(_iterator, _remaining, $E) {
    },
    moveNext$0: function() {
      var _this = this,
        t1 = H.intTypeCheck(J.$sub$n(_this._remaining, 1));
      _this._remaining = t1;
      if (typeof t1 !== "number")
        return t1.$ge();
      if (t1 >= 0)
        return _this._iterator.moveNext$0();
      _this._remaining = -1;
      return false;
    },
    get$current: function() {
      if (J.$lt$n(this._remaining, 0))
        return;
      return this._iterator.get$current();
    }
  };
  H.TakeWhileIterable.prototype = {};
  H.TakeWhileIterator.prototype = {};
  H.SkipIterable.prototype = {
    skip$1: function(_, count) {
      return H.SkipIterable$_(this.__internal$_iterable, J.$add$ansx(this._skipCount, H._checkCount(H.intTypeCheck(count))), H.getTypeArgumentByIndex(this, 0));
    },
    get$iterator: function(_) {
      return H.SkipIterator$(J.get$iterator$ax(this.__internal$_iterable), this._skipCount, H.getTypeArgumentByIndex(this, 0));
    }
  };
  H.EfficientLengthSkipIterable.prototype = {
    get$length: function(_) {
      var $length = J.$sub$n(J.get$length$asx(this.__internal$_iterable), this._skipCount);
      if (typeof $length !== "number")
        return $length.$ge();
      if ($length >= 0)
        return $length;
      return 0;
    },
    skip$1: function(_, count) {
      return H.EfficientLengthSkipIterable$_(this.__internal$_iterable, J.$add$ansx(this._skipCount, H._checkCount(H.intTypeCheck(count))), H.getTypeArgumentByIndex(this, 0));
    },
    $isEfficientLengthIterable: 1
  };
  H.SkipIterator.prototype = {
    SkipIterator$2: function(_iterator, _skipCount, $E) {
    },
    moveNext$0: function() {
      var t2,
        t1 = this._iterator,
        i = 0;
      while (true) {
        t2 = this._skipCount;
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (!(i < t2))
          break;
        t1.moveNext$0();
        ++i;
      }
      this._skipCount = 0;
      return t1.moveNext$0();
    },
    get$current: function() {
      return this._iterator.get$current();
    }
  };
  H.SkipWhileIterable.prototype = {
    get$iterator: function(_) {
      return H.SkipWhileIterator$(J.get$iterator$ax(this.__internal$_iterable), this._f, H.getTypeArgumentByIndex(this, 0));
    }
  };
  H.SkipWhileIterator.prototype = {
    moveNext$0: function() {
      var t1, t2, _this = this;
      if (!_this._hasSkipped) {
        _this._hasSkipped = true;
        for (t1 = _this._iterator, t2 = _this._f; t1.moveNext$0();)
          if (!t2.call$1(t1.get$current()))
            return true;
      }
      return _this._iterator.moveNext$0();
    },
    get$current: function() {
      return this._iterator.get$current();
    }
  };
  H.EmptyIterable.prototype = {
    get$iterator: function(_) {
      return C.C_EmptyIterator;
    },
    get$isEmpty: function(_) {
      return true;
    },
    get$length: function(_) {
      return 0;
    },
    get$first: function(_) {
      throw H.wrapException(H.IterableElementError_noElement());
    },
    get$last: function(_) {
      throw H.wrapException(H.IterableElementError_noElement());
    },
    elementAt$1: function(_, index) {
      throw H.wrapException(P.RangeError$range(H.intTypeCheck(index), 0, 0, "index", null));
    },
    contains$1: function(_, element) {
      return false;
    },
    join$1: function(_, separator) {
      H.stringTypeCheck(separator);
      return "";
    },
    join$0: function($receiver) {
      return this.join$1($receiver, "");
    },
    where$1: function(_, test) {
      H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [H.getTypeArgumentByIndex(this, 0)]});
      return this;
    },
    map$1$1: function(_, f, $T) {
      H.functionTypeCheck(f, {func: 1, ret: $T, args: [H.getTypeArgumentByIndex(this, 0)]});
      return H.EmptyIterable$($T);
    },
    map$1: function($receiver, f) {
      return this.map$1$1($receiver, f, null);
    },
    fold$1$2: function(_, initialValue, combine, $T) {
      H.assertSubtypeOfRuntimeType(initialValue, $T);
      H.functionTypeCheck(combine, {func: 1, ret: $T, args: [$T, H.getTypeArgumentByIndex(this, 0)]});
      return initialValue;
    },
    fold$2: function($receiver, initialValue, combine) {
      return this.fold$1$2($receiver, initialValue, combine, null);
    },
    skip$1: function(_, count) {
      P.RangeError_checkNotNegative(H.intTypeCheck(count), "count");
      return this;
    },
    skipWhile$1: function(_, test) {
      H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [H.getTypeArgumentByIndex(this, 0)]});
      return this;
    },
    take$1: function(_, count) {
      P.RangeError_checkNotNegative(H.intTypeCheck(count), "count");
      return this;
    },
    toList$1$growable: function(_, growable) {
      var t2,
        t1 = this.$ti;
      if (H.boolTypeCheck(growable))
        t1 = H.setRuntimeTypeInfo([], t1);
      else {
        t2 = new Array(0);
        t2.fixed$length = Array;
        t1 = H.setRuntimeTypeInfo(t2, t1);
      }
      return t1;
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    }
  };
  H.EmptyIterator.prototype = {
    moveNext$0: function() {
      return false;
    },
    get$current: function() {
      return;
    },
    $isIterator: 1
  };
  H.FollowedByIterable.prototype = {
    get$iterator: function(_) {
      return H.FollowedByIterator$(this.__internal$_first, this._second, H.getTypeArgumentByIndex(this, 0));
    },
    get$length: function(_) {
      return J.$add$ansx(J.get$length$asx(this.__internal$_first), J.get$length$asx(this._second));
    },
    get$isEmpty: function(_) {
      return J.get$isEmpty$asx(this.__internal$_first) && J.get$isEmpty$asx(this._second);
    },
    get$isNotEmpty: function(_) {
      return J.get$isNotEmpty$asx(this.__internal$_first) || J.get$isNotEmpty$asx(this._second);
    },
    contains$1: function(_, value) {
      return J.contains$1$asx(this.__internal$_first, value) || J.contains$1$asx(this._second, value);
    },
    get$first: function(_) {
      var iterator = J.get$iterator$ax(this.__internal$_first);
      if (iterator.moveNext$0())
        return iterator.get$current();
      return J.get$first$ax(this._second);
    },
    get$last: function(_) {
      var last,
        iterator = J.get$iterator$ax(this._second);
      if (iterator.moveNext$0()) {
        last = iterator.get$current();
        for (; iterator.moveNext$0();)
          last = iterator.get$current();
        return last;
      }
      return J.get$last$ax(this.__internal$_first);
    }
  };
  H.EfficientLengthFollowedByIterable.prototype = {
    skip$1: function(_, count) {
      var t1, t2, firstLength, t3, _this = this;
      H.intTypeCheck(count);
      t1 = _this.__internal$_first;
      t2 = J.getInterceptor$asx(t1);
      firstLength = t2.get$length(t1);
      if (typeof count !== "number")
        return count.$ge();
      if (typeof firstLength !== "number")
        return H.iae(firstLength);
      if (count >= firstLength)
        return J.skip$1$ax(_this._second, count - firstLength);
      t3 = _this.$ti;
      return H.EfficientLengthFollowedByIterable$(H.assertSubtype(t2.skip$1(t1, count), "$isEfficientLengthIterable", t3, "$asEfficientLengthIterable"), H.assertSubtype(_this._second, "$isEfficientLengthIterable", t3, "$asEfficientLengthIterable"), H.getTypeArgumentByIndex(_this, 0));
    },
    take$1: function(_, count) {
      var t1, t2, firstLength, _this = this;
      H.intTypeCheck(count);
      t1 = _this.__internal$_first;
      t2 = J.getInterceptor$asx(t1);
      firstLength = t2.get$length(t1);
      if (typeof count !== "number")
        return count.$le();
      if (typeof firstLength !== "number")
        return H.iae(firstLength);
      if (count <= firstLength)
        return t2.take$1(t1, count);
      t2 = _this.$ti;
      return H.EfficientLengthFollowedByIterable$(H.assertSubtype(t1, "$isEfficientLengthIterable", t2, "$asEfficientLengthIterable"), H.assertSubtype(J.take$1$ax(_this._second, count - firstLength), "$isEfficientLengthIterable", t2, "$asEfficientLengthIterable"), H.getTypeArgumentByIndex(_this, 0));
    },
    elementAt$1: function(_, index) {
      var t1, t2, firstLength;
      H.intTypeCheck(index);
      t1 = this.__internal$_first;
      t2 = J.getInterceptor$asx(t1);
      firstLength = t2.get$length(t1);
      if (typeof index !== "number")
        return index.$lt();
      if (typeof firstLength !== "number")
        return H.iae(firstLength);
      if (index < firstLength)
        return t2.elementAt$1(t1, index);
      return J.elementAt$1$ax(this._second, index - firstLength);
    },
    get$first: function(_) {
      var t1 = this.__internal$_first,
        t2 = J.getInterceptor$asx(t1);
      if (t2.get$isNotEmpty(t1))
        return t2.get$first(t1);
      return J.get$first$ax(this._second);
    },
    get$last: function(_) {
      var t1 = this._second,
        t2 = J.getInterceptor$asx(t1);
      if (t2.get$isNotEmpty(t1))
        return t2.get$last(t1);
      return J.get$last$ax(this.__internal$_first);
    },
    $isEfficientLengthIterable: 1
  };
  H.FollowedByIterator.prototype = {
    moveNext$0: function() {
      var t1, _this = this;
      if (_this._currentIterator.moveNext$0())
        return true;
      t1 = _this._nextIterable;
      if (t1 != null) {
        _this.set$_currentIterator(J.get$iterator$ax(t1));
        _this.set$_nextIterable(null);
        return _this._currentIterator.moveNext$0();
      }
      return false;
    },
    get$current: function() {
      return this._currentIterator.get$current();
    },
    set$_currentIterator: function(_currentIterator) {
      this._currentIterator = H.assertSubtype(_currentIterator, "$isIterator", this.$ti, "$asIterator");
    },
    set$_nextIterable: function(_nextIterable) {
      this._nextIterable = H.assertSubtype(_nextIterable, "$isIterable", this.$ti, "$asIterable");
    },
    $isIterator: 1
  };
  H.WhereTypeIterable.prototype = {};
  H.WhereTypeIterator.prototype = {$isIterator: 1};
  H.IterableElementError.prototype = {};
  H.LinkedList.prototype = {};
  H.LinkedListEntry0.prototype = {};
  H._LinkedListIterator.prototype = {$isIterator: 1};
  H.FixedLengthListMixin.prototype = {
    set$length: function(receiver, newLength) {
      H.intTypeCheck(newLength);
      throw H.wrapException(P.UnsupportedError$("Cannot change the length of a fixed-length list"));
    },
    add$1: function(receiver, value) {
      H.assertSubtypeOfRuntimeType(value, H.getRuntimeTypeArgumentIntercepted(this, receiver, "FixedLengthListMixin", 0));
      throw H.wrapException(P.UnsupportedError$("Cannot add to a fixed-length list"));
    },
    insert$2: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.assertSubtypeOfRuntimeType(value, H.getRuntimeTypeArgumentIntercepted(this, receiver, "FixedLengthListMixin", 0));
      throw H.wrapException(P.UnsupportedError$("Cannot add to a fixed-length list"));
    },
    insertAll$2: function(receiver, at, iterable) {
      H.intTypeCheck(at);
      H.assertSubtype(iterable, "$isIterable", [H.getRuntimeTypeArgumentIntercepted(this, receiver, "FixedLengthListMixin", 0)], "$asIterable");
      throw H.wrapException(P.UnsupportedError$("Cannot add to a fixed-length list"));
    },
    addAll$1: function(receiver, iterable) {
      H.assertSubtype(iterable, "$isIterable", [H.getRuntimeTypeArgumentIntercepted(this, receiver, "FixedLengthListMixin", 0)], "$asIterable");
      throw H.wrapException(P.UnsupportedError$("Cannot add to a fixed-length list"));
    },
    clear$0: function(receiver) {
      throw H.wrapException(P.UnsupportedError$("Cannot clear a fixed-length list"));
    },
    removeAt$1: function(receiver, index) {
      H.intTypeCheck(index);
      throw H.wrapException(P.UnsupportedError$("Cannot remove from a fixed-length list"));
    },
    removeLast$0: function(receiver) {
      throw H.wrapException(P.UnsupportedError$("Cannot remove from a fixed-length list"));
    },
    replaceRange$3: function(receiver, start, end, iterable) {
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      H.assertSubtype(iterable, "$isIterable", [H.getRuntimeTypeArgumentIntercepted(this, receiver, "FixedLengthListMixin", 0)], "$asIterable");
      throw H.wrapException(P.UnsupportedError$("Cannot remove from a fixed-length list"));
    }
  };
  H.UnmodifiableListMixin.prototype = {
    $indexSet: function(_, index, value) {
      H.intTypeCheck(index);
      H.assertSubtypeOfRuntimeType(value, H.getRuntimeTypeArgument(this, "UnmodifiableListMixin", 0));
      throw H.wrapException(P.UnsupportedError$("Cannot modify an unmodifiable list"));
    },
    set$length: function(_, newLength) {
      H.intTypeCheck(newLength);
      throw H.wrapException(P.UnsupportedError$("Cannot change the length of an unmodifiable list"));
    },
    setAll$2: function(_, at, iterable) {
      H.intTypeCheck(at);
      H.assertSubtype(iterable, "$isIterable", [H.getRuntimeTypeArgument(this, "UnmodifiableListMixin", 0)], "$asIterable");
      throw H.wrapException(P.UnsupportedError$("Cannot modify an unmodifiable list"));
    },
    add$1: function(_, value) {
      H.assertSubtypeOfRuntimeType(value, H.getRuntimeTypeArgument(this, "UnmodifiableListMixin", 0));
      throw H.wrapException(P.UnsupportedError$("Cannot add to an unmodifiable list"));
    },
    insert$2: function(_, index, element) {
      H.intTypeCheck(index);
      H.assertSubtypeOfRuntimeType(element, H.getRuntimeTypeArgument(this, "UnmodifiableListMixin", 0));
      throw H.wrapException(P.UnsupportedError$("Cannot add to an unmodifiable list"));
    },
    insertAll$2: function(_, at, iterable) {
      H.intTypeCheck(at);
      H.assertSubtype(iterable, "$isIterable", [H.getRuntimeTypeArgument(this, "UnmodifiableListMixin", 0)], "$asIterable");
      throw H.wrapException(P.UnsupportedError$("Cannot add to an unmodifiable list"));
    },
    addAll$1: function(_, iterable) {
      H.assertSubtype(iterable, "$isIterable", [H.getRuntimeTypeArgument(this, "UnmodifiableListMixin", 0)], "$asIterable");
      throw H.wrapException(P.UnsupportedError$("Cannot add to an unmodifiable list"));
    },
    clear$0: function(_) {
      throw H.wrapException(P.UnsupportedError$("Cannot clear an unmodifiable list"));
    },
    removeAt$1: function(_, index) {
      H.intTypeCheck(index);
      throw H.wrapException(P.UnsupportedError$("Cannot remove from an unmodifiable list"));
    },
    removeLast$0: function(_) {
      throw H.wrapException(P.UnsupportedError$("Cannot remove from an unmodifiable list"));
    },
    setRange$4: function(_, start, end, iterable, skipCount) {
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      H.assertSubtype(iterable, "$isIterable", [H.getRuntimeTypeArgument(this, "UnmodifiableListMixin", 0)], "$asIterable");
      H.intTypeCheck(skipCount);
      throw H.wrapException(P.UnsupportedError$("Cannot modify an unmodifiable list"));
    },
    setRange$3: function($receiver, start, end, iterable) {
      return this.setRange$4($receiver, start, end, iterable, 0);
    },
    replaceRange$3: function(_, start, end, iterable) {
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      H.assertSubtype(iterable, "$isIterable", [H.getRuntimeTypeArgument(this, "UnmodifiableListMixin", 0)], "$asIterable");
      throw H.wrapException(P.UnsupportedError$("Cannot remove from an unmodifiable list"));
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  H.FixedLengthListBase.prototype = {$isFixedLengthListMixin: 1};
  H.UnmodifiableListBase.prototype = {$isUnmodifiableListMixin: 1};
  H._ListIndicesIterable.prototype = {
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $asListIterable: function() {
      return [P.int];
    },
    $asIterable: function() {
      return [P.int];
    }
  };
  H.ListMapView.prototype = {
    $asMapBase: function($E) {
      return [P.int, $E];
    },
    $asMapMixin: function($E) {
      return [P.int, $E];
    },
    $asUnmodifiableMapBase: function($E) {
      return [P.int, $E];
    },
    $as_UnmodifiableMapMixin: function($E) {
      return [P.int, $E];
    },
    $asMap: function($E) {
      return [P.int, $E];
    }
  };
  H.ReversedListIterable.prototype = {
    get$length: function(_) {
      return J.get$length$asx(this._source);
    },
    elementAt$1: function(_, index) {
      var t1, t2;
      H.intTypeCheck(index);
      t1 = this._source;
      t2 = J.getInterceptor$asx(t1);
      return t2.elementAt$1(t1, J.$sub$n(J.$sub$n(t2.get$length(t1), 1), index));
    }
  };
  H.UnmodifiableListError.prototype = {};
  H.NonGrowableListError.prototype = {};
  H.Sort.prototype = {};
  H.Symbol.prototype = {
    get$hashCode: function(_) {
      var t1,
        hash = this._hashCode;
      if (hash != null)
        return hash;
      t1 = J.get$hashCode$(this._name);
      if (typeof t1 !== "number")
        return H.iae(t1);
      hash = 536870911 & 664597 * t1;
      this._hashCode = hash;
      return hash;
    },
    toString$0: function(_) {
      return 'Symbol("' + H.S(this._name) + '")';
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return other instanceof H.Symbol && J.$eq$(this._name, other._name);
    },
    $isSymbol0: 1
  };
  H.__CastListBase__CastIterableBase_ListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function($S, $T) {
      return [$T];
    },
    $isListMixin: 1,
    $asListMixin: function($S, $T) {
      return [$T];
    },
    $isList: 1,
    $asList: function($S, $T) {
      return [$T];
    }
  };
  H.JsGetName.prototype = {};
  H.JsBuiltin.prototype = {};
  H.Native.prototype = {};
  H._Patch.prototype = {};
  H.ConstantMapView.prototype = {$isConstantMap: 1};
  H.ConstantMap.prototype = {
    get$isEmpty: function(_) {
      return J.$eq$(this.get$length(this), 0);
    },
    get$isNotEmpty: function(_) {
      return !this.get$isEmpty(this);
    },
    toString$0: function(_) {
      return P.MapBase_mapToString(this);
    },
    $indexSet: function(_, key, val) {
      H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(this, 0));
      H.assertSubtypeOfRuntimeType(val, H.getTypeArgumentByIndex(this, 1));
      return H.ConstantMap__throwUnmodifiable();
    },
    $isMap: 1
  };
  H.ConstantStringMap.prototype = {
    get$length: function(_) {
      return this.__js_helper$_length;
    },
    get$_keysArray: function() {
      return this.__js_helper$_keys;
    },
    containsKey$1: function(key) {
      if (typeof key !== "string")
        return false;
      if ("__proto__" === key)
        return false;
      return H.jsHasOwnProperty(this._jsObject, key);
    },
    $index: function(_, key) {
      if (!this.containsKey$1(key))
        return;
      return this._fetch$1(key);
    },
    _fetch$1: function(key) {
      return H.jsPropertyAccess(this._jsObject, H.stringTypeCheck(key));
    },
    forEach$1: function(_, f) {
      var keys, t2, i, t3, key, _this = this,
        t1 = H.getTypeArgumentByIndex(_this, 1);
      H.functionTypeCheck(f, {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(_this, 0), t1]});
      keys = _this.get$_keysArray();
      t2 = J.getInterceptor$asx(keys);
      i = 0;
      while (true) {
        t3 = t2.get$length(keys);
        if (typeof t3 !== "number")
          return H.iae(t3);
        if (!(i < t3))
          break;
        key = t2.$index(keys, i);
        f.call$2(key, H.assertSubtypeOfRuntimeType(_this._fetch$1(key), t1));
        ++i;
      }
    },
    get$keys: function() {
      return H._ConstantMapKeyIterable$(this, H.getTypeArgumentByIndex(this, 0));
    },
    get$values: function() {
      var _this = this;
      return H.MappedIterable_MappedIterable(_this.get$_keysArray(), new H.ConstantStringMap_values_closure(_this), H.getTypeArgumentByIndex(_this, 0), H.getTypeArgumentByIndex(_this, 1));
    },
    get$__js_helper$_length: function() {
      return this.__js_helper$_length;
    }
  };
  H.ConstantStringMap_values_closure.prototype = {
    call$1: function(key) {
      var t1 = this.$this;
      return H.assertSubtypeOfRuntimeType(t1._fetch$1(H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(t1, 0))), H.getTypeArgumentByIndex(t1, 1));
    },
    $signature: function() {
      var t1 = this.$this;
      return {func: 1, ret: H.getTypeArgumentByIndex(t1, 1), args: [H.getTypeArgumentByIndex(t1, 0)]};
    }
  };
  H.ConstantProtoMap.prototype = {};
  H._ConstantMapKeyIterable.prototype = {
    get$iterator: function(_) {
      return J.get$iterator$ax(this._map.get$_keysArray());
    },
    get$length: function(_) {
      return J.get$length$asx(this._map.get$_keysArray());
    }
  };
  H.GeneralConstantMap.prototype = {};
  H.Instantiation.prototype = {
    Instantiation$1: function(_genericClosure) {
      if (false)
        H.instantiatedGenericFunctionType(0, 0);
    },
    toString$0: function(_) {
      var types = "<" + H.S(J.join$1$ax(this.get$_types(), ", ")) + ">";
      return H.S(this._genericClosure) + " with " + types;
    }
  };
  H.Instantiation1.prototype = {
    get$_types: function() {
      return [H.createRuntimeType(H.getTypeArgumentByIndex(this, 0))];
    },
    call$2: function(a0, a1) {
      return this._genericClosure.call$1$2(a0, a1, this.$ti[0]);
    },
    $signature: function() {
      return H.instantiatedGenericFunctionType(H.extractFunctionTypeObjectFromInternal(this._genericClosure), this.$ti);
    }
  };
  H.Instantiation2.prototype = {};
  H.Instantiation3.prototype = {};
  H.Instantiation4.prototype = {};
  H.Instantiation5.prototype = {};
  H.Instantiation6.prototype = {};
  H.Instantiation7.prototype = {};
  H.Instantiation8.prototype = {};
  H.Instantiation9.prototype = {};
  H.Instantiation10.prototype = {};
  H.Instantiation11.prototype = {};
  H.Instantiation12.prototype = {};
  H.Instantiation13.prototype = {};
  H.Instantiation14.prototype = {};
  H.Instantiation15.prototype = {};
  H.Instantiation16.prototype = {};
  H.Instantiation17.prototype = {};
  H.Instantiation18.prototype = {};
  H.Instantiation19.prototype = {};
  H.Instantiation20.prototype = {};
  H.InternalMap.prototype = {};
  H.JSInvocationMirror.prototype = {
    get$memberName: function() {
      var t1 = this.__js_helper$_memberName;
      if (!!J.getInterceptor$(t1).$isSymbol0)
        return t1;
      return this.__js_helper$_memberName = H.Symbol$unvalidated(H.stringTypeCheck(t1));
    },
    get$isGetter: function() {
      return J.$eq$(this._kind, 1);
    },
    get$isAccessor: function() {
      return !J.$eq$(this._kind, 0);
    },
    get$positionalArguments: function() {
      var t1, t2, argumentCount, list, index, _this = this;
      if (_this.get$isGetter())
        return C.List_empty;
      t1 = _this.__js_helper$_arguments;
      t2 = J.getInterceptor$asx(t1);
      argumentCount = J.$sub$n(J.$sub$n(t2.get$length(t1), J.get$length$asx(_this._namedArgumentNames)), _this._typeArgumentCount);
      if (argumentCount === 0)
        return C.List_empty;
      list = [];
      if (typeof argumentCount !== "number")
        return H.iae(argumentCount);
      index = 0;
      for (; index < argumentCount; ++index)
        list.push(t2.$index(t1, index));
      return J.JSArray_markUnmodifiableList(list);
    },
    get$namedArguments: function() {
      var t1, t2, namedArgumentCount, t3, t4, namedArgumentsStartIndex, t5, map, i, t6, _this = this;
      if (_this.get$isAccessor())
        return C.Map_empty;
      t1 = _this._namedArgumentNames;
      t2 = J.getInterceptor$asx(t1);
      namedArgumentCount = t2.get$length(t1);
      t3 = _this.__js_helper$_arguments;
      t4 = J.getInterceptor$asx(t3);
      namedArgumentsStartIndex = J.$sub$n(J.$sub$n(t4.get$length(t3), namedArgumentCount), _this._typeArgumentCount);
      if (namedArgumentCount === 0)
        return C.Map_empty;
      t5 = P.Symbol0;
      map = H.JsLinkedHashMap_JsLinkedHashMap$es6(t5, null);
      if (typeof namedArgumentCount !== "number")
        return H.iae(namedArgumentCount);
      i = 0;
      for (; i < namedArgumentCount; ++i) {
        t6 = H.Symbol$unvalidated(H.stringTypeCheck(t2.$index(t1, i)));
        if (typeof namedArgumentsStartIndex !== "number")
          return namedArgumentsStartIndex.$add();
        map.$indexSet(0, t6, t4.$index(t3, namedArgumentsStartIndex + i));
      }
      return H.ConstantMapView$(map, t5, null);
    },
    $isInvocation: 1
  };
  H.Primitives.prototype = {};
  H.Primitives_functionNoSuchMethod_closure.prototype = {
    call$2: function($name, argument) {
      var t1;
      H.stringTypeCheck($name);
      t1 = this._box_0;
      t1.names = H.S(t1.names) + "$" + H.S($name);
      J.add$1$ax(this.namedArgumentList, $name);
      J.add$1$ax(this.$arguments, argument);
      t1.argumentCount = J.$add$ansx(t1.argumentCount, 1);
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: 10
  };
  H.JsCache.prototype = {};
  H.TypeErrorDecoder.prototype = {
    matchTypeError$1: function(message) {
      var result, t1, _this = this,
        match = new RegExp(_this._pattern).exec(message);
      if (match == null)
        return;
      result = Object.create(null);
      t1 = _this.__js_helper$_arguments;
      if (!J.$eq$(t1, -1))
        result.arguments = match[t1 + 1];
      t1 = _this._argumentsExpr;
      if (!J.$eq$(t1, -1))
        result.argumentsExpr = match[t1 + 1];
      t1 = _this._expr;
      if (!J.$eq$(t1, -1))
        result.expr = match[t1 + 1];
      t1 = _this._method;
      if (!J.$eq$(t1, -1))
        result.method = match[t1 + 1];
      t1 = _this.__js_helper$_receiver;
      if (!J.$eq$(t1, -1))
        result.receiver = match[t1 + 1];
      return result;
    }
  };
  H.NullError.prototype = {
    toString$0: function(_) {
      var t1 = this._method;
      if (t1 == null)
        return "NoSuchMethodError: " + H.S(this._message);
      return "NoSuchMethodError: method not found: '" + H.S(t1) + "' on null";
    },
    $isNoSuchMethodError: 1
  };
  H.JsNoSuchMethodError.prototype = {
    toString$0: function(_) {
      var t2, _this = this,
        _s38_ = "NoSuchMethodError: method not found: '",
        t1 = _this._method;
      if (t1 == null)
        return "NoSuchMethodError: " + H.S(_this._message);
      t2 = _this.__js_helper$_receiver;
      if (t2 == null)
        return _s38_ + H.S(t1) + "' (" + H.S(_this._message) + ")";
      return _s38_ + H.S(t1) + "' on '" + H.S(t2) + "' (" + H.S(_this._message) + ")";
    },
    $isNoSuchMethodError: 1
  };
  H.UnknownJsTypeError.prototype = {
    toString$0: function(_) {
      var t1 = this._message;
      return J.get$isEmpty$asx(t1) ? "Error" : "Error: " + H.S(t1);
    }
  };
  H.ExceptionAndStackTrace.prototype = {};
  H.unwrapException_saveStackTrace.prototype = {
    call$1: function(error) {
      if (!!J.getInterceptor$(error).$isError)
        if (error.$thrownJsError == null)
          error.$thrownJsError = this.ex;
      return error;
    },
    $signature: 1
  };
  H._StackTrace.prototype = {$isStackTrace: 1};
  H.Closure.prototype = {
    toString$0: function(_) {
      return "Closure '" + H.Primitives_objectTypeName(this).trim() + "'";
    },
    $isFunction: 1,
    get$$call: function() {
      return this;
    },
    "call*": "call$1",
    $requiredArgCount: 1,
    $defaultValues: null
  };
  H.Closure_fromTearOff_closure.prototype = {$signature: 25};
  H.TearOffClosure.prototype = {};
  H.StaticClosure.prototype = {
    toString$0: function(_) {
      var $name = this.$static_name;
      if ($name == null)
        return "Closure of unknown static method";
      return "Closure '" + H.S(H.unminifyOrTag($name)) + "'";
    }
  };
  H.BoundClosure.prototype = {
    $eq: function(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (!(other instanceof H.BoundClosure))
        return false;
      return _this._self === other._self && _this._target === other._target && _this.__js_helper$_receiver === other.__js_helper$_receiver;
    },
    get$hashCode: function(_) {
      var receiverHashCode,
        t1 = this.__js_helper$_receiver;
      if (t1 == null)
        receiverHashCode = H.Primitives_objectHashCode(this._self);
      else
        receiverHashCode = typeof t1 !== "object" ? J.get$hashCode$(t1) : H.Primitives_objectHashCode(t1);
      t1 = H.Primitives_objectHashCode(this._target);
      if (typeof receiverHashCode !== "number")
        return receiverHashCode.$xor();
      if (typeof t1 !== "number")
        return H.iae(t1);
      return (receiverHashCode ^ t1) >>> 0;
    },
    toString$0: function(_) {
      var receiver = this.__js_helper$_receiver;
      if (receiver == null)
        receiver = this._self;
      return "Closure '" + H.S(this.__js_helper$_name) + "' of " + H.S(H.Primitives_objectToHumanReadableString(receiver));
    }
  };
  H.Creates.prototype = {};
  H.Returns.prototype = {};
  H.JSName.prototype = {};
  H.JavaScriptIndexingBehavior.prototype = {};
  H.TypeErrorImplementation.prototype = {
    toString$0: function(_) {
      return this.message;
    },
    $isAssertionError: 1,
    $isTypeError: 1,
    get$message: function(receiver) {
      return this.message;
    }
  };
  H.CastErrorImplementation.prototype = {
    toString$0: function(_) {
      return this.message;
    },
    $isCastError: 1,
    get$message: function(receiver) {
      return this.message;
    }
  };
  H.FallThroughErrorImplementation.prototype = {};
  H.RuntimeError.prototype = {
    toString$0: function(_) {
      return "RuntimeError: " + H.S(this.message);
    },
    get$message: function(receiver) {
      return this.message;
    }
  };
  H.DeferredNotLoadedError.prototype = {$isNoSuchMethodError: 1};
  H.UnimplementedNoSuchMethodError.prototype = {$isNoSuchMethodError: 1};
  H.MainError.prototype = {$isNoSuchMethodError: 1};
  H._AssertionError.prototype = {};
  H._UnreachableError.prototype = {};
  H.TypeImpl.prototype = {
    get$_typeName: function() {
      var t1 = this.__typeName;
      return t1 == null ? this.__typeName = H.stringTypeCheck(H.runtimeTypeToString(this._rti)) : t1;
    },
    toString$0: function(_) {
      return this.get$_typeName();
    },
    get$hashCode: function(_) {
      var t1 = this._hashCode;
      return t1 == null ? this._hashCode = H.intTypeCheck(J.get$hashCode$(this.get$_typeName())) : t1;
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return other instanceof H.TypeImpl && J.$eq$(this.get$_typeName(), other.get$_typeName());
    },
    $isType: 1
  };
  H.TypeVariable.prototype = {};
  H.JsLinkedHashMap.prototype = {
    get$length: function(_) {
      return this.__js_helper$_length;
    },
    get$isEmpty: function(_) {
      return J.$eq$(this.__js_helper$_length, 0);
    },
    get$isNotEmpty: function(_) {
      return !this.get$isEmpty(this);
    },
    get$keys: function() {
      return H.LinkedHashMapKeyIterable$(this, H.getTypeArgumentByIndex(this, 0));
    },
    get$values: function() {
      var _this = this;
      return H.MappedIterable_MappedIterable(_this.get$keys(), new H.JsLinkedHashMap_values_closure(_this), H.getTypeArgumentByIndex(_this, 0), H.getTypeArgumentByIndex(_this, 1));
    },
    containsKey$1: function(key) {
      var strings, nums, _this = this;
      if (H.JsLinkedHashMap__isStringKey(key)) {
        strings = _this._strings;
        if (strings == null)
          return false;
        return _this._containsTableEntry$2(strings, key);
      } else if (H.JsLinkedHashMap__isNumericKey(key)) {
        nums = _this._nums;
        if (nums == null)
          return false;
        return _this._containsTableEntry$2(nums, key);
      } else
        return _this.internalContainsKey$1(key);
    },
    internalContainsKey$1: function(key) {
      var rest = this._rest;
      if (rest == null)
        return false;
      return J.$ge$n(this.internalFindBucketIndex$2(this._getBucket$2(rest, key), key), 0);
    },
    $index: function(_, key) {
      var strings, cell, t1, nums, _this = this;
      if (H.JsLinkedHashMap__isStringKey(key)) {
        strings = _this._strings;
        if (strings == null)
          return;
        cell = _this._getTableCell$2(strings, key);
        t1 = cell == null ? null : cell.hashMapCellValue;
        return t1;
      } else if (H.JsLinkedHashMap__isNumericKey(key)) {
        nums = _this._nums;
        if (nums == null)
          return;
        cell = _this._getTableCell$2(nums, key);
        t1 = cell == null ? null : cell.hashMapCellValue;
        return t1;
      } else
        return _this.internalGet$1(key);
    },
    internalGet$1: function(key) {
      var bucket, index,
        rest = this._rest;
      if (rest == null)
        return;
      bucket = this._getBucket$2(rest, key);
      index = this.internalFindBucketIndex$2(bucket, key);
      if (typeof index !== "number")
        return index.$lt();
      if (index < 0)
        return;
      return bucket[index].hashMapCellValue;
    },
    $indexSet: function(_, key, value) {
      var strings, nums, _this = this;
      H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(_this, 0));
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(_this, 1));
      if (H.JsLinkedHashMap__isStringKey(key)) {
        strings = _this._strings;
        _this._addHashTableEntry$3(strings == null ? _this._strings = _this._newHashTable$0() : strings, key, value);
      } else if (H.JsLinkedHashMap__isNumericKey(key)) {
        nums = _this._nums;
        _this._addHashTableEntry$3(nums == null ? _this._nums = _this._newHashTable$0() : nums, key, value);
      } else
        _this.internalSet$2(key, value);
    },
    internalSet$2: function(key, value) {
      var rest, hash, bucket, index, _this = this;
      H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(_this, 0));
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(_this, 1));
      rest = _this._rest;
      if (rest == null)
        rest = _this._rest = _this._newHashTable$0();
      hash = _this.internalComputeHashCode$1(key);
      bucket = _this._getTableBucket$2(rest, hash);
      if (bucket == null)
        _this._setTableEntry$3(rest, hash, [_this._newLinkedCell$2(key, value)]);
      else {
        index = _this.internalFindBucketIndex$2(bucket, key);
        if (typeof index !== "number")
          return index.$ge();
        if (index >= 0)
          bucket[index].hashMapCellValue = value;
        else
          bucket.push(_this._newLinkedCell$2(key, value));
      }
    },
    forEach$1: function(_, action) {
      var cell, modifications, t1, _this = this;
      H.functionTypeCheck(action, {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(_this, 0), H.getTypeArgumentByIndex(_this, 1)]});
      cell = _this._first;
      modifications = _this._modifications;
      for (; cell != null;) {
        action.call$2(cell.hashMapCellKey, cell.hashMapCellValue);
        t1 = _this._modifications;
        if (modifications == null ? t1 != null : modifications !== t1)
          throw H.wrapException(P.ConcurrentModificationError$(_this));
        cell = cell._next;
      }
    },
    _addHashTableEntry$3: function(table, key, value) {
      var cell, _this = this;
      H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(_this, 0));
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(_this, 1));
      cell = _this._getTableCell$2(table, key);
      if (cell == null)
        _this._setTableEntry$3(table, key, _this._newLinkedCell$2(key, value));
      else
        cell.hashMapCellValue = value;
    },
    _modified$0: function() {
      this._modifications = H.intTypeCheck(J.$and$bn(J.$add$ansx(this._modifications, 1), 67108863));
    },
    _newLinkedCell$2: function(key, value) {
      var _this = this,
        cell = H.LinkedHashMapCell$(H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(_this, 0)), H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(_this, 1)));
      if (_this._first == null)
        _this._first = _this._last = cell;
      else
        _this._last = _this._last._next = cell;
      _this.__js_helper$_length = H.intTypeCheck(J.$add$ansx(_this.__js_helper$_length, 1));
      _this._modified$0();
      return cell;
    },
    internalComputeHashCode$1: function(key) {
      return J.get$hashCode$(key) & 0x3ffffff;
    },
    _getBucket$2: function(table, key) {
      return this._getTableBucket$2(table, this.internalComputeHashCode$1(key));
    },
    internalFindBucketIndex$2: function(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq$(bucket[i].hashMapCellKey, key))
          return i;
      return -1;
    },
    toString$0: function(_) {
      return P.MapBase_mapToString(this);
    },
    _getTableCell$2: function(table, key) {
      return table[key];
    },
    _getTableBucket$2: function(table, key) {
      return table[key];
    },
    _setTableEntry$3: function(table, key, value) {
      table[key] = value;
    },
    _deleteTableEntry$2: function(table, key) {
      delete table[key];
    },
    _containsTableEntry$2: function(table, key) {
      return this._getTableCell$2(table, key) != null;
    },
    _newHashTable$0: function() {
      var _s20_ = "<non-identifier-key>",
        table = Object.create(null);
      this._setTableEntry$3(table, _s20_, table);
      this._deleteTableEntry$2(table, _s20_);
      return table;
    },
    $isInternalMap: 1,
    $isLinkedHashMap: 1,
    get$__js_helper$_length: function() {
      return this.__js_helper$_length;
    },
    get$_first: function() {
      return this._first;
    },
    get$_modifications: function() {
      return this._modifications;
    }
  };
  H.JsLinkedHashMap_values_closure.prototype = {
    call$1: function(each) {
      var t1 = this.$this;
      return J.$index$asx(t1, H.assertSubtypeOfRuntimeType(each, H.getTypeArgumentByIndex(t1, 0)));
    },
    $signature: function() {
      var t1 = this.$this;
      return {func: 1, ret: H.getTypeArgumentByIndex(t1, 1), args: [H.getTypeArgumentByIndex(t1, 0)]};
    }
  };
  H.Es6LinkedHashMap.prototype = {};
  H.LinkedHashMapCell.prototype = {
    get$hashMapCellKey: function() {
      return this.hashMapCellKey;
    },
    get$_next: function() {
      return this._next;
    }
  };
  H.LinkedHashMapKeyIterable.prototype = {
    get$length: function(_) {
      return H.intTypeCheck(this._map.get$__js_helper$_length());
    },
    get$isEmpty: function(_) {
      return J.$eq$(this._map.get$__js_helper$_length(), 0);
    },
    get$iterator: function(_) {
      var t1 = this._map;
      return H.LinkedHashMapKeyIterator$(t1, H.intTypeCheck(t1.get$_modifications()), H.getTypeArgumentByIndex(this, 0));
    },
    contains$1: function(_, element) {
      return H.boolTypeCheck(this._map.containsKey$1(element));
    }
  };
  H.LinkedHashMapKeyIterator.prototype = {
    LinkedHashMapKeyIterator$2: function(_map, _modifications, $E) {
      this._cell = H.interceptedTypeCheck(this._map.get$_first(), "$isLinkedHashMapCell");
    },
    get$current: function() {
      return this.__js_helper$_current;
    },
    moveNext$0: function() {
      var _this = this,
        t1 = _this._map;
      if (!J.$eq$(_this._modifications, t1.get$_modifications()))
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else {
        t1 = _this._cell;
        if (t1 == null) {
          _this.set$__js_helper$_current(null);
          return false;
        } else {
          _this.set$__js_helper$_current(t1.get$hashMapCellKey());
          _this._cell = H.interceptedTypeCheck(_this._cell.get$_next(), "$isLinkedHashMapCell");
          return true;
        }
      }
    },
    set$__js_helper$_current: function(_current) {
      this.__js_helper$_current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 0));
    },
    $isIterator: 1,
    get$_modifications: function() {
      return this._modifications;
    }
  };
  H.initHooks_closure.prototype = {
    call$1: function(o) {
      return this.getTag(o);
    },
    $signature: 1
  };
  H.initHooks_closure0.prototype = {
    call$2: function(o, tag) {
      return this.getUnknownTag(o, H.stringTypeCheck(tag));
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: 28
  };
  H.initHooks_closure1.prototype = {
    call$1: function(tag) {
      return this.prototypeForTag(H.stringTypeCheck(tag));
    },
    $signature: 31
  };
  H.JSSyntaxRegExp.prototype = {
    toString$0: function(_) {
      return "RegExp/" + H.S(this.pattern) + "/";
    },
    get$_nativeGlobalVersion: function() {
      var _this = this,
        t1 = _this._nativeGlobalRegExp;
      if (t1 != null)
        return t1;
      return _this._nativeGlobalRegExp = H.JSSyntaxRegExp_makeNative(_this.pattern, _this.get$_isMultiLine(), _this.get$_isCaseSensitive(), true);
    },
    get$_nativeAnchoredVersion: function() {
      var _this = this,
        t1 = _this._nativeAnchoredRegExp;
      if (t1 != null)
        return t1;
      return _this._nativeAnchoredRegExp = H.JSSyntaxRegExp_makeNative(H.S(_this.pattern) + "|()", _this.get$_isMultiLine(), _this.get$_isCaseSensitive(), true);
    },
    get$_isMultiLine: function() {
      return this._nativeRegExp.multiline;
    },
    get$_isCaseSensitive: function() {
      return !this._nativeRegExp.ignoreCase;
    },
    firstMatch$1: function(string) {
      var m = this._nativeRegExp.exec(H.checkString(H.stringTypeCheck(string)));
      if (m == null)
        return;
      return H._MatchImplementation$(this, m);
    },
    hasMatch$1: function(string) {
      return this._nativeRegExp.test(H.checkString(H.stringTypeCheck(string)));
    },
    allMatches$2: function(_, string, start) {
      H.stringTypeCheck(string);
      H.intTypeCheck(start);
      H.checkString(string);
      H.checkInt(start);
      if (typeof start !== "number")
        return start.$lt();
      if (start < 0 || start > string.length)
        throw H.wrapException(P.RangeError$range(start, 0, string.length, null, null));
      return H._AllMatchesIterable$(this, string, start);
    },
    allMatches$1: function($receiver, string) {
      return this.allMatches$2($receiver, string, 0);
    },
    _execGlobal$2: function(string, start) {
      var regexp, match;
      H.stringTypeCheck(string);
      H.intTypeCheck(start);
      regexp = this.get$_nativeGlobalVersion();
      regexp.lastIndex = start;
      match = regexp.exec(string);
      if (match == null)
        return;
      return H._MatchImplementation$(this, match);
    },
    _execAnchored$2: function(string, start) {
      var regexp, match;
      H.stringTypeCheck(string);
      H.intTypeCheck(start);
      regexp = this.get$_nativeAnchoredVersion();
      regexp.lastIndex = start;
      match = regexp.exec(string);
      if (match == null)
        return;
      if (0 >= match.length)
        return H.ioore(match, -1);
      if (match.pop() != null)
        return;
      return H._MatchImplementation$(this, match);
    },
    matchAsPrefix$2: function(_, string, start) {
      H.stringTypeCheck(string);
      H.intTypeCheck(start);
      if (typeof start !== "number")
        return start.$lt();
      if (start < 0 || start > string.length)
        throw H.wrapException(P.RangeError$range(start, 0, string.length, null, null));
      return this._execAnchored$2(string, start);
    },
    $isPattern: 1,
    $isRegExp: 1
  };
  H._MatchImplementation.prototype = {
    _MatchImplementation$2: function(pattern, _match) {
    },
    get$start: function() {
      return this._match.index;
    },
    get$end: function() {
      return H.intTypeCheck(J.$add$ansx(this.get$start(), this._match[0].length));
    },
    group$1: function(index) {
      return J.$index$asx(this._match, H.intTypeCheck(index));
    },
    $index: function(_, index) {
      return this.group$1(H.intTypeCheck(index));
    },
    $isMatch: 1,
    $isRegExpMatch: 1
  };
  H._AllMatchesIterable.prototype = {
    get$iterator: function(_) {
      return H._AllMatchesIterator$(this._re, this._string, this.__js_helper$_start);
    },
    $asIterableBase: function() {
      return [P.Match];
    },
    $asIterable: function() {
      return [P.Match];
    }
  };
  H._AllMatchesIterator.prototype = {
    get$current: function() {
      return this.__js_helper$_current;
    },
    moveNext$0: function() {
      var match, nextIndex, _this = this,
        t1 = _this._string;
      if (t1 == null)
        return false;
      if (J.$le$n(_this._nextIndex, J.get$length$asx(t1))) {
        match = _this._regExp._execGlobal$2(_this._string, _this._nextIndex);
        if (match != null) {
          _this.__js_helper$_current = match;
          nextIndex = match.get$end();
          if (J.$eq$(match.get$start(), nextIndex)) {
            if (typeof nextIndex !== "number")
              return nextIndex.$add();
            ++nextIndex;
          }
          _this._nextIndex = nextIndex;
          return true;
        }
      }
      _this._string = _this.__js_helper$_current = null;
      return false;
    },
    $isIterator: 1,
    $asIterator: function() {
      return [P.Match];
    }
  };
  H.StringMatch.prototype = {
    get$end: function() {
      return J.$add$ansx(this.start, J.get$length$asx(this.pattern));
    },
    $index: function(_, g) {
      return this.group$1(H.intTypeCheck(g));
    },
    group$1: function(group_) {
      H.intTypeCheck(group_);
      if (group_ !== 0)
        throw H.wrapException(P.RangeError$value(group_, null));
      return this.pattern;
    },
    $isMatch: 1,
    get$start: function() {
      return this.start;
    }
  };
  H._StringAllMatchesIterable.prototype = {
    get$iterator: function(_) {
      return H._StringAllMatchesIterator$(this._input, this._pattern, this.__js_helper$_index);
    },
    get$first: function(_) {
      var t1 = this._input,
        t2 = this._pattern,
        index = H.intTypeCheck(H.stringIndexOfStringUnchecked(t1, t2, this.__js_helper$_index));
      if (typeof index !== "number")
        return index.$ge();
      if (index >= 0)
        return H.StringMatch$(index, t1, t2);
      throw H.wrapException(H.IterableElementError_noElement());
    },
    $asIterable: function() {
      return [P.Match];
    }
  };
  H._StringAllMatchesIterator.prototype = {
    moveNext$0: function() {
      var index, t5, end, _this = this,
        t1 = _this._pattern,
        t2 = J.getInterceptor$asx(t1),
        t3 = _this._input,
        t4 = J.getInterceptor$asx(t3);
      if (J.$gt$n(J.$add$ansx(_this.__js_helper$_index, t2.get$length(t1)), t4.get$length(t3))) {
        _this.__js_helper$_current = null;
        return false;
      }
      index = H.stringIndexOfStringUnchecked(t3, t1, _this.__js_helper$_index);
      t5 = J.getInterceptor$n(index);
      if (H.boolTypeCheck(t5.$lt(index, 0))) {
        _this.__js_helper$_index = H.intTypeCheck(J.$add$ansx(t4.get$length(t3), 1));
        _this.__js_helper$_current = null;
        return false;
      }
      end = H.intTypeCheck(t5.$add(index, t2.get$length(t1)));
      _this.__js_helper$_current = H.StringMatch$(H.intTypeCheck(index), t3, t1);
      t1 = _this.__js_helper$_index;
      if (end == null ? t1 == null : end === t1) {
        if (typeof end !== "number")
          return end.$add();
        ++end;
      }
      _this.__js_helper$_index = end;
      return true;
    },
    get$current: function() {
      return this.__js_helper$_current;
    },
    $isIterator: 1,
    $asIterator: function() {
      return [P.Match];
    }
  };
  H._LazyMangledNamesMap.prototype = {};
  H._LazyMangledInstanceNamesMap.prototype = {};
  H._LazyReflectiveNamesMap.prototype = {};
  H.SupportedBrowser.prototype = {};
  H.Experimental.prototype = {};
  H.DomName.prototype = {};
  H.DocsEditable.prototype = {};
  H.Unstable.prototype = {};
  H.NativeByteBuffer.prototype = {
    asUint8List$2: function(receiver, offsetInBytes, $length) {
      return H.NativeUint8List_NativeUint8List$view(receiver, H.intTypeCheck(offsetInBytes), H.intTypeCheck($length));
    },
    $isNativeByteBuffer: 1,
    $isByteBuffer: 1
  };
  H.NativeFloat32x4List.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.Float32x4];
    },
    $isFixedLengthListMixin: 1,
    $asFixedLengthListMixin: function() {
      return [P.Float32x4];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [P.Float32x4];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.Float32x4];
    },
    $isList: 1,
    $asList: function() {
      return [P.Float32x4];
    },
    $isTypedData: 1,
    $isFloat32x4List: 1
  };
  H.NativeInt32x4List.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.Int32x4];
    },
    $isFixedLengthListMixin: 1,
    $asFixedLengthListMixin: function() {
      return [P.Int32x4];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [P.Int32x4];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.Int32x4];
    },
    $isList: 1,
    $asList: function() {
      return [P.Int32x4];
    },
    $isTypedData: 1,
    $isInt32x4List: 1
  };
  H.NativeFloat64x2List.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.Float64x2];
    },
    $isFixedLengthListMixin: 1,
    $asFixedLengthListMixin: function() {
      return [P.Float64x2];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [P.Float64x2];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.Float64x2];
    },
    $isList: 1,
    $asList: function() {
      return [P.Float64x2];
    },
    $isTypedData: 1,
    $isFloat64x2List: 1
  };
  H.NativeTypedData.prototype = {
    _invalidPosition$3: function(receiver, position, $length, $name) {
      H.intTypeCheck(position);
      H.intTypeCheck($length);
      H.stringTypeCheck($name);
      if (typeof position !== "number" || Math.floor(position) !== position)
        throw H.wrapException(P.ArgumentError$value(position, $name, "Invalid list position"));
      else
        throw H.wrapException(P.RangeError$range(position, 0, $length, $name, null));
    },
    _checkPosition$3: function(receiver, position, $length, $name) {
      var t1;
      H.intTypeCheck(position);
      H.intTypeCheck($length);
      H.stringTypeCheck($name);
      if (!(position >>> 0 !== position)) {
        if (typeof $length !== "number")
          return H.iae($length);
        t1 = position > $length;
      } else
        t1 = true;
      if (t1)
        this._invalidPosition$3(receiver, position, $length, $name);
    },
    $isNativeTypedData: 1,
    $isTypedData: 1
  };
  H.NativeByteData.prototype = {$isNativeByteData: 1, $isByteData: 1};
  H.NativeTypedArray.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    _setRangeFast$4: function(receiver, start, end, source, skipCount) {
      var targetLength, count, sourceLength;
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      H.interceptedTypeCheck(source, "$isNativeTypedArray");
      H.intTypeCheck(skipCount);
      targetLength = receiver.length;
      this._checkPosition$3(receiver, start, targetLength, "start");
      this._checkPosition$3(receiver, end, targetLength, "end");
      if (typeof start !== "number")
        return start.$gt();
      if (typeof end !== "number")
        return H.iae(end);
      if (start > end)
        throw H.wrapException(P.RangeError$range(start, 0, end, null, null));
      count = end - start;
      if (typeof skipCount !== "number")
        return skipCount.$lt();
      if (skipCount < 0)
        throw H.wrapException(P.ArgumentError$(skipCount));
      sourceLength = source.length;
      if (sourceLength - skipCount < count)
        throw H.wrapException(P.StateError$("Not enough elements"));
      if (skipCount !== 0 || sourceLength !== count)
        source = source.subarray(skipCount, skipCount + count);
      receiver.set(source, start);
    },
    $isJSIndexable: 1,
    $asJSIndexable: function() {
    },
    $isJSMutableIndexable: 1,
    $asJSMutableIndexable: function() {
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
    }
  };
  H.NativeTypedArrayOfDouble.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.double];
    },
    $isFixedLengthListMixin: 1,
    $asFixedLengthListMixin: function() {
      return [P.double];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [P.double];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.double];
    },
    $isList: 1,
    $asList: function() {
      return [P.double];
    }
  };
  H.NativeTypedArrayOfInt.prototype = {
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.intTypeCheck(value);
      H._checkValidIndex(index, receiver, receiver.length);
      receiver[index] = value;
    },
    setRange$4: function(receiver, start, end, iterable, skipCount) {
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      H.assertSubtype(iterable, "$isIterable", [P.int], "$asIterable");
      H.intTypeCheck(skipCount);
      if (!!J.getInterceptor$(iterable).$isNativeTypedArrayOfInt) {
        this._setRangeFast$4(receiver, start, end, iterable, skipCount);
        return;
      }
      this.super$ListMixin$setRange(receiver, start, end, iterable, skipCount);
    },
    setRange$3: function($receiver, start, end, iterable) {
      return this.setRange$4($receiver, start, end, iterable, 0);
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $isFixedLengthListMixin: 1,
    $asFixedLengthListMixin: function() {
      return [P.int];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [P.int];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.int];
    },
    $isList: 1,
    $asList: function() {
      return [P.int];
    }
  };
  H.NativeFloat32List.prototype = {$isNativeFloat32List: 1, $is_TypedFloatList: 1, $isFloat32List: 1};
  H.NativeFloat64List.prototype = {$isNativeFloat64List: 1, $is_TypedFloatList: 1, $isFloat64List: 1};
  H.NativeInt16List.prototype = {$isNativeInt16List: 1, $is_TypedIntList: 1, $isInt16List: 1};
  H.NativeInt32List.prototype = {$isNativeInt32List: 1, $is_TypedIntList: 1, $isInt32List: 1};
  H.NativeInt8List.prototype = {
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2: function(receiver, start, end) {
      H.intTypeCheck(start);
      return H.NativeInt8List__create1(receiver.subarray(start, H._checkValidRange(start, H.intTypeCheck(end), receiver.length)));
    },
    $isNativeInt8List: 1,
    $is_TypedIntList: 1,
    $isInt8List: 1
  };
  H.NativeUint16List.prototype = {$isNativeUint16List: 1, $is_TypedIntList: 1, $isUint16List: 1};
  H.NativeUint32List.prototype = {
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2: function(receiver, start, end) {
      H.intTypeCheck(start);
      return H.NativeUint32List__create1(receiver.subarray(start, H._checkValidRange(start, H.intTypeCheck(end), receiver.length)));
    },
    $isNativeUint32List: 1,
    $is_TypedIntList: 1,
    $isUint32List: 1
  };
  H.NativeUint8ClampedList.prototype = {$isNativeUint8ClampedList: 1, $is_TypedIntList: 1, $isUint8ClampedList: 1};
  H.NativeUint8List.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2: function(receiver, start, end) {
      H.intTypeCheck(start);
      return H.NativeUint8List__create1(receiver.subarray(start, H._checkValidRange(start, H.intTypeCheck(end), receiver.length)));
    },
    $isNativeUint8List: 1,
    $is_TypedIntList: 1,
    $isUint8List: 1
  };
  H.NativeFloat32x4.prototype = {$isFloat32x4: 1};
  H.NativeInt32x4.prototype = {$isInt32x4: 1};
  H.NativeFloat64x2.prototype = {$isFloat64x2: 1};
  H._NativeFloat32x4List_Object_ListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.Float32x4];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [P.Float32x4];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.Float32x4];
    },
    $isList: 1,
    $asList: function() {
      return [P.Float32x4];
    }
  };
  H._NativeFloat32x4List_Object_ListMixin_FixedLengthListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.Float32x4];
    },
    $isFixedLengthListMixin: 1,
    $asFixedLengthListMixin: function() {
      return [P.Float32x4];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [P.Float32x4];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.Float32x4];
    },
    $isList: 1,
    $asList: function() {
      return [P.Float32x4];
    }
  };
  H._NativeFloat64x2List_Object_ListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.Float64x2];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [P.Float64x2];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.Float64x2];
    },
    $isList: 1,
    $asList: function() {
      return [P.Float64x2];
    }
  };
  H._NativeFloat64x2List_Object_ListMixin_FixedLengthListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.Float64x2];
    },
    $isFixedLengthListMixin: 1,
    $asFixedLengthListMixin: function() {
      return [P.Float64x2];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [P.Float64x2];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.Float64x2];
    },
    $isList: 1,
    $asList: function() {
      return [P.Float64x2];
    }
  };
  H._NativeInt32x4List_Object_ListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.Int32x4];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [P.Int32x4];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.Int32x4];
    },
    $isList: 1,
    $asList: function() {
      return [P.Int32x4];
    }
  };
  H._NativeInt32x4List_Object_ListMixin_FixedLengthListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.Int32x4];
    },
    $isFixedLengthListMixin: 1,
    $asFixedLengthListMixin: function() {
      return [P.Int32x4];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [P.Int32x4];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.Int32x4];
    },
    $isList: 1,
    $asList: function() {
      return [P.Int32x4];
    }
  };
  H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.double];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [P.double];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.double];
    },
    $isList: 1,
    $asList: function() {
      return [P.double];
    }
  };
  H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.double];
    },
    $isFixedLengthListMixin: 1,
    $asFixedLengthListMixin: function() {
      return [P.double];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [P.double];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.double];
    },
    $isList: 1,
    $asList: function() {
      return [P.double];
    }
  };
  H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [P.int];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.int];
    },
    $isList: 1,
    $asList: function() {
      return [P.int];
    }
  };
  H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $isFixedLengthListMixin: 1,
    $asFixedLengthListMixin: function() {
      return [P.int];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [P.int];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.int];
    },
    $isList: 1,
    $asList: function() {
      return [P.int];
    }
  };
  P._TimerImpl.prototype = {$isTimer: 1};
  P._AsyncAwaitCompleter.prototype = {$isCompleter: 1};
  P._AsyncStarStreamController.prototype = {};
  P._IterationMarker.prototype = {};
  P._SyncStarIterator.prototype = {$isIterator: 1};
  P._SyncStarIterable.prototype = {};
  P._BroadcastStream.prototype = {};
  P._BroadcastSubscription.prototype = {};
  P._BroadcastStreamController.prototype = {$isEventSink: 1, $isStreamConsumer: 1, $isStreamSink: 1, $isStreamController: 1, $is_StreamControllerLifecycle: 1, $is_StreamControllerBase: 1, $is_EventSink: 1, $is_EventDispatch: 1, $isSink: 1};
  P._SyncBroadcastStreamController.prototype = {$isSynchronousStreamController: 1};
  P._AsyncBroadcastStreamController.prototype = {};
  P._AsBroadcastStreamController.prototype = {};
  P.DeferredLibrary.prototype = {};
  P.DeferredLoadException.prototype = {$isException: 1};
  P.FutureOr.prototype = {};
  P.Future.prototype = {};
  P.TimeoutException.prototype = {$isException: 1};
  P.Completer.prototype = {};
  P._Completer.prototype = {$isCompleter: 1};
  P._AsyncCompleter.prototype = {};
  P._SyncCompleter.prototype = {};
  P._FutureListener.prototype = {};
  P._Future.prototype = {$isFuture: 1};
  P._AsyncCallbackEntry.prototype = {};
  P._AsyncRun.prototype = {};
  P.Stream.prototype = {};
  P.StreamSubscription.prototype = {};
  P.EventSink.prototype = {$isSink: 1};
  P.StreamView.prototype = {};
  P.StreamConsumer.prototype = {};
  P.StreamSink.prototype = {$isEventSink: 1, $isStreamConsumer: 1, $isSink: 1};
  P.StreamTransformer.prototype = {};
  P.StreamTransformerBase.prototype = {$isStreamTransformer: 1};
  P.StreamIterator.prototype = {};
  P._ControllerEventSinkWrapper.prototype = {$isEventSink: 1, $isSink: 1};
  P.StreamController.prototype = {$isEventSink: 1, $isStreamConsumer: 1, $isStreamSink: 1, $isSink: 1};
  P.SynchronousStreamController.prototype = {$isEventSink: 1, $isStreamConsumer: 1, $isStreamSink: 1, $isStreamController: 1, $isSink: 1};
  P._StreamControllerLifecycle.prototype = {};
  P._StreamControllerBase.prototype = {$isEventSink: 1, $isStreamConsumer: 1, $isStreamSink: 1, $isStreamController: 1, $is_StreamControllerLifecycle: 1, $is_EventSink: 1, $is_EventDispatch: 1, $isSink: 1};
  P._StreamController.prototype = {$isEventSink: 1, $isStreamConsumer: 1, $isStreamSink: 1, $isStreamController: 1, $is_StreamControllerLifecycle: 1, $is_StreamControllerBase: 1, $is_EventSink: 1, $is_EventDispatch: 1, $isSink: 1};
  P._SyncStreamControllerDispatch.prototype = {$isEventSink: 1, $isStreamConsumer: 1, $isStreamSink: 1, $isStreamController: 1, $isSynchronousStreamController: 1, $is_StreamControllerLifecycle: 1, $is_StreamControllerBase: 1, $is_StreamController: 1, $is_EventSink: 1, $is_EventDispatch: 1, $isSink: 1};
  P._AsyncStreamControllerDispatch.prototype = {$isEventSink: 1, $isStreamConsumer: 1, $isStreamSink: 1, $isStreamController: 1, $is_StreamControllerLifecycle: 1, $is_StreamControllerBase: 1, $is_StreamController: 1, $is_EventSink: 1, $is_EventDispatch: 1, $isSink: 1};
  P._AsyncStreamController.prototype = {$is_AsyncStreamControllerDispatch: 1};
  P._SyncStreamController.prototype = {$isSynchronousStreamController: 1, $is_SyncStreamControllerDispatch: 1};
  P._ControllerStream.prototype = {};
  P._ControllerSubscription.prototype = {};
  P._StreamSinkWrapper.prototype = {$isEventSink: 1, $isStreamConsumer: 1, $isStreamSink: 1, $isSink: 1};
  P._AddStreamState.prototype = {};
  P._StreamControllerAddStreamState.prototype = {};
  P._EventSink.prototype = {};
  P._EventDispatch.prototype = {};
  P._BufferingStreamSubscription.prototype = {$isStreamSubscription: 1, $is_EventSink: 1, $is_EventDispatch: 1};
  P._StreamImpl.prototype = {};
  P._GeneratedStreamImpl.prototype = {};
  P._IterablePendingEvents.prototype = {};
  P._DelayedEvent.prototype = {};
  P._DelayedData.prototype = {};
  P._DelayedError.prototype = {
    $as_DelayedEvent: function() {
    }
  };
  P._DelayedDone.prototype = {$is_DelayedEvent: 1,
    $as_DelayedEvent: function() {
    }
  };
  P._PendingEvents.prototype = {};
  P._StreamImplEvents.prototype = {};
  P._DoneStreamSubscription.prototype = {$isStreamSubscription: 1};
  P._AsBroadcastStream.prototype = {};
  P._BroadcastSubscriptionWrapper.prototype = {$isStreamSubscription: 1};
  P._StreamIterator.prototype = {$isStreamIterator: 1};
  P._EmptyStream.prototype = {};
  P._ForwardingStream.prototype = {
    $asStream: function($S, $T) {
      return [$T];
    }
  };
  P._ForwardingStreamSubscription.prototype = {
    $asStreamSubscription: function($S, $T) {
      return [$T];
    },
    $as_EventSink: function($S, $T) {
      return [$T];
    },
    $as_EventDispatch: function($S, $T) {
      return [$T];
    },
    $as_BufferingStreamSubscription: function($S, $T) {
      return [$T];
    }
  };
  P._WhereStream.prototype = {$asStream: null,
    $as_ForwardingStream: function($T) {
      return [$T, $T];
    }
  };
  P._MapStream.prototype = {};
  P._ExpandStream.prototype = {};
  P._HandleErrorStream.prototype = {$asStream: null,
    $as_ForwardingStream: function($T) {
      return [$T, $T];
    }
  };
  P._TakeStream.prototype = {$asStream: null,
    $as_ForwardingStream: function($T) {
      return [$T, $T];
    }
  };
  P._StateStreamSubscription.prototype = {$asStreamSubscription: null, $as_EventSink: null, $as_EventDispatch: null, $as_BufferingStreamSubscription: null,
    $as_ForwardingStreamSubscription: function($T) {
      return [$T, $T];
    }
  };
  P._TakeWhileStream.prototype = {$asStream: null,
    $as_ForwardingStream: function($T) {
      return [$T, $T];
    }
  };
  P._SkipStream.prototype = {$asStream: null,
    $as_ForwardingStream: function($T) {
      return [$T, $T];
    }
  };
  P._SkipWhileStream.prototype = {$asStream: null,
    $as_ForwardingStream: function($T) {
      return [$T, $T];
    }
  };
  P._DistinctStream.prototype = {$asStream: null,
    $as_ForwardingStream: function($T) {
      return [$T, $T];
    }
  };
  P._EventSinkWrapper.prototype = {$isEventSink: 1, $isSink: 1};
  P._SinkTransformerStreamSubscription.prototype = {
    $asStreamSubscription: function($S, $T) {
      return [$T];
    },
    $as_EventSink: function($S, $T) {
      return [$T];
    },
    $as_EventDispatch: function($S, $T) {
      return [$T];
    },
    $as_BufferingStreamSubscription: function($S, $T) {
      return [$T];
    }
  };
  P._StreamSinkTransformer.prototype = {};
  P._BoundSinkStream.prototype = {
    $asStream: function($S, $T) {
      return [$T];
    }
  };
  P._HandlerEventSink.prototype = {$isEventSink: 1,
    $asEventSink: function($S, $T) {
      return [$S];
    },
    $isSink: 1,
    $asSink: function($S, $T) {
      return [$S];
    }
  };
  P._StreamHandlerTransformer.prototype = {};
  P._StreamBindTransformer.prototype = {};
  P._StreamSubscriptionTransformer.prototype = {};
  P._BoundSubscriptionStream.prototype = {
    $asStream: function($S, $T) {
      return [$T];
    }
  };
  P.Timer.prototype = {};
  P.AsyncError.prototype = {$isError: 1};
  P._ZoneFunction.prototype = {};
  P.ZoneSpecification.prototype = {};
  P._ZoneSpecification.prototype = {$isZoneSpecification: 1};
  P.ZoneDelegate.prototype = {};
  P.Zone.prototype = {};
  P._ZoneDelegate.prototype = {$isZoneDelegate: 1};
  P._Zone.prototype = {$isZone: 1};
  P._CustomZone.prototype = {};
  P._RootZone.prototype = {};
  P._HashMap.prototype = {$isHashMap: 1};
  P._IdentityHashMap.prototype = {};
  P._CustomHashMap.prototype = {};
  P._HashMapKeyIterable.prototype = {};
  P._HashMapKeyIterator.prototype = {$isIterator: 1};
  P._LinkedIdentityHashMap.prototype = {};
  P._Es6LinkedIdentityHashMap.prototype = {};
  P._Es6MapIterable.prototype = {};
  P._Es6MapIterator.prototype = {$isIterator: 1};
  P._LinkedCustomHashMap.prototype = {};
  P._HashSet.prototype = {$isHashSet: 1};
  P._IdentityHashSet.prototype = {};
  P._CustomHashSet.prototype = {};
  P._HashSetIterator.prototype = {$isIterator: 1};
  P._LinkedHashSet.prototype = {$isLinkedHashSet: 1};
  P._LinkedIdentityHashSet.prototype = {};
  P._LinkedCustomHashSet.prototype = {};
  P._LinkedHashSetCell.prototype = {};
  P._LinkedHashSetIterator.prototype = {$isIterator: 1};
  P.UnmodifiableListView.prototype = {};
  P.HashMap.prototype = {$isMap: 1};
  P.HashSet.prototype = {$isEfficientLengthIterable: 1, $isIterable: 1, $isSet: 1};
  P.IterableMixin.prototype = {$isIterable: 1};
  P.IterableBase.prototype = {};
  P.HasNextIterator.prototype = {};
  P.LinkedHashMap.prototype = {$isMap: 1};
  P.LinkedHashSet.prototype = {$isEfficientLengthIterable: 1, $isIterable: 1, $isSet: 1};
  P.LinkedList0.prototype = {};
  P._LinkedListIterator0.prototype = {$isIterator: 1};
  P.LinkedListEntry.prototype = {};
  P.ListBase.prototype = {$isEfficientLengthIterable: 1, $isListMixin: 1, $isIterable: 1, $isList: 1};
  P.ListMixin.prototype = {
    get$iterator: function(receiver) {
      return H.ListIterator$(receiver, H.getRuntimeTypeArgumentIntercepted(this, receiver, "ListMixin", 0));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, H.intTypeCheck(index));
    },
    forEach$1: function(receiver, action) {
      var $length, i, _this = this;
      H.functionTypeCheck(action, {func: 1, ret: -1, args: [H.getRuntimeTypeArgumentIntercepted(_this, receiver, "ListMixin", 0)]});
      $length = _this.get$length(receiver);
      if (typeof $length !== "number")
        return H.iae($length);
      i = 0;
      for (; i < $length; ++i) {
        action.call$1(_this.$index(receiver, i));
        if ($length !== _this.get$length(receiver))
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
    },
    get$isEmpty: function(receiver) {
      return J.$eq$(this.get$length(receiver), 0);
    },
    get$isNotEmpty: function(receiver) {
      return !this.get$isEmpty(receiver);
    },
    get$first: function(receiver) {
      if (J.$eq$(this.get$length(receiver), 0))
        throw H.wrapException(H.IterableElementError_noElement());
      return this.$index(receiver, 0);
    },
    get$last: function(receiver) {
      if (J.$eq$(this.get$length(receiver), 0))
        throw H.wrapException(H.IterableElementError_noElement());
      return this.$index(receiver, J.$sub$n(this.get$length(receiver), 1));
    },
    contains$1: function(receiver, element) {
      var i,
        $length = this.get$length(receiver);
      if (typeof $length !== "number")
        return H.iae($length);
      i = 0;
      for (; i < $length; ++i) {
        if (J.$eq$(this.$index(receiver, i), element))
          return true;
        if ($length !== this.get$length(receiver))
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
      return false;
    },
    join$1: function(receiver, separator) {
      var buffer;
      H.stringTypeCheck(separator);
      if (J.$eq$(this.get$length(receiver), 0))
        return "";
      buffer = P.StringBuffer$("");
      buffer.writeAll$2(receiver, separator);
      return buffer.toString$0(0);
    },
    join$0: function($receiver) {
      return this.join$1($receiver, "");
    },
    where$1: function(receiver, test) {
      var t1 = H.getRuntimeTypeArgumentIntercepted(this, receiver, "ListMixin", 0);
      return H.WhereIterable$(receiver, H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [t1]}), t1);
    },
    map$1$1: function(receiver, f, $T) {
      var t1 = H.getRuntimeTypeArgumentIntercepted(this, receiver, "ListMixin", 0);
      return H.MappedListIterable$(receiver, H.functionTypeCheck(f, {func: 1, ret: $T, args: [t1]}), t1, $T);
    },
    map$1: function($receiver, f) {
      return this.map$1$1($receiver, f, null);
    },
    expand$1$1: function(receiver, f, $T) {
      var t1 = H.getRuntimeTypeArgumentIntercepted(this, receiver, "ListMixin", 0);
      return H.ExpandIterable$(receiver, H.functionTypeCheck(f, {func: 1, ret: [P.Iterable, $T], args: [t1]}), t1, $T);
    },
    expand$1: function($receiver, f) {
      return this.expand$1$1($receiver, f, null);
    },
    fold$1$2: function(receiver, initialValue, combine, $T) {
      var $length, value, i, _this = this;
      H.assertSubtypeOfRuntimeType(initialValue, $T);
      H.functionTypeCheck(combine, {func: 1, ret: $T, args: [$T, H.getRuntimeTypeArgumentIntercepted(_this, receiver, "ListMixin", 0)]});
      $length = _this.get$length(receiver);
      if (typeof $length !== "number")
        return H.iae($length);
      value = initialValue;
      i = 0;
      for (; i < $length; ++i) {
        value = combine.call$2(value, _this.$index(receiver, i));
        if ($length !== _this.get$length(receiver))
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
      return value;
    },
    fold$2: function($receiver, initialValue, combine) {
      return this.fold$1$2($receiver, initialValue, combine, null);
    },
    skip$1: function(receiver, count) {
      return H.SubListIterable$(receiver, H.intTypeCheck(count), null, H.getRuntimeTypeArgumentIntercepted(this, receiver, "ListMixin", 0));
    },
    skipWhile$1: function(receiver, test) {
      var t1 = H.getRuntimeTypeArgumentIntercepted(this, receiver, "ListMixin", 0);
      return H.SkipWhileIterable$(receiver, H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [t1]}), t1);
    },
    take$1: function(receiver, count) {
      return H.SubListIterable$(receiver, 0, H.intTypeCheck(count), H.getRuntimeTypeArgumentIntercepted(this, receiver, "ListMixin", 0));
    },
    toList$1$growable: function(receiver, growable) {
      var result, t2, i, _this = this,
        t1 = H.getRuntimeTypeArgumentIntercepted(_this, receiver, "ListMixin", 0);
      if (H.boolTypeCheck(growable)) {
        result = H.setRuntimeTypeInfo([], [t1]);
        C.JSArray_methods.set$length(result, _this.get$length(receiver));
      } else {
        t2 = _this.get$length(receiver);
        if (typeof t2 !== "number")
          return H.iae(t2);
        t2 = new Array(t2);
        t2.fixed$length = Array;
        result = H.setRuntimeTypeInfo(t2, [t1]);
      }
      i = 0;
      while (true) {
        t1 = _this.get$length(receiver);
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (!(i < t1))
          break;
        C.JSArray_methods.$indexSet(result, i, _this.$index(receiver, i));
        ++i;
      }
      return result;
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    add$1: function(receiver, element) {
      var t1, _this = this;
      H.assertSubtypeOfRuntimeType(element, H.getRuntimeTypeArgumentIntercepted(_this, receiver, "ListMixin", 0));
      t1 = _this.get$length(receiver);
      _this.set$length(receiver, J.$add$ansx(t1, 1));
      _this.$indexSet(receiver, t1, element);
    },
    addAll$1: function(receiver, iterable) {
      var i, t1, element, i0, _this = this;
      H.assertSubtype(iterable, "$isIterable", [H.getRuntimeTypeArgumentIntercepted(_this, receiver, "ListMixin", 0)], "$asIterable");
      i = _this.get$length(receiver);
      for (t1 = J.get$iterator$ax(iterable); t1.moveNext$0(); i = i0) {
        element = t1.get$current();
        if (typeof i !== "number")
          return i.$add();
        i0 = i + 1;
        _this.set$length(receiver, i0);
        _this.$indexSet(receiver, i, element);
      }
    },
    _closeGap$2: function(receiver, start, end) {
      var $length, size, i, _this = this;
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      $length = _this.get$length(receiver);
      if (typeof end !== "number")
        return end.$sub();
      if (typeof start !== "number")
        return H.iae(start);
      size = end - start;
      if (typeof $length !== "number")
        return H.iae($length);
      i = end;
      for (; i < $length; ++i)
        _this.$indexSet(receiver, i - size, _this.$index(receiver, i));
      _this.set$length(receiver, $length - size);
    },
    clear$0: function(receiver) {
      this.set$length(receiver, 0);
    },
    cast$1$0: function(receiver, $R) {
      return P.List_castFrom(receiver, H.getRuntimeTypeArgumentIntercepted(this, receiver, "ListMixin", 0), $R);
    },
    cast$0: function($receiver) {
      return this.cast$1$0($receiver, null);
    },
    removeLast$0: function(receiver) {
      var result, _this = this;
      if (J.$eq$(_this.get$length(receiver), 0))
        throw H.wrapException(H.IterableElementError_noElement());
      result = _this.$index(receiver, J.$sub$n(_this.get$length(receiver), 1));
      _this.set$length(receiver, J.$sub$n(_this.get$length(receiver), 1));
      return result;
    },
    $add: function(receiver, other) {
      var result, _this = this,
        t1 = [H.getRuntimeTypeArgumentIntercepted(_this, receiver, "ListMixin", 0)];
      H.assertSubtype(other, "$isList", t1, "$asList");
      result = H.setRuntimeTypeInfo([], t1);
      C.JSArray_methods.set$length(result, J.$add$ansx(_this.get$length(receiver), J.get$length$asx(other)));
      C.JSArray_methods.setRange$3(result, 0, _this.get$length(receiver), receiver);
      C.JSArray_methods.setRange$3(result, _this.get$length(receiver), result.length, other);
      return result;
    },
    sublist$2: function(receiver, start, end) {
      var listLength, $length, result, i;
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      listLength = this.get$length(receiver);
      if (end == null)
        end = listLength;
      P.RangeError_checkValidRange(start, end, listLength);
      if (typeof end !== "number")
        return end.$sub();
      if (typeof start !== "number")
        return H.iae(start);
      $length = end - start;
      result = H.setRuntimeTypeInfo([], [H.getRuntimeTypeArgumentIntercepted(this, receiver, "ListMixin", 0)]);
      C.JSArray_methods.set$length(result, $length);
      for (i = 0; i < $length; ++i)
        C.JSArray_methods.$indexSet(result, i, this.$index(receiver, start + i));
      return result;
    },
    fillRange$3: function(receiver, start, end, fill) {
      var i;
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      H.assertSubtypeOfRuntimeType(fill, H.getRuntimeTypeArgumentIntercepted(this, receiver, "ListMixin", 0));
      P.RangeError_checkValidRange(start, end, this.get$length(receiver));
      i = start;
      while (true) {
        if (typeof i !== "number")
          return i.$lt();
        if (typeof end !== "number")
          return H.iae(end);
        if (!(i < end))
          break;
        this.$indexSet(receiver, i, fill);
        ++i;
      }
    },
    setRange$4: function(receiver, start, end, iterable, skipCount) {
      var t1, $length, otherStart, otherList, t2, i, _this = this;
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      t1 = H.getRuntimeTypeArgumentIntercepted(_this, receiver, "ListMixin", 0);
      H.assertSubtype(iterable, "$isIterable", [t1], "$asIterable");
      H.intTypeCheck(skipCount);
      P.RangeError_checkValidRange(start, end, _this.get$length(receiver));
      if (typeof end !== "number")
        return end.$sub();
      if (typeof start !== "number")
        return H.iae(start);
      $length = end - start;
      if ($length === 0)
        return;
      P.RangeError_checkNotNegative(skipCount, "skipCount");
      if (H.checkSubtype(iterable, "$isList", [t1], "$asList")) {
        otherStart = skipCount;
        otherList = iterable;
      } else {
        otherList = J.toList$1$growable$ax(J.skip$1$ax(iterable, skipCount), false);
        otherStart = 0;
      }
      if (typeof otherStart !== "number")
        return otherStart.$add();
      t1 = J.getInterceptor$asx(otherList);
      t2 = t1.get$length(otherList);
      if (typeof t2 !== "number")
        return H.iae(t2);
      if (otherStart + $length > t2)
        throw H.wrapException(H.IterableElementError_tooFew());
      if (otherStart < start)
        for (i = $length - 1; i >= 0; --i)
          _this.$indexSet(receiver, start + i, t1.$index(otherList, otherStart + i));
      else
        for (i = 0; i < $length; ++i)
          _this.$indexSet(receiver, start + i, t1.$index(otherList, otherStart + i));
    },
    setRange$3: function($receiver, start, end, iterable) {
      return this.setRange$4($receiver, start, end, iterable, 0);
    },
    replaceRange$3: function(receiver, start, end, newContents) {
      var t1, removeLength, insertLength, insertEnd, newLength, _this = this;
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      H.assertSubtype(newContents, "$isIterable", [H.getRuntimeTypeArgumentIntercepted(_this, receiver, "ListMixin", 0)], "$asIterable");
      P.RangeError_checkValidRange(start, end, _this.get$length(receiver));
      t1 = J.getInterceptor$(newContents);
      if (!t1.$isEfficientLengthIterable)
        newContents = t1.toList$0(newContents);
      if (typeof end !== "number")
        return end.$sub();
      if (typeof start !== "number")
        return H.iae(start);
      removeLength = end - start;
      insertLength = J.get$length$asx(newContents);
      if (typeof insertLength !== "number")
        return H.iae(insertLength);
      insertEnd = start + insertLength;
      if (removeLength >= insertLength) {
        _this.setRange$3(receiver, start, insertEnd, newContents);
        if (removeLength > insertLength)
          _this._closeGap$2(receiver, insertEnd, end);
      } else {
        newLength = J.$add$ansx(_this.get$length(receiver), insertLength - removeLength);
        _this.set$length(receiver, newLength);
        _this.setRange$4(receiver, insertEnd, newLength, receiver, end);
        _this.setRange$3(receiver, start, insertEnd, newContents);
      }
    },
    insert$2: function(receiver, index, element) {
      var t1, _this = this;
      H.intTypeCheck(index);
      H.assertSubtypeOfRuntimeType(element, H.getRuntimeTypeArgumentIntercepted(_this, receiver, "ListMixin", 0));
      P.ArgumentError_checkNotNull(index, "index");
      P.RangeError_checkValueInInterval(index, 0, _this.get$length(receiver), "index");
      t1 = _this.get$length(receiver);
      if (index == null ? t1 == null : index === t1) {
        _this.add$1(receiver, element);
        return;
      }
      _this.set$length(receiver, J.$add$ansx(_this.get$length(receiver), 1));
      if (typeof index !== "number")
        return index.$add();
      _this.setRange$4(receiver, index + 1, _this.get$length(receiver), receiver, index);
      _this.$indexSet(receiver, index, element);
    },
    removeAt$1: function(receiver, index) {
      var result;
      H.intTypeCheck(index);
      result = this.$index(receiver, index);
      if (typeof index !== "number")
        return index.$add();
      this._closeGap$2(receiver, index, index + 1);
      return result;
    },
    insertAll$2: function(receiver, index, iterable) {
      var t1, insertionLength, _this = this;
      H.intTypeCheck(index);
      H.assertSubtype(iterable, "$isIterable", [H.getRuntimeTypeArgumentIntercepted(_this, receiver, "ListMixin", 0)], "$asIterable");
      P.RangeError_checkValueInInterval(index, 0, _this.get$length(receiver), "index");
      t1 = J.getInterceptor$(iterable);
      if (!t1.$isEfficientLengthIterable || iterable === receiver)
        iterable = t1.toList$0(iterable);
      t1 = J.getInterceptor$asx(iterable);
      insertionLength = t1.get$length(iterable);
      _this.set$length(receiver, J.$add$ansx(_this.get$length(receiver), insertionLength));
      if (!J.$eq$(t1.get$length(iterable), insertionLength)) {
        _this.set$length(receiver, J.$sub$n(_this.get$length(receiver), insertionLength));
        throw H.wrapException(P.ConcurrentModificationError$(iterable));
      }
      if (typeof index !== "number")
        return index.$add();
      if (typeof insertionLength !== "number")
        return H.iae(insertionLength);
      _this.setRange$4(receiver, index + insertionLength, _this.get$length(receiver), receiver, index);
      _this.setAll$2(receiver, index, iterable);
    },
    setAll$2: function(receiver, index, iterable) {
      var t1, element, index0;
      H.intTypeCheck(index);
      H.assertSubtype(iterable, "$isIterable", [H.getRuntimeTypeArgumentIntercepted(this, receiver, "ListMixin", 0)], "$asIterable");
      t1 = J.getInterceptor$(iterable);
      if (!!t1.$isList) {
        t1 = t1.get$length(iterable);
        if (typeof index !== "number")
          return index.$add();
        if (typeof t1 !== "number")
          return H.iae(t1);
        this.setRange$3(receiver, index, index + t1, iterable);
      } else
        for (t1 = t1.get$iterator(iterable); t1.moveNext$0(); index = index0) {
          element = t1.get$current();
          if (typeof index !== "number")
            return index.$add();
          index0 = index + 1;
          this.$indexSet(receiver, index, element);
        }
    },
    get$reversed: function(receiver) {
      return H.ReversedListIterable$(receiver, H.getRuntimeTypeArgumentIntercepted(this, receiver, "ListMixin", 0));
    },
    toString$0: function(receiver) {
      return P.IterableBase_iterableToFullString(receiver, "[", "]");
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  P.MapBase.prototype = {};
  P.MapBase_mapToString_closure.prototype = {
    call$2: function(k, v) {
      var t1 = this._box_0;
      if (!t1.first)
        this.result.write$1(", ");
      t1.first = false;
      t1 = this.result;
      t1.write$1(k);
      t1.write$1(": ");
      t1.write$1(v);
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: 4
  };
  P.MapMixin.prototype = {
    forEach$1: function(_, action) {
      var t1, key, _this = this;
      H.functionTypeCheck(action, {func: 1, ret: -1, args: [H.getRuntimeTypeArgument(_this, "MapMixin", 0), H.getRuntimeTypeArgument(_this, "MapMixin", 1)]});
      for (t1 = J.get$iterator$ax(_this.get$keys()); t1.moveNext$0();) {
        key = t1.get$current();
        action.call$2(key, _this.$index(0, key));
      }
    },
    containsKey$1: function(key) {
      return J.contains$1$asx(this.get$keys(), key);
    },
    get$length: function(_) {
      return J.get$length$asx(this.get$keys());
    },
    get$isEmpty: function(_) {
      return J.get$isEmpty$asx(this.get$keys());
    },
    get$isNotEmpty: function(_) {
      return J.get$isNotEmpty$asx(this.get$keys());
    },
    get$values: function() {
      return P._MapBaseValueIterable$(this, H.getRuntimeTypeArgument(this, "MapMixin", 0), H.getRuntimeTypeArgument(this, "MapMixin", 1));
    },
    toString$0: function(_) {
      return P.MapBase_mapToString(this);
    },
    $isMap: 1
  };
  P.UnmodifiableMapBase.prototype = {$is_UnmodifiableMapMixin: 1};
  P._MapBaseValueIterable.prototype = {
    get$length: function(_) {
      return J.get$length$asx(this._collection$_map);
    },
    get$isEmpty: function(_) {
      return J.get$isEmpty$asx(this._collection$_map);
    },
    get$isNotEmpty: function(_) {
      return J.get$isNotEmpty$asx(this._collection$_map);
    },
    get$first: function(_) {
      var t1 = this._collection$_map;
      return J.$index$asx(t1, J.get$first$ax(t1.get$keys()));
    },
    get$last: function(_) {
      var t1 = this._collection$_map;
      return J.$index$asx(t1, J.get$last$ax(t1.get$keys()));
    },
    get$iterator: function(_) {
      return P._MapBaseValueIterator$(this._collection$_map, H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1));
    },
    $asEfficientLengthIterable: function($K, $V) {
      return [$V];
    },
    $asIterable: function($K, $V) {
      return [$V];
    }
  };
  P._MapBaseValueIterator.prototype = {
    moveNext$0: function() {
      var _this = this,
        t1 = _this._keys;
      if (t1.moveNext$0()) {
        _this.set$_collection$_current(J.$index$asx(_this._collection$_map, t1.get$current()));
        return true;
      }
      _this.set$_collection$_current(null);
      return false;
    },
    get$current: function() {
      return this._collection$_current;
    },
    set$_collection$_current: function(_current) {
      this._collection$_current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 1));
    },
    $isIterator: 1,
    $asIterator: function($K, $V) {
      return [$V];
    }
  };
  P._UnmodifiableMapMixin.prototype = {
    $indexSet: function(_, key, value) {
      H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(this, 0));
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(this, 1));
      throw H.wrapException(P.UnsupportedError$("Cannot modify unmodifiable map"));
    },
    $isMap: 1
  };
  P.MapView.prototype = {
    $index: function(_, key) {
      return J.$index$asx(this._collection$_map, key);
    },
    $indexSet: function(_, key, value) {
      J.$indexSet$ax(this._collection$_map, H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(this, 0)), H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(this, 1)));
    },
    containsKey$1: function(key) {
      return this._collection$_map.containsKey$1(key);
    },
    forEach$1: function(_, action) {
      J.forEach$1$ax(this._collection$_map, H.functionTypeCheck(action, {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1)]}));
    },
    get$isEmpty: function(_) {
      return J.get$isEmpty$asx(this._collection$_map);
    },
    get$isNotEmpty: function(_) {
      return J.get$isNotEmpty$asx(this._collection$_map);
    },
    get$length: function(_) {
      return J.get$length$asx(this._collection$_map);
    },
    get$keys: function() {
      return this._collection$_map.get$keys();
    },
    toString$0: function(_) {
      return J.toString$0$(this._collection$_map);
    },
    get$values: function() {
      return this._collection$_map.get$values();
    },
    $isMap: 1
  };
  P.UnmodifiableMapView.prototype = {$is_UnmodifiableMapMixin: 1};
  P.Queue.prototype = {$isEfficientLengthIterable: 1, $isIterable: 1};
  P._DoubleLink.prototype = {};
  P.DoubleLinkedQueueEntry.prototype = {
    $as_DoubleLink: function($E) {
      return [[P.DoubleLinkedQueueEntry, $E]];
    }
  };
  P._DoubleLinkedQueueEntry.prototype = {};
  P._DoubleLinkedQueueElement.prototype = {};
  P._DoubleLinkedQueueSentinel.prototype = {};
  P.DoubleLinkedQueue.prototype = {$isEfficientLengthIterable: 1, $isQueue: 1};
  P._DoubleLinkedQueueIterator.prototype = {$isIterator: 1};
  P.ListQueue.prototype = {$isQueue: 1};
  P._ListQueueIterator.prototype = {$isIterator: 1};
  P.SetMixin.prototype = {$isEfficientLengthIterable: 1, $isIterable: 1, $isSet: 1};
  P.SetBase.prototype = {$isEfficientLengthIterable: 1, $isSetMixin: 1, $isIterable: 1, $isSet: 1};
  P._SetBase.prototype = {$isEfficientLengthIterable: 1, $isIterable: 1, $isSet: 1};
  P._UnmodifiableSet.prototype = {};
  P._SplayTreeNode.prototype = {};
  P._SplayTreeMapNode.prototype = {
    $as_SplayTreeNode: function($K, $V) {
      return [$K];
    }
  };
  P._SplayTree.prototype = {};
  P._TypeTest.prototype = {};
  P.SplayTreeMap.prototype = {$isMapMixin: 1,
    $as_SplayTree: function($K, $V) {
      return [$K, [P._SplayTreeMapNode, $K, $V]];
    },
    $isMap: 1
  };
  P._SplayTreeIterator.prototype = {$isIterator: 1,
    $asIterator: function($K, $T) {
      return [$T];
    }
  };
  P._SplayTreeKeyIterable.prototype = {};
  P._SplayTreeValueIterable.prototype = {
    $asEfficientLengthIterable: function($K, $V) {
      return [$V];
    },
    $asIterable: function($K, $V) {
      return [$V];
    }
  };
  P._SplayTreeKeyIterator.prototype = {
    $as_SplayTreeIterator: function($K) {
      return [$K, $K];
    },
    $asIterator: null
  };
  P._SplayTreeValueIterator.prototype = {};
  P._SplayTreeNodeIterator.prototype = {
    $as_SplayTreeIterator: function($K) {
      return [$K, [P._SplayTreeNode, $K]];
    },
    $asIterator: function($K) {
      return [[P._SplayTreeNode, $K]];
    }
  };
  P.SplayTreeSet.prototype = {$isEfficientLengthIterable: 1, $isIterableMixin: 1, $isSetMixin: 1,
    $as_SplayTree: function($E) {
      return [$E, [P._SplayTreeNode, $E]];
    },
    $isIterable: 1,
    $isSet: 1
  };
  P._ListBase_Object_ListMixin.prototype = {$isEfficientLengthIterable: 1, $isListMixin: 1, $isIterable: 1, $isList: 1};
  P._SetBase_Object_SetMixin.prototype = {$isEfficientLengthIterable: 1, $isSetMixin: 1, $isIterable: 1, $isSet: 1};
  P._SplayTreeMap__SplayTree_MapMixin.prototype = {$isMapMixin: 1,
    $as_SplayTree: function($K, $V) {
      return [$K, [P._SplayTreeMapNode, $K, $V]];
    },
    $isMap: 1
  };
  P._SplayTreeSet__SplayTree_IterableMixin.prototype = {$isIterableMixin: 1,
    $as_SplayTree: function($E) {
      return [$E, [P._SplayTreeNode, $E]];
    },
    $isIterable: 1
  };
  P._SplayTreeSet__SplayTree_IterableMixin_SetMixin.prototype = {$isEfficientLengthIterable: 1, $isIterableMixin: 1, $isSetMixin: 1,
    $as_SplayTree: function($E) {
      return [$E, [P._SplayTreeNode, $E]];
    },
    $isIterable: 1,
    $isSet: 1
  };
  P._UnmodifiableMapView_MapView__UnmodifiableMapMixin.prototype = {$is_UnmodifiableMapMixin: 1};
  P._convertJsonToDart_walk.prototype = {
    call$1: function(e) {
      var t1, i, map, processed, keys, t2, t3, key, _this = this;
      if (e == null || typeof e != "object")
        return e;
      if (Object.getPrototypeOf(e) === Array.prototype) {
        for (t1 = _this.reviver, i = 0; i < e.length; ++i)
          e[i] = t1.call$2(i, _this.call$1(e[i]));
        return e;
      }
      map = P._JsonMap$(e);
      processed = map._processed;
      keys = map._computeKeys$0();
      t1 = J.getInterceptor$asx(keys);
      t2 = _this.reviver;
      i = 0;
      while (true) {
        t3 = t1.get$length(keys);
        if (typeof t3 !== "number")
          return H.iae(t3);
        if (!(i < t3))
          break;
        key = t1.$index(keys, i);
        processed[key] = t2.call$2(key, _this.call$1(e[key]));
        ++i;
      }
      map._original = processed;
      return map;
    },
    $signature: 1
  };
  P._JsonMap.prototype = {
    $index: function(_, key) {
      var result, _this = this;
      if (_this.get$_isUpgraded())
        return J.$index$asx(_this.get$_upgradedMap(), key);
      else if (typeof key !== "string")
        return;
      else {
        result = P._JsonMap__getProperty(_this._processed, key);
        return P._JsonMap__isUnprocessed(result) ? _this._process$1(key) : result;
      }
    },
    get$length: function(_) {
      return this.get$_isUpgraded() ? J.get$length$asx(this.get$_upgradedMap()) : J.get$length$asx(this._computeKeys$0());
    },
    get$isEmpty: function(_) {
      return J.$eq$(this.get$length(this), 0);
    },
    get$isNotEmpty: function(_) {
      return J.$gt$n(this.get$length(this), 0);
    },
    get$keys: function() {
      if (this.get$_isUpgraded())
        return this.get$_upgradedMap().get$keys();
      return P._JsonMapKeyIterable$(this);
    },
    get$values: function() {
      var _this = this;
      if (_this.get$_isUpgraded())
        return _this.get$_upgradedMap().get$values();
      return H.MappedIterable_MappedIterable(_this._computeKeys$0(), new P._JsonMap_values_closure(_this), P.String, null);
    },
    $indexSet: function(_, key, value) {
      var processed, original, _this = this;
      H.stringTypeCheck(key);
      if (_this.get$_isUpgraded())
        J.$indexSet$ax(_this.get$_upgradedMap(), key, value);
      else if (_this.containsKey$1(key)) {
        processed = _this._processed;
        P._JsonMap__setProperty(processed, key, value);
        original = _this._original;
        if (original == null ? processed != null : original !== processed)
          P._JsonMap__setProperty(original, key, null);
      } else
        J.$indexSet$ax(_this._upgrade$0(), key, value);
    },
    containsKey$1: function(key) {
      if (this.get$_isUpgraded())
        return this.get$_upgradedMap().containsKey$1(key);
      if (typeof key !== "string")
        return false;
      return P._JsonMap__hasProperty(this._original, key);
    },
    forEach$1: function(_, f) {
      var keys, t1, i, t2, key, value, _this = this;
      H.functionTypeCheck(f, {func: 1, ret: -1, args: [P.String,,]});
      if (_this.get$_isUpgraded())
        return J.forEach$1$ax(_this.get$_upgradedMap(), f);
      keys = _this._computeKeys$0();
      t1 = J.getInterceptor$asx(keys);
      i = 0;
      while (true) {
        t2 = t1.get$length(keys);
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (!(i < t2))
          break;
        key = t1.$index(keys, i);
        value = P._JsonMap__getProperty(_this._processed, key);
        if (P._JsonMap__isUnprocessed(value)) {
          value = P._convertJsonToDartLazy(P._JsonMap__getProperty(_this._original, key));
          P._JsonMap__setProperty(_this._processed, key, value);
        }
        f.call$2(key, value);
        if (keys !== _this._data)
          throw H.wrapException(P.ConcurrentModificationError$(_this));
        ++i;
      }
    },
    get$_isUpgraded: function() {
      return this._processed == null;
    },
    get$_upgradedMap: function() {
      return this._data;
    },
    _computeKeys$0: function() {
      var t1,
        keys = H.listTypeCheck(this._data);
      if (keys == null) {
        t1 = P.String;
        keys = this._data = H.setRuntimeTypeInfo(J.JSArray_JSArray$typed(P._JsonMap__getPropertyNames(this._original), t1), [t1]);
      }
      return keys;
    },
    _upgrade$0: function() {
      var result, keys, t1, i, t2, key, _this = this;
      if (_this.get$_isUpgraded())
        return _this.get$_upgradedMap();
      result = P.LinkedHashMap_LinkedHashMap$_empty(P.String, null);
      keys = _this._computeKeys$0();
      t1 = J.getInterceptor$asx(keys);
      i = 0;
      while (true) {
        t2 = t1.get$length(keys);
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (!(i < t2))
          break;
        key = t1.$index(keys, i);
        result.$indexSet(0, key, _this.$index(0, key));
        ++i;
      }
      if (t1.get$isEmpty(keys))
        t1.add$1(keys, null);
      else
        t1.clear$0(keys);
      _this._original = _this._processed = null;
      return _this._data = result;
    },
    _process$1: function(key) {
      var result;
      H.stringTypeCheck(key);
      if (!P._JsonMap__hasProperty(this._original, key))
        return;
      result = P._convertJsonToDartLazy(P._JsonMap__getProperty(this._original, key));
      return P._JsonMap__setProperty(this._processed, key, result);
    },
    $asMapBase: function() {
      return [P.String, null];
    },
    $asMapMixin: function() {
      return [P.String, null];
    },
    $asMap: function() {
      return [P.String, null];
    }
  };
  P._JsonMap_values_closure.prototype = {
    call$1: function(each) {
      return J.$index$asx(this.$this, each);
    },
    $signature: 1
  };
  P._JsonMapKeyIterable.prototype = {
    get$length: function(_) {
      return J.get$length$asx(this._parent);
    },
    elementAt$1: function(_, index) {
      var t1;
      H.intTypeCheck(index);
      t1 = this._parent;
      return t1.get$_isUpgraded() ? J.elementAt$1$ax(t1.get$keys(), index) : J.$index$asx(t1._computeKeys$0(), index);
    },
    get$iterator: function(_) {
      var t1 = this._parent;
      return t1.get$_isUpgraded() ? J.get$iterator$ax(t1.get$keys()) : J.get$iterator$ax(t1._computeKeys$0());
    },
    contains$1: function(_, key) {
      return this._parent.containsKey$1(key);
    },
    $asEfficientLengthIterable: function() {
      return [P.String];
    },
    $asListIterable: function() {
      return [P.String];
    },
    $asIterable: function() {
      return [P.String];
    }
  };
  P._JsonDecoderSink.prototype = {
    $asChunkedConversionSink: function() {
      return [P.String];
    },
    $as_StringSinkConversionSink: function() {
      return [P.StringSink];
    },
    $asSink: function() {
      return [P.String];
    }
  };
  P.AsciiCodec.prototype = {
    get$name: function(_) {
      return "us-ascii";
    },
    encode$1: function(source) {
      H.stringTypeCheck(source);
      return this.get$encoder().convert$1(source);
    },
    decode$1: function(bytes) {
      var t1;
      H.assertSubtype(bytes, "$isList", [P.int], "$asList");
      t1 = C.AsciiDecoder_false_127.convert$1(bytes);
      return t1;
    },
    get$encoder: function() {
      return C.AsciiEncoder_127;
    },
    get$decoder: function() {
      return C.AsciiDecoder_false_127;
    }
  };
  P._UnicodeSubsetEncoder.prototype = {
    convert$1: function(string) {
      var end, $length, result, t1, t2, t3, i, codeUnit, t4;
      H.stringTypeCheck(string);
      end = P.RangeError_checkValidRange(0, null, string.length);
      if (typeof end !== "number")
        return end.$sub();
      $length = end - 0;
      result = H.NativeUint8List_NativeUint8List($length);
      for (t1 = this._subsetMask, t2 = J.getInterceptor$i(t1), t3 = J.getInterceptor$s(string), i = 0; i < $length; ++i) {
        codeUnit = t3._codeUnitAt$1(string, i);
        t4 = t2.$not(t1);
        if (typeof codeUnit !== "number")
          return codeUnit.$and();
        if (typeof t4 !== "number")
          return H.iae(t4);
        if ((codeUnit & t4) >>> 0 !== 0)
          throw H.wrapException(P.ArgumentError$value(string, "string", "Contains invalid characters."));
        if (i >= result.length)
          return H.ioore(result, i);
        result[i] = codeUnit;
      }
      return result;
    },
    $asStreamTransformer: function() {
      return [P.String, [P.List, P.int]];
    },
    $asStreamTransformerBase: function() {
      return [P.String, [P.List, P.int]];
    },
    $asConverter: function() {
      return [P.String, [P.List, P.int]];
    }
  };
  P.AsciiEncoder.prototype = {};
  P._UnicodeSubsetEncoderSink.prototype = {};
  P._UnicodeSubsetDecoder.prototype = {
    convert$1: function(bytes) {
      var t1, byteCount, t2, t3, i, byte, t4;
      H.assertSubtype(bytes, "$isList", [P.int], "$asList");
      t1 = J.getInterceptor$asx(bytes);
      byteCount = t1.get$length(bytes);
      P.RangeError_checkValidRange(0, null, byteCount);
      if (typeof byteCount !== "number")
        return H.iae(byteCount);
      t2 = this._subsetMask;
      t3 = J.getInterceptor$i(t2);
      i = 0;
      for (; i < byteCount; ++i) {
        byte = t1.$index(bytes, i);
        t4 = t3.$not(t2);
        if (typeof byte !== "number")
          return byte.$and();
        if (typeof t4 !== "number")
          return H.iae(t4);
        if ((byte & t4) >>> 0 !== 0) {
          if (!this._allowInvalid)
            throw H.wrapException(P.FormatException$("Invalid value in input: " + byte, null, null));
          return this._convertInvalid$3(bytes, 0, byteCount);
        }
      }
      return P.String_String$fromCharCodes(bytes, 0, byteCount);
    },
    _convertInvalid$3: function(bytes, start, end) {
      var buffer, t1, t2, t3, i, value, t4;
      H.assertSubtype(bytes, "$isList", [P.int], "$asList");
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      buffer = P.StringBuffer$("");
      t1 = this._subsetMask;
      t2 = J.getInterceptor$i(t1);
      t3 = J.getInterceptor$asx(bytes);
      i = start;
      while (true) {
        if (typeof i !== "number")
          return i.$lt();
        if (typeof end !== "number")
          return H.iae(end);
        if (!(i < end))
          break;
        value = t3.$index(bytes, i);
        t4 = t2.$not(t1);
        if (typeof value !== "number")
          return value.$and();
        if (typeof t4 !== "number")
          return H.iae(t4);
        if ((value & t4) >>> 0 !== 0)
          value = 65533;
        buffer.writeCharCode$1(value);
        ++i;
      }
      return buffer.toString$0(0);
    },
    $asStreamTransformer: function() {
      return [[P.List, P.int], P.String];
    },
    $asStreamTransformerBase: function() {
      return [[P.List, P.int], P.String];
    },
    $asConverter: function() {
      return [[P.List, P.int], P.String];
    }
  };
  P.AsciiDecoder.prototype = {};
  P._ErrorHandlingAsciiDecoderSink.prototype = {};
  P._SimpleAsciiDecoderSink.prototype = {};
  P.Base64Codec.prototype = {
    get$encoder: function() {
      return this._encoder;
    },
    get$decoder: function() {
      return C.C_Base64Decoder;
    },
    normalize$3: function(source, start, end) {
      var inverseAlphabet, t1, t2, i, sliceStart, buffer, firstPadding, firstPaddingSourceIndex, paddingCount, i0, char, i1, char0, value, t3, endLength, $length,
        _s31_ = "Invalid base64 encoding length ";
      H.stringTypeCheck(source);
      H.intTypeCheck(start);
      end = P.RangeError_checkValidRange(start, H.intTypeCheck(end), source.length);
      inverseAlphabet = $.$get$_Base64Decoder__inverseAlphabet();
      t1 = J.getInterceptor$asx(inverseAlphabet);
      t2 = J.getInterceptor$asx(source);
      i = start;
      sliceStart = i;
      buffer = null;
      firstPadding = -1;
      firstPaddingSourceIndex = -1;
      paddingCount = 0;
      while (true) {
        if (typeof i !== "number")
          return i.$lt();
        if (typeof end !== "number")
          return H.iae(end);
        if (!(i < end))
          break;
        c$0: {
          i0 = i + 1;
          char = t2.codeUnitAt$1(source, i);
          if (char === 37) {
            i1 = i0 + 2;
            if (i1 <= end) {
              char0 = H.parseHexByte(source, i0);
              if (char0 === 37)
                char0 = -1;
              i0 = i1;
            } else
              char0 = -1;
          } else
            char0 = char;
          if (typeof char0 !== "number")
            return H.iae(char0);
          if (0 <= char0 && char0 <= 127) {
            value = t1.$index(inverseAlphabet, char0);
            if (typeof value !== "number")
              return value.$ge();
            if (value >= 0) {
              char0 = C.JSString_methods.codeUnitAt$1("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", value);
              if (char0 == char)
                break c$0;
              char = char0;
            } else {
              if (value === -1) {
                if (typeof firstPadding !== "number")
                  return firstPadding.$lt();
                if (firstPadding < 0) {
                  t3 = buffer == null ? null : buffer.get$length(buffer);
                  if (t3 == null)
                    t3 = 0;
                  if (typeof sliceStart !== "number")
                    return H.iae(sliceStart);
                  firstPadding = J.$add$ansx(t3, i - sliceStart);
                  firstPaddingSourceIndex = i;
                }
                ++paddingCount;
                if (char === 61)
                  break c$0;
              }
              char = char0;
            }
            if (value !== -2) {
              if (buffer == null)
                buffer = P.StringBuffer$("");
              buffer.write$1(C.JSString_methods.substring$2(source, sliceStart, i));
              buffer.writeCharCode$1(char);
              sliceStart = i0;
              break c$0;
            }
          }
          throw H.wrapException(P.FormatException$("Invalid base64 data", source, i));
        }
        i = i0;
      }
      if (buffer != null) {
        buffer.write$1(t2.substring$2(source, sliceStart, end));
        if (typeof firstPadding !== "number")
          return firstPadding.$ge();
        if (firstPadding >= 0)
          P.Base64Codec__checkPadding(source, firstPaddingSourceIndex, end, firstPadding, paddingCount, buffer.get$length(buffer));
        else {
          endLength = J.$add$ansx(J.$mod$n(J.$sub$n(buffer.get$length(buffer), 1), 4), 1);
          if (endLength === 1)
            throw H.wrapException(P.FormatException$(_s31_, source, end));
          while (true) {
            if (typeof endLength !== "number")
              return endLength.$lt();
            if (!(endLength < 4))
              break;
            buffer.write$1("=");
            ++endLength;
          }
        }
        return C.JSString_methods.replaceRange$3(source, start, end, buffer.toString$0(0));
      }
      if (typeof start !== "number")
        return H.iae(start);
      $length = end - start;
      if (typeof firstPadding !== "number")
        return firstPadding.$ge();
      if (firstPadding >= 0)
        P.Base64Codec__checkPadding(source, firstPaddingSourceIndex, end, firstPadding, paddingCount, $length);
      else {
        endLength = C.JSInt_methods.$mod($length, 4);
        if (endLength === 1)
          throw H.wrapException(P.FormatException$(_s31_, source, end));
        if (endLength > 1)
          source = t2.replaceRange$3(source, end, end, endLength === 2 ? "==" : "=");
      }
      return source;
    },
    $asCodec: function() {
      return [[P.List, P.int], P.String];
    }
  };
  P.Base64Encoder.prototype = {
    convert$1: function(input) {
      var t1;
      H.assertSubtype(input, "$isList", [P.int], "$asList");
      t1 = J.getInterceptor$asx(input);
      if (t1.get$isEmpty(input))
        return "";
      return P.String_String$fromCharCodes(P._Base64Encoder$(this._urlSafe).encode$4(input, 0, t1.get$length(input), true), 0, null);
    },
    $asStreamTransformer: function() {
      return [[P.List, P.int], P.String];
    },
    $asStreamTransformerBase: function() {
      return [[P.List, P.int], P.String];
    },
    $asConverter: function() {
      return [[P.List, P.int], P.String];
    }
  };
  P._Base64Encoder.prototype = {
    createBuffer$1: function(bufferLength) {
      return H.NativeUint8List_NativeUint8List(H.intTypeCheck(bufferLength));
    },
    encode$4: function(bytes, start, end, isLast) {
      var count, byteCount, fullChunks, bufferLength, output, _this = this;
      H.assertSubtype(bytes, "$isList", [P.int], "$asList");
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      H.boolTypeCheck(isLast);
      if (typeof end !== "number")
        return end.$sub();
      if (typeof start !== "number")
        return H.iae(start);
      count = P._Base64Encoder__stateCount(_this._state);
      if (typeof count !== "number")
        return count.$add();
      byteCount = count + (end - start);
      fullChunks = C.JSInt_methods._tdivFast$1(byteCount, 3);
      bufferLength = fullChunks * 4;
      if (isLast && byteCount - fullChunks * 3 > 0)
        bufferLength += 4;
      output = _this.createBuffer$1(bufferLength);
      _this._state = H.intTypeCheck(P._Base64Encoder_encodeChunk(_this._alphabet, bytes, start, end, isLast, output, 0, _this._state));
      if (bufferLength > 0)
        return output;
      return;
    }
  };
  P._BufferCachingBase64Encoder.prototype = {};
  P._Base64EncoderSink.prototype = {};
  P._AsciiBase64EncoderSink.prototype = {};
  P._Utf8Base64EncoderSink.prototype = {};
  P.Base64Decoder.prototype = {
    convert$1: function(input) {
      var end, decoder, buffer;
      H.stringTypeCheck(input);
      end = P.RangeError_checkValidRange(0, null, input.length);
      if (0 === end)
        return H.NativeUint8List_NativeUint8List(0);
      decoder = P._Base64Decoder$();
      buffer = decoder.decode$3(input, 0, end);
      decoder.close$2(input, end);
      return buffer;
    },
    $asStreamTransformer: function() {
      return [P.String, [P.List, P.int]];
    },
    $asStreamTransformerBase: function() {
      return [P.String, [P.List, P.int]];
    },
    $asConverter: function() {
      return [P.String, [P.List, P.int]];
    }
  };
  P._Base64Decoder.prototype = {
    decode$3: function(input, start, end) {
      var buffer, _this = this;
      H.stringTypeCheck(input);
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      if (P._Base64Decoder__hasSeenPadding(_this._state)) {
        _this._state = H.intTypeCheck(P._Base64Decoder__checkPadding(input, start, end, _this._state));
        return;
      }
      if (start == end)
        return H.NativeUint8List_NativeUint8List(0);
      buffer = P._Base64Decoder__allocateBuffer(input, start, end, _this._state);
      _this._state = H.intTypeCheck(P._Base64Decoder_decodeChunk(input, start, end, buffer, 0, _this._state));
      return buffer;
    },
    close$2: function(input, end) {
      H.stringTypeCheck(input);
      H.intTypeCheck(end);
      if (J.$lt$n(this._state, P._Base64Decoder__encodePaddingState(0)))
        throw H.wrapException(P.FormatException$("Missing padding character", input, end));
      if (J.$gt$n(this._state, 0))
        throw H.wrapException(P.FormatException$("Invalid length, must be multiple of four", input, end));
      this._state = H.intTypeCheck(P._Base64Decoder__encodePaddingState(0));
    }
  };
  P._Base64DecoderSink.prototype = {};
  P.ByteConversionSink.prototype = {
    $asChunkedConversionSink: function() {
      return [[P.List, P.int]];
    },
    $asSink: function() {
      return [[P.List, P.int]];
    }
  };
  P.ByteConversionSinkBase.prototype = {};
  P._ByteAdapterSink.prototype = {};
  P._ByteCallbackSink.prototype = {};
  P.ChunkedConversionSink.prototype = {$isSink: 1};
  P._SimpleCallbackSink.prototype = {};
  P._ConverterStreamEventSink.prototype = {$isEventSink: 1,
    $asEventSink: function($S, $T) {
      return [$S];
    },
    $isSink: 1,
    $asSink: function($S, $T) {
      return [$S];
    }
  };
  P.Codec.prototype = {
    encode$1: function(input) {
      H.assertSubtypeOfRuntimeType(input, H.getRuntimeTypeArgument(this, "Codec", 0));
      return this.get$encoder().convert$1(input);
    },
    decode$1: function(encoded) {
      H.assertSubtypeOfRuntimeType(encoded, H.getRuntimeTypeArgument(this, "Codec", 1));
      return this.get$decoder().convert$1(encoded);
    },
    fuse$1$1: function(other, $R) {
      var t1 = H.getRuntimeTypeArgument(this, "Codec", 1);
      return P._FusedCodec$(this, H.assertSubtype(other, "$isCodec", [t1, $R], "$asCodec"), H.getRuntimeTypeArgument(this, "Codec", 0), t1, $R);
    },
    fuse$1: function(other) {
      return this.fuse$1$1(other, null);
    }
  };
  P._FusedCodec.prototype = {
    get$encoder: function() {
      return this._convert$_first.get$encoder().fuse$1$1(this._convert$_second.get$encoder(), H.getTypeArgumentByIndex(this, 2));
    },
    get$decoder: function() {
      return this._convert$_second.get$decoder().fuse$1$1(this._convert$_first.get$decoder(), H.getTypeArgumentByIndex(this, 0));
    },
    $asCodec: function($S, $M, $T) {
      return [$S, $T];
    }
  };
  P._InvertedCodec.prototype = {};
  P.Converter.prototype = {
    fuse$1$1: function(other, TT) {
      var t1 = H.getRuntimeTypeArgument(this, "Converter", 1);
      return P._FusedConverter$(this, H.assertSubtype(other, "$isConverter", [t1, TT], "$asConverter"), H.getRuntimeTypeArgument(this, "Converter", 0), t1, TT);
    },
    fuse$1: function(other) {
      return this.fuse$1$1(other, null);
    }
  };
  P._FusedConverter.prototype = {
    convert$1: function(input) {
      return this._convert$_second.convert$1(this._convert$_first.convert$1(H.assertSubtypeOfRuntimeType(input, H.getTypeArgumentByIndex(this, 0))));
    },
    $asStreamTransformer: function($S, $M, $T) {
      return [$S, $T];
    },
    $asStreamTransformerBase: function($S, $M, $T) {
      return [$S, $T];
    },
    $asConverter: function($S, $M, $T) {
      return [$S, $T];
    }
  };
  P.Encoding.prototype = {
    $asCodec: function() {
      return [P.String, [P.List, P.int]];
    }
  };
  P.HtmlEscapeMode.prototype = {};
  P.HtmlEscape.prototype = {
    $asStreamTransformer: function() {
      return [P.String, P.String];
    },
    $asStreamTransformerBase: function() {
      return [P.String, P.String];
    },
    $asConverter: function() {
      return [P.String, P.String];
    }
  };
  P._HtmlEscapeSink.prototype = {};
  P.JsonUnsupportedObjectError.prototype = {
    toString$0: function(_) {
      var safeString = P.Error_safeToString(this.unsupportedObject);
      return (this.cause != null ? "Converting object to an encodable object failed:" : "Converting object did not return an encodable object:") + " " + H.S(safeString);
    }
  };
  P.JsonCyclicError.prototype = {
    toString$0: function(_) {
      return "Cyclic error in JSON stringify";
    }
  };
  P.JsonCodec.prototype = {
    decode$2$reviver: function(source, reviver) {
      H.stringTypeCheck(source);
      H.functionTypeCheck(reviver, {func: 1, args: [P.Object, P.Object]});
      if (reviver == null)
        reviver = this._reviver;
      if (reviver == null)
        return this.get$decoder().convert$1(source);
      return P.JsonDecoder$(reviver).convert$1(source);
    },
    encode$2$toEncodable: function(value, toEncodable) {
      H.functionTypeCheck(toEncodable, {func: 1, args: [,]});
      if (toEncodable == null)
        toEncodable = this._toEncodable;
      if (toEncodable == null)
        return this.get$encoder().convert$1(value);
      return P.JsonEncoder$(toEncodable).convert$1(value);
    },
    encode$1: function(value) {
      return this.encode$2$toEncodable(value, null);
    },
    get$encoder: function() {
      var t1 = this._toEncodable;
      if (t1 == null)
        return C.JsonEncoder_null_null;
      return P.JsonEncoder$(t1);
    },
    get$decoder: function() {
      var t1 = this._reviver;
      if (t1 == null)
        return C.JsonDecoder_null;
      return P.JsonDecoder$(t1);
    },
    $asCodec: function() {
      return [P.Object, P.String];
    }
  };
  P.JsonEncoder.prototype = {
    convert$1: function(object) {
      return P._JsonStringStringifier_stringify(object, this._toEncodable, this.indent);
    },
    fuse$1$1: function(other, $T) {
      var t1;
      H.assertSubtype(other, "$isConverter", [P.String, $T], "$asConverter");
      if (other instanceof P.Utf8Encoder) {
        t1 = H.createRuntimeType($T);
        t1 = H.checkSubtype(t1, "$isList", [P.int], "$asList");
      } else
        t1 = false;
      if (t1)
        return H.assertSubtype(P.JsonUtf8Encoder$(this.indent, this._toEncodable), "$isConverter", [P.Object, $T], "$asConverter");
      return this.super$Converter$fuse(other, $T);
    },
    fuse$1: function(other) {
      return this.fuse$1$1(other, null);
    },
    $asStreamTransformer: function() {
      return [P.Object, P.String];
    },
    $asStreamTransformerBase: function() {
      return [P.Object, P.String];
    },
    $asConverter: function() {
      return [P.Object, P.String];
    }
  };
  P.JsonUtf8Encoder.prototype = {
    convert$1: function(object) {
      var t1, $length, i, result, offset, byteList, t2, end,
        bytes = H.setRuntimeTypeInfo([], [[P.List, P.int]]);
      P._JsonUtf8Stringifier_stringify(object, this._indent, this._toEncodable, 256, new P.JsonUtf8Encoder_convert_addChunk(bytes));
      t1 = bytes.length;
      if (t1 === 1) {
        if (0 >= t1)
          return H.ioore(bytes, 0);
        return bytes[0];
      }
      for ($length = 0, i = 0; i < bytes.length; ++i) {
        t1 = J.get$length$asx(bytes[i]);
        if (typeof t1 !== "number")
          return H.iae(t1);
        $length += t1;
      }
      result = H.NativeUint8List_NativeUint8List($length);
      for (t1 = result && C.NativeUint8List_methods, i = 0, offset = 0; i < bytes.length; ++i, offset = end) {
        byteList = bytes[i];
        t2 = J.get$length$asx(byteList);
        if (typeof t2 !== "number")
          return H.iae(t2);
        end = offset + t2;
        t1.setRange$3(result, offset, end, byteList);
      }
      return result;
    },
    $asStreamTransformer: function() {
      return [P.Object, [P.List, P.int]];
    },
    $asStreamTransformerBase: function() {
      return [P.Object, [P.List, P.int]];
    },
    $asConverter: function() {
      return [P.Object, [P.List, P.int]];
    }
  };
  P.JsonUtf8Encoder_convert_addChunk.prototype = {
    call$3: function(chunk, start, end) {
      var t1, t2;
      H.interceptedTypeCheck(chunk, "$isUint8List");
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      if (typeof start !== "number")
        return start.$gt();
      if (start <= 0) {
        t1 = chunk.length;
        if (typeof end !== "number")
          return end.$lt();
        t1 = end < t1;
      } else
        t1 = true;
      if (t1) {
        if (typeof end !== "number")
          return end.$sub();
        t1 = chunk.buffer;
        t2 = chunk.byteOffset;
        if (typeof t2 !== "number")
          return t2.$add();
        chunk = P.Uint8List_Uint8List$view(t1, t2 + start, end - start);
      }
      J.add$1$ax(this.bytes, chunk);
    },
    "call*": "call$3",
    $requiredArgCount: 3,
    $signature: 40
  };
  P._JsonEncoderSink.prototype = {
    $asChunkedConversionSink: function() {
      return [P.Object];
    },
    $asSink: function() {
      return [P.Object];
    }
  };
  P._JsonUtf8EncoderSink.prototype = {
    $asChunkedConversionSink: function() {
      return [P.Object];
    },
    $asSink: function() {
      return [P.Object];
    }
  };
  P.JsonDecoder.prototype = {
    convert$1: function(input) {
      return P._parseJson(H.stringTypeCheck(input), this._reviver);
    },
    $asStreamTransformer: function() {
      return [P.String, P.Object];
    },
    $asStreamTransformerBase: function() {
      return [P.String, P.Object];
    },
    $asConverter: function() {
      return [P.String, P.Object];
    }
  };
  P._JsonStringifier.prototype = {
    writeStringContent$1: function(s) {
      var $length, t1, offset, i, charCode, _this = this;
      H.stringTypeCheck(s);
      $length = s.length;
      for (t1 = J.getInterceptor$s(s), offset = 0, i = 0; i < $length; ++i) {
        charCode = t1._codeUnitAt$1(s, i);
        if (typeof charCode !== "number")
          return charCode.$gt();
        if (charCode > 92)
          continue;
        if (charCode < 32) {
          if (i > offset)
            _this.writeStringSlice$3(s, offset, i);
          offset = i + 1;
          _this.writeCharCode$1(92);
          switch (charCode) {
            case 8:
              _this.writeCharCode$1(98);
              break;
            case 9:
              _this.writeCharCode$1(116);
              break;
            case 10:
              _this.writeCharCode$1(110);
              break;
            case 12:
              _this.writeCharCode$1(102);
              break;
            case 13:
              _this.writeCharCode$1(114);
              break;
            default:
              _this.writeCharCode$1(117);
              _this.writeCharCode$1(48);
              _this.writeCharCode$1(48);
              _this.writeCharCode$1(P._JsonStringifier_hexDigit(C.JSInt_methods._shrOtherPositive$1(charCode, 4) & 15));
              _this.writeCharCode$1(P._JsonStringifier_hexDigit(charCode & 15));
              break;
          }
        } else if (charCode === 34 || charCode === 92) {
          if (i > offset)
            _this.writeStringSlice$3(s, offset, i);
          offset = i + 1;
          _this.writeCharCode$1(92);
          _this.writeCharCode$1(charCode);
        }
      }
      if (offset === 0)
        _this.writeString$1(s);
      else if (offset < $length)
        _this.writeStringSlice$3(s, offset, $length);
    },
    _checkCycle$1: function(object) {
      var t3,
        t1 = this._seen,
        t2 = J.getInterceptor$asx(t1),
        i = 0;
      while (true) {
        t3 = t2.get$length(t1);
        if (typeof t3 !== "number")
          return H.iae(t3);
        if (!(i < t3))
          break;
        t3 = t2.$index(t1, i);
        if (object == null ? t3 == null : object === t3)
          throw H.wrapException(P.JsonCyclicError$(object));
        ++i;
      }
      t2.add$1(t1, object);
    },
    _removeSeen$1: function(object) {
      J.removeLast$0$ax(this._seen);
    },
    writeObject$1: function(object) {
      var customJson, e, t1, exception, _this = this;
      if (_this.writeJsonValue$1(object))
        return;
      _this._checkCycle$1(object);
      try {
        customJson = _this._toEncodable.call$1(object);
        if (!_this.writeJsonValue$1(customJson)) {
          t1 = P.JsonUnsupportedObjectError$(object, null, _this.get$_partialResult());
          throw H.wrapException(t1);
        }
        _this._removeSeen$1(object);
      } catch (exception) {
        e = H.unwrapException(exception);
        t1 = P.JsonUnsupportedObjectError$(object, e, _this.get$_partialResult());
        throw H.wrapException(t1);
      }
    },
    writeJsonValue$1: function(object) {
      var t1, success, _this = this;
      if (typeof object === "number") {
        if (!C.JSNumber_methods.get$isFinite(object))
          return false;
        _this.writeNumber$1(object);
        return true;
      } else if (object === true) {
        _this.writeString$1("true");
        return true;
      } else if (object === false) {
        _this.writeString$1("false");
        return true;
      } else if (object == null) {
        _this.writeString$1("null");
        return true;
      } else if (typeof object === "string") {
        _this.writeString$1('"');
        _this.writeStringContent$1(object);
        _this.writeString$1('"');
        return true;
      } else {
        t1 = J.getInterceptor$(object);
        if (!!t1.$isList) {
          _this._checkCycle$1(object);
          _this.writeList$1(object);
          _this._removeSeen$1(object);
          return true;
        } else if (!!t1.$isMap) {
          _this._checkCycle$1(object);
          success = _this.writeMap$1(object);
          _this._removeSeen$1(object);
          return success;
        } else
          return false;
      }
    },
    writeList$1: function(list) {
      var t1, i, t2, _this = this;
      H.listTypeCheck(list);
      _this.writeString$1("[");
      t1 = J.getInterceptor$asx(list);
      if (t1.get$isNotEmpty(list)) {
        _this.writeObject$1(t1.$index(list, 0));
        i = 1;
        while (true) {
          t2 = t1.get$length(list);
          if (typeof t2 !== "number")
            return H.iae(t2);
          if (!(i < t2))
            break;
          _this.writeString$1(",");
          _this.writeObject$1(t1.$index(list, i));
          ++i;
        }
      }
      _this.writeString$1("]");
    },
    writeMap$1: function(map) {
      var t1, keyValueList, i, separator, t2, _this = this, _box_0 = {};
      H.interceptedTypeCheck(map, "$isMap");
      if (map.get$isEmpty(map)) {
        _this.writeString$1("{}");
        return true;
      }
      t1 = J.$mul$ns(map.get$length(map), 2);
      if (typeof t1 !== "number")
        return H.iae(t1);
      keyValueList = new Array(t1);
      keyValueList.fixed$length = Array;
      i = _box_0.i = 0;
      _box_0.allStringKeys = true;
      map.forEach$1(0, new P._JsonStringifier_writeMap_closure(_box_0, keyValueList));
      if (!_box_0.allStringKeys)
        return false;
      _this.writeString$1("{");
      for (t1 = keyValueList.length, separator = '"'; i < t1; i += 2, separator = ',"') {
        _this.writeString$1(separator);
        _this.writeStringContent$1(H.stringTypeCheck(keyValueList[i]));
        _this.writeString$1('":');
        t2 = i + 1;
        if (t2 >= t1)
          return H.ioore(keyValueList, t2);
        _this.writeObject$1(keyValueList[t2]);
      }
      _this.writeString$1("}");
      return true;
    }
  };
  P._JsonStringifier_writeMap_closure.prototype = {
    call$2: function(key, value) {
      var t1, t2, t3, t4;
      if (typeof key !== "string")
        this._box_0.allStringKeys = false;
      t1 = this.keyValueList;
      t2 = this._box_0;
      t3 = t2.i;
      t2.i = J.$add$ansx(t3, 1);
      t4 = J.getInterceptor$ax(t1);
      t4.$indexSet(t1, t3, key);
      t3 = t2.i;
      t2.i = J.$add$ansx(t3, 1);
      t4.$indexSet(t1, t3, value);
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: 4
  };
  P._JsonPrettyPrintMixin.prototype = {
    writeList$1: function(list) {
      var t1, t2, i, _this = this;
      H.listTypeCheck(list);
      t1 = J.getInterceptor$asx(list);
      if (t1.get$isEmpty(list))
        _this.writeString$1("[]");
      else {
        _this.writeString$1("[\n");
        t2 = H.intTypeCheck(J.$add$ansx(_this._JsonPrettyPrintMixin__indentLevel, 1));
        _this._JsonPrettyPrintMixin__indentLevel = t2;
        _this.writeIndentation$1(t2);
        _this.writeObject$1(t1.$index(list, 0));
        i = 1;
        while (true) {
          t2 = t1.get$length(list);
          if (typeof t2 !== "number")
            return H.iae(t2);
          if (!(i < t2))
            break;
          _this.writeString$1(",\n");
          _this.writeIndentation$1(_this._JsonPrettyPrintMixin__indentLevel);
          _this.writeObject$1(t1.$index(list, i));
          ++i;
        }
        _this.writeString$1("\n");
        t1 = H.intTypeCheck(J.$sub$n(_this._JsonPrettyPrintMixin__indentLevel, 1));
        _this._JsonPrettyPrintMixin__indentLevel = t1;
        _this.writeIndentation$1(t1);
        _this.writeString$1("]");
      }
    },
    writeMap$1: function(map) {
      var t1, keyValueList, i, separator, t2, _this = this, _box_0 = {};
      H.interceptedTypeCheck(map, "$isMap");
      if (map.get$isEmpty(map)) {
        _this.writeString$1("{}");
        return true;
      }
      t1 = J.$mul$ns(map.get$length(map), 2);
      if (typeof t1 !== "number")
        return H.iae(t1);
      keyValueList = new Array(t1);
      keyValueList.fixed$length = Array;
      i = _box_0.i = 0;
      _box_0.allStringKeys = true;
      map.forEach$1(0, new P._JsonPrettyPrintMixin_writeMap_closure(_box_0, keyValueList));
      if (!_box_0.allStringKeys)
        return false;
      _this.writeString$1("{\n");
      _this._JsonPrettyPrintMixin__indentLevel = H.intTypeCheck(J.$add$ansx(_this._JsonPrettyPrintMixin__indentLevel, 1));
      for (t1 = keyValueList.length, separator = ""; i < t1; i += 2, separator = ",\n") {
        _this.writeString$1(separator);
        _this.writeIndentation$1(_this._JsonPrettyPrintMixin__indentLevel);
        _this.writeString$1('"');
        _this.writeStringContent$1(H.stringTypeCheck(keyValueList[i]));
        _this.writeString$1('": ');
        t2 = i + 1;
        if (t2 >= t1)
          return H.ioore(keyValueList, t2);
        _this.writeObject$1(keyValueList[t2]);
      }
      _this.writeString$1("\n");
      t1 = H.intTypeCheck(J.$sub$n(_this._JsonPrettyPrintMixin__indentLevel, 1));
      _this._JsonPrettyPrintMixin__indentLevel = t1;
      _this.writeIndentation$1(t1);
      _this.writeString$1("}");
      return true;
    },
    $is_JsonStringifier: 1
  };
  P._JsonPrettyPrintMixin_writeMap_closure.prototype = {
    call$2: function(key, value) {
      var t1, t2, t3, t4;
      if (typeof key !== "string")
        this._box_0.allStringKeys = false;
      t1 = this.keyValueList;
      t2 = this._box_0;
      t3 = t2.i;
      t2.i = J.$add$ansx(t3, 1);
      t4 = J.getInterceptor$ax(t1);
      t4.$indexSet(t1, t3, key);
      t3 = t2.i;
      t2.i = J.$add$ansx(t3, 1);
      t4.$indexSet(t1, t3, value);
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: 4
  };
  P._JsonStringStringifier.prototype = {
    get$_partialResult: function() {
      var t1 = this._sink;
      return t1 instanceof P.StringBuffer ? t1.toString$0(0) : null;
    },
    writeNumber$1: function(number) {
      this._sink.write$1(J.toString$0$(H.numTypeCheck(number)));
    },
    writeString$1: function(string) {
      this._sink.write$1(H.stringTypeCheck(string));
    },
    writeStringSlice$3: function(string, start, end) {
      this._sink.write$1(J.substring$2$s(H.stringTypeCheck(string), H.intTypeCheck(start), H.intTypeCheck(end)));
    },
    writeCharCode$1: function(charCode) {
      this._sink.writeCharCode$1(H.intTypeCheck(charCode));
    }
  };
  P._JsonStringStringifierPretty.prototype = {
    writeIndentation$1: function(count) {
      var t1, i;
      H.intTypeCheck(count);
      if (typeof count !== "number")
        return H.iae(count);
      t1 = this._indent;
      i = 0;
      for (; i < count; ++i)
        this.writeString$1(t1);
    },
    $is_JsonPrettyPrintMixin: 1
  };
  P._JsonUtf8Stringifier.prototype = {
    flush$0: function() {
      var _this = this;
      if (J.$gt$n(_this.index, 0))
        _this.addChunk.call$3(_this.buffer, 0, _this.index);
      _this.buffer = null;
      _this.index = 0;
    },
    get$_partialResult: function() {
      return;
    },
    writeNumber$1: function(number) {
      this.writeAsciiString$1(J.toString$0$(H.numTypeCheck(number)));
    },
    writeAsciiString$1: function(string) {
      var t1, i;
      H.stringTypeCheck(string);
      for (t1 = string.length, i = 0; i < t1; ++i)
        this.writeByte$1(C.JSString_methods._codeUnitAt$1(string, i));
    },
    writeString$1: function(string) {
      H.stringTypeCheck(string);
      this.writeStringSlice$3(string, 0, string.length);
    },
    writeStringSlice$3: function(string, start, end) {
      var t1, i, char, i0, nextChar;
      H.stringTypeCheck(string);
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      t1 = J.getInterceptor$s(string);
      i = start;
      while (true) {
        if (typeof i !== "number")
          return i.$lt();
        if (typeof end !== "number")
          return H.iae(end);
        if (!(i < end))
          break;
        c$0: {
          char = t1.codeUnitAt$1(string, i);
          if (typeof char !== "number")
            return char.$le();
          if (char <= 127)
            this.writeByte$1(char);
          else {
            if ((char & 64512) === 55296 && i + 1 < end) {
              i0 = i + 1;
              nextChar = C.JSString_methods.codeUnitAt$1(string, i0);
              if (typeof nextChar !== "number")
                return nextChar.$and();
              if ((nextChar & 64512) === 56320) {
                this.writeFourByteCharCode$1(65536 + ((char & 1023) << 10) + (nextChar & 1023));
                i = i0;
                break c$0;
              }
            }
            this.writeMultiByteCharCode$1(char);
          }
        }
        ++i;
      }
    },
    writeCharCode$1: function(charCode) {
      H.intTypeCheck(charCode);
      if (typeof charCode !== "number")
        return charCode.$le();
      if (charCode <= 127) {
        this.writeByte$1(charCode);
        return;
      }
      this.writeMultiByteCharCode$1(charCode);
    },
    writeMultiByteCharCode$1: function(charCode) {
      var _this = this;
      H.intTypeCheck(charCode);
      if (typeof charCode !== "number")
        return charCode.$le();
      if (charCode <= 2047) {
        _this.writeByte$1((192 | C.JSInt_methods._shrOtherPositive$1(charCode, 6)) >>> 0);
        _this.writeByte$1(128 | charCode & 63);
        return;
      }
      if (charCode <= 65535) {
        _this.writeByte$1((224 | C.JSInt_methods._shrOtherPositive$1(charCode, 12)) >>> 0);
        _this.writeByte$1(128 | C.JSInt_methods._shrOtherPositive$1(charCode, 6) & 63);
        _this.writeByte$1(128 | charCode & 63);
        return;
      }
      _this.writeFourByteCharCode$1(charCode);
    },
    writeFourByteCharCode$1: function(charCode) {
      var _this = this;
      H.intTypeCheck(charCode);
      if (typeof charCode !== "number")
        return charCode.$shr();
      _this.writeByte$1((240 | C.JSInt_methods._shrOtherPositive$1(charCode, 18)) >>> 0);
      _this.writeByte$1(128 | C.JSInt_methods._shrOtherPositive$1(charCode, 12) & 63);
      _this.writeByte$1(128 | C.JSInt_methods._shrOtherPositive$1(charCode, 6) & 63);
      _this.writeByte$1(128 | charCode & 63);
    },
    writeByte$1: function(byte) {
      var t1, t2, _this = this;
      H.intTypeCheck(byte);
      if (J.$eq$(_this.index, J.get$length$asx(_this.buffer))) {
        _this.addChunk.call$3(_this.buffer, 0, _this.index);
        _this.buffer = H.interceptedTypeCheck(H.NativeUint8List_NativeUint8List(_this.bufferSize), "$isUint8List");
        _this.index = 0;
      }
      t1 = _this.buffer;
      t2 = _this.index;
      _this.index = H.intTypeCheck(J.$add$ansx(t2, 1));
      J.$indexSet$ax(t1, t2, byte);
    }
  };
  P._JsonUtf8StringifierPretty.prototype = {
    writeIndentation$1: function(count) {
      var indent, t1, indentLength, char, end, t2, i, _this = this;
      H.intTypeCheck(count);
      indent = _this.indent;
      t1 = J.getInterceptor$asx(indent);
      indentLength = t1.get$length(indent);
      if (indentLength === 1) {
        char = t1.$index(indent, 0);
        while (true) {
          if (typeof count !== "number")
            return count.$gt();
          if (!(count > 0))
            break;
          _this.writeByte$1(char);
          --count;
        }
        return;
      }
      while (true) {
        if (typeof count !== "number")
          return count.$gt();
        if (!(count > 0))
          break;
        --count;
        end = J.$add$ansx(_this.index, indentLength);
        t2 = J.get$length$asx(_this.buffer);
        if (typeof end !== "number")
          return end.$le();
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (end <= t2) {
          J.setRange$3$ax(_this.buffer, _this.index, end, indent);
          _this.index = end;
        } else {
          if (typeof indentLength !== "number")
            return H.iae(indentLength);
          i = 0;
          for (; i < indentLength; ++i)
            _this.writeByte$1(t1.$index(indent, i));
        }
      }
    },
    $is_JsonPrettyPrintMixin: 1
  };
  P.Latin1Codec.prototype = {
    get$name: function(_) {
      return "iso-8859-1";
    },
    encode$1: function(source) {
      H.stringTypeCheck(source);
      return this.get$encoder().convert$1(source);
    },
    decode$1: function(bytes) {
      var t1;
      H.assertSubtype(bytes, "$isList", [P.int], "$asList");
      t1 = C.Latin1Decoder_false_255.convert$1(bytes);
      return t1;
    },
    get$encoder: function() {
      return C.Latin1Encoder_255;
    },
    get$decoder: function() {
      return C.Latin1Decoder_false_255;
    }
  };
  P.Latin1Encoder.prototype = {};
  P.Latin1Decoder.prototype = {};
  P._Latin1DecoderSink.prototype = {};
  P._Latin1AllowInvalidDecoderSink.prototype = {};
  P.LineSplitter.prototype = {
    $asStreamTransformer: function() {
      return [P.String, P.String];
    },
    $asStreamTransformerBase: function() {
      return [P.String, P.String];
    }
  };
  P._LineSplitterSink.prototype = {};
  P._LineSplitterEventSink.prototype = {$isEventSink: 1,
    $asEventSink: function() {
      return [P.String];
    }
  };
  P.StringConversionSink.prototype = {
    $asChunkedConversionSink: function() {
      return [P.String];
    },
    $asSink: function() {
      return [P.String];
    }
  };
  P.ClosableStringSink.prototype = {};
  P._ClosableStringSink.prototype = {$isClosableStringSink: 1, $isStringSink: 1};
  P._StringConversionSinkAsStringSinkAdapter.prototype = {$isClosableStringSink: 1, $isStringSink: 1};
  P.StringConversionSinkBase.prototype = {};
  P.StringConversionSinkMixin.prototype = {$isChunkedConversionSink: 1,
    $asChunkedConversionSink: function() {
      return [P.String];
    },
    $isStringConversionSink: 1,
    $isSink: 1,
    $asSink: function() {
      return [P.String];
    }
  };
  P._StringSinkConversionSink.prototype = {};
  P._StringCallbackSink.prototype = {
    $asChunkedConversionSink: function() {
      return [P.String];
    },
    $as_StringSinkConversionSink: function() {
      return [P.StringBuffer];
    },
    $asSink: function() {
      return [P.String];
    }
  };
  P._StringAdapterSink.prototype = {};
  P._Utf8StringSinkAdapter.prototype = {};
  P._Utf8ConversionSink.prototype = {};
  P.Utf8Codec.prototype = {
    get$name: function(_) {
      return "utf-8";
    },
    decode$1: function(codeUnits) {
      H.assertSubtype(codeUnits, "$isList", [P.int], "$asList");
      return P.Utf8Decoder$(false).convert$1(codeUnits);
    },
    get$encoder: function() {
      return C.C_Utf8Encoder;
    },
    get$decoder: function() {
      return P.Utf8Decoder$(false);
    }
  };
  P.Utf8Encoder.prototype = {
    convert$1: function(string) {
      var end, $length, encoder;
      H.stringTypeCheck(string);
      end = P.RangeError_checkValidRange(0, null, string.length);
      if (typeof end !== "number")
        return end.$sub();
      $length = end - 0;
      if ($length === 0)
        return H.NativeUint8List_NativeUint8List(0);
      encoder = P._Utf8Encoder$withBufferSize($length * 3);
      if (encoder._fillBuffer$3(string, 0, end) !== end)
        encoder._writeSurrogate$2(J.codeUnitAt$1$s(string, end - 1), 0);
      return J.sublist$2$ax(encoder._buffer, 0, encoder._bufferIndex);
    },
    $asStreamTransformer: function() {
      return [P.String, [P.List, P.int]];
    },
    $asStreamTransformerBase: function() {
      return [P.String, [P.List, P.int]];
    },
    $asConverter: function() {
      return [P.String, [P.List, P.int]];
    }
  };
  P._Utf8Encoder.prototype = {
    _writeSurrogate$2: function(leadingSurrogate, nextCodeUnit) {
      var t1, t2, rune, t3, _this = this;
      H.intTypeCheck(leadingSurrogate);
      H.intTypeCheck(nextCodeUnit);
      t1 = _this._buffer;
      t2 = J.getInterceptor$ax(t1);
      if (P._isTailSurrogate(nextCodeUnit)) {
        rune = P._combineSurrogatePair(leadingSurrogate, nextCodeUnit);
        t3 = _this._bufferIndex;
        _this._bufferIndex = H.intTypeCheck(J.$add$ansx(t3, 1));
        if (typeof rune !== "number")
          return rune.$shr();
        t2.$indexSet(t1, t3, (240 | C.JSInt_methods._shrOtherPositive$1(rune, 18)) >>> 0);
        t3 = _this._bufferIndex;
        _this._bufferIndex = H.intTypeCheck(J.$add$ansx(t3, 1));
        t2.$indexSet(t1, t3, 128 | C.JSInt_methods._shrOtherPositive$1(rune, 12) & 63);
        t3 = _this._bufferIndex;
        _this._bufferIndex = H.intTypeCheck(J.$add$ansx(t3, 1));
        t2.$indexSet(t1, t3, 128 | C.JSInt_methods._shrOtherPositive$1(rune, 6) & 63);
        t3 = _this._bufferIndex;
        _this._bufferIndex = H.intTypeCheck(J.$add$ansx(t3, 1));
        t2.$indexSet(t1, t3, 128 | rune & 63);
        return true;
      } else {
        t3 = _this._bufferIndex;
        _this._bufferIndex = H.intTypeCheck(J.$add$ansx(t3, 1));
        if (typeof leadingSurrogate !== "number")
          return leadingSurrogate.$shr();
        t2.$indexSet(t1, t3, (224 | C.JSInt_methods._shrOtherPositive$1(leadingSurrogate, 12)) >>> 0);
        t3 = _this._bufferIndex;
        _this._bufferIndex = H.intTypeCheck(J.$add$ansx(t3, 1));
        t2.$indexSet(t1, t3, 128 | C.JSInt_methods._shrOtherPositive$1(leadingSurrogate, 6) & 63);
        t3 = _this._bufferIndex;
        _this._bufferIndex = H.intTypeCheck(J.$add$ansx(t3, 1));
        t2.$indexSet(t1, t3, 128 | leadingSurrogate & 63);
        return false;
      }
    },
    _fillBuffer$3: function(str, start, end) {
      var t1, t2, t3, stringIndex, codeUnit, t4, stringIndex0, _this = this;
      H.stringTypeCheck(str);
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      if (start != end) {
        if (typeof end !== "number")
          return end.$sub();
        t1 = P._isLeadSurrogate(J.codeUnitAt$1$s(str, end - 1));
      } else
        t1 = false;
      if (t1) {
        if (typeof end !== "number")
          return end.$sub();
        --end;
      }
      t1 = _this._buffer;
      t2 = J.getInterceptor$asx(t1);
      t3 = J.getInterceptor$s(str);
      stringIndex = start;
      while (true) {
        if (typeof stringIndex !== "number")
          return stringIndex.$lt();
        if (typeof end !== "number")
          return H.iae(end);
        if (!(stringIndex < end))
          break;
        codeUnit = t3.codeUnitAt$1(str, stringIndex);
        if (typeof codeUnit !== "number")
          return codeUnit.$le();
        if (codeUnit <= 127) {
          if (J.$ge$n(_this._bufferIndex, t2.get$length(t1)))
            break;
          t4 = _this._bufferIndex;
          _this._bufferIndex = H.intTypeCheck(J.$add$ansx(t4, 1));
          t2.$indexSet(t1, t4, codeUnit);
        } else if (P._isLeadSurrogate(codeUnit)) {
          if (J.$ge$n(J.$add$ansx(_this._bufferIndex, 3), t2.get$length(t1)))
            break;
          stringIndex0 = stringIndex + 1;
          if (_this._writeSurrogate$2(codeUnit, C.JSString_methods.codeUnitAt$1(str, stringIndex0)))
            stringIndex = stringIndex0;
        } else if (codeUnit <= 2047) {
          if (J.$ge$n(J.$add$ansx(_this._bufferIndex, 1), t2.get$length(t1)))
            break;
          t4 = _this._bufferIndex;
          _this._bufferIndex = H.intTypeCheck(J.$add$ansx(t4, 1));
          t2.$indexSet(t1, t4, (192 | C.JSInt_methods._shrOtherPositive$1(codeUnit, 6)) >>> 0);
          t4 = _this._bufferIndex;
          _this._bufferIndex = H.intTypeCheck(J.$add$ansx(t4, 1));
          t2.$indexSet(t1, t4, 128 | codeUnit & 63);
        } else {
          if (J.$ge$n(J.$add$ansx(_this._bufferIndex, 2), t2.get$length(t1)))
            break;
          t4 = _this._bufferIndex;
          _this._bufferIndex = H.intTypeCheck(J.$add$ansx(t4, 1));
          t2.$indexSet(t1, t4, (224 | C.JSInt_methods._shrOtherPositive$1(codeUnit, 12)) >>> 0);
          t4 = _this._bufferIndex;
          _this._bufferIndex = H.intTypeCheck(J.$add$ansx(t4, 1));
          t2.$indexSet(t1, t4, 128 | C.JSInt_methods._shrOtherPositive$1(codeUnit, 6) & 63);
          t4 = _this._bufferIndex;
          _this._bufferIndex = H.intTypeCheck(J.$add$ansx(t4, 1));
          t2.$indexSet(t1, t4, 128 | codeUnit & 63);
        }
        ++stringIndex;
      }
      return stringIndex;
    }
  };
  P._Utf8EncoderSink.prototype = {$isChunkedConversionSink: 1,
    $asChunkedConversionSink: function() {
      return [P.String];
    },
    $isStringConversionSink: 1,
    $isStringConversionSinkMixin: 1,
    $isSink: 1,
    $asSink: function() {
      return [P.String];
    }
  };
  P.Utf8Decoder.prototype = {
    fuse$1$1: function(next, $T) {
      return this.super$Converter$fuse(H.assertSubtype(next, "$isConverter", [P.String, $T], "$asConverter"), $T);
    },
    fuse$1: function(next) {
      return this.fuse$1$1(next, null);
    },
    convert$1: function(codeUnits) {
      var t1, result, end, oneBytes, firstPart, buffer, start, isFirstCharacter, decoder;
      H.assertSubtype(codeUnits, "$isList", [P.int], "$asList");
      t1 = this._allowMalformed;
      result = P.Utf8Decoder__convertIntercepted(t1, codeUnits, 0, null);
      if (result != null)
        return result;
      end = P.RangeError_checkValidRange(0, null, J.get$length$asx(codeUnits));
      oneBytes = P._scanOneByteCharacters(codeUnits, 0, end);
      if (typeof oneBytes !== "number")
        return oneBytes.$gt();
      if (oneBytes > 0) {
        firstPart = P.String_String$fromCharCodes(codeUnits, 0, oneBytes);
        if (oneBytes === end)
          return firstPart;
        buffer = P.StringBuffer$(firstPart);
        start = oneBytes;
        isFirstCharacter = false;
      } else {
        start = 0;
        buffer = null;
        isFirstCharacter = true;
      }
      if (buffer == null)
        buffer = P.StringBuffer$("");
      decoder = P._Utf8Decoder$(buffer, t1);
      decoder._isFirstCharacter = isFirstCharacter;
      decoder.convert$3(codeUnits, start, end);
      decoder.flush$2(codeUnits, end);
      return buffer.toString$0(0);
    },
    $asStreamTransformer: function() {
      return [[P.List, P.int], P.String];
    },
    $asStreamTransformerBase: function() {
      return [[P.List, P.int], P.String];
    },
    $asConverter: function() {
      return [[P.List, P.int], P.String];
    }
  };
  P._Utf8Decoder.prototype = {
    get$hasPartialInput: function() {
      return J.$gt$n(this._expectedUnits, 0);
    },
    flush$2: function(source, offset) {
      var _this = this;
      H.assertSubtype(source, "$isList", [P.int], "$asList");
      H.intTypeCheck(offset);
      if (_this.get$hasPartialInput()) {
        if (!_this._allowMalformed)
          throw H.wrapException(P.FormatException$("Unfinished UTF-8 octet sequence", source, offset));
        _this._stringSink.writeCharCode$1(65533);
        _this._extraUnits = _this._expectedUnits = _this._value = 0;
      }
    },
    convert$3: function(codeUnits, startIndex, endIndex) {
      var value, expectedUnits, extraUnits, t1, t2, t3, i, unit, t4, oneBytes, i0, _this = this,
        _s21_ = "Bad UTF-8 encoding 0x",
        _65533 = 65533;
      H.assertSubtype(codeUnits, "$isList", [P.int], "$asList");
      H.intTypeCheck(startIndex);
      H.intTypeCheck(endIndex);
      value = _this._value;
      expectedUnits = _this._expectedUnits;
      extraUnits = _this._extraUnits;
      _this._extraUnits = _this._expectedUnits = _this._value = 0;
      $label0$0:
        for (t1 = _this._stringSink, t2 = _this._allowMalformed, t3 = J.getInterceptor$asx(codeUnits), i = startIndex; true; i = i0) {
          $label1$1: {
            if (typeof expectedUnits !== "number")
              return expectedUnits.$gt();
            if (expectedUnits > 0) {
              do {
                if (i == endIndex)
                  break $label0$0;
                unit = t3.$index(codeUnits, i);
                if (typeof unit !== "number")
                  return unit.$and();
                if ((unit & 192) !== 128) {
                  if (!t2)
                    throw H.wrapException(P.FormatException$(_s21_ + H.S(C.JSInt_methods.toRadixString$1(unit, 16)), codeUnits, i));
                  _this._isFirstCharacter = false;
                  t1.writeCharCode$1(_65533);
                  expectedUnits = 0;
                  break $label1$1;
                } else {
                  if (typeof value !== "number")
                    return value.$shl();
                  value = (value << 6 | unit & 63) >>> 0;
                  --expectedUnits;
                  if (typeof i !== "number")
                    return i.$add();
                  ++i;
                }
              } while (expectedUnits > 0);
              if (typeof extraUnits !== "number")
                return extraUnits.$sub();
              t4 = extraUnits - 1;
              if (t4 < 0 || t4 >= 4)
                return H.ioore(C.List_127_2047_65535_1114111, t4);
              t4 = C.List_127_2047_65535_1114111[t4];
              if (typeof t4 !== "number")
                return H.iae(t4);
              if (value <= t4) {
                if (!t2)
                  throw H.wrapException(P.FormatException$("Overlong encoding of 0x" + H.S(C.JSInt_methods.toRadixString$1(value, 16)), codeUnits, i - extraUnits - 1));
                value = _65533;
                expectedUnits = 0;
                extraUnits = 0;
              }
              if (value > 1114111) {
                if (!t2)
                  throw H.wrapException(P.FormatException$("Character outside valid Unicode range: 0x" + H.S(C.JSInt_methods.toRadixString$1(value, 16)), codeUnits, i - extraUnits - 1));
                value = _65533;
              }
              if (!_this._isFirstCharacter || value !== 65279)
                t1.writeCharCode$1(value);
              _this._isFirstCharacter = false;
            }
          }
          while (true) {
            if (typeof i !== "number")
              return i.$lt();
            if (typeof endIndex !== "number")
              return H.iae(endIndex);
            if (!(i < endIndex))
              break;
            oneBytes = P._scanOneByteCharacters(codeUnits, i, endIndex);
            if (typeof oneBytes !== "number")
              return oneBytes.$gt();
            if (oneBytes > 0) {
              _this._isFirstCharacter = false;
              i0 = i + oneBytes;
              t1.write$1(P.String_String$fromCharCodes(codeUnits, i, i0));
              if (i0 === endIndex)
                break;
              i = i0;
            }
            i0 = i + 1;
            unit = t3.$index(codeUnits, i);
            if (typeof unit !== "number")
              return unit.$lt();
            if (unit < 0) {
              if (!t2)
                throw H.wrapException(P.FormatException$("Negative UTF-8 code unit: -0x" + H.S(C.JSInt_methods.toRadixString$1(-unit, 16)), codeUnits, i0 - 1));
              t1.writeCharCode$1(_65533);
            } else {
              if ((unit & 224) === 192) {
                value = unit & 31;
                expectedUnits = 1;
                extraUnits = 1;
                continue $label0$0;
              }
              if ((unit & 240) === 224) {
                value = unit & 15;
                expectedUnits = 2;
                extraUnits = 2;
                continue $label0$0;
              }
              if ((unit & 248) === 240 && unit < 245) {
                value = unit & 7;
                expectedUnits = 3;
                extraUnits = 3;
                continue $label0$0;
              }
              if (!t2)
                throw H.wrapException(P.FormatException$(_s21_ + H.S(C.JSInt_methods.toRadixString$1(unit, 16)), codeUnits, i0 - 1));
              _this._isFirstCharacter = false;
              t1.writeCharCode$1(_65533);
              value = _65533;
              expectedUnits = 0;
              extraUnits = 0;
            }
            i = i0;
          }
          break $label0$0;
        }
      if (typeof expectedUnits !== "number")
        return expectedUnits.$gt();
      if (expectedUnits > 0) {
        _this._value = value;
        _this._expectedUnits = expectedUnits;
        _this._extraUnits = extraUnits;
      }
    }
  };
  P.__JsonStringStringifierPretty__JsonStringStringifier__JsonPrettyPrintMixin.prototype = {$is_JsonPrettyPrintMixin: 1};
  P.__JsonUtf8StringifierPretty__JsonUtf8Stringifier__JsonPrettyPrintMixin.prototype = {$is_JsonPrettyPrintMixin: 1};
  P.__Utf8EncoderSink__Utf8Encoder_StringConversionSinkMixin.prototype = {$isChunkedConversionSink: 1,
    $asChunkedConversionSink: function() {
      return [P.String];
    },
    $isStringConversionSink: 1,
    $isStringConversionSinkMixin: 1,
    $isSink: 1,
    $asSink: function() {
      return [P.String];
    }
  };
  P._symbolMapToStringMap_closure.prototype = {$signature: 8};
  P.NoSuchMethodError_toString_closure.prototype = {
    call$2: function(key, value) {
      var t1, t2;
      H.interceptedTypeCheck(key, "$isSymbol0");
      t1 = this.sb;
      t2 = this._box_0;
      t1.write$1(t2.comma);
      t1.write$1(P._symbolToString(key));
      t1.write$1(": ");
      t1.write$1(P.Error_safeToString(value));
      t2.comma = ", ";
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: 8
  };
  P._CompileTimeError.prototype = {};
  P._DuplicatedFieldInitializerError.prototype = {};
  P._BigIntImpl.prototype = {$isBigInt: 1, $isComparable: 1,
    $asComparable: function() {
      return [P.BigInt];
    }
  };
  P._BigIntReduction.prototype = {};
  P._BigIntClassic.prototype = {$is_BigIntReduction: 1};
  P.Deprecated.prototype = {};
  P._Override.prototype = {};
  P.Provisional.prototype = {};
  P._Proxy0.prototype = {};
  P.pragma.prototype = {};
  P.BigInt.prototype = {$isComparable: 1,
    $asComparable: function() {
      return [P.BigInt];
    }
  };
  P.bool.prototype = {};
  P.Comparable.prototype = {};
  P.DateTime.prototype = {$isComparable: 1,
    $asComparable: function() {
      return [P.DateTime];
    }
  };
  P.double.prototype = {};
  P.Duration.prototype = {$isComparable: 1,
    $asComparable: function() {
      return [P.Duration];
    }
  };
  P.Error.prototype = {};
  P.AssertionError.prototype = {};
  P.TypeError.prototype = {};
  P.CastError.prototype = {};
  P.NullThrownError.prototype = {
    toString$0: function(_) {
      return "Throw of null.";
    }
  };
  P.ArgumentError.prototype = {
    get$_errorName: function() {
      return "Invalid argument" + (!this._hasValue ? "(s)" : "");
    },
    get$_errorExplanation: function() {
      return "";
    },
    toString$0: function(_) {
      var message, prefix, explanation, errorValue, _this = this,
        t1 = _this.name,
        nameString = t1 != null ? " (" + H.S(t1) + ")" : "";
      t1 = _this.message;
      message = t1 == null ? "" : ": " + H.S(t1);
      prefix = H.S(_this.get$_errorName()) + nameString + message;
      if (!_this._hasValue)
        return prefix;
      explanation = _this.get$_errorExplanation();
      errorValue = P.Error_safeToString(_this.invalidValue);
      return prefix + H.S(explanation) + ": " + H.S(errorValue);
    },
    get$message: function(receiver) {
      return this.message;
    }
  };
  P.RangeError.prototype = {
    get$_errorName: function() {
      return "RangeError";
    },
    get$_errorExplanation: function() {
      var explanation, t2, t3,
        t1 = this.start;
      if (t1 == null) {
        t1 = this.end;
        explanation = t1 != null ? ": Not less than or equal to " + H.S(t1) : "";
      } else {
        t2 = this.end;
        if (t2 == null)
          explanation = ": Not greater than or equal to " + H.S(t1);
        else {
          t3 = J.getInterceptor$n(t2);
          if (t3.$gt(t2, t1))
            explanation = ": Not in range " + H.S(t1) + ".." + H.S(t2) + ", inclusive";
          else
            explanation = t3.$lt(t2, t1) ? ": Valid value range is empty" : ": Only valid value is " + H.S(t1);
        }
      }
      return explanation;
    },
    get$start: function() {
      return this.start;
    },
    get$end: function() {
      return this.end;
    }
  };
  P.IndexError.prototype = {
    get$start: function() {
      return 0;
    },
    get$end: function() {
      return J.$sub$n(this.length, 1);
    },
    get$_errorName: function() {
      return "RangeError";
    },
    get$_errorExplanation: function() {
      var t1,
        invalidValue = H.intTypeCheck(this.invalidValue);
      if (typeof invalidValue !== "number")
        return invalidValue.$lt();
      if (invalidValue < 0)
        return ": index must not be negative";
      t1 = this.length;
      if (J.$eq$(t1, 0))
        return ": no indices are valid";
      return ": index should be less than " + H.S(t1);
    },
    $isRangeError: 1,
    get$length: function(receiver) {
      return this.length;
    }
  };
  P.FallThroughError.prototype = {};
  P.AbstractClassInstantiationError.prototype = {};
  P.NoSuchMethodError.prototype = {
    toString$0: function(_) {
      var t1, argument, memberName, receiverText, actualParameters, formalParameters, _this = this, _box_0 = {},
        sb = P.StringBuffer$("");
      _box_0.comma = "";
      t1 = _this._arguments;
      if (t1 != null)
        for (t1 = J.get$iterator$ax(t1); t1.moveNext$0();) {
          argument = t1.get$current();
          sb.write$1(_box_0.comma);
          sb.write$1(P.Error_safeToString(argument));
          _box_0.comma = ", ";
        }
      t1 = _this._namedArguments;
      if (t1 != null)
        J.forEach$1$ax(t1, new P.NoSuchMethodError_toString_closure(_box_0, sb));
      memberName = P._symbolToString(_this._memberName);
      receiverText = P.Error_safeToString(_this._receiver);
      actualParameters = H.S(sb);
      t1 = _this._existingArgumentNames;
      if (t1 == null)
        return "NoSuchMethodError: method not found: '" + H.S(memberName) + "'\nReceiver: " + H.S(receiverText) + "\nArguments: [" + actualParameters + "]";
      else {
        formalParameters = J.join$1$ax(t1, ", ");
        return "NoSuchMethodError: incorrect number of arguments passed to method named '" + H.S(memberName) + "'\nReceiver: " + H.S(receiverText) + "\nTried calling: " + H.S(memberName) + "(" + actualParameters + ")\nFound: " + H.S(memberName) + "(" + H.S(formalParameters) + ")";
      }
    }
  };
  P.UnsupportedError.prototype = {
    toString$0: function(_) {
      return "Unsupported operation: " + H.S(this.message);
    },
    get$message: function(receiver) {
      return this.message;
    }
  };
  P.UnimplementedError.prototype = {
    toString$0: function(_) {
      var t1 = this.message;
      return t1 != null ? "UnimplementedError: " + H.S(t1) : "UnimplementedError";
    },
    $isUnsupportedError: 1,
    get$message: function(receiver) {
      return this.message;
    }
  };
  P.StateError.prototype = {
    toString$0: function(_) {
      return "Bad state: " + H.S(this.message);
    },
    get$message: function(receiver) {
      return this.message;
    }
  };
  P.ConcurrentModificationError.prototype = {
    toString$0: function(_) {
      var t1 = this.modifiedObject;
      if (t1 == null)
        return "Concurrent modification during iteration.";
      return "Concurrent modification during iteration: " + H.S(P.Error_safeToString(t1)) + ".";
    }
  };
  P.OutOfMemoryError.prototype = {
    toString$0: function(_) {
      return "Out of Memory";
    },
    $isError: 1
  };
  P.StackOverflowError.prototype = {
    toString$0: function(_) {
      return "Stack Overflow";
    },
    $isError: 1
  };
  P.CyclicInitializationError.prototype = {
    toString$0: function(_) {
      var t1 = this.variableName;
      return t1 == null ? "Reading static variable during its initialization" : "Reading static variable '" + H.S(t1) + "' during its initialization";
    }
  };
  P.Exception.prototype = {};
  P._Exception.prototype = {$isException: 1};
  P.FormatException.prototype = {
    toString$0: function(_) {
      var source, lineNum, lineStart, previousCharWasCR, i, char, lineEnd, end, postfix, start, prefix, slice, _s3_ = "...",
        t1 = this.message,
        report = t1 != null && "" !== t1 ? "FormatException: " + H.S(t1) : "FormatException",
        offset = this.offset,
        objectSource = this.source;
      if (typeof objectSource === "string") {
        if (offset != null)
          t1 = offset < 0 || offset > objectSource.length;
        else
          t1 = false;
        if (t1)
          offset = null;
        if (offset == null) {
          source = objectSource.length > 78 ? J.$add$ansx(C.JSString_methods.substring$2(objectSource, 0, 75), _s3_) : objectSource;
          return report + "\n" + H.S(source);
        }
        for (lineNum = 1, lineStart = 0, previousCharWasCR = false, i = 0; i < offset; ++i) {
          char = C.JSString_methods._codeUnitAt$1(objectSource, i);
          if (char === 10) {
            if (lineStart !== i || !previousCharWasCR)
              ++lineNum;
            lineStart = i + 1;
            previousCharWasCR = false;
          } else if (char === 13) {
            ++lineNum;
            lineStart = i + 1;
            previousCharWasCR = true;
          }
        }
        report = lineNum > 1 ? report + (" (at line " + lineNum + ", character " + (offset - lineStart + 1) + ")\n") : report + (" (at character " + (offset + 1) + ")\n");
        lineEnd = objectSource.length;
        for (i = offset; i < lineEnd; ++i) {
          char = C.JSString_methods.codeUnitAt$1(objectSource, i);
          if (char === 10 || char === 13) {
            lineEnd = i;
            break;
          }
        }
        if (lineEnd - lineStart > 78)
          if (offset - lineStart < 75) {
            end = lineStart + 75;
            postfix = _s3_;
            start = lineStart;
            prefix = "";
          } else {
            if (lineEnd - offset < 75) {
              start = lineEnd - 75;
              end = lineEnd;
              postfix = "";
            } else {
              start = offset - 36;
              end = offset + 36;
              postfix = _s3_;
            }
            prefix = _s3_;
          }
        else {
          end = lineEnd;
          start = lineStart;
          prefix = "";
          postfix = "";
        }
        slice = C.JSString_methods.substring$2(objectSource, start, end);
        return H.S(report) + prefix + H.S(slice) + postfix + "\n" + H.S(C.JSString_methods.$mul(" ", offset - start + prefix.length)) + "^\n";
      } else
        return offset != null ? report + (" (at offset " + H.S(offset) + ")") : report;
    },
    $isException: 1,
    get$message: function(receiver) {
      return this.message;
    },
    get$offset: function() {
      return this.offset;
    }
  };
  P.IntegerDivisionByZeroException.prototype = {$isException: 1};
  P.Expando.prototype = {};
  P.Function.prototype = {};
  P.int.prototype = {};
  P.Invocation.prototype = {};
  P._Invocation.prototype = {$isInvocation: 1};
  P.Iterable.prototype = {
    cast$1$0: function(_, $R) {
      return P.Iterable_castFrom(this, H.getRuntimeTypeArgument(this, "Iterable", 0), $R);
    },
    cast$0: function($receiver) {
      return this.cast$1$0($receiver, null);
    },
    map$1$1: function(_, f, $T) {
      var t1 = H.getRuntimeTypeArgument(this, "Iterable", 0);
      return H.MappedIterable_MappedIterable(this, H.functionTypeCheck(f, {func: 1, ret: $T, args: [t1]}), t1, $T);
    },
    map$1: function($receiver, f) {
      return this.map$1$1($receiver, f, null);
    },
    where$1: function(_, test) {
      var t1 = H.getRuntimeTypeArgument(this, "Iterable", 0);
      return H.WhereIterable$(this, H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [t1]}), t1);
    },
    expand$1$1: function(_, f, $T) {
      var t1 = H.getRuntimeTypeArgument(this, "Iterable", 0);
      return H.ExpandIterable$(this, H.functionTypeCheck(f, {func: 1, ret: [P.Iterable, $T], args: [t1]}), t1, $T);
    },
    expand$1: function($receiver, f) {
      return this.expand$1$1($receiver, f, null);
    },
    contains$1: function(_, element) {
      var t1;
      for (t1 = this.get$iterator(this); t1.moveNext$0();)
        if (J.$eq$(t1.get$current(), element))
          return true;
      return false;
    },
    forEach$1: function(_, f) {
      var t1;
      H.functionTypeCheck(f, {func: 1, ret: -1, args: [H.getRuntimeTypeArgument(this, "Iterable", 0)]});
      for (t1 = this.get$iterator(this); t1.moveNext$0();)
        f.call$1(t1.get$current());
    },
    fold$1$2: function(_, initialValue, combine, $T) {
      var t1, value;
      H.assertSubtypeOfRuntimeType(initialValue, $T);
      H.functionTypeCheck(combine, {func: 1, ret: $T, args: [$T, H.getRuntimeTypeArgument(this, "Iterable", 0)]});
      for (t1 = this.get$iterator(this), value = initialValue; t1.moveNext$0();)
        value = combine.call$2(value, t1.get$current());
      return value;
    },
    fold$2: function($receiver, initialValue, combine) {
      return this.fold$1$2($receiver, initialValue, combine, null);
    },
    join$1: function(_, separator) {
      var iterator, buffer;
      H.stringTypeCheck(separator);
      iterator = this.get$iterator(this);
      if (!iterator.moveNext$0())
        return "";
      buffer = P.StringBuffer$("");
      if (separator == null || separator === "") {
        do
          buffer.write$1(H.S(iterator.get$current()));
        while (iterator.moveNext$0());
      } else {
        buffer.write$1(H.S(iterator.get$current()));
        for (; iterator.moveNext$0();) {
          buffer.write$1(separator);
          buffer.write$1(H.S(iterator.get$current()));
        }
      }
      return buffer.toString$0(0);
    },
    join$0: function($receiver) {
      return this.join$1($receiver, "");
    },
    toList$1$growable: function(_, growable) {
      return P.List_List$from(this, H.boolTypeCheck(growable), H.getRuntimeTypeArgument(this, "Iterable", 0));
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    get$length: function(_) {
      var count,
        it = this.get$iterator(this);
      for (count = 0; it.moveNext$0();)
        ++count;
      return count;
    },
    get$isEmpty: function(_) {
      return !this.get$iterator(this).moveNext$0();
    },
    get$isNotEmpty: function(_) {
      return !this.get$isEmpty(this);
    },
    take$1: function(_, count) {
      return H.TakeIterable_TakeIterable(this, H.intTypeCheck(count), H.getRuntimeTypeArgument(this, "Iterable", 0));
    },
    skip$1: function(_, count) {
      return H.SkipIterable_SkipIterable(this, H.intTypeCheck(count), H.getRuntimeTypeArgument(this, "Iterable", 0));
    },
    skipWhile$1: function(_, test) {
      var t1 = H.getRuntimeTypeArgument(this, "Iterable", 0);
      return H.SkipWhileIterable$(this, H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [t1]}), t1);
    },
    get$first: function(_) {
      var it = this.get$iterator(this);
      if (!it.moveNext$0())
        throw H.wrapException(H.IterableElementError_noElement());
      return it.get$current();
    },
    get$last: function(_) {
      var result,
        it = this.get$iterator(this);
      if (!it.moveNext$0())
        throw H.wrapException(H.IterableElementError_noElement());
      do
        result = it.get$current();
      while (it.moveNext$0());
      return result;
    },
    elementAt$1: function(_, index) {
      var t1, elementIndex, element, _s5_ = "index";
      H.intTypeCheck(index);
      P.ArgumentError_checkNotNull(index, _s5_);
      P.RangeError_checkNotNegative(index, _s5_);
      for (t1 = this.get$iterator(this), elementIndex = 0; t1.moveNext$0();) {
        element = t1.get$current();
        if (index === elementIndex)
          return element;
        ++elementIndex;
      }
      throw H.wrapException(P.IndexError$(index, this, _s5_, null, elementIndex));
    },
    toString$0: function(_) {
      return P.IterableBase_iterableToShortString(this, "(", ")");
    }
  };
  P._GeneratorIterable.prototype = {};
  P.BidirectionalIterator.prototype = {$isIterator: 1};
  P.Iterator.prototype = {};
  P.List.prototype = {$isEfficientLengthIterable: 1, $isIterable: 1};
  P.Map.prototype = {};
  P.MapEntry.prototype = {};
  P.Null.prototype = {
    get$hashCode: function(_) {
      return P.Object.prototype.get$hashCode.call(this, this);
    },
    toString$0: function(_) {
      return "null";
    }
  };
  P.num.prototype = {$isComparable: 1,
    $asComparable: function() {
      return [P.num];
    }
  };
  P.Object.prototype = {constructor: P.Object, $isObject: 1,
    $eq: function(_, other) {
      return this === other;
    },
    get$hashCode: function(_) {
      return H.Primitives_objectHashCode(this);
    },
    toString$0: function(_) {
      return H.Primitives_objectToHumanReadableString(this);
    },
    noSuchMethod$1: function(_, invocation) {
      H.interceptedTypeCheck(invocation, "$isInvocation");
      throw H.wrapException(P.NoSuchMethodError$(this, invocation.get$memberName(), invocation.get$positionalArguments(), invocation.get$namedArguments()));
    },
    get$runtimeType: function(_) {
      return H.getRuntimeType(this);
    },
    toString: function() {
      return this.toString$0(this);
    }
  };
  P.Pattern.prototype = {};
  P.Match.prototype = {};
  P.RegExp.prototype = {$isPattern: 1};
  P.RegExpMatch.prototype = {$isMatch: 1};
  P.Set.prototype = {};
  P.Sink.prototype = {};
  P.StackTrace.prototype = {};
  P._StringStackTrace.prototype = {
    toString$0: function(_) {
      return this._stackTrace;
    },
    $isStackTrace: 1
  };
  P.Stopwatch.prototype = {};
  P.String.prototype = {$isComparable: 1,
    $asComparable: function() {
      return [P.String];
    },
    $isPattern: 1
  };
  P.Runes.prototype = {
    $asIterable: function() {
      return [P.int];
    }
  };
  P.RuneIterator.prototype = {$isBidirectionalIterator: 1,
    $asBidirectionalIterator: function() {
      return [P.int];
    },
    $isIterator: 1,
    $asIterator: function() {
      return [P.int];
    }
  };
  P.StringBuffer.prototype = {
    get$length: function(_) {
      return J.get$length$asx(this._contents);
    },
    write$1: function(obj) {
      this._writeString$1(H.S(obj));
    },
    writeCharCode$1: function(charCode) {
      this._writeString$1(P.String_String$fromCharCode(H.intTypeCheck(charCode)));
    },
    writeAll$2: function(objects, separator) {
      H.listSuperNativeTypeCheck(objects, "$isIterable");
      H.stringTypeCheck(separator);
      this._contents = H.stringTypeCheck(P.StringBuffer__writeAll(this._contents, objects, separator));
    },
    writeAll$1: function(objects) {
      return this.writeAll$2(objects, "");
    },
    clear$0: function(_) {
      this._contents = "";
    },
    toString$0: function(_) {
      return H.Primitives_flattenString(this._contents);
    },
    _writeString$1: function(str) {
      this._contents = H.stringTypeCheck(H.Primitives_stringConcatUnchecked(this._contents, H.stringTypeCheck(str)));
    },
    get$isEmpty: function(_) {
      return J.$eq$(this.get$length(this), 0);
    },
    get$isNotEmpty: function(_) {
      return !this.get$isEmpty(this);
    },
    $isStringSink: 1
  };
  P.StringSink.prototype = {};
  P.Symbol0.prototype = {};
  P.Type.prototype = {};
  P.Uri.prototype = {};
  P.Uri__parseIPv4Address_error.prototype = {
    call$2: function(msg, position) {
      H.stringTypeCheck(msg);
      H.intTypeCheck(position);
      throw H.wrapException(P.FormatException$("Illegal IPv4 address, " + H.S(msg), this.host, position));
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: 17
  };
  P.Uri_parseIPv6Address_error.prototype = {
    call$2: function(msg, position) {
      throw H.wrapException(P.FormatException$("Illegal IPv6 address, " + H.S(H.stringTypeCheck(msg)), this.host, H.intTypeCheck(position)));
    },
    call$1: function(msg) {
      return this.call$2(msg, null);
    },
    "call*": "call$2",
    $defaultValues: function() {
      return [null];
    },
    $signature: 18
  };
  P.Uri_parseIPv6Address_parseHex.prototype = {
    call$2: function(start, end) {
      var value;
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      if (typeof end !== "number")
        return end.$sub();
      if (typeof start !== "number")
        return H.iae(start);
      if (end - start > 4)
        this.error.call$2("an IPv6 part can only contain a maximum of 4 hex digits", start);
      value = P.int_parse(J.substring$2$s(this.host, start, end), null, 16);
      if (typeof value !== "number")
        return value.$lt();
      if (value < 0 || value > 65535)
        this.error.call$2("each part must be in the range of `0x0..0xFFFF`", start);
      return value;
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: 23
  };
  P._Uri.prototype = {
    get$userInfo: function() {
      return this._userInfo;
    },
    get$host: function() {
      var t2,
        t1 = this._host;
      if (t1 == null)
        return "";
      t2 = J.getInterceptor$s(t1);
      if (t2.startsWith$1(t1, "["))
        return t2.substring$2(t1, 1, J.$sub$n(t2.get$length(t1), 1));
      return t1;
    },
    get$port: function() {
      var t1 = this._port;
      if (t1 == null)
        return P._Uri__defaultPort(this.scheme);
      return t1;
    },
    get$query: function() {
      var t1 = this._query;
      return t1 == null ? "" : t1;
    },
    get$fragment: function() {
      var t1 = this._fragment;
      return t1 == null ? "" : t1;
    },
    get$pathSegments: function() {
      var pathToSplit, t1,
        result = this._pathSegments;
      if (result != null)
        return result;
      pathToSplit = this.path;
      if (J.getInterceptor$asx(pathToSplit).get$isNotEmpty(pathToSplit) && J.$eq$(C.JSString_methods._codeUnitAt$1(pathToSplit, 0), 47))
        pathToSplit = C.JSString_methods.substring$1(pathToSplit, 1);
      if (pathToSplit === "")
        result = C.List_empty0;
      else {
        t1 = P.String;
        result = P.List_List$unmodifiable(C.JSArray_methods.map$1$1(H.setRuntimeTypeInfo(pathToSplit.split("/"), [t1]), P.core_Uri_decodeComponent$closure(), null), t1);
      }
      this.set$_pathSegments(result);
      return result;
    },
    _mergePaths$2: function(base, reference) {
      var t1, backCount, refStart, baseEnd, newEnd, delta;
      H.stringTypeCheck(base);
      H.stringTypeCheck(reference);
      for (t1 = J.getInterceptor$s(reference), backCount = 0, refStart = 0; t1.startsWith$2(reference, "../", refStart);) {
        refStart += 3;
        ++backCount;
      }
      baseEnd = J.getInterceptor$s(base).lastIndexOf$1(base, "/");
      while (true) {
        if (typeof baseEnd !== "number")
          return baseEnd.$gt();
        if (!(baseEnd > 0 && backCount > 0))
          break;
        newEnd = C.JSString_methods.lastIndexOf$2(base, "/", baseEnd - 1);
        if (typeof newEnd !== "number")
          return newEnd.$lt();
        if (newEnd < 0)
          break;
        delta = baseEnd - newEnd;
        t1 = delta !== 2;
        if (!t1 || delta === 3)
          if (J.$eq$(C.JSString_methods.codeUnitAt$1(base, newEnd + 1), 46))
            t1 = !t1 || J.$eq$(C.JSString_methods.codeUnitAt$1(base, newEnd + 2), 46);
          else
            t1 = false;
        else
          t1 = false;
        if (t1)
          break;
        --backCount;
        baseEnd = newEnd;
      }
      return C.JSString_methods.replaceRange$3(base, baseEnd + 1, null, C.JSString_methods.substring$1(reference, refStart - 3 * backCount));
    },
    resolve$1: function(reference) {
      return this.resolveUri$1(P.Uri_parse(H.stringTypeCheck(reference)));
    },
    resolveUri$1: function(reference) {
      var targetScheme, targetUserInfo, targetHost, targetPort, targetPath, targetQuery, mergedPath, _this = this, _null = null;
      H.interceptedTypeCheck(reference, "$isUri");
      if (J.get$isNotEmpty$asx(reference.get$scheme())) {
        targetScheme = reference.get$scheme();
        if (reference.get$hasAuthority()) {
          targetUserInfo = reference.get$userInfo();
          targetHost = reference.get$host();
          targetPort = reference.get$hasPort() ? reference.get$port() : _null;
        } else {
          targetPort = _null;
          targetHost = targetPort;
          targetUserInfo = "";
        }
        targetPath = P._Uri__removeDotSegments(reference.get$path(reference));
        targetQuery = reference.get$hasQuery() ? reference.get$query() : _null;
      } else {
        targetScheme = _this.scheme;
        if (reference.get$hasAuthority()) {
          targetUserInfo = reference.get$userInfo();
          targetHost = reference.get$host();
          targetPort = P._Uri__makePort(reference.get$hasPort() ? reference.get$port() : _null, targetScheme);
          targetPath = P._Uri__removeDotSegments(reference.get$path(reference));
          targetQuery = reference.get$hasQuery() ? reference.get$query() : _null;
        } else {
          targetUserInfo = _this._userInfo;
          targetHost = _this._host;
          targetPort = _this._port;
          if (J.$eq$(reference.get$path(reference), "")) {
            targetPath = _this.path;
            targetQuery = reference.get$hasQuery() ? reference.get$query() : _this._query;
          } else {
            if (reference.get$hasAbsolutePath())
              targetPath = P._Uri__removeDotSegments(reference.get$path(reference));
            else if (_this.get$hasEmptyPath())
              if (!_this.get$hasAuthority())
                targetPath = !_this.get$hasScheme() ? reference.get$path(reference) : P._Uri__removeDotSegments(reference.get$path(reference));
              else
                targetPath = P._Uri__removeDotSegments(C.JSString_methods.$add("/", reference.get$path(reference)));
            else {
              mergedPath = _this._mergePaths$2(_this.path, reference.get$path(reference));
              if (_this.get$hasScheme() || _this.get$hasAuthority() || _this.get$hasAbsolutePath())
                targetPath = P._Uri__removeDotSegments(mergedPath);
              else
                targetPath = P._Uri__normalizeRelativePath(mergedPath, _this.get$hasScheme() || _this.get$hasAuthority());
            }
            targetQuery = reference.get$hasQuery() ? reference.get$query() : _null;
          }
        }
      }
      return P._Uri$_internal(targetScheme, targetUserInfo, targetHost, targetPort, targetPath, targetQuery, reference.get$hasFragment() ? reference.get$fragment() : _null);
    },
    get$hasScheme: function() {
      return J.get$isNotEmpty$asx(this.scheme);
    },
    get$hasAuthority: function() {
      return this._host != null;
    },
    get$hasPort: function() {
      return this._port != null;
    },
    get$hasQuery: function() {
      return this._query != null;
    },
    get$hasFragment: function() {
      return this._fragment != null;
    },
    get$hasEmptyPath: function() {
      return J.get$isEmpty$asx(this.path);
    },
    get$hasAbsolutePath: function() {
      return J.startsWith$1$s(this.path, "/");
    },
    toFilePath$0: function() {
      var windows, _this = this,
        t1 = _this.scheme,
        t2 = J.getInterceptor$(t1);
      if (!t2.$eq(t1, "") && !t2.$eq(t1, "file"))
        throw H.wrapException(P.UnsupportedError$("Cannot extract a file path from a " + H.S(t1) + " URI"));
      if (!J.$eq$(_this.get$query(), ""))
        throw H.wrapException(P.UnsupportedError$("Cannot extract a file path from a URI with a query component"));
      if (!J.$eq$(_this.get$fragment(), ""))
        throw H.wrapException(P.UnsupportedError$("Cannot extract a file path from a URI with a fragment component"));
      windows = P._Uri__isWindows();
      return windows ? P._Uri__toWindowsFilePath(_this) : _this._toFilePath$0();
    },
    _toFilePath$0: function() {
      var pathSegments, result, _this = this;
      if (_this.get$hasAuthority() && !J.$eq$(_this.get$host(), ""))
        throw H.wrapException(P.UnsupportedError$("Cannot extract a non-Windows file path from a file URI with an authority"));
      pathSegments = _this.get$pathSegments();
      P._Uri__checkNonWindowsPathReservedCharacters(pathSegments, false);
      result = P.StringBuffer$("");
      if (_this.get$hasAbsolutePath())
        result.write$1("/");
      result.writeAll$2(pathSegments, "/");
      return result.toString$0(0);
    },
    _writeAuthority$1: function(ss) {
      var t1;
      H.interceptedTypeCheck(ss, "$isStringSink");
      t1 = this._userInfo;
      if (J.get$isNotEmpty$asx(t1)) {
        ss.write$1(t1);
        ss.write$1("@");
      }
      t1 = this._host;
      if (t1 != null)
        ss.write$1(t1);
      t1 = this._port;
      if (t1 != null) {
        ss.write$1(":");
        ss.write$1(t1);
      }
    },
    toString$0: function(_) {
      var t1 = this._text;
      return t1 == null ? this._text = H.stringTypeCheck(this._initializeText$0()) : t1;
    },
    _initializeText$0: function() {
      var _this = this,
        sb = P.StringBuffer$(""),
        t1 = _this.scheme,
        t2 = J.getInterceptor$asx(t1);
      if (t2.get$isNotEmpty(t1)) {
        sb.write$1(t1);
        sb.write$1(":");
      }
      if (_this.get$hasAuthority() || t2.$eq(t1, "file")) {
        sb.write$1("//");
        _this._writeAuthority$1(sb);
      }
      sb.write$1(_this.path);
      t1 = _this._query;
      if (t1 != null) {
        sb.write$1("?");
        sb.write$1(t1);
      }
      t1 = _this._fragment;
      if (t1 != null) {
        sb.write$1("#");
        sb.write$1(t1);
      }
      return sb.toString$0(0);
    },
    $eq: function(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      return !!J.getInterceptor$(other).$isUri && J.$eq$(_this.scheme, other.get$scheme()) && J.$eq$(_this.get$hasAuthority(), other.get$hasAuthority()) && J.$eq$(_this.get$userInfo(), other.get$userInfo()) && J.$eq$(_this.get$host(), other.get$host()) && J.$eq$(_this.get$port(), other.get$port()) && J.$eq$(_this.path, other.get$path(other)) && J.$eq$(_this.get$hasQuery(), other.get$hasQuery()) && J.$eq$(_this.get$query(), other.get$query()) && J.$eq$(_this.get$hasFragment(), other.get$hasFragment()) && J.$eq$(_this.get$fragment(), other.get$fragment());
    },
    get$hashCode: function(_) {
      var t1 = this._hashCodeCache;
      return t1 == null ? this._hashCodeCache = H.intTypeCheck(J.get$hashCode$(this.toString$0(0))) : t1;
    },
    set$_pathSegments: function(_pathSegments) {
      this._pathSegments = H.assertSubtype(_pathSegments, "$isList", [P.String], "$asList");
    },
    $isUri: 1,
    get$scheme: function() {
      return this.scheme;
    },
    get$path: function(receiver) {
      return this.path;
    }
  };
  P._Uri__Uri$notSimple_closure.prototype = {
    call$1: function(_) {
      H.stringTypeCheck(_);
      throw H.wrapException(P.FormatException$("Invalid port", this.uri, J.$add$ansx(this.portStart, 1)));
    },
    $signature: 9
  };
  P._Uri__checkNonWindowsPathReservedCharacters_closure.prototype = {
    call$1: function(segment) {
      var _s23_ = "Illegal path character ";
      H.stringTypeCheck(segment);
      if (J.contains$1$asx(segment, "/"))
        if (this.argumentError)
          throw H.wrapException(P.ArgumentError$(_s23_ + segment));
        else
          throw H.wrapException(P.UnsupportedError$(_s23_ + segment));
    },
    $signature: 9
  };
  P._Uri__makePath_closure.prototype = {
    call$1: function(s) {
      return P._Uri__uriEncode(C.List_qg40, H.stringTypeCheck(s), C.C_Utf8Codec, false);
    },
    $signature: 3
  };
  P._Uri__makeQuery_writeParameter.prototype = {
    call$2: function(key, value) {
      var t1, t2;
      H.stringTypeCheck(key);
      H.stringTypeCheck(value);
      t1 = this.result;
      t2 = this._box_0;
      t1.write$1(t2.separator);
      t2.separator = "&";
      t1.write$1(P.Uri_encodeQueryComponent(key));
      if (value != null && C.JSString_methods.get$isNotEmpty(value)) {
        t1.write$1("=");
        t1.write$1(P.Uri_encodeQueryComponent(value));
      }
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: 30
  };
  P._Uri__makeQuery_closure.prototype = {
    call$2: function(key, value) {
      var t1, t2;
      H.stringTypeCheck(key);
      if (value == null || typeof value === "string")
        this.writeParameter.call$2(key, H.stringTypeCheck(value));
      else
        for (t1 = J.get$iterator$ax(H.listSuperNativeTypeCheck(value, "$isIterable")), t2 = this.writeParameter; t1.moveNext$0();)
          t2.call$2(key, H.stringTypeCheck(t1.get$current()));
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: 10
  };
  P.UriData.prototype = {
    get$uri: function() {
      var colonIndex, t2, t3, queryIndex, end, query, _this = this,
        t1 = _this._uriCache;
      if (t1 != null)
        return t1;
      colonIndex = J.$index$asx(_this._separatorIndices, 0);
      t1 = _this._text;
      if (typeof colonIndex !== "number")
        return colonIndex.$add();
      t2 = colonIndex + 1;
      t3 = J.getInterceptor$s(t1);
      queryIndex = t3.indexOf$2(t1, "?", t2);
      end = t3.get$length(t1);
      if (typeof queryIndex !== "number")
        return queryIndex.$ge();
      if (queryIndex >= 0) {
        query = P._Uri__normalizeOrSubstring(t1, queryIndex + 1, end, C.List_CVk, false);
        end = queryIndex;
      } else
        query = null;
      return _this._uriCache = P._DataUri$(_this, P._Uri__normalizeOrSubstring(t1, t2, end, C.List_qg4, false), query);
    },
    toString$0: function(_) {
      var t1 = this._text;
      return J.$eq$(J.$index$asx(this._separatorIndices, 0), -1) ? "data:" + H.S(t1) : t1;
    }
  };
  P.UriData__writeUri_closure.prototype = {
    call$2: function(key, value) {
      var t1, t2, t3;
      H.stringTypeCheck(key);
      H.stringTypeCheck(value);
      if (J.get$isEmpty$asx(key))
        throw H.wrapException(P.ArgumentError$value("", "Parameter names must not be empty", null));
      if (J.get$isEmpty$asx(value))
        throw H.wrapException(P.ArgumentError$value("", "Parameter values must not be empty", 'parameters["' + key + '"]'));
      t1 = this.indices;
      t2 = t1 != null;
      if (t2)
        J.add$1$ax(t1, J.get$length$asx(this.buffer));
      t3 = this.buffer;
      t3.write$1(";");
      t3.write$1(P._Uri__uriEncode(C.List_qFt, key, C.C_Utf8Codec, false));
      if (t2)
        J.add$1$ax(t1, J.get$length$asx(t3));
      t3.write$1("=");
      t3.write$1(P._Uri__uriEncode(C.List_qFt, value, C.C_Utf8Codec, false));
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: 16
  };
  P._createTables_closure.prototype = {
    call$1: function(_) {
      H.intTypeCheck(_);
      return H.NativeUint8List_NativeUint8List(96);
    },
    $signature: 35
  };
  P._createTables_build.prototype = {
    call$2: function(state, defaultTransition) {
      var t1 = J.$index$asx(this.tables, H.intTypeCheck(state));
      J.fillRange$3$x(t1, 0, 96, H.intTypeCheck(defaultTransition));
      return t1;
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: 36
  };
  P._createTables_setChars.prototype = {
    call$3: function(target, chars, transition) {
      var t1, t2, i, char;
      H.interceptedTypeCheck(target, "$isUint8List");
      H.stringTypeCheck(chars);
      H.intTypeCheck(transition);
      for (t1 = chars.length, t2 = target && C.NativeUint8List_methods, i = 0; i < t1; ++i) {
        char = C.JSString_methods._codeUnitAt$1(chars, i);
        if (typeof char !== "number")
          return char.$xor();
        t2.$indexSet(target, (char ^ 96) >>> 0, transition);
      }
    },
    "call*": "call$3",
    $requiredArgCount: 3,
    $signature: 11
  };
  P._createTables_setRange.prototype = {
    call$3: function(target, range, transition) {
      var i, n, t1;
      H.interceptedTypeCheck(target, "$isUint8List");
      H.stringTypeCheck(range);
      H.intTypeCheck(transition);
      i = J.getInterceptor$s(range)._codeUnitAt$1(range, 0);
      n = C.JSString_methods._codeUnitAt$1(range, 1);
      t1 = target && C.NativeUint8List_methods;
      while (true) {
        if (typeof i !== "number")
          return i.$le();
        if (typeof n !== "number")
          return H.iae(n);
        if (!(i <= n))
          break;
        t1.$indexSet(target, (i ^ 96) >>> 0, transition);
        ++i;
      }
    },
    "call*": "call$3",
    $requiredArgCount: 3,
    $signature: 11
  };
  P._SimpleUri.prototype = {
    get$hasScheme: function() {
      return J.$gt$n(this._schemeEnd, 0);
    },
    get$hasAuthority: function() {
      return J.$gt$n(this._hostStart, 0);
    },
    get$hasPort: function() {
      return J.$gt$n(this._hostStart, 0) && J.$lt$n(J.$add$ansx(this._portStart, 1), this._pathStart);
    },
    get$hasQuery: function() {
      return J.$lt$n(this._queryStart, this._fragmentStart);
    },
    get$hasFragment: function() {
      return J.$lt$n(this._fragmentStart, J.get$length$asx(this._uri));
    },
    get$_isFile: function() {
      return J.$eq$(this._schemeEnd, 4) && J.startsWith$1$s(this._uri, "file");
    },
    get$_isHttp: function() {
      return J.$eq$(this._schemeEnd, 4) && J.startsWith$1$s(this._uri, "http");
    },
    get$_isHttps: function() {
      return J.$eq$(this._schemeEnd, 5) && J.startsWith$1$s(this._uri, "https");
    },
    get$_isPackage: function() {
      return J.$eq$(this._schemeEnd, 7) && J.startsWith$1$s(this._uri, "package");
    },
    get$hasAbsolutePath: function() {
      return J.startsWith$2$s(this._uri, "/", this._pathStart);
    },
    get$hasEmptyPath: function() {
      return J.$eq$(this._pathStart, this._queryStart);
    },
    get$scheme: function() {
      var t2, _this = this,
        t1 = _this._schemeEnd;
      if (J.$le$n(t1, 0))
        return "";
      t2 = _this._schemeCache;
      if (t2 != null)
        return t2;
      if (_this.get$_isHttp())
        t1 = _this._schemeCache = "http";
      else if (_this.get$_isHttps()) {
        _this._schemeCache = "https";
        t1 = "https";
      } else if (_this.get$_isFile()) {
        _this._schemeCache = "file";
        t1 = "file";
      } else if (_this.get$_isPackage()) {
        _this._schemeCache = "package";
        t1 = "package";
      } else {
        t1 = H.stringTypeCheck(J.substring$2$s(_this._uri, 0, t1));
        _this._schemeCache = t1;
      }
      return t1;
    },
    get$userInfo: function() {
      var t1 = this._hostStart,
        t2 = this._schemeEnd,
        t3 = J.getInterceptor$ansx(t2),
        t4 = J.getInterceptor$n(t1);
      return t4.$gt(t1, t3.$add(t2, 3)) ? J.substring$2$s(this._uri, t3.$add(t2, 3), t4.$sub(t1, 1)) : "";
    },
    get$host: function() {
      var t1 = this._hostStart;
      return J.$gt$n(t1, 0) ? J.substring$2$s(this._uri, t1, this._portStart) : "";
    },
    get$port: function() {
      var _this = this;
      if (_this.get$hasPort())
        return P.int_parse(J.substring$2$s(_this._uri, J.$add$ansx(_this._portStart, 1), _this._pathStart), null, null);
      if (_this.get$_isHttp())
        return 80;
      if (_this.get$_isHttps())
        return 443;
      return 0;
    },
    get$path: function(_) {
      return J.substring$2$s(this._uri, this._pathStart, this._queryStart);
    },
    get$query: function() {
      var t1 = this._queryStart,
        t2 = this._fragmentStart,
        t3 = J.getInterceptor$n(t1);
      return t3.$lt(t1, t2) ? J.substring$2$s(this._uri, t3.$add(t1, 1), t2) : "";
    },
    get$fragment: function() {
      var t1 = this._fragmentStart,
        t2 = this._uri,
        t3 = J.getInterceptor$asx(t2),
        t4 = J.getInterceptor$n(t1);
      return t4.$lt(t1, t3.get$length(t2)) ? t3.substring$1(t2, t4.$add(t1, 1)) : "";
    },
    get$pathSegments: function() {
      var t3, parts, i,
        start = this._pathStart,
        end = this._queryStart,
        t1 = this._uri,
        t2 = J.getInterceptor$s(t1);
      if (t2.startsWith$2(t1, "/", start)) {
        if (typeof start !== "number")
          return start.$add();
        ++start;
      }
      if (start == end)
        return C.List_empty0;
      t3 = P.String;
      parts = H.setRuntimeTypeInfo([], [t3]);
      i = start;
      while (true) {
        if (typeof i !== "number")
          return i.$lt();
        if (typeof end !== "number")
          return H.iae(end);
        if (!(i < end))
          break;
        if (t2.codeUnitAt$1(t1, i) === 47) {
          C.JSArray_methods.add$1(parts, t2.substring$2(t1, start, i));
          start = i + 1;
        }
        ++i;
      }
      C.JSArray_methods.add$1(parts, t2.substring$2(t1, start, end));
      return P.List_List$unmodifiable(parts, t3);
    },
    _isPort$1: function(port) {
      var portDigitStart, t1;
      H.stringTypeCheck(port);
      portDigitStart = J.$add$ansx(this._portStart, 1);
      t1 = port.length;
      if (typeof portDigitStart !== "number")
        return portDigitStart.$add();
      return portDigitStart + t1 === this._pathStart && J.startsWith$2$s(this._uri, port, portDigitStart);
    },
    removeFragment$0: function() {
      var t1, _this = this;
      if (!_this.get$hasFragment())
        return _this;
      t1 = _this._fragmentStart;
      return P._SimpleUri$(J.substring$2$s(_this._uri, 0, t1), _this._schemeEnd, _this._hostStart, _this._portStart, _this._pathStart, _this._queryStart, t1, _this._schemeCache);
    },
    resolve$1: function(reference) {
      return this.resolveUri$1(P.Uri_parse(H.stringTypeCheck(reference)));
    },
    resolveUri$1: function(reference) {
      H.interceptedTypeCheck(reference, "$isUri");
      if (reference instanceof P._SimpleUri)
        return this._simpleMerge$2(this, reference);
      return this._toNonSimple$0().resolveUri$1(reference);
    },
    _simpleMerge$2: function(base, ref) {
      var isSimple, t1, t2, delta, refStart, t3, baseUri, refUri, baseStart, baseEnd, baseStart0, refEnd, backCount, refStart0, insert;
      H.interceptedTypeCheck(base, "$is_SimpleUri");
      H.interceptedTypeCheck(ref, "$is_SimpleUri");
      if (ref.get$hasScheme())
        return ref;
      if (ref.get$hasAuthority()) {
        if (!base.get$hasScheme())
          return ref;
        if (base.get$_isFile())
          isSimple = !ref.get$hasEmptyPath();
        else if (base.get$_isHttp())
          isSimple = !ref._isPort$1("80");
        else
          isSimple = !base.get$_isHttps() || !ref._isPort$1("443");
        if (isSimple) {
          t1 = base._schemeEnd;
          t2 = J.getInterceptor$ansx(t1);
          delta = t2.$add(t1, 1);
          return P._SimpleUri$(J.$add$ansx(J.substring$2$s(base._uri, 0, t2.$add(t1, 1)), J.substring$1$s(ref._uri, J.$add$ansx(ref._schemeEnd, 1))), t1, J.$add$ansx(ref._hostStart, delta), J.$add$ansx(ref._portStart, delta), J.$add$ansx(ref._pathStart, delta), J.$add$ansx(ref._queryStart, delta), J.$add$ansx(ref._fragmentStart, delta), base._schemeCache);
        } else
          return this._toNonSimple$0().resolveUri$1(ref);
      }
      if (ref.get$hasEmptyPath()) {
        if (ref.get$hasQuery()) {
          t1 = base._queryStart;
          t2 = ref._queryStart;
          delta = J.$sub$n(t1, t2);
          return P._SimpleUri$(J.$add$ansx(J.substring$2$s(base._uri, 0, t1), J.substring$1$s(ref._uri, t2)), base._schemeEnd, base._hostStart, base._portStart, base._pathStart, J.$add$ansx(t2, delta), J.$add$ansx(ref._fragmentStart, delta), base._schemeCache);
        }
        if (ref.get$hasFragment()) {
          t1 = base._fragmentStart;
          t2 = ref._fragmentStart;
          delta = J.$sub$n(t1, t2);
          return P._SimpleUri$(J.$add$ansx(J.substring$2$s(base._uri, 0, t1), J.substring$1$s(ref._uri, t2)), base._schemeEnd, base._hostStart, base._portStart, base._pathStart, base._queryStart, J.$add$ansx(t2, delta), base._schemeCache);
        }
        return base.removeFragment$0();
      }
      if (ref.get$hasAbsolutePath()) {
        t1 = base._pathStart;
        t2 = ref._pathStart;
        delta = J.$sub$n(t1, t2);
        return P._SimpleUri$(J.$add$ansx(J.substring$2$s(base._uri, 0, t1), J.substring$1$s(ref._uri, t2)), base._schemeEnd, base._hostStart, base._portStart, t1, J.$add$ansx(ref._queryStart, delta), J.$add$ansx(ref._fragmentStart, delta), base._schemeCache);
      }
      if (base.get$hasEmptyPath() && base.get$hasAuthority()) {
        refStart = ref._pathStart;
        for (t1 = ref._uri, t2 = J.getInterceptor$s(t1); t2.startsWith$2(t1, "../", refStart);) {
          if (typeof refStart !== "number")
            return refStart.$add();
          refStart += 3;
        }
        t3 = base._pathStart;
        delta = J.$add$ansx(J.$sub$n(t3, refStart), 1);
        return P._SimpleUri$(H.S(J.substring$2$s(base._uri, 0, t3)) + "/" + H.S(t2.substring$1(t1, refStart)), base._schemeEnd, base._hostStart, base._portStart, t3, J.$add$ansx(ref._queryStart, delta), J.$add$ansx(ref._fragmentStart, delta), base._schemeCache);
      }
      baseUri = base._uri;
      refUri = ref._uri;
      baseStart = base._pathStart;
      baseEnd = base._queryStart;
      for (t1 = J.getInterceptor$s(baseUri), baseStart0 = baseStart; t1.startsWith$2(baseUri, "../", baseStart0);) {
        if (typeof baseStart0 !== "number")
          return baseStart0.$add();
        baseStart0 += 3;
      }
      refStart = ref._pathStart;
      refEnd = ref._queryStart;
      t1 = J.getInterceptor$s(refUri);
      backCount = 0;
      while (true) {
        if (typeof refStart !== "number")
          return refStart.$add();
        refStart0 = refStart + 3;
        if (typeof refEnd !== "number")
          return H.iae(refEnd);
        if (!(refStart0 <= refEnd && t1.startsWith$2(refUri, "../", refStart)))
          break;
        ++backCount;
        refStart = refStart0;
      }
      insert = "";
      while (true) {
        if (typeof baseEnd !== "number")
          return baseEnd.$gt();
        if (typeof baseStart0 !== "number")
          return H.iae(baseStart0);
        if (!(baseEnd > baseStart0))
          break;
        --baseEnd;
        if (C.JSString_methods.codeUnitAt$1(baseUri, baseEnd) === 47) {
          if (backCount === 0) {
            insert = "/";
            break;
          }
          --backCount;
          insert = "/";
        }
      }
      if (baseEnd === baseStart0 && !base.get$hasScheme() && !base.get$hasAbsolutePath()) {
        refStart -= backCount * 3;
        insert = "";
      }
      delta = baseEnd - refStart + insert.length;
      return P._SimpleUri$(H.S(C.JSString_methods.substring$2(baseUri, 0, baseEnd)) + insert + H.S(t1.substring$1(refUri, refStart)), base._schemeEnd, base._hostStart, base._portStart, baseStart, refEnd + delta, J.$add$ansx(ref._fragmentStart, delta), base._schemeCache);
    },
    toFilePath$0: function() {
      var t1, t2, windows, _this = this;
      if (J.$ge$n(_this._schemeEnd, 0) && !_this.get$_isFile())
        throw H.wrapException(P.UnsupportedError$("Cannot extract a file path from a " + H.S(_this.get$scheme()) + " URI"));
      t1 = _this._queryStart;
      t2 = J.getInterceptor$n(t1);
      if (t2.$lt(t1, J.get$length$asx(_this._uri))) {
        if (t2.$lt(t1, _this._fragmentStart))
          throw H.wrapException(P.UnsupportedError$("Cannot extract a file path from a URI with a query component"));
        throw H.wrapException(P.UnsupportedError$("Cannot extract a file path from a URI with a fragment component"));
      }
      windows = P._Uri__isWindows();
      return windows ? P._Uri__toWindowsFilePath(_this) : _this._toFilePath$0();
    },
    _toFilePath$0: function() {
      var _this = this;
      if (J.$lt$n(_this._hostStart, _this._portStart))
        throw H.wrapException(P.UnsupportedError$("Cannot extract a non-Windows file path from a file URI with an authority"));
      return _this.get$path(_this);
    },
    get$hashCode: function(_) {
      var t1 = this._hashCodeCache;
      return t1 == null ? this._hashCodeCache = H.intTypeCheck(J.get$hashCode$(this._uri)) : t1;
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      return !!J.getInterceptor$(other).$isUri && J.$eq$(this._uri, other.toString$0(0));
    },
    _toNonSimple$0: function() {
      var _this = this, _null = null,
        t1 = _this.get$scheme(),
        t2 = _this.get$userInfo(),
        t3 = _this.get$hasAuthority() ? _this.get$host() : _null,
        t4 = _this.get$hasPort() ? _this.get$port() : _null,
        t5 = _this.get$path(_this),
        t6 = _this.get$hasQuery() ? _this.get$query() : _null;
      return P._Uri$_internal(t1, t2, t3, t4, t5, t6, _this.get$hasFragment() ? _this.get$fragment() : _null);
    },
    toString$0: function(_) {
      return this._uri;
    },
    $isUri: 1
  };
  P._DataUri.prototype = {};
  P._FakeUserTag.prototype = {$isUserTag: 1};
  P.ServiceExtensionResponse.prototype = {};
  P.UserTag.prototype = {};
  P.Metric.prototype = {};
  P.Gauge.prototype = {};
  P.Counter.prototype = {};
  P.Metrics.prototype = {};
  P.ServiceProtocolInfo.prototype = {};
  P.Service.prototype = {};
  P.Flow.prototype = {};
  P.Timeline.prototype = {};
  P.TimelineTask.prototype = {};
  P._AsyncBlock.prototype = {};
  P._SyncBlock.prototype = {};
  W.HtmlElement.prototype = {$isHtmlElement: 1, $isNoncedElement: 1};
  W.AbortPaymentEvent.prototype = {$isAbortPaymentEvent: 1};
  W.AbsoluteOrientationSensor.prototype = {$isAbsoluteOrientationSensor: 1};
  W.AbstractWorker.prototype = {$isEventTarget: 1};
  W.Accelerometer.prototype = {$isAccelerometer: 1};
  W.AccessibleNode.prototype = {$isAccessibleNode: 1};
  W.AccessibleNodeList.prototype = {$isAccessibleNodeList: 1};
  W.AmbientLightSensor.prototype = {$isAmbientLightSensor: 1};
  W.AnchorElement.prototype = {$isAnchorElement: 1, $isHtmlHyperlinkElementUtils: 1};
  W.Animation.prototype = {$isAnimation: 1};
  W.AnimationEffectReadOnly.prototype = {$isAnimationEffectReadOnly: 1};
  W.AnimationEffectTiming.prototype = {$isAnimationEffectTiming: 1};
  W.AnimationEffectTimingReadOnly.prototype = {$isAnimationEffectTimingReadOnly: 1};
  W.AnimationEvent.prototype = {$isAnimationEvent: 1};
  W.AnimationPlaybackEvent.prototype = {$isAnimationPlaybackEvent: 1};
  W.AnimationTimeline.prototype = {$isAnimationTimeline: 1};
  W.AnimationWorkletGlobalScope.prototype = {$isAnimationWorkletGlobalScope: 1};
  W.ApplicationCache.prototype = {$isApplicationCache: 1};
  W.ApplicationCacheErrorEvent.prototype = {$isApplicationCacheErrorEvent: 1};
  W.AreaElement.prototype = {$isAreaElement: 1, $isHtmlHyperlinkElementUtils: 1};
  W.AudioElement.prototype = {$isAudioElement: 1};
  W.AuthenticatorAssertionResponse.prototype = {$isAuthenticatorAssertionResponse: 1};
  W.AuthenticatorAttestationResponse.prototype = {$isAuthenticatorAttestationResponse: 1};
  W.AuthenticatorResponse.prototype = {$isAuthenticatorResponse: 1};
  W.BRElement.prototype = {$isBRElement: 1};
  W.BackgroundFetchClickEvent.prototype = {$isBackgroundFetchClickEvent: 1};
  W.BackgroundFetchEvent.prototype = {$isBackgroundFetchEvent: 1};
  W.BackgroundFetchFailEvent.prototype = {$isBackgroundFetchFailEvent: 1};
  W.BackgroundFetchFetch.prototype = {$isBackgroundFetchFetch: 1};
  W.BackgroundFetchManager.prototype = {$isBackgroundFetchManager: 1};
  W.BackgroundFetchRegistration.prototype = {$isBackgroundFetchRegistration: 1};
  W.BackgroundFetchSettledFetch.prototype = {$isBackgroundFetchSettledFetch: 1};
  W.BackgroundFetchedEvent.prototype = {$isBackgroundFetchedEvent: 1};
  W.BarProp.prototype = {$isBarProp: 1};
  W.BarcodeDetector.prototype = {$isBarcodeDetector: 1};
  W.BaseElement.prototype = {$isBaseElement: 1};
  W.BatteryManager.prototype = {$isBatteryManager: 1};
  W.BeforeInstallPromptEvent.prototype = {$isBeforeInstallPromptEvent: 1};
  W.BeforeUnloadEvent.prototype = {$isBeforeUnloadEvent: 1};
  W.Blob.prototype = {$isBlob: 1};
  W.BlobEvent.prototype = {$isBlobEvent: 1};
  W.BluetoothRemoteGattDescriptor.prototype = {$isBluetoothRemoteGattDescriptor: 1};
  W.Body.prototype = {$isBody: 1};
  W.BodyElement.prototype = {$isBodyElement: 1, $isWindowEventHandlers: 1};
  W.BroadcastChannel.prototype = {$isBroadcastChannel: 1};
  W.BudgetState.prototype = {$isBudgetState: 1};
  W.ButtonElement.prototype = {$isButtonElement: 1};
  W.CDataSection.prototype = {$isCDataSection: 1};
  W.CacheStorage.prototype = {$isCacheStorage: 1};
  W.CanMakePaymentEvent.prototype = {$isCanMakePaymentEvent: 1};
  W.CanvasCaptureMediaStreamTrack.prototype = {$isCanvasCaptureMediaStreamTrack: 1};
  W.CanvasElement.prototype = {$isCanvasElement: 1, $isCanvasImageSource: 1};
  W.CanvasGradient.prototype = {$isCanvasGradient: 1};
  W.CanvasPattern.prototype = {$isCanvasPattern: 1};
  W.CanvasRenderingContext.prototype = {};
  W.CanvasRenderingContext2D.prototype = {$isCanvasRenderingContext: 1, $isCanvasRenderingContext2D: 1};
  W.CharacterData.prototype = {$isCharacterData: 1, $isChildNode: 1, $isNonDocumentTypeChildNode: 1};
  W.ChildNode.prototype = {};
  W.Client.prototype = {$isClient: 1};
  W.Clients.prototype = {$isClients: 1};
  W.ClipboardEvent.prototype = {$isClipboardEvent: 1};
  W.CloseEvent.prototype = {$isCloseEvent: 1};
  W.Comment.prototype = {$isComment: 1};
  W.CompositionEvent.prototype = {$isCompositionEvent: 1};
  W.ContentElement.prototype = {$isContentElement: 1};
  W.CookieStore.prototype = {$isCookieStore: 1};
  W.Coordinates.prototype = {$isCoordinates: 1};
  W.Credential.prototype = {$isCredential: 1};
  W.CredentialUserData.prototype = {$isCredentialUserData: 1};
  W.CredentialsContainer.prototype = {$isCredentialsContainer: 1};
  W.Crypto.prototype = {$isCrypto: 1};
  W.CryptoKey.prototype = {$isCryptoKey: 1};
  W.Css.prototype = {$isCss: 1};
  W.CssCharsetRule.prototype = {$isCssCharsetRule: 1};
  W.CssConditionRule.prototype = {$isCssConditionRule: 1};
  W.CssFontFaceRule.prototype = {$isCssFontFaceRule: 1};
  W.CssGroupingRule.prototype = {$isCssGroupingRule: 1};
  W.CssImageValue.prototype = {$isCssImageValue: 1};
  W.CssImportRule.prototype = {$isCssImportRule: 1};
  W.CssKeyframeRule.prototype = {$isCssKeyframeRule: 1};
  W.CssKeyframesRule.prototype = {$isCssKeyframesRule: 1};
  W.CssKeywordValue.prototype = {$isCssKeywordValue: 1};
  W.CssMatrixComponent.prototype = {$isCssMatrixComponent: 1};
  W.CssMediaRule.prototype = {$isCssMediaRule: 1};
  W.CssNamespaceRule.prototype = {$isCssNamespaceRule: 1};
  W.CssNumericValue.prototype = {$isCssNumericValue: 1};
  W.CssPageRule.prototype = {$isCssPageRule: 1};
  W.CssPerspective.prototype = {$isCssPerspective: 1};
  W.CssPositionValue.prototype = {$isCssPositionValue: 1};
  W.CssResourceValue.prototype = {$isCssResourceValue: 1};
  W.CssRotation.prototype = {$isCssRotation: 1};
  W.CssRule.prototype = {$isCssRule: 1};
  W.CssScale.prototype = {$isCssScale: 1};
  W.CssSkew.prototype = {$isCssSkew: 1};
  W.CssStyleDeclaration.prototype = {$isCssStyleDeclaration: 1, $isCssStyleDeclarationBase: 1};
  W._CssStyleDeclarationSet.prototype = {$isCssStyleDeclarationBase: 1};
  W.CssStyleDeclarationBase.prototype = {};
  W.CssStyleRule.prototype = {$isCssStyleRule: 1};
  W.CssStyleSheet.prototype = {$isCssStyleSheet: 1};
  W.CssStyleValue.prototype = {$isCssStyleValue: 1};
  W.CssSupportsRule.prototype = {$isCssSupportsRule: 1};
  W.CssTransformComponent.prototype = {$isCssTransformComponent: 1};
  W.CssTransformValue.prototype = {$isCssTransformValue: 1};
  W.CssTranslation.prototype = {$isCssTranslation: 1};
  W.CssUnitValue.prototype = {$isCssUnitValue: 1};
  W.CssUnparsedValue.prototype = {$isCssUnparsedValue: 1};
  W.CssVariableReferenceValue.prototype = {$isCssVariableReferenceValue: 1};
  W.CssViewportRule.prototype = {$isCssViewportRule: 1};
  W.CssurlImageValue.prototype = {$isCssurlImageValue: 1};
  W.CustomElementRegistry.prototype = {$isCustomElementRegistry: 1};
  W.CustomEvent.prototype = {$isCustomEvent: 1};
  W.DListElement.prototype = {$isDListElement: 1};
  W.DataElement.prototype = {$isDataElement: 1};
  W.DataListElement.prototype = {$isDataListElement: 1};
  W.DataTransfer.prototype = {$isDataTransfer: 1};
  W.DataTransferItem.prototype = {$isDataTransferItem: 1};
  W.DataTransferItemList.prototype = {$isDataTransferItemList: 1};
  W.DedicatedWorkerGlobalScope.prototype = {$isDedicatedWorkerGlobalScope: 1};
  W.DeprecatedStorageInfo.prototype = {$isDeprecatedStorageInfo: 1};
  W.DeprecatedStorageQuota.prototype = {$isDeprecatedStorageQuota: 1};
  W.DeprecationReport.prototype = {$isDeprecationReport: 1};
  W.DetailsElement.prototype = {$isDetailsElement: 1};
  W.DetectedBarcode.prototype = {$isDetectedBarcode: 1};
  W.DetectedFace.prototype = {$isDetectedFace: 1};
  W.DetectedText.prototype = {$isDetectedText: 1};
  W.DeviceAcceleration.prototype = {$isDeviceAcceleration: 1};
  W.DeviceMotionEvent.prototype = {$isDeviceMotionEvent: 1};
  W.DeviceOrientationEvent.prototype = {$isDeviceOrientationEvent: 1};
  W.DeviceRotationRate.prototype = {$isDeviceRotationRate: 1};
  W.DialogElement.prototype = {$isDialogElement: 1};
  W.DirectoryEntry.prototype = {$isDirectoryEntry: 1};
  W.DirectoryReader.prototype = {$isDirectoryReader: 1};
  W.DivElement.prototype = {$isDivElement: 1};
  W.Document.prototype = {$isDocument: 1};
  W.DocumentFragment.prototype = {$isDocumentFragment: 1, $isNonElementParentNode: 1, $isParentNode: 1};
  W.DocumentOrShadowRoot.prototype = {$isDocumentOrShadowRoot: 1};
  W.DocumentTimeline.prototype = {$isDocumentTimeline: 1};
  W.DomError.prototype = {$isDomError: 1};
  W.DomException.prototype = {
    toString$0: function(receiver) {
      return String(receiver);
    },
    $isDomException: 1
  };
  W.DomImplementation.prototype = {$isDomImplementation: 1};
  W.DomIterator.prototype = {$isDomIterator: 1};
  W.DomMatrix.prototype = {$isDomMatrix: 1};
  W.DomMatrixReadOnly.prototype = {$isDomMatrixReadOnly: 1};
  W.DomParser.prototype = {$isDomParser: 1};
  W.DomPoint.prototype = {$isDomPoint: 1};
  W.DomPointReadOnly.prototype = {$isDomPointReadOnly: 1};
  W.DomQuad.prototype = {$isDomQuad: 1};
  W.DomRectList.prototype = {$isJSIndexable: 1,
    $asJSIndexable: function() {
      return [[P.Rectangle, P.num]];
    },
    $isJSMutableIndexable: 1,
    $asJSMutableIndexable: function() {
      return [[P.Rectangle, P.num]];
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [[P.Rectangle, P.num]];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [[P.Rectangle, P.num]];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [[P.Rectangle, P.num]];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [[P.Rectangle, P.num]];
    },
    $isList: 1,
    $asList: function() {
      return [[P.Rectangle, P.num]];
    },
    $isDomRectList: 1,
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [[P.Rectangle, P.num]];
    }
  };
  W.DomRectReadOnly.prototype = {$isDomRectReadOnly: 1, $is_RectangleBase: 1,
    $as_RectangleBase: function() {
      return [P.num];
    },
    $isRectangle: 1,
    $asRectangle: function() {
      return [P.num];
    }
  };
  W.DomStringList.prototype = {$isJSIndexable: 1,
    $asJSIndexable: function() {
      return [P.String];
    },
    $isJSMutableIndexable: 1,
    $asJSMutableIndexable: function() {
      return [P.String];
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.String];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [P.String];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [P.String];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.String];
    },
    $isList: 1,
    $asList: function() {
      return [P.String];
    },
    $isDomStringList: 1,
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [P.String];
    }
  };
  W.DomStringMap.prototype = {$isDomStringMap: 1};
  W.DomTokenList.prototype = {$isDomTokenList: 1};
  W._ChildrenElementList.prototype = {
    $asEfficientLengthIterable: function() {
      return [W.Element];
    },
    $asListBase: function() {
      return [W.Element];
    },
    $asListMixin: function() {
      return [W.Element];
    },
    $asIterable: function() {
      return [W.Element];
    },
    $asList: function() {
      return [W.Element];
    },
    $isNodeListWrapper: 1,
    $as_ListBase_Object_ListMixin: function() {
      return [W.Element];
    }
  };
  W.ElementList.prototype = {};
  W._FrozenElementList.prototype = {$isElementList: 1, $isNodeListWrapper: 1};
  W.Element.prototype = {$isChildNode: 1, $isElement: 1, $isGlobalEventHandlers: 1, $isNonDocumentTypeChildNode: 1, $isParentNode: 1};
  W._ElementFactoryProvider.prototype = {};
  W.ScrollAlignment.prototype = {};
  W.EmbedElement.prototype = {$isEmbedElement: 1};
  W.Entry.prototype = {$isEntry: 1};
  W.ErrorEvent.prototype = {$isErrorEvent: 1};
  W.Event0.prototype = {$isEvent0: 1};
  W.EventSource.prototype = {$isEventSource: 1};
  W.Events.prototype = {};
  W.ElementEvents.prototype = {};
  W.EventTarget.prototype = {$isEventTarget: 1};
  W.ExtendableEvent.prototype = {$isExtendableEvent: 1};
  W.ExtendableMessageEvent.prototype = {$isExtendableMessageEvent: 1};
  W.External.prototype = {$isExternal: 1};
  W.FaceDetector.prototype = {$isFaceDetector: 1};
  W.FederatedCredential.prototype = {$isCredentialUserData: 1, $isFederatedCredential: 1};
  W.FetchEvent.prototype = {$isFetchEvent: 1};
  W.FieldSetElement.prototype = {$isFieldSetElement: 1};
  W.File.prototype = {$isFile: 1};
  W.FileEntry.prototype = {$isFileEntry: 1};
  W.FileList.prototype = {$isJSIndexable: 1,
    $asJSIndexable: function() {
      return [W.File];
    },
    $isJSMutableIndexable: 1,
    $asJSMutableIndexable: function() {
      return [W.File];
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.File];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.File];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.File];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.File];
    },
    $isList: 1,
    $asList: function() {
      return [W.File];
    },
    $isFileList: 1,
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [W.File];
    }
  };
  W.FileReader.prototype = {$isFileReader: 1};
  W.FileSystem.prototype = {$isFileSystem: 1};
  W.FileWriter.prototype = {$isFileWriter: 1};
  W.FocusEvent.prototype = {$isFocusEvent: 1};
  W.FontFace.prototype = {$isFontFace: 1};
  W.FontFaceSet.prototype = {$isFontFaceSet: 1};
  W.FontFaceSetLoadEvent.prototype = {$isFontFaceSetLoadEvent: 1};
  W.FontFaceSource.prototype = {$isFontFaceSource: 1};
  W.ForeignFetchEvent.prototype = {$isForeignFetchEvent: 1};
  W.FormData.prototype = {$isFormData: 1};
  W.FormElement.prototype = {$isFormElement: 1};
  W.Gamepad.prototype = {$isGamepad: 1};
  W.GamepadButton.prototype = {$isGamepadButton: 1};
  W.GamepadEvent.prototype = {$isGamepadEvent: 1};
  W.GamepadPose.prototype = {$isGamepadPose: 1};
  W.Geolocation.prototype = {$isGeolocation: 1};
  W._GeopositionWrapper.prototype = {$isInterceptor: 1, $isGeoposition: 1};
  W.Geoposition.prototype = {$isGeoposition: 1};
  W.GlobalEventHandlers.prototype = {$isInterceptor: 1, $isEventTarget: 1};
  W.Gyroscope.prototype = {$isGyroscope: 1};
  W.HRElement.prototype = {$isHRElement: 1};
  W.HashChangeEvent.prototype = {$isHashChangeEvent: 1};
  W.HeadElement.prototype = {$isHeadElement: 1};
  W.Headers.prototype = {$isHeaders: 1};
  W.HeadingElement.prototype = {$isHeadingElement: 1};
  W.History.prototype = {$isHistory: 1, $isHistoryBase: 1};
  W.HtmlCollection.prototype = {$isJSIndexable: 1,
    $asJSIndexable: function() {
      return [W.Node];
    },
    $isJSMutableIndexable: 1,
    $asJSMutableIndexable: function() {
      return [W.Node];
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.Node];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.Node];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.Node];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.Node];
    },
    $isList: 1,
    $asList: function() {
      return [W.Node];
    },
    $isHtmlCollection: 1,
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [W.Node];
    }
  };
  W.HtmlDocument.prototype = {$isHtmlDocument: 1};
  W.HtmlFormControlsCollection.prototype = {$isHtmlFormControlsCollection: 1};
  W.HtmlHtmlElement.prototype = {$isHtmlHtmlElement: 1};
  W.HtmlHyperlinkElementUtils.prototype = {$isHtmlHyperlinkElementUtils: 1};
  W.HtmlOptionsCollection.prototype = {$isHtmlOptionsCollection: 1};
  W.HttpRequest0.prototype = {$isHttpRequest0: 1};
  W.HttpRequestEventTarget.prototype = {$isHttpRequestEventTarget: 1};
  W.HttpRequestUpload.prototype = {$isHttpRequestUpload: 1};
  W.IFrameElement.prototype = {$isIFrameElement: 1};
  W.IdleDeadline.prototype = {$isIdleDeadline: 1};
  W.ImageBitmap.prototype = {$isImageBitmap: 1};
  W.ImageBitmapRenderingContext.prototype = {$isImageBitmapRenderingContext: 1};
  W.ImageCapture.prototype = {$isImageCapture: 1};
  W.ImageData.prototype = {$isImageData: 1};
  W.ImageElement.prototype = {$isImageElement: 1, $isCanvasImageSource: 1};
  W.InputDeviceCapabilities.prototype = {$isInputDeviceCapabilities: 1};
  W.InputElement.prototype = {$isInputElement: 1, $isInputElementBase: 1, $isHiddenInputElement: 1, $isTextInputElementBase: 1, $isSearchInputElement: 1, $isTextInputElement: 1, $isUrlInputElement: 1, $isTelephoneInputElement: 1, $isEmailInputElement: 1, $isPasswordInputElement: 1, $isRangeInputElementBase: 1, $isDateInputElement: 1, $isMonthInputElement: 1, $isWeekInputElement: 1, $isTimeInputElement: 1, $isLocalDateTimeInputElement: 1, $isNumberInputElement: 1, $isRangeInputElement: 1, $isCheckboxInputElement: 1, $isRadioButtonInputElement: 1, $isFileUploadInputElement: 1, $isSubmitButtonInputElement: 1, $isImageButtonInputElement: 1, $isResetButtonInputElement: 1, $isButtonInputElement: 1};
  W.InputElementBase.prototype = {$isInterceptor: 1, $isChildNode: 1, $isElement: 1, $isEventTarget: 1, $isGlobalEventHandlers: 1, $isNode: 1, $isNonDocumentTypeChildNode: 1, $isParentNode: 1};
  W.HiddenInputElement.prototype = {$isInterceptor: 1, $isChildNode: 1, $isElement: 1, $isEventTarget: 1, $isGlobalEventHandlers: 1, $isInputElementBase: 1, $isNode: 1, $isNonDocumentTypeChildNode: 1, $isParentNode: 1};
  W.TextInputElementBase.prototype = {$isInterceptor: 1, $isChildNode: 1, $isElement: 1, $isEventTarget: 1, $isGlobalEventHandlers: 1, $isInputElementBase: 1, $isNode: 1, $isNonDocumentTypeChildNode: 1, $isParentNode: 1};
  W.SearchInputElement.prototype = {$isInterceptor: 1, $isChildNode: 1, $isElement: 1, $isEventTarget: 1, $isGlobalEventHandlers: 1, $isInputElementBase: 1, $isTextInputElementBase: 1, $isNode: 1, $isNonDocumentTypeChildNode: 1, $isParentNode: 1};
  W.TextInputElement.prototype = {$isInterceptor: 1, $isChildNode: 1, $isElement: 1, $isEventTarget: 1, $isGlobalEventHandlers: 1, $isInputElementBase: 1, $isTextInputElementBase: 1, $isNode: 1, $isNonDocumentTypeChildNode: 1, $isParentNode: 1};
  W.UrlInputElement.prototype = {$isInterceptor: 1, $isChildNode: 1, $isElement: 1, $isEventTarget: 1, $isGlobalEventHandlers: 1, $isInputElementBase: 1, $isTextInputElementBase: 1, $isNode: 1, $isNonDocumentTypeChildNode: 1, $isParentNode: 1};
  W.TelephoneInputElement.prototype = {$isInterceptor: 1, $isChildNode: 1, $isElement: 1, $isEventTarget: 1, $isGlobalEventHandlers: 1, $isInputElementBase: 1, $isTextInputElementBase: 1, $isNode: 1, $isNonDocumentTypeChildNode: 1, $isParentNode: 1};
  W.EmailInputElement.prototype = {$isInterceptor: 1, $isChildNode: 1, $isElement: 1, $isEventTarget: 1, $isGlobalEventHandlers: 1, $isInputElementBase: 1, $isTextInputElementBase: 1, $isNode: 1, $isNonDocumentTypeChildNode: 1, $isParentNode: 1};
  W.PasswordInputElement.prototype = {$isInterceptor: 1, $isChildNode: 1, $isElement: 1, $isEventTarget: 1, $isGlobalEventHandlers: 1, $isInputElementBase: 1, $isTextInputElementBase: 1, $isNode: 1, $isNonDocumentTypeChildNode: 1, $isParentNode: 1};
  W.RangeInputElementBase.prototype = {$isInterceptor: 1, $isChildNode: 1, $isElement: 1, $isEventTarget: 1, $isGlobalEventHandlers: 1, $isInputElementBase: 1, $isNode: 1, $isNonDocumentTypeChildNode: 1, $isParentNode: 1};
  W.DateInputElement.prototype = {$isInterceptor: 1, $isChildNode: 1, $isElement: 1, $isEventTarget: 1, $isGlobalEventHandlers: 1, $isInputElementBase: 1, $isRangeInputElementBase: 1, $isNode: 1, $isNonDocumentTypeChildNode: 1, $isParentNode: 1};
  W.MonthInputElement.prototype = {$isInterceptor: 1, $isChildNode: 1, $isElement: 1, $isEventTarget: 1, $isGlobalEventHandlers: 1, $isInputElementBase: 1, $isRangeInputElementBase: 1, $isNode: 1, $isNonDocumentTypeChildNode: 1, $isParentNode: 1};
  W.WeekInputElement.prototype = {$isInterceptor: 1, $isChildNode: 1, $isElement: 1, $isEventTarget: 1, $isGlobalEventHandlers: 1, $isInputElementBase: 1, $isRangeInputElementBase: 1, $isNode: 1, $isNonDocumentTypeChildNode: 1, $isParentNode: 1};
  W.TimeInputElement.prototype = {$isInterceptor: 1, $isChildNode: 1, $isElement: 1, $isEventTarget: 1, $isGlobalEventHandlers: 1, $isInputElementBase: 1, $isRangeInputElementBase: 1, $isNode: 1, $isNonDocumentTypeChildNode: 1, $isParentNode: 1};
  W.LocalDateTimeInputElement.prototype = {$isInterceptor: 1, $isChildNode: 1, $isElement: 1, $isEventTarget: 1, $isGlobalEventHandlers: 1, $isInputElementBase: 1, $isRangeInputElementBase: 1, $isNode: 1, $isNonDocumentTypeChildNode: 1, $isParentNode: 1};
  W.NumberInputElement.prototype = {$isInterceptor: 1, $isChildNode: 1, $isElement: 1, $isEventTarget: 1, $isGlobalEventHandlers: 1, $isInputElementBase: 1, $isRangeInputElementBase: 1, $isNode: 1, $isNonDocumentTypeChildNode: 1, $isParentNode: 1};
  W.RangeInputElement.prototype = {$isInterceptor: 1, $isChildNode: 1, $isElement: 1, $isEventTarget: 1, $isGlobalEventHandlers: 1, $isInputElementBase: 1, $isRangeInputElementBase: 1, $isNode: 1, $isNonDocumentTypeChildNode: 1, $isParentNode: 1};
  W.CheckboxInputElement.prototype = {$isInterceptor: 1, $isChildNode: 1, $isElement: 1, $isEventTarget: 1, $isGlobalEventHandlers: 1, $isInputElementBase: 1, $isNode: 1, $isNonDocumentTypeChildNode: 1, $isParentNode: 1};
  W.RadioButtonInputElement.prototype = {$isInterceptor: 1, $isChildNode: 1, $isElement: 1, $isEventTarget: 1, $isGlobalEventHandlers: 1, $isInputElementBase: 1, $isNode: 1, $isNonDocumentTypeChildNode: 1, $isParentNode: 1};
  W.FileUploadInputElement.prototype = {$isInterceptor: 1, $isChildNode: 1, $isElement: 1, $isEventTarget: 1, $isGlobalEventHandlers: 1, $isInputElementBase: 1, $isNode: 1, $isNonDocumentTypeChildNode: 1, $isParentNode: 1};
  W.SubmitButtonInputElement.prototype = {$isInterceptor: 1, $isChildNode: 1, $isElement: 1, $isEventTarget: 1, $isGlobalEventHandlers: 1, $isInputElementBase: 1, $isNode: 1, $isNonDocumentTypeChildNode: 1, $isParentNode: 1};
  W.ImageButtonInputElement.prototype = {$isInterceptor: 1, $isChildNode: 1, $isElement: 1, $isEventTarget: 1, $isGlobalEventHandlers: 1, $isInputElementBase: 1, $isNode: 1, $isNonDocumentTypeChildNode: 1, $isParentNode: 1};
  W.ResetButtonInputElement.prototype = {$isInterceptor: 1, $isChildNode: 1, $isElement: 1, $isEventTarget: 1, $isGlobalEventHandlers: 1, $isInputElementBase: 1, $isNode: 1, $isNonDocumentTypeChildNode: 1, $isParentNode: 1};
  W.ButtonInputElement.prototype = {$isInterceptor: 1, $isChildNode: 1, $isElement: 1, $isEventTarget: 1, $isGlobalEventHandlers: 1, $isInputElementBase: 1, $isNode: 1, $isNonDocumentTypeChildNode: 1, $isParentNode: 1};
  W.InstallEvent.prototype = {$isInstallEvent: 1};
  W.IntersectionObserver.prototype = {$isIntersectionObserver: 1};
  W.IntersectionObserverEntry.prototype = {$isIntersectionObserverEntry: 1};
  W.InterventionReport.prototype = {$isInterventionReport: 1};
  W.KeyboardEvent.prototype = {$isKeyboardEvent: 1};
  W.KeyframeEffect.prototype = {$isKeyframeEffect: 1};
  W.KeyframeEffectReadOnly.prototype = {$isKeyframeEffectReadOnly: 1};
  W.LIElement.prototype = {$isLIElement: 1};
  W.LabelElement.prototype = {$isLabelElement: 1};
  W.LegendElement.prototype = {$isLegendElement: 1};
  W.LinearAccelerationSensor.prototype = {$isLinearAccelerationSensor: 1};
  W.LinkElement.prototype = {$isLinkElement: 1};
  W.Location.prototype = {$isLocation: 1, $isLocationBase: 1};
  W.Magnetometer.prototype = {$isMagnetometer: 1};
  W.MapElement.prototype = {$isMapElement: 1};
  W.MediaCapabilities.prototype = {$isMediaCapabilities: 1};
  W.MediaCapabilitiesInfo.prototype = {$isMediaCapabilitiesInfo: 1};
  W.MediaDeviceInfo.prototype = {$isMediaDeviceInfo: 1};
  W.MediaDevices.prototype = {$isMediaDevices: 1};
  W.MediaElement.prototype = {$isMediaElement: 1};
  W.MediaEncryptedEvent.prototype = {$isMediaEncryptedEvent: 1};
  W.MediaError.prototype = {$isMediaError: 1};
  W.MediaKeyMessageEvent.prototype = {$isMediaKeyMessageEvent: 1};
  W.MediaKeySession.prototype = {$isMediaKeySession: 1};
  W.MediaKeyStatusMap.prototype = {$isMediaKeyStatusMap: 1};
  W.MediaKeySystemAccess.prototype = {$isMediaKeySystemAccess: 1};
  W.MediaKeys.prototype = {$isMediaKeys: 1};
  W.MediaKeysPolicy.prototype = {$isMediaKeysPolicy: 1};
  W.MediaList.prototype = {$isMediaList: 1};
  W.MediaMetadata.prototype = {$isMediaMetadata: 1};
  W.MediaQueryList.prototype = {$isMediaQueryList: 1};
  W.MediaQueryListEvent.prototype = {$isMediaQueryListEvent: 1};
  W.MediaRecorder.prototype = {$isMediaRecorder: 1};
  W.MediaSession.prototype = {$isMediaSession: 1};
  W.MediaSettingsRange.prototype = {$isMediaSettingsRange: 1};
  W.MediaSource.prototype = {$isMediaSource: 1};
  W.MediaStream.prototype = {$isMediaStream: 1};
  W.MediaStreamEvent.prototype = {$isMediaStreamEvent: 1};
  W.MediaStreamTrack.prototype = {$isMediaStreamTrack: 1};
  W.MediaStreamTrackEvent.prototype = {$isMediaStreamTrackEvent: 1};
  W.MemoryInfo.prototype = {$isMemoryInfo: 1};
  W.MenuElement.prototype = {$isMenuElement: 1};
  W.MessageChannel.prototype = {$isMessageChannel: 1};
  W.MessageEvent.prototype = {$isMessageEvent: 1};
  W.MessagePort.prototype = {$isMessagePort: 1};
  W.MetaElement.prototype = {$isMetaElement: 1};
  W.Metadata.prototype = {$isMetadata: 1};
  W.MeterElement.prototype = {$isMeterElement: 1};
  W.MidiAccess.prototype = {$isMidiAccess: 1};
  W.MidiConnectionEvent.prototype = {$isMidiConnectionEvent: 1};
  W.MidiInput.prototype = {$isMidiInput: 1};
  W.MidiInputMap.prototype = {$isMapMixin: 1,
    $asMapMixin: function() {
      return [P.String, null];
    },
    $isMap: 1,
    $asMap: function() {
      return [P.String, null];
    },
    $isMidiInputMap: 1
  };
  W.MidiMessageEvent.prototype = {$isMidiMessageEvent: 1};
  W.MidiOutput.prototype = {$isMidiOutput: 1};
  W.MidiOutputMap.prototype = {$isMapMixin: 1,
    $asMapMixin: function() {
      return [P.String, null];
    },
    $isMap: 1,
    $asMap: function() {
      return [P.String, null];
    },
    $isMidiOutputMap: 1
  };
  W.MidiPort.prototype = {$isMidiPort: 1};
  W.MimeType.prototype = {$isMimeType: 1};
  W.MimeTypeArray.prototype = {$isJSIndexable: 1,
    $asJSIndexable: function() {
      return [W.MimeType];
    },
    $isJSMutableIndexable: 1,
    $asJSMutableIndexable: function() {
      return [W.MimeType];
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.MimeType];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.MimeType];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.MimeType];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.MimeType];
    },
    $isList: 1,
    $asList: function() {
      return [W.MimeType];
    },
    $isMimeTypeArray: 1,
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [W.MimeType];
    }
  };
  W.ModElement.prototype = {$isModElement: 1};
  W.MouseEvent.prototype = {$isMouseEvent: 1};
  W.MutationEvent.prototype = {$isMutationEvent: 1};
  W.MutationObserver.prototype = {$isMutationObserver: 1};
  W.MutationRecord.prototype = {$isMutationRecord: 1};
  W.NavigationPreloadManager.prototype = {$isNavigationPreloadManager: 1};
  W.Navigator.prototype = {$isNavigator: 1, $isNavigatorAutomationInformation: 1, $isNavigatorCookies: 1, $isNavigatorID: 1, $isNavigatorLanguage: 1, $isNavigatorOnLine: 1};
  W.NavigatorAutomationInformation.prototype = {$isNavigatorAutomationInformation: 1};
  W.NavigatorConcurrentHardware.prototype = {$isNavigatorConcurrentHardware: 1};
  W.NavigatorCookies.prototype = {$isNavigatorCookies: 1};
  W.NavigatorID.prototype = {};
  W.NavigatorLanguage.prototype = {};
  W.NavigatorOnLine.prototype = {};
  W.NavigatorUserMediaError.prototype = {$isNavigatorUserMediaError: 1};
  W.NetworkInformation.prototype = {$isNetworkInformation: 1};
  W._ChildNodeListLazy.prototype = {
    $asEfficientLengthIterable: function() {
      return [W.Node];
    },
    $asListBase: function() {
      return [W.Node];
    },
    $asListMixin: function() {
      return [W.Node];
    },
    $asIterable: function() {
      return [W.Node];
    },
    $asList: function() {
      return [W.Node];
    },
    $isNodeListWrapper: 1,
    $as_ListBase_Object_ListMixin: function() {
      return [W.Node];
    }
  };
  W.Node.prototype = {$isNode: 1};
  W.NodeFilter.prototype = {$isNodeFilter: 1};
  W.NodeIterator.prototype = {$isNodeIterator: 1};
  W.NodeList.prototype = {$isJSIndexable: 1,
    $asJSIndexable: function() {
      return [W.Node];
    },
    $isJSMutableIndexable: 1,
    $asJSMutableIndexable: function() {
      return [W.Node];
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.Node];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.Node];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.Node];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.Node];
    },
    $isList: 1,
    $asList: function() {
      return [W.Node];
    },
    $isNodeList: 1,
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [W.Node];
    }
  };
  W.NonDocumentTypeChildNode.prototype = {$isNonDocumentTypeChildNode: 1};
  W.NonElementParentNode.prototype = {$isNonElementParentNode: 1};
  W.NoncedElement.prototype = {$isNoncedElement: 1};
  W.Notification.prototype = {$isNotification: 1};
  W.NotificationEvent.prototype = {$isNotificationEvent: 1};
  W.OListElement.prototype = {$isOListElement: 1};
  W.ObjectElement.prototype = {$isObjectElement: 1};
  W.OffscreenCanvas.prototype = {$isOffscreenCanvas: 1};
  W.OffscreenCanvasRenderingContext2D.prototype = {$isOffscreenCanvasRenderingContext2D: 1, $is_CanvasPath: 1};
  W.OptGroupElement.prototype = {$isOptGroupElement: 1};
  W.OptionElement.prototype = {$isOptionElement: 1};
  W.OrientationSensor.prototype = {$isOrientationSensor: 1};
  W.OutputElement.prototype = {$isOutputElement: 1};
  W.OverconstrainedError.prototype = {$isOverconstrainedError: 1};
  W.PageTransitionEvent.prototype = {$isPageTransitionEvent: 1};
  W.PaintRenderingContext2D.prototype = {$isPaintRenderingContext2D: 1, $is_CanvasPath: 1};
  W.PaintSize.prototype = {$isPaintSize: 1};
  W.PaintWorkletGlobalScope.prototype = {$isPaintWorkletGlobalScope: 1};
  W.ParagraphElement.prototype = {$isParagraphElement: 1};
  W.ParamElement.prototype = {$isParamElement: 1};
  W.ParentNode.prototype = {};
  W.PasswordCredential.prototype = {$isCredentialUserData: 1, $isPasswordCredential: 1};
  W.Path2D.prototype = {$isPath2D: 1, $is_CanvasPath: 1};
  W.PaymentAddress.prototype = {$isPaymentAddress: 1};
  W.PaymentInstruments.prototype = {$isPaymentInstruments: 1};
  W.PaymentManager.prototype = {$isPaymentManager: 1};
  W.PaymentRequest.prototype = {$isPaymentRequest: 1};
  W.PaymentRequestEvent.prototype = {$isPaymentRequestEvent: 1};
  W.PaymentRequestUpdateEvent.prototype = {$isPaymentRequestUpdateEvent: 1};
  W.PaymentResponse.prototype = {$isPaymentResponse: 1};
  W.Performance.prototype = {$isPerformance: 1};
  W.PerformanceEntry.prototype = {$isPerformanceEntry: 1};
  W.PerformanceLongTaskTiming.prototype = {$isPerformanceLongTaskTiming: 1};
  W.PerformanceMark.prototype = {$isPerformanceMark: 1};
  W.PerformanceMeasure.prototype = {$isPerformanceMeasure: 1};
  W.PerformanceNavigation.prototype = {$isPerformanceNavigation: 1};
  W.PerformanceNavigationTiming.prototype = {$isPerformanceNavigationTiming: 1};
  W.PerformanceObserver.prototype = {$isPerformanceObserver: 1};
  W.PerformanceObserverEntryList.prototype = {$isPerformanceObserverEntryList: 1};
  W.PerformancePaintTiming.prototype = {$isPerformancePaintTiming: 1};
  W.PerformanceResourceTiming.prototype = {$isPerformanceResourceTiming: 1};
  W.PerformanceServerTiming.prototype = {$isPerformanceServerTiming: 1};
  W.PerformanceTiming.prototype = {$isPerformanceTiming: 1};
  W.PermissionStatus.prototype = {$isPermissionStatus: 1};
  W.Permissions.prototype = {$isPermissions: 1};
  W.PhotoCapabilities.prototype = {$isPhotoCapabilities: 1};
  W.PictureElement.prototype = {$isPictureElement: 1};
  W.Plugin.prototype = {$isPlugin: 1};
  W.PluginArray.prototype = {$isJSIndexable: 1,
    $asJSIndexable: function() {
      return [W.Plugin];
    },
    $isJSMutableIndexable: 1,
    $asJSMutableIndexable: function() {
      return [W.Plugin];
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.Plugin];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.Plugin];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.Plugin];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.Plugin];
    },
    $isList: 1,
    $asList: function() {
      return [W.Plugin];
    },
    $isPluginArray: 1,
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [W.Plugin];
    }
  };
  W.PointerEvent.prototype = {$isPointerEvent: 1};
  W.PopStateEvent.prototype = {$isPopStateEvent: 1};
  W.PositionError.prototype = {$isPositionError: 1};
  W.PreElement.prototype = {$isPreElement: 1};
  W.Presentation.prototype = {$isPresentation: 1};
  W.PresentationAvailability.prototype = {$isPresentationAvailability: 1};
  W.PresentationConnection.prototype = {$isPresentationConnection: 1};
  W.PresentationConnectionAvailableEvent.prototype = {$isPresentationConnectionAvailableEvent: 1};
  W.PresentationConnectionCloseEvent.prototype = {$isPresentationConnectionCloseEvent: 1};
  W.PresentationConnectionList.prototype = {$isPresentationConnectionList: 1};
  W.PresentationReceiver.prototype = {$isPresentationReceiver: 1};
  W.PresentationRequest.prototype = {$isPresentationRequest: 1};
  W.ProcessingInstruction.prototype = {$isProcessingInstruction: 1};
  W.ProgressElement.prototype = {$isProgressElement: 1};
  W.ProgressEvent.prototype = {$isProgressEvent: 1};
  W.PromiseRejectionEvent.prototype = {$isPromiseRejectionEvent: 1};
  W.PublicKeyCredential.prototype = {$isPublicKeyCredential: 1};
  W.PushEvent.prototype = {$isPushEvent: 1};
  W.PushManager.prototype = {$isPushManager: 1};
  W.PushMessageData.prototype = {$isPushMessageData: 1};
  W.PushSubscription.prototype = {$isPushSubscription: 1};
  W.PushSubscriptionOptions.prototype = {$isPushSubscriptionOptions: 1};
  W.QuoteElement.prototype = {$isQuoteElement: 1};
  W.Range.prototype = {$isRange: 1};
  W.RelatedApplication.prototype = {$isRelatedApplication: 1};
  W.RelativeOrientationSensor.prototype = {$isRelativeOrientationSensor: 1};
  W.RemotePlayback.prototype = {$isRemotePlayback: 1};
  W.ReportBody.prototype = {$isReportBody: 1};
  W.ReportingObserver.prototype = {$isReportingObserver: 1};
  W.ResizeObserver.prototype = {$isResizeObserver: 1};
  W.ResizeObserverEntry.prototype = {$isResizeObserverEntry: 1};
  W.RtcCertificate.prototype = {$isRtcCertificate: 1};
  W.RtcDataChannel.prototype = {$isRtcDataChannel: 1};
  W.RtcDataChannelEvent.prototype = {$isRtcDataChannelEvent: 1};
  W.RtcDtmfSender.prototype = {$isRtcDtmfSender: 1};
  W.RtcDtmfToneChangeEvent.prototype = {$isRtcDtmfToneChangeEvent: 1};
  W.RtcIceCandidate.prototype = {$isRtcIceCandidate: 1};
  W.RtcLegacyStatsReport.prototype = {$isRtcLegacyStatsReport: 1};
  W.RtcPeerConnection.prototype = {$isRtcPeerConnection: 1};
  W.RtcPeerConnectionIceEvent.prototype = {$isRtcPeerConnectionIceEvent: 1};
  W.RtcRtpContributingSource.prototype = {$isRtcRtpContributingSource: 1};
  W.RtcRtpReceiver.prototype = {$isRtcRtpReceiver: 1};
  W.RtcRtpSender.prototype = {$isRtcRtpSender: 1};
  W.RtcSessionDescription.prototype = {$isRtcSessionDescription: 1};
  W.RtcStatsReport.prototype = {$isMapMixin: 1,
    $asMapMixin: function() {
      return [P.String, null];
    },
    $isMap: 1,
    $asMap: function() {
      return [P.String, null];
    },
    $isRtcStatsReport: 1
  };
  W.RtcStatsResponse.prototype = {$isRtcStatsResponse: 1};
  W.RtcTrackEvent.prototype = {$isRtcTrackEvent: 1};
  W.Screen.prototype = {$isScreen: 1};
  W.ScreenOrientation.prototype = {$isScreenOrientation: 1};
  W.ScriptElement.prototype = {$isScriptElement: 1};
  W.ScrollState.prototype = {$isScrollState: 1};
  W.ScrollTimeline.prototype = {$isScrollTimeline: 1};
  W.SecurityPolicyViolationEvent.prototype = {$isSecurityPolicyViolationEvent: 1};
  W.SelectElement.prototype = {$isSelectElement: 1};
  W.Selection.prototype = {$isSelection: 1};
  W.Sensor.prototype = {$isSensor: 1};
  W.SensorErrorEvent.prototype = {$isSensorErrorEvent: 1};
  W.ServiceWorker.prototype = {$isAbstractWorker: 1, $isServiceWorker: 1};
  W.ServiceWorkerContainer.prototype = {$isServiceWorkerContainer: 1};
  W.ServiceWorkerGlobalScope.prototype = {$isServiceWorkerGlobalScope: 1};
  W.ServiceWorkerRegistration.prototype = {$isServiceWorkerRegistration: 1};
  W.ShadowElement.prototype = {$isShadowElement: 1};
  W.ShadowRoot.prototype = {$isDocumentOrShadowRoot: 1, $isShadowRoot: 1};
  W.SharedArrayBuffer.prototype = {$isSharedArrayBuffer: 1};
  W.SharedWorker.prototype = {$isAbstractWorker: 1, $isSharedWorker: 1};
  W.SharedWorkerGlobalScope.prototype = {$isSharedWorkerGlobalScope: 1};
  W.SlotElement.prototype = {$isSlotElement: 1};
  W.SourceBuffer.prototype = {$isSourceBuffer: 1};
  W.SourceBufferList.prototype = {$isJSIndexable: 1,
    $asJSIndexable: function() {
      return [W.SourceBuffer];
    },
    $isJSMutableIndexable: 1,
    $asJSMutableIndexable: function() {
      return [W.SourceBuffer];
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.SourceBuffer];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.SourceBuffer];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.SourceBuffer];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.SourceBuffer];
    },
    $isList: 1,
    $asList: function() {
      return [W.SourceBuffer];
    },
    $isSourceBufferList: 1,
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [W.SourceBuffer];
    }
  };
  W.SourceElement.prototype = {$isSourceElement: 1};
  W.SpanElement.prototype = {$isSpanElement: 1};
  W.SpeechGrammar.prototype = {$isSpeechGrammar: 1};
  W.SpeechGrammarList.prototype = {$isJSIndexable: 1,
    $asJSIndexable: function() {
      return [W.SpeechGrammar];
    },
    $isJSMutableIndexable: 1,
    $asJSMutableIndexable: function() {
      return [W.SpeechGrammar];
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.SpeechGrammar];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.SpeechGrammar];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.SpeechGrammar];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.SpeechGrammar];
    },
    $isList: 1,
    $asList: function() {
      return [W.SpeechGrammar];
    },
    $isSpeechGrammarList: 1,
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [W.SpeechGrammar];
    }
  };
  W.SpeechRecognition.prototype = {$isSpeechRecognition: 1};
  W.SpeechRecognitionAlternative.prototype = {$isSpeechRecognitionAlternative: 1};
  W.SpeechRecognitionError.prototype = {$isSpeechRecognitionError: 1};
  W.SpeechRecognitionEvent.prototype = {$isSpeechRecognitionEvent: 1};
  W.SpeechRecognitionResult.prototype = {$isSpeechRecognitionResult: 1};
  W.SpeechSynthesis.prototype = {$isSpeechSynthesis: 1};
  W.SpeechSynthesisEvent.prototype = {$isSpeechSynthesisEvent: 1};
  W.SpeechSynthesisUtterance.prototype = {$isSpeechSynthesisUtterance: 1};
  W.SpeechSynthesisVoice.prototype = {$isSpeechSynthesisVoice: 1};
  W.StaticRange.prototype = {$isStaticRange: 1};
  W.Storage.prototype = {$isMapMixin: 1,
    $asMapMixin: function() {
      return [P.String, P.String];
    },
    $isMap: 1,
    $asMap: function() {
      return [P.String, P.String];
    },
    $isStorage: 1
  };
  W.StorageEvent.prototype = {$isStorageEvent: 1};
  W.StorageManager.prototype = {$isStorageManager: 1};
  W.StyleElement.prototype = {$isStyleElement: 1};
  W.StyleMedia.prototype = {$isStyleMedia: 1};
  W.StylePropertyMap.prototype = {$isStylePropertyMap: 1};
  W.StylePropertyMapReadonly.prototype = {$isStylePropertyMapReadonly: 1};
  W.StyleSheet.prototype = {$isStyleSheet: 1};
  W.SyncEvent.prototype = {$isSyncEvent: 1};
  W.SyncManager.prototype = {$isSyncManager: 1};
  W.TableCaptionElement.prototype = {$isTableCaptionElement: 1};
  W.TableCellElement.prototype = {$isTableCellElement: 1};
  W.TableColElement.prototype = {$isTableColElement: 1};
  W.TableElement.prototype = {$isTableElement: 1};
  W.TableRowElement.prototype = {$isTableRowElement: 1};
  W.TableSectionElement.prototype = {$isTableSectionElement: 1};
  W.TaskAttributionTiming.prototype = {$isTaskAttributionTiming: 1};
  W.TemplateElement.prototype = {$isTemplateElement: 1};
  W.Text.prototype = {$isText: 1};
  W.TextAreaElement.prototype = {$isTextAreaElement: 1};
  W.TextDetector.prototype = {$isTextDetector: 1};
  W.TextEvent.prototype = {$isTextEvent: 1};
  W.TextMetrics.prototype = {$isTextMetrics: 1};
  W.TextTrack.prototype = {$isTextTrack: 1};
  W.TextTrackCue.prototype = {$isTextTrackCue: 1};
  W.TextTrackCueList.prototype = {$isJSIndexable: 1,
    $asJSIndexable: function() {
      return [W.TextTrackCue];
    },
    $isJSMutableIndexable: 1,
    $asJSMutableIndexable: function() {
      return [W.TextTrackCue];
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.TextTrackCue];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.TextTrackCue];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.TextTrackCue];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.TextTrackCue];
    },
    $isList: 1,
    $asList: function() {
      return [W.TextTrackCue];
    },
    $isTextTrackCueList: 1,
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [W.TextTrackCue];
    }
  };
  W.TextTrackList.prototype = {$isJSIndexable: 1,
    $asJSIndexable: function() {
      return [W.TextTrack];
    },
    $isJSMutableIndexable: 1,
    $asJSMutableIndexable: function() {
      return [W.TextTrack];
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.TextTrack];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.TextTrack];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.TextTrack];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.TextTrack];
    },
    $isList: 1,
    $asList: function() {
      return [W.TextTrack];
    },
    $isTextTrackList: 1,
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [W.TextTrack];
    }
  };
  W.TimeElement.prototype = {$isTimeElement: 1};
  W.TimeRanges.prototype = {$isTimeRanges: 1};
  W.TitleElement.prototype = {$isTitleElement: 1};
  W.Touch.prototype = {$isTouch: 1};
  W.TouchEvent.prototype = {$isTouchEvent: 1};
  W.TouchList.prototype = {$isJSIndexable: 1,
    $asJSIndexable: function() {
      return [W.Touch];
    },
    $isJSMutableIndexable: 1,
    $asJSMutableIndexable: function() {
      return [W.Touch];
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.Touch];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.Touch];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.Touch];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.Touch];
    },
    $isList: 1,
    $asList: function() {
      return [W.Touch];
    },
    $isTouchList: 1,
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [W.Touch];
    }
  };
  W.TrackDefault.prototype = {$isTrackDefault: 1};
  W.TrackDefaultList.prototype = {$isTrackDefaultList: 1};
  W.TrackElement.prototype = {$isTrackElement: 1};
  W.TrackEvent.prototype = {$isTrackEvent: 1};
  W.TransitionEvent.prototype = {$isTransitionEvent: 1};
  W.TreeWalker.prototype = {$isTreeWalker: 1};
  W.TrustedHtml.prototype = {$isTrustedHtml: 1};
  W.TrustedScriptUrl.prototype = {$isTrustedScriptUrl: 1};
  W.TrustedUrl.prototype = {$isTrustedUrl: 1};
  W.UIEvent.prototype = {$isUIEvent: 1};
  W.UListElement.prototype = {$isUListElement: 1};
  W.UnderlyingSourceBase.prototype = {$isUnderlyingSourceBase: 1};
  W.UnknownElement.prototype = {$isUnknownElement: 1};
  W.Url.prototype = {$isUrl: 1};
  W.UrlSearchParams.prototype = {$isUrlSearchParams: 1};
  W.UrlUtilsReadOnly.prototype = {};
  W.VR.prototype = {$isVR: 1};
  W.VRCoordinateSystem.prototype = {$isVRCoordinateSystem: 1};
  W.VRDevice.prototype = {$isVRDevice: 1};
  W.VRDeviceEvent.prototype = {$isVRDeviceEvent: 1};
  W.VRDisplay.prototype = {$isVRDisplay: 1};
  W.VRDisplayCapabilities.prototype = {$isVRDisplayCapabilities: 1};
  W.VRDisplayEvent.prototype = {$isVRDisplayEvent: 1};
  W.VREyeParameters.prototype = {$isVREyeParameters: 1};
  W.VRFrameData.prototype = {$isVRFrameData: 1};
  W.VRFrameOfReference.prototype = {$isVRFrameOfReference: 1};
  W.VRPose.prototype = {$isVRPose: 1};
  W.VRSession.prototype = {$isVRSession: 1};
  W.VRSessionEvent.prototype = {$isVRSessionEvent: 1};
  W.VRStageBounds.prototype = {$isVRStageBounds: 1};
  W.VRStageBoundsPoint.prototype = {$isVRStageBoundsPoint: 1};
  W.VRStageParameters.prototype = {$isVRStageParameters: 1};
  W.ValidityState.prototype = {$isValidityState: 1};
  W.VideoElement.prototype = {$isVideoElement: 1, $isCanvasImageSource: 1};
  W.VideoPlaybackQuality.prototype = {$isVideoPlaybackQuality: 1};
  W.VideoTrack.prototype = {$isVideoTrack: 1};
  W.VideoTrackList.prototype = {$isVideoTrackList: 1};
  W.VisualViewport.prototype = {$isVisualViewport: 1};
  W.VttCue.prototype = {$isVttCue: 1};
  W.VttRegion.prototype = {$isVttRegion: 1};
  W.WebSocket0.prototype = {$isWebSocket0: 1};
  W.WheelEvent.prototype = {$isWheelEvent: 1};
  W.Window.prototype = {$isGlobalEventHandlers: 1, $isWindow: 1, $isWindowBase64: 1, $isWindowEventHandlers: 1, $is_WindowTimers: 1, $isWindowBase: 1};
  W._BeforeUnloadEvent.prototype = {$isBeforeUnloadEvent: 1};
  W._BeforeUnloadEventStreamProvider.prototype = {$isEventStreamProvider: 1,
    $asEventStreamProvider: function() {
      return [W.BeforeUnloadEvent];
    }
  };
  W.WindowBase64.prototype = {};
  W.WindowClient.prototype = {$isWindowClient: 1};
  W.WindowEventHandlers.prototype = {};
  W.Worker.prototype = {$isAbstractWorker: 1, $isWorker: 1};
  W.WorkerGlobalScope.prototype = {$isWindowBase64: 1, $isWorkerGlobalScope: 1, $is_WindowTimers: 1};
  W.WorkerPerformance.prototype = {$isWorkerPerformance: 1};
  W.WorkletAnimation.prototype = {$isWorkletAnimation: 1};
  W.WorkletGlobalScope.prototype = {$isWorkletGlobalScope: 1};
  W.XPathEvaluator.prototype = {$isXPathEvaluator: 1};
  W.XPathExpression.prototype = {$isXPathExpression: 1};
  W.XPathNSResolver.prototype = {$isXPathNSResolver: 1};
  W.XPathResult.prototype = {$isXPathResult: 1};
  W.XmlDocument.prototype = {$isXmlDocument: 1};
  W.XmlSerializer.prototype = {$isXmlSerializer: 1};
  W.XsltProcessor.prototype = {$isXsltProcessor: 1};
  W._Attr.prototype = {$is_Attr: 1};
  W._Bluetooth.prototype = {$is_Bluetooth: 1};
  W._BluetoothCharacteristicProperties.prototype = {$is_BluetoothCharacteristicProperties: 1};
  W._BluetoothDevice.prototype = {$is_BluetoothDevice: 1};
  W._BluetoothRemoteGATTCharacteristic.prototype = {$is_BluetoothRemoteGATTCharacteristic: 1};
  W._BluetoothRemoteGATTServer.prototype = {$is_BluetoothRemoteGATTServer: 1};
  W._BluetoothRemoteGATTService.prototype = {$is_BluetoothRemoteGATTService: 1};
  W._BluetoothUUID.prototype = {$is_BluetoothUUID: 1};
  W._BudgetService.prototype = {$is_BudgetService: 1};
  W._Cache.prototype = {$is_Cache: 1};
  W._CanvasPath.prototype = {};
  W._Clipboard.prototype = {$is_Clipboard: 1};
  W._CssRuleList.prototype = {$isJSIndexable: 1,
    $asJSIndexable: function() {
      return [W.CssRule];
    },
    $isJSMutableIndexable: 1,
    $asJSMutableIndexable: function() {
      return [W.CssRule];
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.CssRule];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.CssRule];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.CssRule];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.CssRule];
    },
    $isList: 1,
    $asList: function() {
      return [W.CssRule];
    },
    $is_CssRuleList: 1,
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [W.CssRule];
    }
  };
  W._DOMFileSystemSync.prototype = {$is_DOMFileSystemSync: 1};
  W._DirectoryEntrySync.prototype = {$is_DirectoryEntrySync: 1};
  W._DirectoryReaderSync.prototype = {$is_DirectoryReaderSync: 1};
  W._DocumentType.prototype = {$isChildNode: 1, $is_DocumentType: 1};
  W._DomRect.prototype = {$is_DomRect: 1};
  W._JenkinsSmiHash.prototype = {};
  W._EntrySync.prototype = {$is_EntrySync: 1};
  W._FileEntrySync.prototype = {$is_FileEntrySync: 1};
  W._FileReaderSync.prototype = {$is_FileReaderSync: 1};
  W._FileWriterSync.prototype = {$is_FileWriterSync: 1};
  W._GamepadList.prototype = {$isJSIndexable: 1,
    $asJSIndexable: function() {
      return [W.Gamepad];
    },
    $isJSMutableIndexable: 1,
    $asJSMutableIndexable: function() {
      return [W.Gamepad];
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.Gamepad];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.Gamepad];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.Gamepad];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.Gamepad];
    },
    $isList: 1,
    $asList: function() {
      return [W.Gamepad];
    },
    $is_GamepadList: 1,
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [W.Gamepad];
    }
  };
  W._HTMLAllCollection.prototype = {$is_HTMLAllCollection: 1};
  W._HTMLDirectoryElement.prototype = {$is_HTMLDirectoryElement: 1};
  W._HTMLFontElement.prototype = {$is_HTMLFontElement: 1};
  W._HTMLFrameElement.prototype = {$is_HTMLFrameElement: 1};
  W._HTMLFrameSetElement.prototype = {$isWindowEventHandlers: 1, $is_HTMLFrameSetElement: 1};
  W._HTMLMarqueeElement.prototype = {$is_HTMLMarqueeElement: 1};
  W._Mojo.prototype = {$is_Mojo: 1};
  W._MojoHandle.prototype = {$is_MojoHandle: 1};
  W._MojoInterfaceInterceptor.prototype = {$is_MojoInterfaceInterceptor: 1};
  W._MojoInterfaceRequestEvent.prototype = {$is_MojoInterfaceRequestEvent: 1};
  W._MojoWatcher.prototype = {$is_MojoWatcher: 1};
  W._NFC.prototype = {$is_NFC: 1};
  W._NamedNodeMap.prototype = {$isJSIndexable: 1,
    $asJSIndexable: function() {
      return [W.Node];
    },
    $isJSMutableIndexable: 1,
    $asJSMutableIndexable: function() {
      return [W.Node];
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.Node];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.Node];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.Node];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.Node];
    },
    $isList: 1,
    $asList: function() {
      return [W.Node];
    },
    $is_NamedNodeMap: 1,
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [W.Node];
    }
  };
  W._PagePopupController.prototype = {$is_PagePopupController: 1};
  W._Report.prototype = {$is_Report: 1};
  W._Request.prototype = {$is_Request: 1};
  W._ResourceProgressEvent.prototype = {$is_ResourceProgressEvent: 1};
  W._Response.prototype = {$is_Response: 1};
  W._SpeechRecognitionResultList.prototype = {$isJSIndexable: 1,
    $asJSIndexable: function() {
      return [W.SpeechRecognitionResult];
    },
    $isJSMutableIndexable: 1,
    $asJSMutableIndexable: function() {
      return [W.SpeechRecognitionResult];
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.SpeechRecognitionResult];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.SpeechRecognitionResult];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.SpeechRecognitionResult];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.SpeechRecognitionResult];
    },
    $isList: 1,
    $asList: function() {
      return [W.SpeechRecognitionResult];
    },
    $is_SpeechRecognitionResultList: 1,
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [W.SpeechRecognitionResult];
    }
  };
  W._StyleSheetList.prototype = {$isJSIndexable: 1,
    $asJSIndexable: function() {
      return [W.StyleSheet];
    },
    $isJSMutableIndexable: 1,
    $asJSMutableIndexable: function() {
      return [W.StyleSheet];
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.StyleSheet];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.StyleSheet];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.StyleSheet];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.StyleSheet];
    },
    $isList: 1,
    $asList: function() {
      return [W.StyleSheet];
    },
    $is_StyleSheetList: 1,
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [W.StyleSheet];
    }
  };
  W._SubtleCrypto.prototype = {$is_SubtleCrypto: 1};
  W._USB.prototype = {$is_USB: 1};
  W._USBAlternateInterface.prototype = {$is_USBAlternateInterface: 1};
  W._USBConfiguration.prototype = {$is_USBConfiguration: 1};
  W._USBConnectionEvent.prototype = {$is_USBConnectionEvent: 1};
  W._USBDevice.prototype = {$is_USBDevice: 1};
  W._USBEndpoint.prototype = {$is_USBEndpoint: 1};
  W._USBInTransferResult.prototype = {$is_USBInTransferResult: 1};
  W._USBInterface.prototype = {$is_USBInterface: 1};
  W._USBIsochronousInTransferPacket.prototype = {$is_USBIsochronousInTransferPacket: 1};
  W._USBIsochronousInTransferResult.prototype = {$is_USBIsochronousInTransferResult: 1};
  W._USBIsochronousOutTransferPacket.prototype = {$is_USBIsochronousOutTransferPacket: 1};
  W._USBIsochronousOutTransferResult.prototype = {$is_USBIsochronousOutTransferResult: 1};
  W._USBOutTransferResult.prototype = {$is_USBOutTransferResult: 1};
  W._WindowTimers.prototype = {};
  W._WorkerLocation.prototype = {$isUrlUtilsReadOnly: 1, $is_WorkerLocation: 1};
  W._WorkerNavigator.prototype = {$isNavigatorID: 1, $isNavigatorOnLine: 1, $is_WorkerNavigator: 1};
  W._Worklet.prototype = {$is_Worklet: 1};
  W._AttributeMap.prototype = {
    $asMapBase: function() {
      return [P.String, P.String];
    },
    $asMapMixin: function() {
      return [P.String, P.String];
    },
    $asMap: function() {
      return [P.String, P.String];
    }
  };
  W._ElementAttributeMap.prototype = {};
  W._NamespacedAttributeMap.prototype = {};
  W._DataAttributeMap.prototype = {
    $asMapBase: function() {
      return [P.String, P.String];
    },
    $asMapMixin: function() {
      return [P.String, P.String];
    },
    $asMap: function() {
      return [P.String, P.String];
    }
  };
  W.CanvasImageSource.prototype = {};
  W.WindowBase.prototype = {$isInterceptor: 1, $isEventTarget: 1};
  W.LocationBase.prototype = {};
  W.HistoryBase.prototype = {};
  W.CssClassSet.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.String];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.String];
    },
    $isSet: 1,
    $asSet: function() {
      return [P.String];
    }
  };
  W._ContentCssRect.prototype = {};
  W._ContentCssListRect.prototype = {};
  W._PaddingCssRect.prototype = {};
  W._BorderCssRect.prototype = {};
  W._MarginCssRect.prototype = {};
  W.CssRect.prototype = {$is_RectangleBase: 1,
    $as_RectangleBase: function() {
      return [P.num];
    },
    $isRectangle: 1,
    $asRectangle: function() {
      return [P.num];
    }
  };
  W._MultiElementCssClassSet.prototype = {};
  W._ElementCssClassSet.prototype = {};
  W.Dimension.prototype = {};
  W.EventStreamProvider.prototype = {};
  W.ElementStream.prototype = {$isStream: 1};
  W._EventStream.prototype = {};
  W._ElementEventStreamImpl.prototype = {$isElementStream: 1};
  W._ElementListEventStreamImpl.prototype = {$isElementStream: 1};
  W._EventStreamSubscription.prototype = {};
  W.CustomStream.prototype = {$isStream: 1};
  W._CustomEventStreamImpl.prototype = {$isCustomStream: 1};
  W._CustomKeyEventStreamImpl.prototype = {
    $asStream: function() {
      return [W.KeyEvent];
    },
    $asCustomStream: function() {
      return [W.KeyEvent];
    },
    $as_CustomEventStreamImpl: function() {
      return [W.KeyEvent];
    }
  };
  W._StreamPool.prototype = {};
  W._CustomEventStreamProvider.prototype = {$isEventStreamProvider: 1};
  W._Html5NodeValidator.prototype = {$isNodeValidator: 1};
  W.ImmutableListMixin.prototype = {$isEfficientLengthIterable: 1, $isIterable: 1, $isList: 1};
  W.KeyCode.prototype = {};
  W.KeyLocation.prototype = {};
  W._KeyName.prototype = {};
  W._KeyboardEventHandler.prototype = {
    $asEventStreamProvider: function() {
      return [W.KeyEvent];
    }
  };
  W.KeyboardEventStream.prototype = {};
  W.NodeValidatorBuilder.prototype = {$isNodeValidator: 1};
  W._SimpleNodeValidator.prototype = {$isNodeValidator: 1};
  W._CustomElementNodeValidator.prototype = {};
  W._TemplatingNodeValidator.prototype = {};
  W._SvgNodeValidator.prototype = {$isNodeValidator: 1};
  W.ReadyState.prototype = {};
  W._WrappedList.prototype = {$isNodeListWrapper: 1};
  W._WrappedIterator.prototype = {$isIterator: 1};
  W._HttpRequestUtils.prototype = {};
  W.FixedSizeListIterator.prototype = {$isIterator: 1};
  W._VariableSizeListIterator.prototype = {$isIterator: 1};
  W.Console.prototype = {};
  W._JSElementUpgrader.prototype = {$isElementUpgrader: 1};
  W._DOMWindowCrossFrame.prototype = {$isInterceptor: 1, $isEventTarget: 1, $isWindowBase: 1};
  W._LocationCrossFrame.prototype = {$isLocationBase: 1};
  W._HistoryCrossFrame.prototype = {$isHistoryBase: 1};
  W.KeyEvent.prototype = {$isKeyboardEvent: 1, $isUIEvent: 1};
  W.Platform.prototype = {};
  W._WrappedEvent.prototype = {$isInterceptor: 1, $isEvent0: 1};
  W.ElementUpgrader.prototype = {};
  W.NodeValidator.prototype = {};
  W.NodeTreeSanitizer.prototype = {};
  W._TrustedHtmlTreeSanitizer.prototype = {$isNodeTreeSanitizer: 1};
  W.UriPolicy.prototype = {};
  W._SameOriginUriPolicy.prototype = {$isUriPolicy: 1};
  W._ThrowsNodeValidator.prototype = {$isNodeValidator: 1};
  W._ValidatingTreeSanitizer.prototype = {$isNodeTreeSanitizer: 1};
  W._CssStyleDeclaration_Interceptor_CssStyleDeclarationBase.prototype = {$isCssStyleDeclarationBase: 1};
  W._DomRectList_Interceptor_ListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [[P.Rectangle, P.num]];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [[P.Rectangle, P.num]];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [[P.Rectangle, P.num]];
    },
    $isList: 1,
    $asList: function() {
      return [[P.Rectangle, P.num]];
    }
  };
  W._DomRectList_Interceptor_ListMixin_ImmutableListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [[P.Rectangle, P.num]];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [[P.Rectangle, P.num]];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [[P.Rectangle, P.num]];
    },
    $isList: 1,
    $asList: function() {
      return [[P.Rectangle, P.num]];
    },
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [[P.Rectangle, P.num]];
    }
  };
  W._DomStringList_Interceptor_ListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.String];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [P.String];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.String];
    },
    $isList: 1,
    $asList: function() {
      return [P.String];
    }
  };
  W._DomStringList_Interceptor_ListMixin_ImmutableListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.String];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [P.String];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.String];
    },
    $isList: 1,
    $asList: function() {
      return [P.String];
    },
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [P.String];
    }
  };
  W._FileList_Interceptor_ListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.File];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.File];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.File];
    },
    $isList: 1,
    $asList: function() {
      return [W.File];
    }
  };
  W._FileList_Interceptor_ListMixin_ImmutableListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.File];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.File];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.File];
    },
    $isList: 1,
    $asList: function() {
      return [W.File];
    },
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [W.File];
    }
  };
  W._HtmlCollection_Interceptor_ListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.Node];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.Node];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.Node];
    },
    $isList: 1,
    $asList: function() {
      return [W.Node];
    }
  };
  W._HtmlCollection_Interceptor_ListMixin_ImmutableListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.Node];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.Node];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.Node];
    },
    $isList: 1,
    $asList: function() {
      return [W.Node];
    },
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [W.Node];
    }
  };
  W._MidiInputMap_Interceptor_MapMixin.prototype = {$isMapMixin: 1,
    $asMapMixin: function() {
      return [P.String, null];
    },
    $isMap: 1,
    $asMap: function() {
      return [P.String, null];
    }
  };
  W._MidiOutputMap_Interceptor_MapMixin.prototype = {$isMapMixin: 1,
    $asMapMixin: function() {
      return [P.String, null];
    },
    $isMap: 1,
    $asMap: function() {
      return [P.String, null];
    }
  };
  W._MimeTypeArray_Interceptor_ListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.MimeType];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.MimeType];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.MimeType];
    },
    $isList: 1,
    $asList: function() {
      return [W.MimeType];
    }
  };
  W._MimeTypeArray_Interceptor_ListMixin_ImmutableListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.MimeType];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.MimeType];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.MimeType];
    },
    $isList: 1,
    $asList: function() {
      return [W.MimeType];
    },
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [W.MimeType];
    }
  };
  W._NodeList_Interceptor_ListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.Node];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.Node];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.Node];
    },
    $isList: 1,
    $asList: function() {
      return [W.Node];
    }
  };
  W._NodeList_Interceptor_ListMixin_ImmutableListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.Node];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.Node];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.Node];
    },
    $isList: 1,
    $asList: function() {
      return [W.Node];
    },
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [W.Node];
    }
  };
  W._PluginArray_Interceptor_ListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.Plugin];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.Plugin];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.Plugin];
    },
    $isList: 1,
    $asList: function() {
      return [W.Plugin];
    }
  };
  W._PluginArray_Interceptor_ListMixin_ImmutableListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.Plugin];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.Plugin];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.Plugin];
    },
    $isList: 1,
    $asList: function() {
      return [W.Plugin];
    },
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [W.Plugin];
    }
  };
  W._RtcStatsReport_Interceptor_MapMixin.prototype = {$isMapMixin: 1,
    $asMapMixin: function() {
      return [P.String, null];
    },
    $isMap: 1,
    $asMap: function() {
      return [P.String, null];
    }
  };
  W._SourceBufferList_EventTarget_ListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.SourceBuffer];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.SourceBuffer];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.SourceBuffer];
    },
    $isList: 1,
    $asList: function() {
      return [W.SourceBuffer];
    }
  };
  W._SourceBufferList_EventTarget_ListMixin_ImmutableListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.SourceBuffer];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.SourceBuffer];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.SourceBuffer];
    },
    $isList: 1,
    $asList: function() {
      return [W.SourceBuffer];
    },
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [W.SourceBuffer];
    }
  };
  W._SpeechGrammarList_Interceptor_ListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.SpeechGrammar];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.SpeechGrammar];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.SpeechGrammar];
    },
    $isList: 1,
    $asList: function() {
      return [W.SpeechGrammar];
    }
  };
  W._SpeechGrammarList_Interceptor_ListMixin_ImmutableListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.SpeechGrammar];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.SpeechGrammar];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.SpeechGrammar];
    },
    $isList: 1,
    $asList: function() {
      return [W.SpeechGrammar];
    },
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [W.SpeechGrammar];
    }
  };
  W._Storage_Interceptor_MapMixin.prototype = {$isMapMixin: 1,
    $asMapMixin: function() {
      return [P.String, P.String];
    },
    $isMap: 1,
    $asMap: function() {
      return [P.String, P.String];
    }
  };
  W._TextTrackCueList_Interceptor_ListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.TextTrackCue];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.TextTrackCue];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.TextTrackCue];
    },
    $isList: 1,
    $asList: function() {
      return [W.TextTrackCue];
    }
  };
  W._TextTrackCueList_Interceptor_ListMixin_ImmutableListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.TextTrackCue];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.TextTrackCue];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.TextTrackCue];
    },
    $isList: 1,
    $asList: function() {
      return [W.TextTrackCue];
    },
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [W.TextTrackCue];
    }
  };
  W._TextTrackList_EventTarget_ListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.TextTrack];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.TextTrack];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.TextTrack];
    },
    $isList: 1,
    $asList: function() {
      return [W.TextTrack];
    }
  };
  W._TextTrackList_EventTarget_ListMixin_ImmutableListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.TextTrack];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.TextTrack];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.TextTrack];
    },
    $isList: 1,
    $asList: function() {
      return [W.TextTrack];
    },
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [W.TextTrack];
    }
  };
  W._TouchList_Interceptor_ListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.Touch];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.Touch];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.Touch];
    },
    $isList: 1,
    $asList: function() {
      return [W.Touch];
    }
  };
  W._TouchList_Interceptor_ListMixin_ImmutableListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.Touch];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.Touch];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.Touch];
    },
    $isList: 1,
    $asList: function() {
      return [W.Touch];
    },
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [W.Touch];
    }
  };
  W.__CssRuleList_Interceptor_ListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.CssRule];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.CssRule];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.CssRule];
    },
    $isList: 1,
    $asList: function() {
      return [W.CssRule];
    }
  };
  W.__CssRuleList_Interceptor_ListMixin_ImmutableListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.CssRule];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.CssRule];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.CssRule];
    },
    $isList: 1,
    $asList: function() {
      return [W.CssRule];
    },
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [W.CssRule];
    }
  };
  W.__CssStyleDeclarationSet_Object_CssStyleDeclarationBase.prototype = {$isCssStyleDeclarationBase: 1};
  W.__GamepadList_Interceptor_ListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.Gamepad];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.Gamepad];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.Gamepad];
    },
    $isList: 1,
    $asList: function() {
      return [W.Gamepad];
    }
  };
  W.__GamepadList_Interceptor_ListMixin_ImmutableListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.Gamepad];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.Gamepad];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.Gamepad];
    },
    $isList: 1,
    $asList: function() {
      return [W.Gamepad];
    },
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [W.Gamepad];
    }
  };
  W.__NamedNodeMap_Interceptor_ListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.Node];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.Node];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.Node];
    },
    $isList: 1,
    $asList: function() {
      return [W.Node];
    }
  };
  W.__NamedNodeMap_Interceptor_ListMixin_ImmutableListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.Node];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.Node];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.Node];
    },
    $isList: 1,
    $asList: function() {
      return [W.Node];
    },
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [W.Node];
    }
  };
  W.__SpeechRecognitionResultList_Interceptor_ListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.SpeechRecognitionResult];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.SpeechRecognitionResult];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.SpeechRecognitionResult];
    },
    $isList: 1,
    $asList: function() {
      return [W.SpeechRecognitionResult];
    }
  };
  W.__SpeechRecognitionResultList_Interceptor_ListMixin_ImmutableListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.SpeechRecognitionResult];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.SpeechRecognitionResult];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.SpeechRecognitionResult];
    },
    $isList: 1,
    $asList: function() {
      return [W.SpeechRecognitionResult];
    },
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [W.SpeechRecognitionResult];
    }
  };
  W.__StyleSheetList_Interceptor_ListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.StyleSheet];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.StyleSheet];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.StyleSheet];
    },
    $isList: 1,
    $asList: function() {
      return [W.StyleSheet];
    }
  };
  W.__StyleSheetList_Interceptor_ListMixin_ImmutableListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.StyleSheet];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.StyleSheet];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.StyleSheet];
    },
    $isList: 1,
    $asList: function() {
      return [W.StyleSheet];
    },
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [W.StyleSheet];
    }
  };
  P._StructuredClone.prototype = {};
  P._AcceptStructuredClone.prototype = {};
  P.ContextAttributes.prototype = {};
  P._TypedImageData.prototype = {$isInterceptor: 1, $isImageData: 1};
  P._StructuredCloneDart2Js.prototype = {};
  P._AcceptStructuredCloneDart2Js.prototype = {};
  P.CssClassSetImpl.prototype = {
    $asEfficientLengthIterable: function() {
      return [P.String];
    },
    $asSetMixin: function() {
      return [P.String];
    },
    $asSetBase: function() {
      return [P.String];
    },
    $asIterable: function() {
      return [P.String];
    },
    $asSet: function() {
      return [P.String];
    },
    $isCssClassSet: 1,
    $as_SetBase_Object_SetMixin: function() {
      return [P.String];
    }
  };
  P.Device.prototype = {};
  P.FilteredElementList.prototype = {
    $asEfficientLengthIterable: function() {
      return [W.Element];
    },
    $asListBase: function() {
      return [W.Element];
    },
    $asListMixin: function() {
      return [W.Element];
    },
    $asIterable: function() {
      return [W.Element];
    },
    $asList: function() {
      return [W.Element];
    },
    $isNodeListWrapper: 1,
    $as_ListBase_Object_ListMixin: function() {
      return [W.Element];
    }
  };
  P.Lists.prototype = {};
  P.NodeListWrapper.prototype = {};
  P._KeyRangeFactoryProvider.prototype = {};
  P.Cursor.prototype = {$isCursor: 1};
  P.CursorWithValue.prototype = {$isCursorWithValue: 1};
  P.Database.prototype = {$isDatabase: 1};
  P.IdbFactory.prototype = {$isIdbFactory: 1};
  P.Index.prototype = {$isIndex: 1};
  P.KeyRange.prototype = {$isKeyRange: 1};
  P.ObjectStore.prototype = {$isObjectStore: 1};
  P.Observation.prototype = {$isObservation: 1};
  P.Observer.prototype = {$isObserver: 1};
  P.ObserverChanges.prototype = {$isObserverChanges: 1};
  P.OpenDBRequest.prototype = {$isOpenDBRequest: 1};
  P.Request.prototype = {$isRequest: 1};
  P.Transaction.prototype = {$isTransaction: 1};
  P.VersionChangeEvent.prototype = {$isVersionChangeEvent: 1};
  P.BytesBuilder.prototype = {};
  P._CopyingBytesBuilder0.prototype = {$isBytesBuilder: 1};
  P._BytesBuilder.prototype = {$isBytesBuilder: 1};
  P.IOException.prototype = {$isException: 1};
  P.OSError.prototype = {};
  P._BufferAndStart.prototype = {};
  P._IOCrypto.prototype = {};
  P.ZLibOption.prototype = {};
  P.ZLibCodec.prototype = {
    $asCodec: function() {
      return [[P.List, P.int], [P.List, P.int]];
    }
  };
  P.GZipCodec.prototype = {
    $asCodec: function() {
      return [[P.List, P.int], [P.List, P.int]];
    }
  };
  P.ZLibEncoder.prototype = {
    $asStreamTransformer: function() {
      return [[P.List, P.int], [P.List, P.int]];
    },
    $asStreamTransformerBase: function() {
      return [[P.List, P.int], [P.List, P.int]];
    },
    $asConverter: function() {
      return [[P.List, P.int], [P.List, P.int]];
    }
  };
  P.ZLibDecoder.prototype = {
    $asStreamTransformer: function() {
      return [[P.List, P.int], [P.List, P.int]];
    },
    $asStreamTransformerBase: function() {
      return [[P.List, P.int], [P.List, P.int]];
    },
    $asConverter: function() {
      return [[P.List, P.int], [P.List, P.int]];
    }
  };
  P.RawZLibFilter.prototype = {};
  P._BufferSink.prototype = {};
  P._ZLibEncoderSink.prototype = {};
  P._ZLibDecoderSink.prototype = {};
  P._FilterSink.prototype = {};
  P.Directory.prototype = {$isFileSystemEntity: 1};
  P._Directory.prototype = {$isDirectory: 1};
  P._AsyncDirectoryListerOps.prototype = {};
  P._AsyncDirectoryLister.prototype = {};
  P._EmbedderConfig.prototype = {};
  P._EventHandler.prototype = {};
  P.FileMode.prototype = {};
  P.FileLock.prototype = {};
  P.File0.prototype = {$isFileSystemEntity: 1};
  P.RandomAccessFile.prototype = {};
  P.FileSystemException.prototype = {$isException: 1, $isIOException: 1};
  P._FileStream.prototype = {
    $asStream: function() {
      return [[P.List, P.int]];
    }
  };
  P._FileStreamConsumer.prototype = {
    $asStreamConsumer: function() {
      return [[P.List, P.int]];
    }
  };
  P._File.prototype = {$isFile0: 1};
  P._RandomAccessFileOps.prototype = {};
  P._RandomAccessFile.prototype = {$isRandomAccessFile: 1};
  P.FileSystemEntityType.prototype = {};
  P.FileStat.prototype = {};
  P.FileSystemEntity.prototype = {};
  P.FileSystemEvent.prototype = {};
  P.FileSystemCreateEvent.prototype = {};
  P.FileSystemModifyEvent.prototype = {};
  P.FileSystemDeleteEvent.prototype = {};
  P.FileSystemMoveEvent.prototype = {};
  P._FileSystemWatcher.prototype = {};
  P._IOResourceInfo.prototype = {};
  P._ReadWriteResourceInfo.prototype = {};
  P._FileResourceInfo.prototype = {};
  P._ProcessResourceInfo.prototype = {};
  P._SocketResourceInfo.prototype = {};
  P._IOService.prototype = {};
  P.IOSink.prototype = {$isEventSink: 1,
    $asEventSink: function() {
      return [[P.List, P.int]];
    },
    $isStreamConsumer: 1,
    $asStreamConsumer: function() {
      return [[P.List, P.int]];
    },
    $isStreamSink: 1,
    $asStreamSink: function() {
      return [[P.List, P.int]];
    },
    $isSink: 1,
    $asSink: function() {
      return [[P.List, P.int]];
    },
    $isStringSink: 1
  };
  P._StreamSinkImpl0.prototype = {$isEventSink: 1, $isStreamConsumer: 1, $isStreamSink: 1, $isSink: 1};
  P._IOSinkImpl0.prototype = {
    $asEventSink: function() {
      return [[P.List, P.int]];
    },
    $asStreamConsumer: function() {
      return [[P.List, P.int]];
    },
    $asStreamSink: function() {
      return [[P.List, P.int]];
    },
    $asSink: function() {
      return [[P.List, P.int]];
    },
    $isStringSink: 1,
    $isIOSink: 1,
    $as_StreamSinkImpl0: function() {
      return [[P.List, P.int]];
    }
  };
  P.Link.prototype = {$isFileSystemEntity: 1};
  P._Link.prototype = {$isLink: 1};
  P._Namespace.prototype = {};
  P.IOOverrides.prototype = {};
  P._IOOverridesScope.prototype = {};
  P.Platform0.prototype = {};
  P._Platform.prototype = {};
  P._CaseInsensitiveStringMap.prototype = {
    $asMapBase: function($V) {
      return [P.String, $V];
    },
    $asMapMixin: function($V) {
      return [P.String, $V];
    },
    $asMap: function($V) {
      return [P.String, $V];
    }
  };
  P._ProcessUtils.prototype = {};
  P.ProcessInfo.prototype = {};
  P.ProcessStartMode.prototype = {};
  P.Process.prototype = {};
  P.ProcessResult.prototype = {};
  P.ProcessSignal.prototype = {};
  P.SignalException.prototype = {$isException: 1, $isIOException: 1};
  P.ProcessException.prototype = {$isException: 1, $isIOException: 1};
  P.SecureServerSocket.prototype = {
    $asStream: function() {
      return [P.SecureSocket];
    }
  };
  P.RawSecureServerSocket.prototype = {
    $asStream: function() {
      return [P.RawSecureSocket];
    }
  };
  P.SecureSocket.prototype = {$isStream: 1,
    $asStream: function() {
      return [[P.List, P.int]];
    },
    $isEventSink: 1,
    $asEventSink: function() {
      return [[P.List, P.int]];
    },
    $isStreamConsumer: 1,
    $asStreamConsumer: function() {
      return [[P.List, P.int]];
    },
    $isStreamSink: 1,
    $asStreamSink: function() {
      return [[P.List, P.int]];
    },
    $isSink: 1,
    $asSink: function() {
      return [[P.List, P.int]];
    },
    $isStringSink: 1,
    $isIOSink: 1,
    $isSocket: 1
  };
  P.RawSecureSocket.prototype = {$isStream: 1,
    $asStream: function() {
      return [P.RawSocketEvent];
    },
    $isRawSocket: 1
  };
  P.X509Certificate.prototype = {};
  P._FilterStatus.prototype = {};
  P._RawSecureSocket.prototype = {
    $asStream: function() {
      return [P.RawSocketEvent];
    },
    $isRawSecureSocket: 1,
    $isRawSocket: 1
  };
  P._ExternalBuffer.prototype = {};
  P._SecureFilter.prototype = {};
  P.TlsException.prototype = {$isException: 1, $isIOException: 1};
  P.HandshakeException.prototype = {};
  P.CertificateException.prototype = {};
  P.SecurityContext.prototype = {};
  P._ServiceObject0.prototype = {};
  P.InternetAddressType.prototype = {};
  P.InternetAddress.prototype = {};
  P.NetworkInterface.prototype = {};
  P.RawServerSocket.prototype = {$isStream: 1,
    $asStream: function() {
      return [P.RawSocket];
    }
  };
  P.ServerSocket.prototype = {$isStream: 1,
    $asStream: function() {
      return [P.Socket];
    }
  };
  P.SocketDirection.prototype = {};
  P.SocketOption.prototype = {};
  P._RawSocketOptions.prototype = {};
  P.RawSocketOption.prototype = {};
  P.RawSocketEvent.prototype = {};
  P.ConnectionTask.prototype = {};
  P.RawSocket.prototype = {$isStream: 1,
    $asStream: function() {
      return [P.RawSocketEvent];
    }
  };
  P.Socket.prototype = {$isStream: 1,
    $asStream: function() {
      return [[P.List, P.int]];
    },
    $isEventSink: 1,
    $asEventSink: function() {
      return [[P.List, P.int]];
    },
    $isStreamConsumer: 1,
    $asStreamConsumer: function() {
      return [[P.List, P.int]];
    },
    $isStreamSink: 1,
    $asStreamSink: function() {
      return [[P.List, P.int]];
    },
    $isSink: 1,
    $asSink: function() {
      return [[P.List, P.int]];
    },
    $isStringSink: 1,
    $isIOSink: 1
  };
  P.Datagram.prototype = {};
  P.RawDatagramSocket.prototype = {
    $asStream: function() {
      return [P.RawSocketEvent];
    }
  };
  P.SocketException.prototype = {$isException: 1, $isIOException: 1};
  P._StdStream.prototype = {
    $asStream: function() {
      return [[P.List, P.int]];
    }
  };
  P.Stdin.prototype = {};
  P.Stdout.prototype = {};
  P.StdoutException.prototype = {$isException: 1, $isIOException: 1};
  P.StdinException.prototype = {$isException: 1, $isIOException: 1};
  P._StdConsumer.prototype = {$isStreamConsumer: 1,
    $asStreamConsumer: function() {
      return [[P.List, P.int]];
    }
  };
  P._StdSink.prototype = {$isEventSink: 1,
    $asEventSink: function() {
      return [[P.List, P.int]];
    },
    $isStreamConsumer: 1,
    $asStreamConsumer: function() {
      return [[P.List, P.int]];
    },
    $isStreamSink: 1,
    $asStreamSink: function() {
      return [[P.List, P.int]];
    },
    $isSink: 1,
    $asSink: function() {
      return [[P.List, P.int]];
    },
    $isStringSink: 1,
    $isIOSink: 1
  };
  P.StdioType.prototype = {};
  P._StdIOUtils.prototype = {};
  P.SystemEncoding.prototype = {};
  P._WindowsCodePageEncoder.prototype = {
    $asStreamTransformer: function() {
      return [P.String, [P.List, P.int]];
    },
    $asStreamTransformerBase: function() {
      return [P.String, [P.List, P.int]];
    },
    $asConverter: function() {
      return [P.String, [P.List, P.int]];
    }
  };
  P._WindowsCodePageEncoderSink.prototype = {};
  P._WindowsCodePageDecoder.prototype = {
    $asStreamTransformer: function() {
      return [[P.List, P.int], P.String];
    },
    $asStreamTransformerBase: function() {
      return [[P.List, P.int], P.String];
    },
    $asConverter: function() {
      return [[P.List, P.int], P.String];
    }
  };
  P._WindowsCodePageDecoderSink.prototype = {};
  P.RawSynchronousSocket.prototype = {};
  P._ReceivePortImpl.prototype = {
    $asStream: function() {
    },
    $isReceivePort: 1
  };
  P.Capability.prototype = {};
  P.IsolateSpawnException.prototype = {$isException: 1};
  P.Isolate.prototype = {};
  P.SendPort.prototype = {$isCapability: 1};
  P.ReceivePort.prototype = {$isStream: 1,
    $asStream: function() {
    }
  };
  P.RawReceivePort.prototype = {};
  P.RemoteError.prototype = {$isError: 1};
  P.JsObject.prototype = {};
  P.JsFunction.prototype = {};
  P.JsArray.prototype = {$isEfficientLengthIterable: 1, $isListMixin: 1, $isIterable: 1, $isList: 1};
  P._JsArray_JsObject_ListMixin.prototype = {$isEfficientLengthIterable: 1, $isListMixin: 1, $isIterable: 1, $isList: 1};
  P._JSRandom.prototype = {$isRandom: 1};
  P._Random.prototype = {$isRandom: 1};
  P._JSSecureRandom.prototype = {$isRandom: 1};
  P._JenkinsSmiHash0.prototype = {};
  P.Point.prototype = {};
  P.Random.prototype = {};
  P._RectangleBase.prototype = {};
  P.Rectangle.prototype = {};
  P.MutableRectangle.prototype = {$isRectangle: 1};
  P.MirrorSystem.prototype = {};
  P.Mirror.prototype = {};
  P.IsolateMirror.prototype = {$isMirror: 1};
  P.DeclarationMirror.prototype = {$isMirror: 1};
  P.ObjectMirror.prototype = {$isMirror: 1};
  P.InstanceMirror.prototype = {$isMirror: 1, $isObjectMirror: 1};
  P.ClosureMirror.prototype = {$isMirror: 1, $isObjectMirror: 1, $isInstanceMirror: 1};
  P.LibraryMirror.prototype = {$isMirror: 1, $isDeclarationMirror: 1, $isObjectMirror: 1};
  P.LibraryDependencyMirror.prototype = {$isMirror: 1};
  P.CombinatorMirror.prototype = {$isMirror: 1};
  P.TypeMirror.prototype = {$isMirror: 1, $isDeclarationMirror: 1};
  P.ClassMirror.prototype = {$isMirror: 1, $isDeclarationMirror: 1, $isObjectMirror: 1, $isTypeMirror: 1};
  P.FunctionTypeMirror.prototype = {$isMirror: 1, $isDeclarationMirror: 1, $isObjectMirror: 1, $isTypeMirror: 1, $isClassMirror: 1};
  P.TypeVariableMirror.prototype = {};
  P.TypedefMirror.prototype = {$isMirror: 1, $isDeclarationMirror: 1, $isTypeMirror: 1};
  P.MethodMirror.prototype = {$isMirror: 1, $isDeclarationMirror: 1};
  P.VariableMirror.prototype = {$isMirror: 1, $isDeclarationMirror: 1};
  P.ParameterMirror.prototype = {$isMirror: 1, $isDeclarationMirror: 1, $isVariableMirror: 1};
  P.SourceLocation0.prototype = {};
  P.Comment0.prototype = {};
  P.MirrorsUsed.prototype = {};
  P._SvgElementFactoryProvider.prototype = {};
  P.AElement.prototype = {$isAElement: 1, $isUriReference: 1};
  P.Angle.prototype = {$isAngle: 1};
  P.AnimateElement.prototype = {$isAnimateElement: 1};
  P.AnimateMotionElement.prototype = {$isAnimateMotionElement: 1};
  P.AnimateTransformElement.prototype = {$isAnimateTransformElement: 1};
  P.AnimatedAngle.prototype = {$isAnimatedAngle: 1};
  P.AnimatedBoolean.prototype = {$isAnimatedBoolean: 1};
  P.AnimatedEnumeration.prototype = {$isAnimatedEnumeration: 1};
  P.AnimatedInteger.prototype = {$isAnimatedInteger: 1};
  P.AnimatedLength.prototype = {$isAnimatedLength: 1};
  P.AnimatedLengthList.prototype = {$isAnimatedLengthList: 1};
  P.AnimatedNumber.prototype = {$isAnimatedNumber: 1};
  P.AnimatedNumberList.prototype = {$isAnimatedNumberList: 1};
  P.AnimatedPreserveAspectRatio.prototype = {$isAnimatedPreserveAspectRatio: 1};
  P.AnimatedRect.prototype = {$isAnimatedRect: 1};
  P.AnimatedString.prototype = {$isAnimatedString: 1};
  P.AnimatedTransformList.prototype = {$isAnimatedTransformList: 1};
  P.AnimationElement.prototype = {$isAnimationElement: 1, $isTests: 1};
  P.CircleElement.prototype = {$isCircleElement: 1};
  P.ClipPathElement.prototype = {$isClipPathElement: 1};
  P.DefsElement.prototype = {$isDefsElement: 1};
  P.DescElement.prototype = {$isDescElement: 1};
  P.DiscardElement.prototype = {$isDiscardElement: 1};
  P.EllipseElement.prototype = {$isEllipseElement: 1};
  P.FEBlendElement.prototype = {$isFEBlendElement: 1, $isFilterPrimitiveStandardAttributes: 1};
  P.FEColorMatrixElement.prototype = {$isFEColorMatrixElement: 1, $isFilterPrimitiveStandardAttributes: 1};
  P.FEComponentTransferElement.prototype = {$isFEComponentTransferElement: 1, $isFilterPrimitiveStandardAttributes: 1};
  P.FECompositeElement.prototype = {$isFECompositeElement: 1, $isFilterPrimitiveStandardAttributes: 1};
  P.FEConvolveMatrixElement.prototype = {$isFEConvolveMatrixElement: 1, $isFilterPrimitiveStandardAttributes: 1};
  P.FEDiffuseLightingElement.prototype = {$isFEDiffuseLightingElement: 1, $isFilterPrimitiveStandardAttributes: 1};
  P.FEDisplacementMapElement.prototype = {$isFEDisplacementMapElement: 1, $isFilterPrimitiveStandardAttributes: 1};
  P.FEDistantLightElement.prototype = {$isFEDistantLightElement: 1};
  P.FEFloodElement.prototype = {$isFEFloodElement: 1, $isFilterPrimitiveStandardAttributes: 1};
  P.FEFuncAElement.prototype = {$isFEFuncAElement: 1};
  P.FEFuncBElement.prototype = {$isFEFuncBElement: 1};
  P.FEFuncGElement.prototype = {$isFEFuncGElement: 1};
  P.FEFuncRElement.prototype = {$isFEFuncRElement: 1};
  P.FEGaussianBlurElement.prototype = {$isFEGaussianBlurElement: 1, $isFilterPrimitiveStandardAttributes: 1};
  P.FEImageElement.prototype = {$isFEImageElement: 1, $isFilterPrimitiveStandardAttributes: 1, $isUriReference: 1};
  P.FEMergeElement.prototype = {$isFEMergeElement: 1, $isFilterPrimitiveStandardAttributes: 1};
  P.FEMergeNodeElement.prototype = {$isFEMergeNodeElement: 1};
  P.FEMorphologyElement.prototype = {$isFEMorphologyElement: 1, $isFilterPrimitiveStandardAttributes: 1};
  P.FEOffsetElement.prototype = {$isFEOffsetElement: 1, $isFilterPrimitiveStandardAttributes: 1};
  P.FEPointLightElement.prototype = {$isFEPointLightElement: 1};
  P.FESpecularLightingElement.prototype = {$isFESpecularLightingElement: 1, $isFilterPrimitiveStandardAttributes: 1};
  P.FESpotLightElement.prototype = {$isFESpotLightElement: 1};
  P.FETileElement.prototype = {$isFETileElement: 1, $isFilterPrimitiveStandardAttributes: 1};
  P.FETurbulenceElement.prototype = {$isFETurbulenceElement: 1, $isFilterPrimitiveStandardAttributes: 1};
  P.FilterElement.prototype = {$isFilterElement: 1, $isUriReference: 1};
  P.FilterPrimitiveStandardAttributes.prototype = {};
  P.FitToViewBox.prototype = {};
  P.ForeignObjectElement.prototype = {$isForeignObjectElement: 1};
  P.GElement.prototype = {$isGElement: 1};
  P.GeometryElement.prototype = {$isGeometryElement: 1};
  P.GraphicsElement.prototype = {$isGraphicsElement: 1, $isTests: 1};
  P.ImageElement0.prototype = {$isImageElement0: 1, $isUriReference: 1};
  P.Length.prototype = {$isLength: 1};
  P.LengthList.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.Length];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [P.Length];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.Length];
    },
    $isList: 1,
    $asList: function() {
      return [P.Length];
    },
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [P.Length];
    },
    $isLengthList: 1
  };
  P.LineElement.prototype = {$isLineElement: 1};
  P.LinearGradientElement.prototype = {$isLinearGradientElement: 1};
  P.MarkerElement.prototype = {$isFitToViewBox: 1, $isMarkerElement: 1};
  P.MaskElement.prototype = {$isMaskElement: 1, $isTests: 1};
  P.Matrix.prototype = {$isMatrix: 1};
  P.MetadataElement.prototype = {$isMetadataElement: 1};
  P.Number.prototype = {$isNumber: 1};
  P.NumberList.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.Number];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [P.Number];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.Number];
    },
    $isList: 1,
    $asList: function() {
      return [P.Number];
    },
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [P.Number];
    },
    $isNumberList: 1
  };
  P.PathElement.prototype = {$isPathElement: 1};
  P.PatternElement.prototype = {$isFitToViewBox: 1, $isPatternElement: 1, $isTests: 1, $isUriReference: 1};
  P.Point0.prototype = {$isPoint0: 1};
  P.PointList.prototype = {$isPointList: 1};
  P.PolygonElement.prototype = {$isPolygonElement: 1};
  P.PolylineElement.prototype = {$isPolylineElement: 1};
  P.PreserveAspectRatio.prototype = {$isPreserveAspectRatio: 1};
  P.RadialGradientElement.prototype = {$isRadialGradientElement: 1};
  P.Rect.prototype = {$isRect: 1};
  P.RectElement.prototype = {$isRectElement: 1};
  P.ScriptElement0.prototype = {$isScriptElement0: 1, $isUriReference: 1};
  P.SetElement.prototype = {$isSetElement: 1};
  P.StopElement.prototype = {$isStopElement: 1};
  P.StringList.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.String];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [P.String];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.String];
    },
    $isList: 1,
    $asList: function() {
      return [P.String];
    },
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [P.String];
    },
    $isStringList: 1
  };
  P.StyleElement0.prototype = {$isStyleElement0: 1};
  P.AttributeClassSet.prototype = {};
  P.SvgElement.prototype = {$isNoncedElement: 1, $isSvgElement: 1};
  P.SvgSvgElement.prototype = {$isFitToViewBox: 1, $isSvgSvgElement: 1, $isZoomAndPan: 1};
  P.SwitchElement.prototype = {$isSwitchElement: 1};
  P.SymbolElement.prototype = {$isFitToViewBox: 1, $isSymbolElement: 1};
  P.TSpanElement.prototype = {$isTSpanElement: 1};
  P.Tests.prototype = {};
  P.TextContentElement.prototype = {$isTextContentElement: 1};
  P.TextElement.prototype = {$isTextElement: 1};
  P.TextPathElement.prototype = {$isTextPathElement: 1, $isUriReference: 1};
  P.TextPositioningElement.prototype = {$isTextPositioningElement: 1};
  P.TitleElement0.prototype = {$isTitleElement0: 1};
  P.Transform.prototype = {$isTransform: 1};
  P.TransformList.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.Transform];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [P.Transform];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.Transform];
    },
    $isList: 1,
    $asList: function() {
      return [P.Transform];
    },
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [P.Transform];
    },
    $isTransformList: 1
  };
  P.UnitTypes.prototype = {$isUnitTypes: 1};
  P.UriReference.prototype = {};
  P.UseElement.prototype = {$isUriReference: 1, $isUseElement: 1};
  P.ViewElement.prototype = {$isFitToViewBox: 1, $isViewElement: 1, $isZoomAndPan: 1};
  P.ZoomAndPan.prototype = {};
  P._GradientElement.prototype = {$isUriReference: 1, $is_GradientElement: 1};
  P._SVGComponentTransferFunctionElement.prototype = {$is_SVGComponentTransferFunctionElement: 1};
  P._SVGFEDropShadowElement.prototype = {$isFilterPrimitiveStandardAttributes: 1, $is_SVGFEDropShadowElement: 1};
  P._SVGMPathElement.prototype = {$isUriReference: 1, $is_SVGMPathElement: 1};
  P._LengthList_Interceptor_ListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.Length];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [P.Length];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.Length];
    },
    $isList: 1,
    $asList: function() {
      return [P.Length];
    }
  };
  P._LengthList_Interceptor_ListMixin_ImmutableListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.Length];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [P.Length];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.Length];
    },
    $isList: 1,
    $asList: function() {
      return [P.Length];
    },
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [P.Length];
    }
  };
  P._NumberList_Interceptor_ListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.Number];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [P.Number];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.Number];
    },
    $isList: 1,
    $asList: function() {
      return [P.Number];
    }
  };
  P._NumberList_Interceptor_ListMixin_ImmutableListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.Number];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [P.Number];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.Number];
    },
    $isList: 1,
    $asList: function() {
      return [P.Number];
    },
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [P.Number];
    }
  };
  P._StringList_Interceptor_ListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.String];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [P.String];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.String];
    },
    $isList: 1,
    $asList: function() {
      return [P.String];
    }
  };
  P._StringList_Interceptor_ListMixin_ImmutableListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.String];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [P.String];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.String];
    },
    $isList: 1,
    $asList: function() {
      return [P.String];
    },
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [P.String];
    }
  };
  P._TransformList_Interceptor_ListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.Transform];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [P.Transform];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.Transform];
    },
    $isList: 1,
    $asList: function() {
      return [P.Transform];
    }
  };
  P._TransformList_Interceptor_ListMixin_ImmutableListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.Transform];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [P.Transform];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.Transform];
    },
    $isList: 1,
    $asList: function() {
      return [P.Transform];
    },
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [P.Transform];
    }
  };
  P.ByteBuffer.prototype = {};
  P.TypedData.prototype = {};
  P._TypedIntList.prototype = {};
  P._TypedFloatList.prototype = {};
  P.Endian.prototype = {};
  P.ByteData.prototype = {$isTypedData: 1};
  P.Int8List.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.int];
    },
    $isList: 1,
    $asList: function() {
      return [P.int];
    },
    $isTypedData: 1,
    $is_TypedIntList: 1
  };
  P.Uint8List.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.int];
    },
    $isList: 1,
    $asList: function() {
      return [P.int];
    },
    $isTypedData: 1,
    $is_TypedIntList: 1
  };
  P.Uint8ClampedList.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.int];
    },
    $isList: 1,
    $asList: function() {
      return [P.int];
    },
    $isTypedData: 1,
    $is_TypedIntList: 1
  };
  P.Int16List.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.int];
    },
    $isList: 1,
    $asList: function() {
      return [P.int];
    },
    $isTypedData: 1,
    $is_TypedIntList: 1
  };
  P.Uint16List.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.int];
    },
    $isList: 1,
    $asList: function() {
      return [P.int];
    },
    $isTypedData: 1,
    $is_TypedIntList: 1
  };
  P.Int32List.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.int];
    },
    $isList: 1,
    $asList: function() {
      return [P.int];
    },
    $isTypedData: 1,
    $is_TypedIntList: 1
  };
  P.Uint32List.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.int];
    },
    $isList: 1,
    $asList: function() {
      return [P.int];
    },
    $isTypedData: 1,
    $is_TypedIntList: 1
  };
  P.Int64List.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.int];
    },
    $isList: 1,
    $asList: function() {
      return [P.int];
    },
    $isTypedData: 1,
    $is_TypedIntList: 1
  };
  P.Uint64List.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.int];
    },
    $isList: 1,
    $asList: function() {
      return [P.int];
    },
    $isTypedData: 1,
    $is_TypedIntList: 1
  };
  P.Float32List.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.double];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.double];
    },
    $isList: 1,
    $asList: function() {
      return [P.double];
    },
    $isTypedData: 1,
    $is_TypedFloatList: 1
  };
  P.Float64List.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.double];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.double];
    },
    $isList: 1,
    $asList: function() {
      return [P.double];
    },
    $isTypedData: 1,
    $is_TypedFloatList: 1
  };
  P.Float32x4List.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.Float32x4];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.Float32x4];
    },
    $isList: 1,
    $asList: function() {
      return [P.Float32x4];
    },
    $isTypedData: 1
  };
  P.Int32x4List.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.Int32x4];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.Int32x4];
    },
    $isList: 1,
    $asList: function() {
      return [P.Int32x4];
    },
    $isTypedData: 1
  };
  P.Float64x2List.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.Float64x2];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.Float64x2];
    },
    $isList: 1,
    $asList: function() {
      return [P.Float64x2];
    },
    $isTypedData: 1
  };
  P.Float32x4.prototype = {};
  P.Int32x4.prototype = {};
  P.Float64x2.prototype = {};
  P.UnmodifiableByteBufferView.prototype = {$isByteBuffer: 1};
  P.UnmodifiableByteDataView.prototype = {$isTypedData: 1, $isByteData: 1};
  P._UnmodifiableListMixin.prototype = {};
  P.UnmodifiableUint8ListView.prototype = {
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $asUnmodifiableListMixin: function() {
      return [P.int];
    },
    $asUnmodifiableListBase: function() {
      return [P.int];
    },
    $asListBase: function() {
      return [P.int];
    },
    $asListMixin: function() {
      return [P.int];
    },
    $asIterable: function() {
      return [P.int];
    },
    $asList: function() {
      return [P.int];
    },
    $isTypedData: 1,
    $is_TypedIntList: 1,
    $isUint8List: 1,
    $is_UnmodifiableListMixin: 1,
    $as_UnmodifiableListMixin: function() {
      return [P.int, P.Uint8List, P.Uint8List];
    },
    $as_ListBase_Object_ListMixin: function() {
      return [P.int];
    }
  };
  P.UnmodifiableInt8ListView.prototype = {
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $asUnmodifiableListMixin: function() {
      return [P.int];
    },
    $asUnmodifiableListBase: function() {
      return [P.int];
    },
    $asListBase: function() {
      return [P.int];
    },
    $asListMixin: function() {
      return [P.int];
    },
    $asIterable: function() {
      return [P.int];
    },
    $asList: function() {
      return [P.int];
    },
    $isTypedData: 1,
    $is_TypedIntList: 1,
    $isInt8List: 1,
    $is_UnmodifiableListMixin: 1,
    $as_UnmodifiableListMixin: function() {
      return [P.int, P.Int8List, P.Int8List];
    },
    $as_ListBase_Object_ListMixin: function() {
      return [P.int];
    }
  };
  P.UnmodifiableUint8ClampedListView.prototype = {
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $asUnmodifiableListMixin: function() {
      return [P.int];
    },
    $asUnmodifiableListBase: function() {
      return [P.int];
    },
    $asListBase: function() {
      return [P.int];
    },
    $asListMixin: function() {
      return [P.int];
    },
    $asIterable: function() {
      return [P.int];
    },
    $asList: function() {
      return [P.int];
    },
    $isTypedData: 1,
    $is_TypedIntList: 1,
    $isUint8ClampedList: 1,
    $is_UnmodifiableListMixin: 1,
    $as_UnmodifiableListMixin: function() {
      return [P.int, P.Uint8ClampedList, P.Uint8ClampedList];
    },
    $as_ListBase_Object_ListMixin: function() {
      return [P.int];
    }
  };
  P.UnmodifiableUint16ListView.prototype = {
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $asUnmodifiableListMixin: function() {
      return [P.int];
    },
    $asUnmodifiableListBase: function() {
      return [P.int];
    },
    $asListBase: function() {
      return [P.int];
    },
    $asListMixin: function() {
      return [P.int];
    },
    $asIterable: function() {
      return [P.int];
    },
    $asList: function() {
      return [P.int];
    },
    $isTypedData: 1,
    $is_TypedIntList: 1,
    $isUint16List: 1,
    $is_UnmodifiableListMixin: 1,
    $as_UnmodifiableListMixin: function() {
      return [P.int, P.Uint16List, P.Uint16List];
    },
    $as_ListBase_Object_ListMixin: function() {
      return [P.int];
    }
  };
  P.UnmodifiableInt16ListView.prototype = {
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $asUnmodifiableListMixin: function() {
      return [P.int];
    },
    $asUnmodifiableListBase: function() {
      return [P.int];
    },
    $asListBase: function() {
      return [P.int];
    },
    $asListMixin: function() {
      return [P.int];
    },
    $asIterable: function() {
      return [P.int];
    },
    $asList: function() {
      return [P.int];
    },
    $isTypedData: 1,
    $is_TypedIntList: 1,
    $isInt16List: 1,
    $is_UnmodifiableListMixin: 1,
    $as_UnmodifiableListMixin: function() {
      return [P.int, P.Int16List, P.Int16List];
    },
    $as_ListBase_Object_ListMixin: function() {
      return [P.int];
    }
  };
  P.UnmodifiableUint32ListView.prototype = {
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $asUnmodifiableListMixin: function() {
      return [P.int];
    },
    $asUnmodifiableListBase: function() {
      return [P.int];
    },
    $asListBase: function() {
      return [P.int];
    },
    $asListMixin: function() {
      return [P.int];
    },
    $asIterable: function() {
      return [P.int];
    },
    $asList: function() {
      return [P.int];
    },
    $isTypedData: 1,
    $is_TypedIntList: 1,
    $isUint32List: 1,
    $is_UnmodifiableListMixin: 1,
    $as_UnmodifiableListMixin: function() {
      return [P.int, P.Uint32List, P.Uint32List];
    },
    $as_ListBase_Object_ListMixin: function() {
      return [P.int];
    }
  };
  P.UnmodifiableInt32ListView.prototype = {
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $asUnmodifiableListMixin: function() {
      return [P.int];
    },
    $asUnmodifiableListBase: function() {
      return [P.int];
    },
    $asListBase: function() {
      return [P.int];
    },
    $asListMixin: function() {
      return [P.int];
    },
    $asIterable: function() {
      return [P.int];
    },
    $asList: function() {
      return [P.int];
    },
    $isTypedData: 1,
    $is_TypedIntList: 1,
    $isInt32List: 1,
    $is_UnmodifiableListMixin: 1,
    $as_UnmodifiableListMixin: function() {
      return [P.int, P.Int32List, P.Int32List];
    },
    $as_ListBase_Object_ListMixin: function() {
      return [P.int];
    }
  };
  P.UnmodifiableUint64ListView.prototype = {
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $asUnmodifiableListMixin: function() {
      return [P.int];
    },
    $asUnmodifiableListBase: function() {
      return [P.int];
    },
    $asListBase: function() {
      return [P.int];
    },
    $asListMixin: function() {
      return [P.int];
    },
    $asIterable: function() {
      return [P.int];
    },
    $asList: function() {
      return [P.int];
    },
    $isTypedData: 1,
    $is_TypedIntList: 1,
    $isUint64List: 1,
    $is_UnmodifiableListMixin: 1,
    $as_UnmodifiableListMixin: function() {
      return [P.int, P.Uint64List, P.Uint64List];
    },
    $as_ListBase_Object_ListMixin: function() {
      return [P.int];
    }
  };
  P.UnmodifiableInt64ListView.prototype = {
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $asUnmodifiableListMixin: function() {
      return [P.int];
    },
    $asUnmodifiableListBase: function() {
      return [P.int];
    },
    $asListBase: function() {
      return [P.int];
    },
    $asListMixin: function() {
      return [P.int];
    },
    $asIterable: function() {
      return [P.int];
    },
    $asList: function() {
      return [P.int];
    },
    $isTypedData: 1,
    $is_TypedIntList: 1,
    $isInt64List: 1,
    $is_UnmodifiableListMixin: 1,
    $as_UnmodifiableListMixin: function() {
      return [P.int, P.Int64List, P.Int64List];
    },
    $as_ListBase_Object_ListMixin: function() {
      return [P.int];
    }
  };
  P.UnmodifiableInt32x4ListView.prototype = {
    $asEfficientLengthIterable: function() {
      return [P.Int32x4];
    },
    $asUnmodifiableListMixin: function() {
      return [P.Int32x4];
    },
    $asUnmodifiableListBase: function() {
      return [P.Int32x4];
    },
    $asListBase: function() {
      return [P.Int32x4];
    },
    $asListMixin: function() {
      return [P.Int32x4];
    },
    $asIterable: function() {
      return [P.Int32x4];
    },
    $asList: function() {
      return [P.Int32x4];
    },
    $isTypedData: 1,
    $isInt32x4List: 1,
    $is_UnmodifiableListMixin: 1,
    $as_UnmodifiableListMixin: function() {
      return [P.Int32x4, P.Int32x4List, P.Int32x4List];
    },
    $as_ListBase_Object_ListMixin: function() {
      return [P.Int32x4];
    }
  };
  P.UnmodifiableFloat32x4ListView.prototype = {
    $asEfficientLengthIterable: function() {
      return [P.Float32x4];
    },
    $asUnmodifiableListMixin: function() {
      return [P.Float32x4];
    },
    $asUnmodifiableListBase: function() {
      return [P.Float32x4];
    },
    $asListBase: function() {
      return [P.Float32x4];
    },
    $asListMixin: function() {
      return [P.Float32x4];
    },
    $asIterable: function() {
      return [P.Float32x4];
    },
    $asList: function() {
      return [P.Float32x4];
    },
    $isTypedData: 1,
    $isFloat32x4List: 1,
    $is_UnmodifiableListMixin: 1,
    $as_UnmodifiableListMixin: function() {
      return [P.Float32x4, P.Float32x4List, P.Float32x4List];
    },
    $as_ListBase_Object_ListMixin: function() {
      return [P.Float32x4];
    }
  };
  P.UnmodifiableFloat64x2ListView.prototype = {
    $asEfficientLengthIterable: function() {
      return [P.Float64x2];
    },
    $asUnmodifiableListMixin: function() {
      return [P.Float64x2];
    },
    $asUnmodifiableListBase: function() {
      return [P.Float64x2];
    },
    $asListBase: function() {
      return [P.Float64x2];
    },
    $asListMixin: function() {
      return [P.Float64x2];
    },
    $asIterable: function() {
      return [P.Float64x2];
    },
    $asList: function() {
      return [P.Float64x2];
    },
    $isTypedData: 1,
    $isFloat64x2List: 1,
    $is_UnmodifiableListMixin: 1,
    $as_UnmodifiableListMixin: function() {
      return [P.Float64x2, P.Float64x2List, P.Float64x2List];
    },
    $as_ListBase_Object_ListMixin: function() {
      return [P.Float64x2];
    }
  };
  P.UnmodifiableFloat32ListView.prototype = {
    $asEfficientLengthIterable: function() {
      return [P.double];
    },
    $asUnmodifiableListMixin: function() {
      return [P.double];
    },
    $asUnmodifiableListBase: function() {
      return [P.double];
    },
    $asListBase: function() {
      return [P.double];
    },
    $asListMixin: function() {
      return [P.double];
    },
    $asIterable: function() {
      return [P.double];
    },
    $asList: function() {
      return [P.double];
    },
    $isTypedData: 1,
    $is_TypedFloatList: 1,
    $isFloat32List: 1,
    $is_UnmodifiableListMixin: 1,
    $as_UnmodifiableListMixin: function() {
      return [P.double, P.Float32List, P.Float32List];
    },
    $as_ListBase_Object_ListMixin: function() {
      return [P.double];
    }
  };
  P.UnmodifiableFloat64ListView.prototype = {
    $asEfficientLengthIterable: function() {
      return [P.double];
    },
    $asUnmodifiableListMixin: function() {
      return [P.double];
    },
    $asUnmodifiableListBase: function() {
      return [P.double];
    },
    $asListBase: function() {
      return [P.double];
    },
    $asListMixin: function() {
      return [P.double];
    },
    $asIterable: function() {
      return [P.double];
    },
    $asList: function() {
      return [P.double];
    },
    $isTypedData: 1,
    $is_TypedFloatList: 1,
    $isFloat64List: 1,
    $is_UnmodifiableListMixin: 1,
    $as_UnmodifiableListMixin: function() {
      return [P.double, P.Float64List, P.Float64List];
    },
    $as_ListBase_Object_ListMixin: function() {
      return [P.double];
    }
  };
  P._UnmodifiableFloat32ListView_UnmodifiableListBase__UnmodifiableListMixin.prototype = {
    $asEfficientLengthIterable: function() {
      return [P.double];
    },
    $asUnmodifiableListMixin: function() {
      return [P.double];
    },
    $asUnmodifiableListBase: function() {
      return [P.double];
    },
    $asListBase: function() {
      return [P.double];
    },
    $asListMixin: function() {
      return [P.double];
    },
    $asIterable: function() {
      return [P.double];
    },
    $asList: function() {
      return [P.double];
    },
    $is_UnmodifiableListMixin: 1,
    $as_UnmodifiableListMixin: function() {
      return [P.double, P.Float32List, P.Float32List];
    },
    $as_ListBase_Object_ListMixin: function() {
      return [P.double];
    }
  };
  P._UnmodifiableFloat32x4ListView_UnmodifiableListBase__UnmodifiableListMixin.prototype = {
    $asEfficientLengthIterable: function() {
      return [P.Float32x4];
    },
    $asUnmodifiableListMixin: function() {
      return [P.Float32x4];
    },
    $asUnmodifiableListBase: function() {
      return [P.Float32x4];
    },
    $asListBase: function() {
      return [P.Float32x4];
    },
    $asListMixin: function() {
      return [P.Float32x4];
    },
    $asIterable: function() {
      return [P.Float32x4];
    },
    $asList: function() {
      return [P.Float32x4];
    },
    $is_UnmodifiableListMixin: 1,
    $as_UnmodifiableListMixin: function() {
      return [P.Float32x4, P.Float32x4List, P.Float32x4List];
    },
    $as_ListBase_Object_ListMixin: function() {
      return [P.Float32x4];
    }
  };
  P._UnmodifiableFloat64ListView_UnmodifiableListBase__UnmodifiableListMixin.prototype = {
    $asEfficientLengthIterable: function() {
      return [P.double];
    },
    $asUnmodifiableListMixin: function() {
      return [P.double];
    },
    $asUnmodifiableListBase: function() {
      return [P.double];
    },
    $asListBase: function() {
      return [P.double];
    },
    $asListMixin: function() {
      return [P.double];
    },
    $asIterable: function() {
      return [P.double];
    },
    $asList: function() {
      return [P.double];
    },
    $is_UnmodifiableListMixin: 1,
    $as_UnmodifiableListMixin: function() {
      return [P.double, P.Float64List, P.Float64List];
    },
    $as_ListBase_Object_ListMixin: function() {
      return [P.double];
    }
  };
  P._UnmodifiableFloat64x2ListView_UnmodifiableListBase__UnmodifiableListMixin.prototype = {
    $asEfficientLengthIterable: function() {
      return [P.Float64x2];
    },
    $asUnmodifiableListMixin: function() {
      return [P.Float64x2];
    },
    $asUnmodifiableListBase: function() {
      return [P.Float64x2];
    },
    $asListBase: function() {
      return [P.Float64x2];
    },
    $asListMixin: function() {
      return [P.Float64x2];
    },
    $asIterable: function() {
      return [P.Float64x2];
    },
    $asList: function() {
      return [P.Float64x2];
    },
    $is_UnmodifiableListMixin: 1,
    $as_UnmodifiableListMixin: function() {
      return [P.Float64x2, P.Float64x2List, P.Float64x2List];
    },
    $as_ListBase_Object_ListMixin: function() {
      return [P.Float64x2];
    }
  };
  P._UnmodifiableInt16ListView_UnmodifiableListBase__UnmodifiableListMixin.prototype = {
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $asUnmodifiableListMixin: function() {
      return [P.int];
    },
    $asUnmodifiableListBase: function() {
      return [P.int];
    },
    $asListBase: function() {
      return [P.int];
    },
    $asListMixin: function() {
      return [P.int];
    },
    $asIterable: function() {
      return [P.int];
    },
    $asList: function() {
      return [P.int];
    },
    $is_UnmodifiableListMixin: 1,
    $as_UnmodifiableListMixin: function() {
      return [P.int, P.Int16List, P.Int16List];
    },
    $as_ListBase_Object_ListMixin: function() {
      return [P.int];
    }
  };
  P._UnmodifiableInt32ListView_UnmodifiableListBase__UnmodifiableListMixin.prototype = {
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $asUnmodifiableListMixin: function() {
      return [P.int];
    },
    $asUnmodifiableListBase: function() {
      return [P.int];
    },
    $asListBase: function() {
      return [P.int];
    },
    $asListMixin: function() {
      return [P.int];
    },
    $asIterable: function() {
      return [P.int];
    },
    $asList: function() {
      return [P.int];
    },
    $is_UnmodifiableListMixin: 1,
    $as_UnmodifiableListMixin: function() {
      return [P.int, P.Int32List, P.Int32List];
    },
    $as_ListBase_Object_ListMixin: function() {
      return [P.int];
    }
  };
  P._UnmodifiableInt32x4ListView_UnmodifiableListBase__UnmodifiableListMixin.prototype = {
    $asEfficientLengthIterable: function() {
      return [P.Int32x4];
    },
    $asUnmodifiableListMixin: function() {
      return [P.Int32x4];
    },
    $asUnmodifiableListBase: function() {
      return [P.Int32x4];
    },
    $asListBase: function() {
      return [P.Int32x4];
    },
    $asListMixin: function() {
      return [P.Int32x4];
    },
    $asIterable: function() {
      return [P.Int32x4];
    },
    $asList: function() {
      return [P.Int32x4];
    },
    $is_UnmodifiableListMixin: 1,
    $as_UnmodifiableListMixin: function() {
      return [P.Int32x4, P.Int32x4List, P.Int32x4List];
    },
    $as_ListBase_Object_ListMixin: function() {
      return [P.Int32x4];
    }
  };
  P._UnmodifiableInt64ListView_UnmodifiableListBase__UnmodifiableListMixin.prototype = {
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $asUnmodifiableListMixin: function() {
      return [P.int];
    },
    $asUnmodifiableListBase: function() {
      return [P.int];
    },
    $asListBase: function() {
      return [P.int];
    },
    $asListMixin: function() {
      return [P.int];
    },
    $asIterable: function() {
      return [P.int];
    },
    $asList: function() {
      return [P.int];
    },
    $is_UnmodifiableListMixin: 1,
    $as_UnmodifiableListMixin: function() {
      return [P.int, P.Int64List, P.Int64List];
    },
    $as_ListBase_Object_ListMixin: function() {
      return [P.int];
    }
  };
  P._UnmodifiableInt8ListView_UnmodifiableListBase__UnmodifiableListMixin.prototype = {
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $asUnmodifiableListMixin: function() {
      return [P.int];
    },
    $asUnmodifiableListBase: function() {
      return [P.int];
    },
    $asListBase: function() {
      return [P.int];
    },
    $asListMixin: function() {
      return [P.int];
    },
    $asIterable: function() {
      return [P.int];
    },
    $asList: function() {
      return [P.int];
    },
    $is_UnmodifiableListMixin: 1,
    $as_UnmodifiableListMixin: function() {
      return [P.int, P.Int8List, P.Int8List];
    },
    $as_ListBase_Object_ListMixin: function() {
      return [P.int];
    }
  };
  P._UnmodifiableUint16ListView_UnmodifiableListBase__UnmodifiableListMixin.prototype = {
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $asUnmodifiableListMixin: function() {
      return [P.int];
    },
    $asUnmodifiableListBase: function() {
      return [P.int];
    },
    $asListBase: function() {
      return [P.int];
    },
    $asListMixin: function() {
      return [P.int];
    },
    $asIterable: function() {
      return [P.int];
    },
    $asList: function() {
      return [P.int];
    },
    $is_UnmodifiableListMixin: 1,
    $as_UnmodifiableListMixin: function() {
      return [P.int, P.Uint16List, P.Uint16List];
    },
    $as_ListBase_Object_ListMixin: function() {
      return [P.int];
    }
  };
  P._UnmodifiableUint32ListView_UnmodifiableListBase__UnmodifiableListMixin.prototype = {
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $asUnmodifiableListMixin: function() {
      return [P.int];
    },
    $asUnmodifiableListBase: function() {
      return [P.int];
    },
    $asListBase: function() {
      return [P.int];
    },
    $asListMixin: function() {
      return [P.int];
    },
    $asIterable: function() {
      return [P.int];
    },
    $asList: function() {
      return [P.int];
    },
    $is_UnmodifiableListMixin: 1,
    $as_UnmodifiableListMixin: function() {
      return [P.int, P.Uint32List, P.Uint32List];
    },
    $as_ListBase_Object_ListMixin: function() {
      return [P.int];
    }
  };
  P._UnmodifiableUint64ListView_UnmodifiableListBase__UnmodifiableListMixin.prototype = {
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $asUnmodifiableListMixin: function() {
      return [P.int];
    },
    $asUnmodifiableListBase: function() {
      return [P.int];
    },
    $asListBase: function() {
      return [P.int];
    },
    $asListMixin: function() {
      return [P.int];
    },
    $asIterable: function() {
      return [P.int];
    },
    $asList: function() {
      return [P.int];
    },
    $is_UnmodifiableListMixin: 1,
    $as_UnmodifiableListMixin: function() {
      return [P.int, P.Uint64List, P.Uint64List];
    },
    $as_ListBase_Object_ListMixin: function() {
      return [P.int];
    }
  };
  P._UnmodifiableUint8ClampedListView_UnmodifiableListBase__UnmodifiableListMixin.prototype = {
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $asUnmodifiableListMixin: function() {
      return [P.int];
    },
    $asUnmodifiableListBase: function() {
      return [P.int];
    },
    $asListBase: function() {
      return [P.int];
    },
    $asListMixin: function() {
      return [P.int];
    },
    $asIterable: function() {
      return [P.int];
    },
    $asList: function() {
      return [P.int];
    },
    $is_UnmodifiableListMixin: 1,
    $as_UnmodifiableListMixin: function() {
      return [P.int, P.Uint8ClampedList, P.Uint8ClampedList];
    },
    $as_ListBase_Object_ListMixin: function() {
      return [P.int];
    }
  };
  P._UnmodifiableUint8ListView_UnmodifiableListBase__UnmodifiableListMixin.prototype = {
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $asUnmodifiableListMixin: function() {
      return [P.int];
    },
    $asUnmodifiableListBase: function() {
      return [P.int];
    },
    $asListBase: function() {
      return [P.int];
    },
    $asListMixin: function() {
      return [P.int];
    },
    $asIterable: function() {
      return [P.int];
    },
    $asList: function() {
      return [P.int];
    },
    $is_UnmodifiableListMixin: 1,
    $as_UnmodifiableListMixin: function() {
      return [P.int, P.Uint8List, P.Uint8List];
    },
    $as_ListBase_Object_ListMixin: function() {
      return [P.int];
    }
  };
  P.AnalyserNode.prototype = {$isAnalyserNode: 1};
  P.AudioBuffer.prototype = {$isAudioBuffer: 1};
  P.AudioBufferSourceNode.prototype = {$isAudioBufferSourceNode: 1};
  P.AudioContext.prototype = {$isAudioContext: 1};
  P.AudioDestinationNode.prototype = {$isAudioDestinationNode: 1};
  P.AudioListener.prototype = {$isAudioListener: 1};
  P.AudioNode.prototype = {$isAudioNode: 1};
  P.AudioParam.prototype = {$isAudioParam: 1};
  P.AudioParamMap.prototype = {$isMapMixin: 1,
    $asMapMixin: function() {
      return [P.String, null];
    },
    $isMap: 1,
    $asMap: function() {
      return [P.String, null];
    },
    $isAudioParamMap: 1
  };
  P.AudioProcessingEvent.prototype = {$isAudioProcessingEvent: 1};
  P.AudioScheduledSourceNode.prototype = {$isAudioScheduledSourceNode: 1};
  P.AudioTrack.prototype = {$isAudioTrack: 1};
  P.AudioTrackList.prototype = {$isAudioTrackList: 1};
  P.AudioWorkletGlobalScope.prototype = {$isAudioWorkletGlobalScope: 1};
  P.AudioWorkletNode.prototype = {$isAudioWorkletNode: 1};
  P.AudioWorkletProcessor.prototype = {$isAudioWorkletProcessor: 1};
  P.BaseAudioContext.prototype = {$isBaseAudioContext: 1};
  P.BiquadFilterNode.prototype = {$isBiquadFilterNode: 1};
  P.ChannelMergerNode.prototype = {$isChannelMergerNode: 1};
  P.ChannelSplitterNode.prototype = {$isChannelSplitterNode: 1};
  P.ConstantSourceNode.prototype = {$isConstantSourceNode: 1};
  P.ConvolverNode.prototype = {$isConvolverNode: 1};
  P.DelayNode.prototype = {$isDelayNode: 1};
  P.DynamicsCompressorNode.prototype = {$isDynamicsCompressorNode: 1};
  P.GainNode.prototype = {$isGainNode: 1};
  P.IirFilterNode.prototype = {$isIirFilterNode: 1};
  P.MediaElementAudioSourceNode.prototype = {$isMediaElementAudioSourceNode: 1};
  P.MediaStreamAudioDestinationNode.prototype = {$isMediaStreamAudioDestinationNode: 1};
  P.MediaStreamAudioSourceNode.prototype = {$isMediaStreamAudioSourceNode: 1};
  P.OfflineAudioCompletionEvent.prototype = {$isOfflineAudioCompletionEvent: 1};
  P.OfflineAudioContext.prototype = {$isOfflineAudioContext: 1};
  P.OscillatorNode.prototype = {$isOscillatorNode: 1};
  P.PannerNode.prototype = {$isPannerNode: 1};
  P.PeriodicWave.prototype = {$isPeriodicWave: 1};
  P.ScriptProcessorNode.prototype = {$isScriptProcessorNode: 1};
  P.StereoPannerNode.prototype = {$isStereoPannerNode: 1};
  P.WaveShaperNode.prototype = {$isWaveShaperNode: 1};
  P._AudioParamMap_Interceptor_MapMixin.prototype = {$isMapMixin: 1,
    $asMapMixin: function() {
      return [P.String, null];
    },
    $isMap: 1,
    $asMap: function() {
      return [P.String, null];
    }
  };
  P.ActiveInfo.prototype = {$isActiveInfo: 1};
  P.AngleInstancedArrays.prototype = {$isAngleInstancedArrays: 1};
  P.Buffer.prototype = {$isBuffer: 1};
  P.Canvas.prototype = {$isCanvas: 1};
  P.ColorBufferFloat.prototype = {$isColorBufferFloat: 1};
  P.CompressedTextureAstc.prototype = {$isCompressedTextureAstc: 1};
  P.CompressedTextureAtc.prototype = {$isCompressedTextureAtc: 1};
  P.CompressedTextureETC1.prototype = {$isCompressedTextureETC1: 1};
  P.CompressedTextureEtc.prototype = {$isCompressedTextureEtc: 1};
  P.CompressedTexturePvrtc.prototype = {$isCompressedTexturePvrtc: 1};
  P.CompressedTextureS3TC.prototype = {$isCompressedTextureS3TC: 1};
  P.CompressedTextureS3TCsRgb.prototype = {$isCompressedTextureS3TCsRgb: 1};
  P.ContextEvent.prototype = {$isContextEvent: 1};
  P.DebugRendererInfo.prototype = {$isDebugRendererInfo: 1};
  P.DebugShaders.prototype = {$isDebugShaders: 1};
  P.DepthTexture.prototype = {$isDepthTexture: 1};
  P.DrawBuffers.prototype = {$isDrawBuffers: 1};
  P.EXTsRgb.prototype = {$isEXTsRgb: 1};
  P.ExtBlendMinMax.prototype = {$isExtBlendMinMax: 1};
  P.ExtColorBufferFloat.prototype = {$isExtColorBufferFloat: 1};
  P.ExtColorBufferHalfFloat.prototype = {$isExtColorBufferHalfFloat: 1};
  P.ExtDisjointTimerQuery.prototype = {$isExtDisjointTimerQuery: 1};
  P.ExtDisjointTimerQueryWebGL2.prototype = {$isExtDisjointTimerQueryWebGL2: 1};
  P.ExtFragDepth.prototype = {$isExtFragDepth: 1};
  P.ExtShaderTextureLod.prototype = {$isExtShaderTextureLod: 1};
  P.ExtTextureFilterAnisotropic.prototype = {$isExtTextureFilterAnisotropic: 1};
  P.Framebuffer.prototype = {$isFramebuffer: 1};
  P.GetBufferSubDataAsync.prototype = {$isGetBufferSubDataAsync: 1};
  P.LoseContext.prototype = {$isLoseContext: 1};
  P.OesElementIndexUint.prototype = {$isOesElementIndexUint: 1};
  P.OesStandardDerivatives.prototype = {$isOesStandardDerivatives: 1};
  P.OesTextureFloat.prototype = {$isOesTextureFloat: 1};
  P.OesTextureFloatLinear.prototype = {$isOesTextureFloatLinear: 1};
  P.OesTextureHalfFloat.prototype = {$isOesTextureHalfFloat: 1};
  P.OesTextureHalfFloatLinear.prototype = {$isOesTextureHalfFloatLinear: 1};
  P.OesVertexArrayObject.prototype = {$isOesVertexArrayObject: 1};
  P.Program.prototype = {$isProgram: 1};
  P.Query.prototype = {$isQuery: 1};
  P.Renderbuffer.prototype = {$isRenderbuffer: 1};
  P.RenderingContext.prototype = {$isCanvasRenderingContext: 1, $isRenderingContext: 1};
  P.RenderingContext2.prototype = {$isRenderingContext2: 1, $is_WebGL2RenderingContextBase: 1, $is_WebGLRenderingContextBase: 1};
  P.Sampler.prototype = {$isSampler: 1};
  P.Shader.prototype = {$isShader: 1};
  P.ShaderPrecisionFormat.prototype = {$isShaderPrecisionFormat: 1};
  P.Sync.prototype = {$isSync: 1};
  P.Texture.prototype = {$isTexture: 1};
  P.TimerQueryExt.prototype = {$isTimerQueryExt: 1};
  P.TransformFeedback.prototype = {$isTransformFeedback: 1};
  P.UniformLocation.prototype = {$isUniformLocation: 1};
  P.VertexArrayObject.prototype = {$isVertexArrayObject: 1};
  P.VertexArrayObjectOes.prototype = {$isVertexArrayObjectOes: 1};
  P.WebGL.prototype = {$isWebGL: 1};
  P._WebGL2RenderingContextBase.prototype = {$is_WebGL2RenderingContextBase: 1, $is_WebGLRenderingContextBase: 1};
  P._WebGLRenderingContextBase.prototype = {};
  P.SqlDatabase.prototype = {$isSqlDatabase: 1};
  P.SqlError.prototype = {$isSqlError: 1};
  P.SqlResultSet.prototype = {$isSqlResultSet: 1};
  P.SqlResultSetRowList.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [[P.Map,,,]];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [[P.Map,,,]];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [[P.Map,,,]];
    },
    $isList: 1,
    $asList: function() {
      return [[P.Map,,,]];
    },
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [[P.Map,,,]];
    },
    $isSqlResultSetRowList: 1
  };
  P.SqlTransaction.prototype = {$isSqlTransaction: 1};
  P._SqlResultSetRowList_Interceptor_ListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [[P.Map,,,]];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [[P.Map,,,]];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [[P.Map,,,]];
    },
    $isList: 1,
    $asList: function() {
      return [[P.Map,,,]];
    }
  };
  P._SqlResultSetRowList_Interceptor_ListMixin_ImmutableListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [[P.Map,,,]];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [[P.Map,,,]];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [[P.Map,,,]];
    },
    $isList: 1,
    $asList: function() {
      return [[P.Map,,,]];
    },
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [[P.Map,,,]];
    }
  };
  K._ErrorCollector.prototype = {};
  F.AnalysisContext.prototype = {};
  R.ContextLocator.prototype = {};
  K.ContextRoot.prototype = {};
  D.DeclaredVariables.prototype = {};
  B.AnalysisResult.prototype = {};
  B.AnalysisResultWithErrors.prototype = {$isAnalysisResult: 1, $isFileResult: 1};
  B.ElementDeclarationResult.prototype = {};
  B.ErrorsResult.prototype = {$isAnalysisResult: 1, $isAnalysisResultWithErrors: 1, $isFileResult: 1};
  B.FileResult.prototype = {$isAnalysisResult: 1};
  B.ParsedLibraryResult.prototype = {$isAnalysisResult: 1};
  B.ParsedUnitResult.prototype = {$isAnalysisResult: 1, $isAnalysisResultWithErrors: 1, $isFileResult: 1, $isParseResult: 1};
  B.ParseResult.prototype = {$isAnalysisResult: 1, $isAnalysisResultWithErrors: 1, $isFileResult: 1};
  B.ResolvedLibraryResult.prototype = {$isAnalysisResult: 1};
  B.ResolvedUnitResult.prototype = {$isAnalysisResult: 1, $isAnalysisResultWithErrors: 1, $isFileResult: 1, $isResolveResult: 1};
  B.ResolveResult.prototype = {$isAnalysisResult: 1, $isAnalysisResultWithErrors: 1, $isFileResult: 1};
  B.ResultState.prototype = {};
  B.UnitElementResult.prototype = {$isAnalysisResult: 1};
  L.AnalysisSession.prototype = {};
  L.InconsistentAnalysisException.prototype = {};
  N.UriConverter.prototype = {};
  U.AdjacentStrings.prototype = {$isAstNode: 1, $isCollectionElement: 1, $isExpression: 1, $isLiteral: 1, $isStringLiteral: 1, $isSyntacticEntity: 1};
  U.AnnotatedNode.prototype = {$isAstNode: 1, $isSyntacticEntity: 1};
  U.Annotation.prototype = {$isAstNode: 1, $isSyntacticEntity: 1};
  U.ArgumentList.prototype = {$isAstNode: 1, $isSyntacticEntity: 1};
  U.AsExpression.prototype = {$isAstNode: 1, $isCollectionElement: 1, $isExpression: 1, $isSyntacticEntity: 1};
  U.AssertInitializer.prototype = {$isAssertion: 1, $isAstNode: 1, $isConstructorInitializer: 1, $isSyntacticEntity: 1};
  U.Assertion.prototype = {$isAstNode: 1, $isSyntacticEntity: 1};
  U.AssertStatement.prototype = {$isAssertion: 1, $isAstNode: 1, $isStatement: 1, $isSyntacticEntity: 1};
  U.AssignmentExpression.prototype = {$isAstNode: 1, $isCollectionElement: 1, $isExpression: 1, $isMethodReferenceExpression: 1, $isSyntacticEntity: 1};
  U.AstNode.prototype = {$isSyntacticEntity: 1};
  U.AstVisitor.prototype = {};
  U.AwaitExpression.prototype = {$isAstNode: 1, $isCollectionElement: 1, $isExpression: 1, $isSyntacticEntity: 1};
  U.BinaryExpression.prototype = {$isAstNode: 1, $isCollectionElement: 1, $isExpression: 1, $isMethodReferenceExpression: 1, $isSyntacticEntity: 1};
  U.Block.prototype = {$isAstNode: 1, $isStatement: 1, $isSyntacticEntity: 1};
  U.BlockFunctionBody.prototype = {$isAstNode: 1, $isFunctionBody: 1, $isSyntacticEntity: 1};
  U.BooleanLiteral.prototype = {$isAstNode: 1, $isCollectionElement: 1, $isExpression: 1, $isLiteral: 1, $isSyntacticEntity: 1};
  U.BreakStatement.prototype = {$isAstNode: 1, $isStatement: 1, $isSyntacticEntity: 1};
  U.CascadeExpression.prototype = {$isAstNode: 1, $isCollectionElement: 1, $isExpression: 1, $isSyntacticEntity: 1};
  U.CatchClause.prototype = {$isAstNode: 1, $isSyntacticEntity: 1};
  U.ClassDeclaration.prototype = {$isAnnotatedNode: 1, $isAstNode: 1, $isClassOrMixinDeclaration: 1, $isCompilationUnitMember: 1, $isDeclaration: 1, $isNamedCompilationUnitMember: 1, $isSyntacticEntity: 1};
  U.ClassMember.prototype = {$isAnnotatedNode: 1, $isAstNode: 1, $isDeclaration: 1, $isSyntacticEntity: 1};
  U.ClassOrMixinDeclaration.prototype = {$isAnnotatedNode: 1, $isAstNode: 1, $isCompilationUnitMember: 1, $isDeclaration: 1, $isNamedCompilationUnitMember: 1, $isSyntacticEntity: 1};
  U.ClassTypeAlias.prototype = {$isAnnotatedNode: 1, $isAstNode: 1, $isCompilationUnitMember: 1, $isDeclaration: 1, $isNamedCompilationUnitMember: 1, $isTypeAlias: 1, $isSyntacticEntity: 1};
  U.CollectionElement.prototype = {$isAstNode: 1, $isSyntacticEntity: 1};
  U.Combinator.prototype = {$isAstNode: 1, $isSyntacticEntity: 1};
  U.Comment1.prototype = {$isAstNode: 1, $isSyntacticEntity: 1};
  U.CommentReference.prototype = {$isAstNode: 1, $isSyntacticEntity: 1};
  U.CompilationUnit.prototype = {$isAstNode: 1, $isSyntacticEntity: 1};
  U.CompilationUnitMember.prototype = {$isAnnotatedNode: 1, $isAstNode: 1, $isDeclaration: 1, $isSyntacticEntity: 1};
  U.ConditionalExpression.prototype = {$isAstNode: 1, $isCollectionElement: 1, $isExpression: 1, $isSyntacticEntity: 1};
  U.Configuration.prototype = {$isAstNode: 1, $isSyntacticEntity: 1};
  U.ConstructorDeclaration.prototype = {$isAnnotatedNode: 1, $isAstNode: 1, $isClassMember: 1, $isDeclaration: 1, $isSyntacticEntity: 1};
  U.ConstructorFieldInitializer.prototype = {$isAstNode: 1, $isConstructorInitializer: 1, $isSyntacticEntity: 1};
  U.ConstructorInitializer.prototype = {$isAstNode: 1, $isSyntacticEntity: 1};
  U.ConstructorName.prototype = {$isAstNode: 1, $isConstructorReferenceNode: 1, $isSyntacticEntity: 1};
  U.ConstructorReferenceNode.prototype = {$isAstNode: 1, $isSyntacticEntity: 1};
  U.ContinueStatement.prototype = {$isAstNode: 1, $isStatement: 1, $isSyntacticEntity: 1};
  U.Declaration.prototype = {$isAnnotatedNode: 1, $isAstNode: 1, $isSyntacticEntity: 1};
  U.DeclaredIdentifier.prototype = {$isAnnotatedNode: 1, $isAstNode: 1, $isDeclaration: 1, $isSyntacticEntity: 1};
  U.DefaultFormalParameter.prototype = {$isAstNode: 1, $isFormalParameter: 1, $isSyntacticEntity: 1};
  U.Directive.prototype = {$isAnnotatedNode: 1, $isAstNode: 1, $isSyntacticEntity: 1};
  U.DoStatement.prototype = {$isAstNode: 1, $isStatement: 1, $isSyntacticEntity: 1};
  U.DottedName.prototype = {$isAstNode: 1, $isSyntacticEntity: 1};
  U.DoubleLiteral.prototype = {$isAstNode: 1, $isCollectionElement: 1, $isExpression: 1, $isLiteral: 1, $isSyntacticEntity: 1};
  U.EmptyFunctionBody.prototype = {$isAstNode: 1, $isFunctionBody: 1, $isSyntacticEntity: 1};
  U.EmptyStatement.prototype = {$isAstNode: 1, $isStatement: 1, $isSyntacticEntity: 1};
  U.EnumConstantDeclaration.prototype = {$isAnnotatedNode: 1, $isAstNode: 1, $isDeclaration: 1, $isSyntacticEntity: 1};
  U.EnumDeclaration.prototype = {$isAnnotatedNode: 1, $isAstNode: 1, $isCompilationUnitMember: 1, $isDeclaration: 1, $isNamedCompilationUnitMember: 1, $isSyntacticEntity: 1};
  U.ExportDirective.prototype = {$isAnnotatedNode: 1, $isAstNode: 1, $isDirective: 1, $isNamespaceDirective: 1, $isUriBasedDirective: 1, $isSyntacticEntity: 1};
  U.Expression.prototype = {$isAstNode: 1, $isCollectionElement: 1, $isSyntacticEntity: 1};
  U.ExpressionFunctionBody.prototype = {$isAstNode: 1, $isFunctionBody: 1, $isSyntacticEntity: 1};
  U.ExpressionStatement.prototype = {$isAstNode: 1, $isStatement: 1, $isSyntacticEntity: 1};
  U.ExtendsClause.prototype = {$isAstNode: 1, $isSyntacticEntity: 1};
  U.FieldDeclaration.prototype = {$isAnnotatedNode: 1, $isAstNode: 1, $isClassMember: 1, $isDeclaration: 1, $isSyntacticEntity: 1};
  U.FieldFormalParameter.prototype = {$isAstNode: 1, $isFormalParameter: 1, $isNormalFormalParameter: 1, $isSyntacticEntity: 1};
  U.ForEachParts.prototype = {$isAstNode: 1, $isForLoopParts: 1, $isSyntacticEntity: 1};
  U.ForEachPartsWithDeclaration.prototype = {$isAstNode: 1, $isForEachParts: 1, $isForLoopParts: 1, $isSyntacticEntity: 1};
  U.ForEachPartsWithIdentifier.prototype = {$isAstNode: 1, $isForEachParts: 1, $isForLoopParts: 1, $isSyntacticEntity: 1};
  U.ForEachStatement.prototype = {$isAstNode: 1, $isForStatement2: 1, $isStatement: 1, $isSyntacticEntity: 1};
  U.ForElement.prototype = {$isAstNode: 1, $isCollectionElement: 1, $isSyntacticEntity: 1};
  U.ForLoopParts.prototype = {$isAstNode: 1, $isSyntacticEntity: 1};
  U.FormalParameter.prototype = {$isAstNode: 1, $isSyntacticEntity: 1};
  U.FormalParameterList.prototype = {$isAstNode: 1, $isSyntacticEntity: 1};
  U.ForParts.prototype = {$isAstNode: 1, $isForLoopParts: 1, $isSyntacticEntity: 1};
  U.ForPartsWithDeclarations.prototype = {$isAstNode: 1, $isForLoopParts: 1, $isForParts: 1, $isSyntacticEntity: 1};
  U.ForPartsWithExpression.prototype = {$isAstNode: 1, $isForLoopParts: 1, $isForParts: 1, $isSyntacticEntity: 1};
  U.ForStatement.prototype = {$isAstNode: 1, $isForStatement2: 1, $isStatement: 1, $isSyntacticEntity: 1};
  U.ForStatement2.prototype = {$isAstNode: 1, $isStatement: 1, $isSyntacticEntity: 1};
  U.FunctionBody.prototype = {$isAstNode: 1, $isSyntacticEntity: 1};
  U.FunctionDeclaration.prototype = {$isAnnotatedNode: 1, $isAstNode: 1, $isCompilationUnitMember: 1, $isDeclaration: 1, $isNamedCompilationUnitMember: 1, $isSyntacticEntity: 1};
  U.FunctionDeclarationStatement.prototype = {$isAstNode: 1, $isStatement: 1, $isSyntacticEntity: 1};
  U.FunctionExpression.prototype = {$isAstNode: 1, $isCollectionElement: 1, $isExpression: 1, $isSyntacticEntity: 1};
  U.FunctionExpressionInvocation.prototype = {$isAstNode: 1, $isCollectionElement: 1, $isExpression: 1, $isInvocationExpression: 1, $isSyntacticEntity: 1};
  U.FunctionTypeAlias.prototype = {$isAnnotatedNode: 1, $isAstNode: 1, $isCompilationUnitMember: 1, $isDeclaration: 1, $isNamedCompilationUnitMember: 1, $isTypeAlias: 1, $isSyntacticEntity: 1};
  U.FunctionTypedFormalParameter.prototype = {$isAstNode: 1, $isFormalParameter: 1, $isNormalFormalParameter: 1, $isSyntacticEntity: 1};
  U.GenericFunctionType.prototype = {$isAstNode: 1, $isTypeAnnotation: 1, $isSyntacticEntity: 1};
  U.GenericTypeAlias.prototype = {$isAnnotatedNode: 1, $isAstNode: 1, $isCompilationUnitMember: 1, $isDeclaration: 1, $isNamedCompilationUnitMember: 1, $isTypeAlias: 1, $isSyntacticEntity: 1};
  U.HideCombinator.prototype = {$isAstNode: 1, $isCombinator: 1, $isSyntacticEntity: 1};
  U.Identifier.prototype = {$isAstNode: 1, $isCollectionElement: 1, $isExpression: 1, $isSyntacticEntity: 1};
  U.IfElement.prototype = {$isAstNode: 1, $isCollectionElement: 1, $isSyntacticEntity: 1};
  U.IfStatement.prototype = {$isAstNode: 1, $isStatement: 1, $isSyntacticEntity: 1};
  U.ImplementsClause.prototype = {$isAstNode: 1, $isSyntacticEntity: 1};
  U.ImportDirective.prototype = {$isAnnotatedNode: 1, $isAstNode: 1, $isDirective: 1, $isNamespaceDirective: 1, $isUriBasedDirective: 1, $isSyntacticEntity: 1};
  U.IndexExpression.prototype = {$isAstNode: 1, $isCollectionElement: 1, $isExpression: 1, $isMethodReferenceExpression: 1, $isSyntacticEntity: 1};
  U.InstanceCreationExpression.prototype = {$isAstNode: 1, $isCollectionElement: 1, $isConstructorReferenceNode: 1, $isExpression: 1, $isSyntacticEntity: 1};
  U.IntegerLiteral.prototype = {$isAstNode: 1, $isCollectionElement: 1, $isExpression: 1, $isLiteral: 1, $isSyntacticEntity: 1};
  U.InterpolationElement.prototype = {$isAstNode: 1, $isSyntacticEntity: 1};
  U.InterpolationExpression.prototype = {$isAstNode: 1, $isInterpolationElement: 1, $isSyntacticEntity: 1};
  U.InterpolationString.prototype = {$isAstNode: 1, $isInterpolationElement: 1, $isSyntacticEntity: 1};
  U.InvocationExpression.prototype = {$isAstNode: 1, $isCollectionElement: 1, $isExpression: 1, $isSyntacticEntity: 1};
  U.IsExpression.prototype = {$isAstNode: 1, $isCollectionElement: 1, $isExpression: 1, $isSyntacticEntity: 1};
  U.Label.prototype = {$isAstNode: 1, $isSyntacticEntity: 1};
  U.LabeledStatement.prototype = {$isAstNode: 1, $isStatement: 1, $isSyntacticEntity: 1};
  U.LibraryDirective.prototype = {$isAnnotatedNode: 1, $isAstNode: 1, $isDirective: 1, $isSyntacticEntity: 1};
  U.LibraryIdentifier.prototype = {$isAstNode: 1, $isCollectionElement: 1, $isExpression: 1, $isIdentifier: 1, $isSyntacticEntity: 1};
  U.ListLiteral.prototype = {$isAstNode: 1, $isCollectionElement: 1, $isExpression: 1, $isLiteral: 1, $isTypedLiteral: 1, $isSyntacticEntity: 1};
  U.ListLiteral2.prototype = {$isAstNode: 1, $isCollectionElement: 1, $isExpression: 1, $isLiteral: 1, $isTypedLiteral: 1, $isSyntacticEntity: 1};
  U.Literal.prototype = {$isAstNode: 1, $isCollectionElement: 1, $isExpression: 1, $isSyntacticEntity: 1};
  U.MapLiteral.prototype = {$isAstNode: 1, $isCollectionElement: 1, $isExpression: 1, $isLiteral: 1, $isSetOrMapLiteral: 1, $isTypedLiteral: 1, $isSyntacticEntity: 1};
  U.MapLiteral2.prototype = {$isAstNode: 1, $isCollectionElement: 1, $isExpression: 1, $isLiteral: 1, $isTypedLiteral: 1, $isSyntacticEntity: 1};
  U.MapLiteralEntry.prototype = {$isAstNode: 1, $isCollectionElement: 1, $isSyntacticEntity: 1};
  U.MethodDeclaration.prototype = {$isAnnotatedNode: 1, $isAstNode: 1, $isClassMember: 1, $isDeclaration: 1, $isSyntacticEntity: 1};
  U.MethodInvocation.prototype = {$isAstNode: 1, $isCollectionElement: 1, $isExpression: 1, $isInvocationExpression: 1, $isSyntacticEntity: 1};
  U.MethodReferenceExpression.prototype = {$isAstNode: 1, $isSyntacticEntity: 1};
  U.MixinDeclaration.prototype = {$isAnnotatedNode: 1, $isAstNode: 1, $isClassOrMixinDeclaration: 1, $isCompilationUnitMember: 1, $isDeclaration: 1, $isNamedCompilationUnitMember: 1, $isSyntacticEntity: 1};
  U.NamedCompilationUnitMember.prototype = {$isAnnotatedNode: 1, $isAstNode: 1, $isCompilationUnitMember: 1, $isDeclaration: 1, $isSyntacticEntity: 1};
  U.NamedExpression.prototype = {$isAstNode: 1, $isCollectionElement: 1, $isExpression: 1, $isSyntacticEntity: 1};
  U.NamedType.prototype = {$isAstNode: 1, $isTypeAnnotation: 1, $isSyntacticEntity: 1};
  U.NamespaceDirective.prototype = {$isAnnotatedNode: 1, $isAstNode: 1, $isDirective: 1, $isUriBasedDirective: 1, $isSyntacticEntity: 1};
  U.NativeClause.prototype = {$isAstNode: 1, $isSyntacticEntity: 1};
  U.NativeFunctionBody.prototype = {$isAstNode: 1, $isFunctionBody: 1, $isSyntacticEntity: 1};
  U.NodeList0.prototype = {$isEfficientLengthIterable: 1, $isIterable: 1, $isList: 1};
  U.NormalFormalParameter.prototype = {$isAstNode: 1, $isFormalParameter: 1, $isSyntacticEntity: 1};
  U.NullLiteral.prototype = {$isAstNode: 1, $isCollectionElement: 1, $isExpression: 1, $isLiteral: 1, $isSyntacticEntity: 1};
  U.OnClause.prototype = {$isAstNode: 1, $isSyntacticEntity: 1};
  U.ParenthesizedExpression.prototype = {$isAstNode: 1, $isCollectionElement: 1, $isExpression: 1, $isSyntacticEntity: 1};
  U.PartDirective.prototype = {$isAnnotatedNode: 1, $isAstNode: 1, $isDirective: 1, $isUriBasedDirective: 1, $isSyntacticEntity: 1};
  U.PartOfDirective.prototype = {$isAnnotatedNode: 1, $isAstNode: 1, $isDirective: 1, $isSyntacticEntity: 1};
  U.PostfixExpression.prototype = {$isAstNode: 1, $isCollectionElement: 1, $isExpression: 1, $isMethodReferenceExpression: 1, $isSyntacticEntity: 1};
  U.PrefixedIdentifier.prototype = {$isAstNode: 1, $isCollectionElement: 1, $isExpression: 1, $isIdentifier: 1, $isSyntacticEntity: 1};
  U.PrefixExpression.prototype = {$isAstNode: 1, $isCollectionElement: 1, $isExpression: 1, $isMethodReferenceExpression: 1, $isSyntacticEntity: 1};
  U.PropertyAccess.prototype = {$isAstNode: 1, $isCollectionElement: 1, $isExpression: 1, $isSyntacticEntity: 1};
  U.RedirectingConstructorInvocation.prototype = {$isAstNode: 1, $isConstructorInitializer: 1, $isConstructorReferenceNode: 1, $isSyntacticEntity: 1};
  U.RethrowExpression.prototype = {$isAstNode: 1, $isCollectionElement: 1, $isExpression: 1, $isSyntacticEntity: 1};
  U.ReturnStatement.prototype = {$isAstNode: 1, $isStatement: 1, $isSyntacticEntity: 1};
  U.ScriptTag.prototype = {$isAstNode: 1, $isSyntacticEntity: 1};
  U.SetLiteral.prototype = {$isAstNode: 1, $isCollectionElement: 1, $isExpression: 1, $isLiteral: 1, $isSetOrMapLiteral: 1, $isTypedLiteral: 1, $isSyntacticEntity: 1};
  U.SetLiteral2.prototype = {$isAstNode: 1, $isCollectionElement: 1, $isExpression: 1, $isLiteral: 1, $isTypedLiteral: 1, $isSyntacticEntity: 1};
  U.SetOrMapLiteral.prototype = {$isAstNode: 1, $isCollectionElement: 1, $isExpression: 1, $isLiteral: 1, $isTypedLiteral: 1, $isSyntacticEntity: 1};
  U.ShowCombinator.prototype = {$isAstNode: 1, $isCombinator: 1, $isSyntacticEntity: 1};
  U.SimpleFormalParameter.prototype = {$isAstNode: 1, $isFormalParameter: 1, $isNormalFormalParameter: 1, $isSyntacticEntity: 1};
  U.SimpleIdentifier.prototype = {$isAstNode: 1, $isCollectionElement: 1, $isExpression: 1, $isIdentifier: 1, $isSyntacticEntity: 1};
  U.SimpleStringLiteral.prototype = {$isAstNode: 1, $isCollectionElement: 1, $isExpression: 1, $isLiteral: 1, $isSingleStringLiteral: 1, $isStringLiteral: 1, $isSyntacticEntity: 1};
  U.SingleStringLiteral.prototype = {$isAstNode: 1, $isCollectionElement: 1, $isExpression: 1, $isLiteral: 1, $isStringLiteral: 1, $isSyntacticEntity: 1};
  U.SpreadElement.prototype = {$isAstNode: 1, $isCollectionElement: 1, $isSyntacticEntity: 1};
  U.Statement.prototype = {$isAstNode: 1, $isSyntacticEntity: 1};
  U.StringInterpolation.prototype = {$isAstNode: 1, $isCollectionElement: 1, $isExpression: 1, $isLiteral: 1, $isSingleStringLiteral: 1, $isStringLiteral: 1, $isSyntacticEntity: 1};
  U.StringLiteral.prototype = {$isAstNode: 1, $isCollectionElement: 1, $isExpression: 1, $isLiteral: 1, $isSyntacticEntity: 1};
  U.SuperConstructorInvocation.prototype = {$isAstNode: 1, $isConstructorInitializer: 1, $isConstructorReferenceNode: 1, $isSyntacticEntity: 1};
  U.SuperExpression.prototype = {$isAstNode: 1, $isCollectionElement: 1, $isExpression: 1, $isSyntacticEntity: 1};
  U.SwitchCase.prototype = {$isAstNode: 1, $isSwitchMember: 1, $isSyntacticEntity: 1};
  U.SwitchDefault.prototype = {$isAstNode: 1, $isSwitchMember: 1, $isSyntacticEntity: 1};
  U.SwitchMember.prototype = {$isAstNode: 1, $isSyntacticEntity: 1};
  U.SwitchStatement.prototype = {$isAstNode: 1, $isStatement: 1, $isSyntacticEntity: 1};
  U.SymbolLiteral.prototype = {$isAstNode: 1, $isCollectionElement: 1, $isExpression: 1, $isLiteral: 1, $isSyntacticEntity: 1};
  U.ThisExpression.prototype = {$isAstNode: 1, $isCollectionElement: 1, $isExpression: 1, $isSyntacticEntity: 1};
  U.ThrowExpression.prototype = {$isAstNode: 1, $isCollectionElement: 1, $isExpression: 1, $isSyntacticEntity: 1};
  U.TopLevelVariableDeclaration.prototype = {$isAnnotatedNode: 1, $isAstNode: 1, $isCompilationUnitMember: 1, $isDeclaration: 1, $isSyntacticEntity: 1};
  U.TryStatement.prototype = {$isAstNode: 1, $isStatement: 1, $isSyntacticEntity: 1};
  U.TypeAlias.prototype = {$isAnnotatedNode: 1, $isAstNode: 1, $isCompilationUnitMember: 1, $isDeclaration: 1, $isNamedCompilationUnitMember: 1, $isSyntacticEntity: 1};
  U.TypeAnnotation.prototype = {$isAstNode: 1, $isSyntacticEntity: 1};
  U.TypeArgumentList.prototype = {$isAstNode: 1, $isSyntacticEntity: 1};
  U.TypedLiteral.prototype = {$isAstNode: 1, $isCollectionElement: 1, $isExpression: 1, $isLiteral: 1, $isSyntacticEntity: 1};
  U.TypeName.prototype = {$isAstNode: 1, $isNamedType: 1, $isTypeAnnotation: 1, $isSyntacticEntity: 1};
  U.TypeParameter.prototype = {$isAnnotatedNode: 1, $isAstNode: 1, $isDeclaration: 1, $isSyntacticEntity: 1};
  U.TypeParameterList.prototype = {$isAstNode: 1, $isSyntacticEntity: 1};
  U.UriBasedDirective.prototype = {$isAnnotatedNode: 1, $isAstNode: 1, $isDirective: 1, $isSyntacticEntity: 1};
  U.VariableDeclaration.prototype = {$isAnnotatedNode: 1, $isAstNode: 1, $isDeclaration: 1, $isSyntacticEntity: 1};
  U.VariableDeclarationList.prototype = {$isAnnotatedNode: 1, $isAstNode: 1, $isSyntacticEntity: 1};
  U.VariableDeclarationStatement.prototype = {$isAstNode: 1, $isStatement: 1, $isSyntacticEntity: 1};
  U.WhileStatement.prototype = {$isAstNode: 1, $isStatement: 1, $isSyntacticEntity: 1};
  U.WithClause.prototype = {$isAstNode: 1, $isSyntacticEntity: 1};
  U.YieldStatement.prototype = {$isAstNode: 1, $isStatement: 1, $isSyntacticEntity: 1};
  A.AstFactory.prototype = {};
  F.Precedence.prototype = {};
  Y.ResolutionMap.prototype = {};
  B.BreadthFirstVisitor.prototype = {};
  B.DelegatingAstVisitor.prototype = {};
  B.GeneralizingAstVisitor.prototype = {$isAstVisitor: 1, $isUIAsCodeVisitorMixin: 1};
  B.RecursiveAstVisitor.prototype = {$isAstVisitor: 1, $isUIAsCodeVisitorMixin: 1};
  B.SimpleAstVisitor.prototype = {$isAstVisitor: 1, $isUIAsCodeVisitorMixin: 1};
  B.ThrowingAstVisitor.prototype = {$isAstVisitor: 1, $isUIAsCodeVisitorMixin: 1};
  B.TimedAstVisitor.prototype = {$isAstVisitor: 1, $isUIAsCodeVisitorMixin: 1};
  B.UnifyingAstVisitor.prototype = {$isAstVisitor: 1, $isUIAsCodeVisitorMixin: 1};
  B._BreadthFirstChildVisitor.prototype = {
    $asAstVisitor: function() {
      return [-1];
    },
    $asUnifyingAstVisitor: function() {
      return [-1];
    },
    $asUIAsCodeVisitorMixin: function() {
      return [-1];
    },
    $as_UnifyingAstVisitor_Object_UIAsCodeVisitorMixin: function() {
      return [-1];
    }
  };
  B._GeneralizingAstVisitor_Object_UIAsCodeVisitorMixin.prototype = {$isAstVisitor: 1, $isUIAsCodeVisitorMixin: 1};
  B._RecursiveAstVisitor_Object_UIAsCodeVisitorMixin.prototype = {$isAstVisitor: 1, $isUIAsCodeVisitorMixin: 1};
  B._SimpleAstVisitor_Object_UIAsCodeVisitorMixin.prototype = {$isAstVisitor: 1, $isUIAsCodeVisitorMixin: 1};
  B._ThrowingAstVisitor_Object_UIAsCodeVisitorMixin.prototype = {$isAstVisitor: 1, $isUIAsCodeVisitorMixin: 1};
  B._TimedAstVisitor_Object_UIAsCodeVisitorMixin.prototype = {$isAstVisitor: 1, $isUIAsCodeVisitorMixin: 1};
  B._UnifyingAstVisitor_Object_UIAsCodeVisitorMixin.prototype = {$isAstVisitor: 1, $isUIAsCodeVisitorMixin: 1};
  F.DartObject.prototype = {};
  G.ClassElement.prototype = {$isElement0: 1, $isTypeDefiningElement: 1, $isTypeParameterizedElement: 1, $isAnalysisTarget: 1};
  G.ClassMemberElement.prototype = {$isElement0: 1, $isAnalysisTarget: 1};
  G.CompilationUnitElement.prototype = {$isElement0: 1, $isUriReferencedElement: 1, $isAnalysisTarget: 1};
  G.ConstructorElement.prototype = {$isClassMemberElement: 1, $isElement0: 1, $isExecutableElement: 1, $isFunctionTypedElement: 1, $isTypeParameterizedElement: 1, $isConstantEvaluationTarget: 1, $isAnalysisTarget: 1};
  G.Element0.prototype = {$isAnalysisTarget: 1};
  G.ElementAnnotation.prototype = {$isConstantEvaluationTarget: 1, $isAnalysisTarget: 1};
  G.ElementKind.prototype = {$isComparable: 1,
    $asComparable: function() {
      return [G.ElementKind];
    }
  };
  G.ElementLocation.prototype = {};
  G.ElementVisitor.prototype = {};
  G.ExecutableElement.prototype = {$isElement0: 1, $isFunctionTypedElement: 1, $isTypeParameterizedElement: 1, $isAnalysisTarget: 1};
  G.ExportElement.prototype = {$isElement0: 1, $isUriReferencedElement: 1, $isAnalysisTarget: 1};
  G.FieldElement.prototype = {$isClassMemberElement: 1, $isElement0: 1, $isPropertyInducingElement: 1, $isVariableElement: 1, $isConstantEvaluationTarget: 1, $isAnalysisTarget: 1};
  G.FieldFormalParameterElement.prototype = {$isElement0: 1, $isLocalElement: 1, $isParameterElement: 1, $isVariableElement: 1, $isConstantEvaluationTarget: 1, $isAnalysisTarget: 1};
  G.FunctionElement.prototype = {$isElement0: 1, $isExecutableElement: 1, $isFunctionTypedElement: 1, $isLocalElement: 1, $isTypeParameterizedElement: 1, $isAnalysisTarget: 1};
  G.FunctionTypeAliasElement.prototype = {$isElement0: 1, $isFunctionTypedElement: 1, $isTypeDefiningElement: 1, $isTypeParameterizedElement: 1, $isAnalysisTarget: 1};
  G.FunctionTypedElement.prototype = {$isElement0: 1, $isTypeParameterizedElement: 1, $isAnalysisTarget: 1};
  G.GenericFunctionTypeElement.prototype = {$isElement0: 1, $isFunctionTypedElement: 1, $isTypeParameterizedElement: 1, $isAnalysisTarget: 1};
  G.GenericTypeAliasElement.prototype = {$isElement0: 1, $isFunctionTypeAliasElement: 1, $isFunctionTypedElement: 1, $isTypeDefiningElement: 1, $isTypeParameterizedElement: 1, $isAnalysisTarget: 1};
  G.HideElementCombinator.prototype = {$isNamespaceCombinator: 1};
  G.ImportElement.prototype = {$isElement0: 1, $isUriReferencedElement: 1, $isAnalysisTarget: 1};
  G.LabelElement0.prototype = {$isElement0: 1, $isAnalysisTarget: 1};
  G.LibraryElement.prototype = {$isElement0: 1, $isAnalysisTarget: 1};
  G.LocalElement.prototype = {$isElement0: 1, $isAnalysisTarget: 1};
  G.LocalVariableElement.prototype = {$isElement0: 1, $isLocalElement: 1, $isVariableElement: 1, $isConstantEvaluationTarget: 1, $isAnalysisTarget: 1};
  G.MethodElement.prototype = {$isClassMemberElement: 1, $isElement0: 1, $isExecutableElement: 1, $isFunctionTypedElement: 1, $isTypeParameterizedElement: 1, $isAnalysisTarget: 1};
  G.MultiplyDefinedElement.prototype = {$isElement0: 1, $isAnalysisTarget: 1};
  G.MultiplyInheritedExecutableElement.prototype = {$isElement0: 1, $isExecutableElement: 1, $isFunctionTypedElement: 1, $isTypeParameterizedElement: 1, $isAnalysisTarget: 1};
  G.NamespaceCombinator.prototype = {};
  G.ParameterElement.prototype = {$isElement0: 1, $isLocalElement: 1, $isVariableElement: 1, $isConstantEvaluationTarget: 1, $isAnalysisTarget: 1};
  G.PrefixElement.prototype = {$isElement0: 1, $isAnalysisTarget: 1};
  G.PropertyAccessorElement.prototype = {$isElement0: 1, $isExecutableElement: 1, $isFunctionTypedElement: 1, $isTypeParameterizedElement: 1, $isAnalysisTarget: 1};
  G.PropertyInducingElement.prototype = {$isElement0: 1, $isVariableElement: 1, $isConstantEvaluationTarget: 1, $isAnalysisTarget: 1};
  G.ShowElementCombinator.prototype = {$isNamespaceCombinator: 1};
  G.TopLevelVariableElement.prototype = {$isElement0: 1, $isPropertyInducingElement: 1, $isVariableElement: 1, $isConstantEvaluationTarget: 1, $isAnalysisTarget: 1};
  G.TypeDefiningElement.prototype = {$isElement0: 1, $isAnalysisTarget: 1};
  G.TypeParameterElement.prototype = {$isElement0: 1, $isTypeDefiningElement: 1, $isAnalysisTarget: 1};
  G.TypeParameterizedElement.prototype = {$isElement0: 1, $isAnalysisTarget: 1};
  G.UndefinedElement.prototype = {$isElement0: 1, $isAnalysisTarget: 1};
  G.UriReferencedElement.prototype = {$isElement0: 1, $isAnalysisTarget: 1};
  G.VariableElement.prototype = {$isElement0: 1, $isConstantEvaluationTarget: 1, $isAnalysisTarget: 1};
  F.DartType.prototype = {};
  F.FunctionType.prototype = {$isDartType: 1, $isParameterizedType: 1};
  F.InterfaceType.prototype = {$isDartType: 1, $isParameterizedType: 1};
  F.ParameterizedType.prototype = {$isDartType: 1};
  F.TypeParameterType.prototype = {$isDartType: 1};
  N.TypeSystem.prototype = {};
  B.GeneralizingElementVisitor.prototype = {$isElementVisitor: 1};
  B.RecursiveElementVisitor.prototype = {$isElementVisitor: 1};
  B.SimpleElementVisitor.prototype = {$isElementVisitor: 1};
  B.ThrowingElementVisitor.prototype = {$isElementVisitor: 1};
  V.AnalysisError.prototype = {};
  Z.AnalysisErrorListener.prototype = {};
  Z.BooleanErrorListener.prototype = {$isAnalysisErrorListener: 1};
  Z.ErrorReporter.prototype = {};
  Z.RecordingErrorListener.prototype = {$isAnalysisErrorListener: 1};
  Z._NullErrorListener.prototype = {$isAnalysisErrorListener: 1};
  Z._TypeToConvert.prototype = {};
  E.AnalysisException.prototype = {$isException: 1};
  E.CaughtException.prototype = {$isException: 1};
  E.File1.prototype = {$isResource: 1};
  E.FileSystemException0.prototype = {$isException: 1};
  E.Folder.prototype = {$isResource: 1};
  E.Resource.prototype = {};
  E.ResourceProvider.prototype = {};
  X.MemoryResourceProvider.prototype = {$isResourceProvider: 1};
  X._MemoryDummyLink.prototype = {$isFile1: 1};
  X._MemoryFile.prototype = {$isFile1: 1};
  X._MemoryFolder.prototype = {$isFolder: 1};
  X._MemoryResource.prototype = {$isResource: 1};
  T.PhysicalResourceProvider.prototype = {$isResourceProvider: 1};
  T._PhysicalFile.prototype = {$isFile1: 1};
  T._PhysicalFolder.prototype = {$isFolder: 1};
  T._PhysicalResource.prototype = {$isResource: 1};
  M.AnalysisPerformanceKind.prototype = {};
  M.InstrumentationServer.prototype = {};
  M.InstrumentationService.prototype = {};
  M.MulticastInstrumentationServer.prototype = {$isInstrumentationServer: 1};
  M.PluginData.prototype = {};
  M.ErrorConfig.prototype = {};
  M.ErrorProcessor.prototype = {};
  E.CharacterLocation.prototype = {};
  E.LineInfo.prototype = {};
  F.SourceRange.prototype = {};
  Q.AnalysisOptionsProvider.prototype = {};
  Q.OptionsFormatException.prototype = {$isException: 1};
  Z.AnalysisOptionsErrorCode.prototype = {};
  Z.AnalysisOptionsHintCode.prototype = {};
  Z.AnalysisOptionsWarningCode.prototype = {};
  B.CancelableCompleter.prototype = {$isCompleter: 1};
  B.CancelableFuture.prototype = {$isFuture: 1};
  B.FutureCanceledError.prototype = {};
  B._CancelableCompleterFuture.prototype = {$isFuture: 1, $isCancelableFuture: 1};
  B._WrappedFuture.prototype = {$isFuture: 1, $isCancelableFuture: 1};
  R.ContextBuilder.prototype = {};
  R.ContextBuilderOptions.prototype = {};
  R.EmbedderYamlLocator.prototype = {};
  B.AnalysisCache.prototype = {};
  B.CacheEntry.prototype = {};
  B.CacheFlushManager.prototype = {};
  B.CachePartition.prototype = {};
  B.Delta.prototype = {};
  B.DeltaResult.prototype = {};
  B.InvalidatedResult.prototype = {};
  B.PackageCachePartition.prototype = {};
  B.ReentrantSynchronousStream.prototype = {};
  B.ReentrantSynchronousStreamSubscription.prototype = {};
  B.ResultData.prototype = {};
  B.SdkCachePartition.prototype = {};
  B.UniversalCachePartition.prototype = {};
  B.UnlimitedCacheFlushManager.prototype = {
    $asCacheFlushManager: function() {
    }
  };
  M.AnalysisContextImpl.prototype = {$isAnalysisContext0: 1, $isInternalAnalysisContext: 1};
  M.PartitionManager.prototype = {};
  M.ResultProvider.prototype = {};
  M.SdkAnalysisContext.prototype = {};
  K.ContextRoot0.prototype = {};
  Z.SourceFactoryImpl.prototype = {$isSourceFactory: 1};
  K.ByteStore.prototype = {};
  K.MemoryByteStore.prototype = {$isByteStore: 1};
  K.MemoryCachingByteStore.prototype = {$isByteStore: 1};
  K.NullByteStore.prototype = {$isByteStore: 1};
  B.Cache.prototype = {};
  R.ContextLocatorImpl.prototype = {$isContextLocator: 1};
  K.ContextRootImpl.prototype = {$isContextRoot: 1};
  A.DefinedNames.prototype = {};
  L.AnalysisDriver.prototype = {$isAnalysisDriverGeneric: 1};
  L.AnalysisDriverGeneric.prototype = {};
  L.AnalysisDriverPriority.prototype = {};
  L.AnalysisDriverScheduler.prototype = {};
  L.AnalysisDriverTestView.prototype = {};
  L.AnalysisResult0.prototype = {};
  L.DriverPerformance.prototype = {};
  L.DriverWatcher.prototype = {};
  L.ExceptionResult.prototype = {};
  L.SchedulerWorker.prototype = {};
  L._DiscoverAvailableFilesTask.prototype = {};
  L._ExceptionState.prototype = {};
  L._FilesDefiningClassMemberNameTask.prototype = {};
  L._FilesReferencingNameTask.prototype = {};
  L._TopLevelNameDeclarationsTask.prototype = {};
  Z.DriverBasedAnalysisContext.prototype = {$isAnalysisContext: 1};
  K.EnableString.prototype = {};
  K.ExperimentStatus.prototype = {};
  K.IsEnabledByDefault.prototype = {};
  K.IsExpired.prototype = {};
  T.ConflictingFlagLists.prototype = {};
  T.ConflictingFlags.prototype = {};
  T.ExperimentalFeature.prototype = {};
  T.IllegalUseOfExpiredFlag.prototype = {};
  T.UnnecessaryUseOfExpiredFlag.prototype = {};
  T.UnrecognizedFlag.prototype = {};
  T.ValidationResult.prototype = {};
  M.FileContentOverlay.prototype = {};
  M.FileState.prototype = {};
  M.FileStateTestView.prototype = {};
  M.FileSystemState.prototype = {};
  M.FileSystemStateTestView.prototype = {};
  M._ExportedDeclarations.prototype = {};
  M._FileContent.prototype = {};
  M._FileContentCache.prototype = {};
  D.FileTracker.prototype = {};
  E.IndexElementInfo.prototype = {};
  E._ElementInfo.prototype = {};
  E._ElementRelationInfo.prototype = {};
  E._IndexAssembler.prototype = {};
  E._IndexContributor.prototype = {
    $asAstVisitor: function() {
    },
    $asGeneralizingAstVisitor: function() {
    },
    $asUIAsCodeVisitorMixin: function() {
    },
    $as_GeneralizingAstVisitor_Object_UIAsCodeVisitorMixin: function() {
    }
  };
  E._NameRelationInfo.prototype = {};
  E._StringInfo.prototype = {};
  E._SubtypeInfo.prototype = {};
  G.LibraryAnalyzer.prototype = {};
  G.UnitAnalysisResult.prototype = {};
  G._NameOrSource.prototype = {};
  U.LibraryContext.prototype = {};
  D.LibraryCycle.prototype = {};
  D._LibraryNode.prototype = {
    $asNode0: function() {
      return [D._LibraryNode];
    }
  };
  D._LibraryWalker.prototype = {
    $asDependencyWalker: function() {
      return [D._LibraryNode];
    }
  };
  R.PerformanceLog.prototype = {};
  R.PerformanceLogSection.prototype = {};
  K._LocalNameScope.prototype = {};
  K._ReferencedNamesComputer.prototype = {
    $asAstVisitor: function() {
    },
    $asGeneralizingAstVisitor: function() {
    },
    $asUIAsCodeVisitorMixin: function() {
    },
    $as_GeneralizingAstVisitor_Object_UIAsCodeVisitorMixin: function() {
    }
  };
  K.RestrictedAnalysisContext.prototype = {$isAnalysisContextImpl: 1, $isAnalysisContext0: 1, $isInternalAnalysisContext: 1};
  B.AnalysisResultImpl.prototype = {$isAnalysisResult: 1};
  B.ElementDeclarationResultImpl.prototype = {$isElementDeclarationResult: 1};
  B.ErrorsResultImpl.prototype = {$isAnalysisResultWithErrors: 1, $isErrorsResult: 1};
  B.FileResultImpl.prototype = {$isFileResult: 1};
  B.ParsedLibraryResultImpl.prototype = {$isParsedLibraryResult: 1};
  B.ParsedUnitResultImpl.prototype = {$isAnalysisResultWithErrors: 1, $isParsedUnitResult: 1, $isParseResult: 1};
  B.ResolvedLibraryResultImpl.prototype = {$isResolvedLibraryResult: 1};
  B.ResolvedUnitResultImpl.prototype = {$isAnalysisResultWithErrors: 1, $isResolvedUnitResult: 1, $isResolveResult: 1};
  B.UnitElementResultImpl.prototype = {$isUnitElementResult: 1};
  B._DeclarationByElementLocator.prototype = {
    $asAstVisitor: function() {
      return [-1];
    },
    $asGeneralizingAstVisitor: function() {
      return [-1];
    },
    $asUIAsCodeVisitorMixin: function() {
      return [-1];
    },
    $as_GeneralizingAstVisitor_Object_UIAsCodeVisitorMixin: function() {
      return [-1];
    }
  };
  S.Declaration0.prototype = {};
  S.DeclarationKind.prototype = {};
  S.Search.prototype = {};
  S.SearchedFiles.prototype = {};
  S.SearchResult.prototype = {};
  S.SearchResultKind.prototype = {};
  S.SubtypeResult.prototype = {};
  S._ContainingElementFinder.prototype = {
    $asElementVisitor: function() {
    },
    $asGeneralizingElementVisitor: function() {
    }
  };
  S._ImportElementReferencesVisitor.prototype = {
    $asAstVisitor: function() {
    },
    $asRecursiveAstVisitor: function() {
    },
    $asUIAsCodeVisitorMixin: function() {
    },
    $as_RecursiveAstVisitor_Object_UIAsCodeVisitorMixin: function() {
    }
  };
  S._IndexRequest.prototype = {};
  S._LocalReferencesVisitor.prototype = {
    $asAstVisitor: function() {
    },
    $asRecursiveAstVisitor: function() {
    },
    $asUIAsCodeVisitorMixin: function() {
    },
    $as_RecursiveAstVisitor_Object_UIAsCodeVisitorMixin: function() {
    }
  };
  S._MaxNumberOfDeclarationsError.prototype = {};
  S._UnlinkedParameterComposer.prototype = {};
  L.AnalysisSessionImpl.prototype = {$isAnalysisSession: 1};
  E.AnalysisStatus.prototype = {};
  E.Monitor.prototype = {};
  E.StatusSupport.prototype = {};
  K.TopLevelDeclaration.prototype = {};
  K.TopLevelDeclarationInSource.prototype = {};
  K.TopLevelDeclarationKind.prototype = {};
  N.DriverBasedUriConverter.prototype = {$isUriConverter: 1};
  U.AdjacentStringsImpl.prototype = {$isAdjacentStrings: 1};
  U.AnnotatedNodeImpl.prototype = {$isAnnotatedNode: 1};
  U.AnnotationImpl.prototype = {$isAnnotation: 1};
  U.ArgumentListImpl.prototype = {$isArgumentList: 1};
  U.AsExpressionImpl.prototype = {$isAsExpression: 1};
  U.AssertInitializerImpl.prototype = {$isAssertInitializer: 1, $isAssertion: 1};
  U.AssertStatementImpl.prototype = {$isAssertion: 1, $isAssertStatement: 1};
  U.AssignmentExpressionImpl.prototype = {$isAssignmentExpression: 1, $isMethodReferenceExpression: 1};
  U.AstNodeImpl.prototype = {$isAstNode: 1, $isSyntacticEntity: 1};
  U.AwaitExpressionImpl.prototype = {$isAwaitExpression: 1};
  U.BinaryExpressionImpl.prototype = {$isBinaryExpression: 1, $isMethodReferenceExpression: 1};
  U.BlockFunctionBodyImpl.prototype = {$isBlockFunctionBody: 1};
  U.BlockImpl.prototype = {$isBlock: 1};
  U.BooleanLiteralImpl.prototype = {$isBooleanLiteral: 1};
  U.BreakStatementImpl.prototype = {$isBreakStatement: 1};
  U.CascadeExpressionImpl.prototype = {$isCascadeExpression: 1};
  U.CatchClauseImpl.prototype = {$isCatchClause: 1};
  U.ChildEntities.prototype = {$isIterableMixin: 1,
    $asIterableMixin: function() {
      return [T.SyntacticEntity];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [T.SyntacticEntity];
    }
  };
  U.ClassDeclarationImpl.prototype = {$isClassDeclaration: 1};
  U.ClassMemberImpl.prototype = {$isClassMember: 1};
  U.ClassOrMixinDeclarationImpl.prototype = {$isClassOrMixinDeclaration: 1};
  U.ClassTypeAliasImpl.prototype = {$isClassTypeAlias: 1};
  U.CollectionElementImpl.prototype = {$isCollectionElement: 1};
  U.CombinatorImpl.prototype = {$isCombinator: 1};
  U.CommentImpl.prototype = {$isComment1: 1};
  U.CommentReferenceImpl.prototype = {$isCommentReference: 1};
  U.CommentType.prototype = {};
  U.CompilationUnitImpl.prototype = {$isCompilationUnit: 1};
  U.CompilationUnitMemberImpl.prototype = {$isCompilationUnitMember: 1};
  U.ConditionalExpressionImpl.prototype = {$isConditionalExpression: 1};
  U.ConfigurationImpl.prototype = {$isConfiguration: 1};
  U.ConstantAnalysisErrorListener.prototype = {};
  U.ConstructorDeclarationImpl.prototype = {$isConstructorDeclaration: 1};
  U.ConstructorFieldInitializerImpl.prototype = {$isConstructorFieldInitializer: 1};
  U.ConstructorInitializerImpl.prototype = {$isConstructorInitializer: 1};
  U.ConstructorNameImpl.prototype = {$isConstructorName: 1, $isConstructorReferenceNode: 1};
  U.ContinueStatementImpl.prototype = {$isContinueStatement: 1};
  U.DeclarationImpl.prototype = {$isDeclaration: 1};
  U.DeclaredIdentifierImpl.prototype = {$isDeclaredIdentifier: 1};
  U.DeclaredSimpleIdentifier.prototype = {};
  U.DefaultFormalParameterImpl.prototype = {$isDefaultFormalParameter: 1};
  U.DirectiveImpl.prototype = {$isDirective: 1};
  U.DoStatementImpl.prototype = {$isDoStatement: 1};
  U.DottedNameImpl.prototype = {$isDottedName: 1};
  U.DoubleLiteralImpl.prototype = {$isDoubleLiteral: 1};
  U.EmptyFunctionBodyImpl.prototype = {$isEmptyFunctionBody: 1};
  U.EmptyStatementImpl.prototype = {$isEmptyStatement: 1};
  U.EnumConstantDeclarationImpl.prototype = {$isEnumConstantDeclaration: 1};
  U.EnumDeclarationImpl.prototype = {$isEnumDeclaration: 1};
  U.EphemeralIdentifier.prototype = {};
  U.ExportDirectiveImpl.prototype = {$isExportDirective: 1};
  U.ExpressionFunctionBodyImpl.prototype = {$isExpressionFunctionBody: 1};
  U.ExpressionImpl.prototype = {$isCollectionElement: 1, $isExpression: 1, $isCollectionElementImpl: 1};
  U.ExpressionStatementImpl.prototype = {$isExpressionStatement: 1};
  U.ExtendsClauseImpl.prototype = {$isExtendsClause: 1};
  U.FieldDeclarationImpl.prototype = {$isFieldDeclaration: 1};
  U.FieldFormalParameterImpl.prototype = {$isFieldFormalParameter: 1};
  U.ForEachPartsImpl.prototype = {$isForEachParts: 1};
  U.ForEachPartsWithDeclarationImpl.prototype = {$isForEachPartsWithDeclaration: 1};
  U.ForEachPartsWithIdentifierImpl.prototype = {$isForEachPartsWithIdentifier: 1};
  U.ForEachStatementImpl.prototype = {$isForEachStatement: 1};
  U.ForElementImpl.prototype = {$isForElement: 1, $isForMixin: 1};
  U.ForLoopPartsImpl.prototype = {$isForLoopParts: 1};
  U.FormalParameterImpl.prototype = {$isFormalParameter: 1};
  U.FormalParameterListImpl.prototype = {$isFormalParameterList: 1};
  U.ForMixin.prototype = {$isAstNode: 1, $isAstNodeImpl: 1, $isSyntacticEntity: 1};
  U.ForPartsImpl.prototype = {$isForParts: 1};
  U.ForPartsWithDeclarationsImpl.prototype = {$isForPartsWithDeclarations: 1};
  U.ForPartsWithExpressionImpl.prototype = {$isForPartsWithExpression: 1};
  U.ForStatement2Impl.prototype = {$isForStatement2: 1, $isForMixin: 1};
  U.ForStatementImpl.prototype = {$isForStatement: 1};
  U.FunctionBodyImpl.prototype = {$isFunctionBody: 1};
  U.FunctionDeclarationImpl.prototype = {$isFunctionDeclaration: 1};
  U.FunctionDeclarationStatementImpl.prototype = {$isFunctionDeclarationStatement: 1};
  U.FunctionExpressionImpl.prototype = {$isFunctionExpression: 1};
  U.FunctionExpressionInvocationImpl.prototype = {$isFunctionExpressionInvocation: 1};
  U.FunctionTypeAliasImpl.prototype = {$isFunctionTypeAlias: 1};
  U.FunctionTypedFormalParameterImpl.prototype = {$isFunctionTypedFormalParameter: 1};
  U.GenericFunctionTypeImpl.prototype = {$isGenericFunctionType: 1};
  U.GenericTypeAliasImpl.prototype = {$isGenericTypeAlias: 1};
  U.HideCombinatorImpl.prototype = {$isHideCombinator: 1};
  U.IdentifierImpl.prototype = {$isIdentifier: 1};
  U.IfElementImpl.prototype = {$isIfElement: 1, $isIfMixin: 1};
  U.IfMixin.prototype = {$isAstNode: 1, $isAstNodeImpl: 1, $isSyntacticEntity: 1};
  U.IfStatementImpl.prototype = {$isIfStatement: 1, $isIfMixin: 1};
  U.ImplementsClauseImpl.prototype = {$isImplementsClause: 1};
  U.ImportDirectiveImpl.prototype = {$isImportDirective: 1};
  U.IndexExpressionImpl.prototype = {$isIndexExpression: 1, $isMethodReferenceExpression: 1};
  U.InstanceCreationExpressionImpl.prototype = {$isConstructorReferenceNode: 1, $isInstanceCreationExpression: 1};
  U.IntegerLiteralImpl.prototype = {$isIntegerLiteral: 1};
  U.InterpolationElementImpl.prototype = {$isInterpolationElement: 1};
  U.InterpolationExpressionImpl.prototype = {$isInterpolationExpression: 1};
  U.InterpolationStringImpl.prototype = {$isInterpolationString: 1};
  U.InvocationExpressionImpl.prototype = {$isInvocationExpression: 1};
  U.IsExpressionImpl.prototype = {$isIsExpression: 1};
  U.LabeledStatementImpl.prototype = {$isLabeledStatement: 1};
  U.LabelImpl.prototype = {$isLabel: 1};
  U.LibraryDirectiveImpl.prototype = {$isLibraryDirective: 1};
  U.LibraryIdentifierImpl.prototype = {$isLibraryIdentifier: 1};
  U.ListLiteral2Impl.prototype = {$isListLiteral2: 1};
  U.ListLiteralImpl.prototype = {$isListLiteral: 1};
  U.LiteralImpl.prototype = {$isLiteral: 1};
  U.LocalVariableInfo.prototype = {};
  U.MapLiteral2Impl.prototype = {$isMapLiteral2: 1};
  U.MapLiteralEntryImpl.prototype = {$isMapLiteralEntry: 1};
  U.MapLiteralImpl.prototype = {$isMapLiteral: 1};
  U.MethodDeclarationImpl.prototype = {$isMethodDeclaration: 1};
  U.MethodInvocationImpl.prototype = {$isMethodInvocation: 1};
  U.MixinDeclarationImpl.prototype = {$isMixinDeclaration: 1};
  U.NamedCompilationUnitMemberImpl.prototype = {$isNamedCompilationUnitMember: 1};
  U.NamedExpressionImpl.prototype = {$isNamedExpression: 1};
  U.NamespaceDirectiveImpl.prototype = {$isNamespaceDirective: 1};
  U.NativeClauseImpl.prototype = {$isNativeClause: 1};
  U.NativeFunctionBodyImpl.prototype = {$isNativeFunctionBody: 1};
  U.NodeListImpl.prototype = {$isEfficientLengthIterable: 1, $isListMixin: 1, $isIterable: 1, $isList: 1, $isNodeList0: 1};
  U.NormalFormalParameterImpl.prototype = {$isNormalFormalParameter: 1};
  U.NullLiteralImpl.prototype = {$isNullLiteral: 1};
  U.OnClauseImpl.prototype = {$isOnClause: 1};
  U.ParenthesizedExpressionImpl.prototype = {$isParenthesizedExpression: 1};
  U.PartDirectiveImpl.prototype = {$isPartDirective: 1};
  U.PartOfDirectiveImpl.prototype = {$isPartOfDirective: 1};
  U.PostfixExpressionImpl.prototype = {$isMethodReferenceExpression: 1, $isPostfixExpression: 1};
  U.PrefixedIdentifierImpl.prototype = {$isPrefixedIdentifier: 1};
  U.PrefixExpressionImpl.prototype = {$isMethodReferenceExpression: 1, $isPrefixExpression: 1};
  U.PropertyAccessImpl.prototype = {$isPropertyAccess: 1};
  U.RedirectingConstructorInvocationImpl.prototype = {$isConstructorReferenceNode: 1, $isRedirectingConstructorInvocation: 1};
  U.RethrowExpressionImpl.prototype = {$isRethrowExpression: 1};
  U.ReturnStatementImpl.prototype = {$isReturnStatement: 1};
  U.ScriptTagImpl.prototype = {$isScriptTag: 1};
  U.SetLiteral2Impl.prototype = {$isSetLiteral2: 1};
  U.SetLiteralImpl.prototype = {$isSetLiteral: 1};
  U.SetOrMapLiteralImpl.prototype = {$isSetOrMapLiteral: 1};
  U.ShowCombinatorImpl.prototype = {$isShowCombinator: 1};
  U.SimpleFormalParameterImpl.prototype = {$isSimpleFormalParameter: 1};
  U.SimpleIdentifierImpl.prototype = {$isSimpleIdentifier: 1};
  U.SimpleStringLiteralImpl.prototype = {$isSimpleStringLiteral: 1};
  U.SingleStringLiteralImpl.prototype = {$isSingleStringLiteral: 1};
  U.SpreadElementImpl.prototype = {$isCollectionElement: 1, $isSpreadElement: 1, $isCollectionElementImpl: 1};
  U.StatementImpl.prototype = {$isStatement: 1};
  U.StringInterpolationImpl.prototype = {$isStringInterpolation: 1};
  U.StringLexemeHelper.prototype = {};
  U.StringLiteralImpl.prototype = {$isStringLiteral: 1};
  U.SuperConstructorInvocationImpl.prototype = {$isConstructorReferenceNode: 1, $isSuperConstructorInvocation: 1};
  U.SuperExpressionImpl.prototype = {$isSuperExpression: 1};
  U.SwitchCaseImpl.prototype = {$isSwitchCase: 1};
  U.SwitchDefaultImpl.prototype = {$isSwitchDefault: 1};
  U.SwitchMemberImpl.prototype = {$isSwitchMember: 1};
  U.SwitchStatementImpl.prototype = {$isSwitchStatement: 1};
  U.SymbolLiteralImpl.prototype = {$isSymbolLiteral: 1};
  U.ThisExpressionImpl.prototype = {$isThisExpression: 1};
  U.ThrowExpressionImpl.prototype = {$isThrowExpression: 1};
  U.TopLevelVariableDeclarationImpl.prototype = {$isTopLevelVariableDeclaration: 1};
  U.TryStatementImpl.prototype = {$isTryStatement: 1};
  U.TypeAliasImpl.prototype = {$isTypeAlias: 1};
  U.TypeAnnotationImpl.prototype = {$isTypeAnnotation: 1};
  U.TypeArgumentListImpl.prototype = {$isTypeArgumentList: 1};
  U.TypedLiteralImpl.prototype = {$isTypedLiteral: 1};
  U.TypeNameImpl.prototype = {$isNamedType: 1, $isTypeName: 1};
  U.TypeParameterImpl.prototype = {$isTypeParameter: 1};
  U.TypeParameterListImpl.prototype = {$isTypeParameterList: 1};
  U.UriBasedDirectiveImpl.prototype = {$isUriBasedDirective: 1};
  U.UriValidationCode.prototype = {};
  U.VariableDeclarationImpl.prototype = {$isVariableDeclaration: 1};
  U.VariableDeclarationListImpl.prototype = {$isVariableDeclarationList: 1};
  U.VariableDeclarationStatementImpl.prototype = {$isVariableDeclarationStatement: 1};
  U.WhileStatementImpl.prototype = {$isWhileStatement: 1};
  U.WithClauseImpl.prototype = {$isWithClause: 1};
  U.YieldStatementImpl.prototype = {$isYieldStatement: 1};
  U._SetOrMapKind.prototype = {};
  U._ChildEntities_Object_IterableMixin.prototype = {$isIterableMixin: 1,
    $asIterableMixin: function() {
      return [T.SyntacticEntity];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [T.SyntacticEntity];
    }
  };
  U._ForElementImpl_CollectionElementImpl_ForMixin.prototype = {$isForMixin: 1};
  U._ForStatement2Impl_StatementImpl_ForMixin.prototype = {$isForMixin: 1};
  U._IfElementImpl_CollectionElementImpl_IfMixin.prototype = {$isIfMixin: 1};
  U._IfStatementImpl_StatementImpl_IfMixin.prototype = {$isIfMixin: 1};
  U._NodeListImpl_Object_ListMixin.prototype = {$isEfficientLengthIterable: 1, $isListMixin: 1, $isIterable: 1, $isList: 1};
  A.AstFactoryImpl.prototype = {};
  N.ConstantEvaluator.prototype = {
    $asAstVisitor: function() {
      return [P.Object];
    },
    $asGeneralizingAstVisitor: function() {
      return [P.Object];
    },
    $asUIAsCodeVisitorMixin: function() {
      return [P.Object];
    },
    $as_GeneralizingAstVisitor_Object_UIAsCodeVisitorMixin: function() {
      return [P.Object];
    }
  };
  A.MixinSuperInvokedNamesCollector.prototype = {
    $asAstVisitor: function() {
      return [-1];
    },
    $asRecursiveAstVisitor: function() {
      return [-1];
    },
    $asUIAsCodeVisitorMixin: function() {
      return [-1];
    },
    $as_RecursiveAstVisitor_Object_UIAsCodeVisitorMixin: function() {
      return [-1];
    }
  };
  Y.ResolutionMapImpl.prototype = {$isResolutionMap: 1};
  A.AstCloner.prototype = {$isAstVisitor: 1,
    $asAstVisitor: function() {
      return [U.AstNode];
    },
    $isUIAsCodeVisitorMixin: 1,
    $asUIAsCodeVisitorMixin: function() {
      return [U.AstNode];
    }
  };
  A.AstComparator.prototype = {$isAstVisitor: 1,
    $asAstVisitor: function() {
      return [P.bool];
    },
    $isUIAsCodeVisitorMixin: 1,
    $asUIAsCodeVisitorMixin: function() {
      return [P.bool];
    }
  };
  A.DeferredLibraryReferenceDetector.prototype = {
    $asAstVisitor: function() {
      return [-1];
    },
    $asRecursiveAstVisitor: function() {
      return [-1];
    },
    $asUIAsCodeVisitorMixin: function() {
      return [-1];
    },
    $as_RecursiveAstVisitor_Object_UIAsCodeVisitorMixin: function() {
      return [-1];
    }
  };
  A.ExceptionHandlingDelegatingAstVisitor.prototype = {};
  A.IncrementalAstCloner.prototype = {$isAstVisitor: 1,
    $asAstVisitor: function() {
      return [U.AstNode];
    },
    $isUIAsCodeVisitorMixin: 1,
    $asUIAsCodeVisitorMixin: function() {
      return [U.AstNode];
    }
  };
  A.NodeLocator.prototype = {
    $asAstVisitor: function() {
      return [-1];
    },
    $asUnifyingAstVisitor: function() {
      return [-1];
    },
    $asUIAsCodeVisitorMixin: function() {
      return [-1];
    },
    $as_UnifyingAstVisitor_Object_UIAsCodeVisitorMixin: function() {
      return [-1];
    }
  };
  A.NodeLocator2.prototype = {
    $asAstVisitor: function() {
      return [-1];
    },
    $asUnifyingAstVisitor: function() {
      return [-1];
    },
    $asUIAsCodeVisitorMixin: function() {
      return [-1];
    },
    $as_UnifyingAstVisitor_Object_UIAsCodeVisitorMixin: function() {
      return [-1];
    }
  };
  A.NodeReplacer.prototype = {$isAstVisitor: 1,
    $asAstVisitor: function() {
      return [P.bool];
    },
    $isUIAsCodeVisitorMixin: 1,
    $asUIAsCodeVisitorMixin: function() {
      return [P.bool];
    }
  };
  A.ResolutionCopier.prototype = {$isAstVisitor: 1,
    $asAstVisitor: function() {
      return [P.bool];
    },
    $isUIAsCodeVisitorMixin: 1,
    $asUIAsCodeVisitorMixin: function() {
      return [P.bool];
    }
  };
  A.ScopedNameFinder.prototype = {
    $asAstVisitor: function() {
      return [-1];
    },
    $asGeneralizingAstVisitor: function() {
      return [-1];
    },
    $asUIAsCodeVisitorMixin: function() {
      return [-1];
    },
    $as_GeneralizingAstVisitor_Object_UIAsCodeVisitorMixin: function() {
      return [-1];
    }
  };
  A.ToSourceVisitor.prototype = {$isAstVisitor: 1,
    $asAstVisitor: function() {
      return [-1];
    },
    $isUIAsCodeVisitorMixin: 1,
    $asUIAsCodeVisitorMixin: function() {
      return [-1];
    }
  };
  A.ToSourceVisitor2.prototype = {$isAstVisitor: 1,
    $asAstVisitor: function() {
      return [-1];
    },
    $isUIAsCodeVisitorMixin: 1,
    $asUIAsCodeVisitorMixin: function() {
      return [-1];
    }
  };
  A.UIAsCodeVisitorMixin.prototype = {$isAstVisitor: 1};
  A._AstCloner_Object_UIAsCodeVisitorMixin.prototype = {$isAstVisitor: 1,
    $asAstVisitor: function() {
      return [U.AstNode];
    },
    $isUIAsCodeVisitorMixin: 1,
    $asUIAsCodeVisitorMixin: function() {
      return [U.AstNode];
    }
  };
  A._AstComparator_Object_UIAsCodeVisitorMixin.prototype = {$isAstVisitor: 1,
    $asAstVisitor: function() {
      return [P.bool];
    },
    $isUIAsCodeVisitorMixin: 1,
    $asUIAsCodeVisitorMixin: function() {
      return [P.bool];
    }
  };
  A._IncrementalAstCloner_Object_UIAsCodeVisitorMixin.prototype = {$isAstVisitor: 1,
    $asAstVisitor: function() {
      return [U.AstNode];
    },
    $isUIAsCodeVisitorMixin: 1,
    $asUIAsCodeVisitorMixin: function() {
      return [U.AstNode];
    }
  };
  A._NodeReplacer_Object_UIAsCodeVisitorMixin.prototype = {$isAstVisitor: 1,
    $asAstVisitor: function() {
      return [P.bool];
    },
    $isUIAsCodeVisitorMixin: 1,
    $asUIAsCodeVisitorMixin: function() {
      return [P.bool];
    }
  };
  A._ResolutionCopier_Object_UIAsCodeVisitorMixin.prototype = {$isAstVisitor: 1,
    $asAstVisitor: function() {
      return [P.bool];
    },
    $isUIAsCodeVisitorMixin: 1,
    $asUIAsCodeVisitorMixin: function() {
      return [P.bool];
    }
  };
  A._ToSourceVisitor_Object_UIAsCodeVisitorMixin.prototype = {$isAstVisitor: 1,
    $asAstVisitor: function() {
      return [-1];
    },
    $isUIAsCodeVisitorMixin: 1,
    $asUIAsCodeVisitorMixin: function() {
      return [-1];
    }
  };
  A._ToSourceVisitor2_Object_UIAsCodeVisitorMixin.prototype = {$isAstVisitor: 1,
    $asAstVisitor: function() {
      return [-1];
    },
    $isUIAsCodeVisitorMixin: 1,
    $asUIAsCodeVisitorMixin: function() {
      return [-1];
    }
  };
  B._ConstantNode.prototype = {
    $asNode0: function() {
      return [B._ConstantNode];
    }
  };
  B._ConstantWalker.prototype = {
    $asDependencyWalker: function() {
      return [B._ConstantNode];
    }
  };
  V.ConstantVerifier.prototype = {
    $asAstVisitor: function() {
      return [-1];
    },
    $asRecursiveAstVisitor: function() {
      return [-1];
    },
    $asUIAsCodeVisitorMixin: function() {
      return [-1];
    },
    $as_RecursiveAstVisitor_Object_UIAsCodeVisitorMixin: function() {
      return [-1];
    }
  };
  V._ConstantVerifier_validateInitializerExpression.prototype = {};
  V._ConstLiteralVerifier.prototype = {};
  S.ConstantEvaluationEngine.prototype = {};
  S.ConstantEvaluationTarget.prototype = {};
  S.ConstantEvaluationValidator.prototype = {};
  S.ConstantEvaluationValidator_ForProduction.prototype = {$isConstantEvaluationValidator: 1};
  S.ConstantVisitor.prototype = {
    $asAstVisitor: function() {
      return [F.DartObjectImpl];
    },
    $asUnifyingAstVisitor: function() {
      return [F.DartObjectImpl];
    },
    $asUIAsCodeVisitorMixin: function() {
      return [F.DartObjectImpl];
    },
    $as_UnifyingAstVisitor_Object_UIAsCodeVisitorMixin: function() {
      return [F.DartObjectImpl];
    }
  };
  S.DartObjectComputer.prototype = {};
  S.EvaluationResult.prototype = {};
  S.EvaluationResultImpl.prototype = {};
  A.ConstantAstCloner.prototype = {};
  A.ConstantExpressionsDependenciesFinder.prototype = {
    $asAstVisitor: function() {
    },
    $asRecursiveAstVisitor: function() {
    },
    $asUIAsCodeVisitorMixin: function() {
    },
    $as_RecursiveAstVisitor_Object_UIAsCodeVisitorMixin: function() {
    }
  };
  A.ConstantFinder.prototype = {
    $asAstVisitor: function() {
      return [-1];
    },
    $asRecursiveAstVisitor: function() {
      return [-1];
    },
    $asUIAsCodeVisitorMixin: function() {
      return [-1];
    },
    $as_RecursiveAstVisitor_Object_UIAsCodeVisitorMixin: function() {
      return [-1];
    }
  };
  A.ReferenceFinder.prototype = {
    $asAstVisitor: function() {
      return [-1];
    },
    $asRecursiveAstVisitor: function() {
      return [-1];
    },
    $asUIAsCodeVisitorMixin: function() {
      return [-1];
    },
    $as_RecursiveAstVisitor_Object_UIAsCodeVisitorMixin: function() {
      return [-1];
    }
  };
  F.BoolState.prototype = {};
  F.ConstructorInvocation.prototype = {};
  F.DartObjectImpl.prototype = {$isDartObject: 1};
  F.DoubleState.prototype = {};
  F.DynamicState.prototype = {};
  F.EvaluationException.prototype = {};
  F.FunctionState.prototype = {};
  F.GenericState.prototype = {};
  F.InstanceState.prototype = {};
  F.IntState.prototype = {};
  F.ListState.prototype = {};
  F.MapState.prototype = {};
  F.NullState.prototype = {};
  F.NumState.prototype = {};
  F.SetState.prototype = {};
  F.StringState.prototype = {};
  F.SymbolState.prototype = {};
  F.TypeState.prototype = {};
  R.ApiElementBuilder.prototype = {};
  R.CompilationUnitBuilder.prototype = {};
  R.DirectiveElementBuilder.prototype = {
    $asAstVisitor: function() {
      return [-1];
    },
    $asSimpleAstVisitor: function() {
      return [-1];
    },
    $asUIAsCodeVisitorMixin: function() {
      return [-1];
    },
    $as_SimpleAstVisitor_Object_UIAsCodeVisitorMixin: function() {
      return [-1];
    }
  };
  R.ElementBuilder.prototype = {};
  R.LocalElementBuilder.prototype = {};
  R._BaseElementBuilder.prototype = {
    $asAstVisitor: function() {
      return [-1];
    },
    $asRecursiveAstVisitor: function() {
      return [-1];
    },
    $asUIAsCodeVisitorMixin: function() {
      return [-1];
    },
    $as_RecursiveAstVisitor_Object_UIAsCodeVisitorMixin: function() {
      return [-1];
    }
  };
  R._ClassNotExecutableElementsBuilder.prototype = {
    $asAstVisitor: function() {
      return [-1];
    },
    $asUnifyingAstVisitor: function() {
      return [-1];
    },
    $asUIAsCodeVisitorMixin: function() {
      return [-1];
    },
    $as_UnifyingAstVisitor_Object_UIAsCodeVisitorMixin: function() {
      return [-1];
    }
  };
  R._NamespaceCombinatorBuilder.prototype = {
    $asAstVisitor: function() {
      return [-1];
    },
    $asSimpleAstVisitor: function() {
      return [-1];
    },
    $asUIAsCodeVisitorMixin: function() {
      return [-1];
    },
    $as_SimpleAstVisitor_Object_UIAsCodeVisitorMixin: function() {
      return [-1];
    }
  };
  G.AbstractClassElementImpl.prototype = {$isClassElement: 1, $isTypeDefiningElement: 1, $isTypeParameterizedElement: 1};
  G.AuxiliaryElements.prototype = {};
  G.ClassElementImpl.prototype = {$isSimplyBoundableMixin: 1, $isTypeParameterizedElementMixin: 1, $isTypeParameterSerializationContext: 1};
  G.CompilationUnitElementImpl.prototype = {$isCompilationUnitElement: 1};
  G.ConstFieldElementImpl.prototype = {$isConstVariableElement: 1};
  G.ConstFieldElementImpl_EnumValue.prototype = {};
  G.ConstFieldElementImpl_EnumValues.prototype = {};
  G.ConstFieldElementImpl_ofEnum.prototype = {};
  G.ConstLocalVariableElementImpl.prototype = {$isConstVariableElement: 1};
  G.ConstructorElementImpl.prototype = {$isClassMemberElement: 1, $isConstructorElement: 1, $isConstantEvaluationTarget: 1};
  G.ConstTopLevelVariableElementImpl.prototype = {$isConstVariableElement: 1};
  G.ConstVariableElement.prototype = {$isElement0: 1, $isConstantEvaluationTarget: 1, $isElementImpl: 1, $isAnalysisTarget: 1};
  G.DefaultFieldFormalParameterElementImpl.prototype = {$isConstVariableElement: 1};
  G.DefaultParameterElementImpl.prototype = {$isConstVariableElement: 1};
  G.DynamicElementImpl.prototype = {$isTypeDefiningElement: 1};
  G.ElementAnnotationImpl.prototype = {$isElementAnnotation: 1, $isConstantEvaluationTarget: 1, $isAnalysisTarget: 1};
  G.ElementImpl.prototype = {$isElement0: 1, $isAnalysisTarget: 1};
  G.ElementLocationImpl.prototype = {$isElementLocation: 1};
  G.EnumElementImpl.prototype = {};
  G.ExecutableElementImpl.prototype = {$isExecutableElement: 1, $isFunctionTypedElement: 1, $isTypeParameterizedElement: 1, $isTypeParameterizedElementMixin: 1, $isTypeParameterSerializationContext: 1};
  G.ExportElementImpl.prototype = {$isExportElement: 1};
  G.FieldElementImpl.prototype = {$isClassMemberElement: 1, $isFieldElement: 1};
  G.FieldFormalParameterElementImpl.prototype = {$isFieldFormalParameterElement: 1};
  G.FunctionElementImpl.prototype = {$isFunctionElement: 1, $isLocalElement: 1, $isFunctionTypedElementImpl: 1};
  G.FunctionElementImpl_forFunctionTypedParameter.prototype = {};
  G.FunctionElementImpl_forLUB.prototype = {};
  G.FunctionTypedElementImpl.prototype = {$isElement0: 1, $isFunctionTypedElement: 1, $isTypeParameterizedElement: 1, $isElementImpl: 1, $isAnalysisTarget: 1};
  G.GenericFunctionTypeElementImpl.prototype = {$isFunctionTypedElement: 1, $isGenericFunctionTypeElement: 1, $isTypeParameterizedElement: 1, $isFunctionTypedElementImpl: 1, $isTypeParameterizedElementMixin: 1, $isTypeParameterSerializationContext: 1};
  G.GenericTypeAliasElementImpl.prototype = {$isFunctionTypeAliasElement: 1, $isFunctionTypedElement: 1, $isGenericTypeAliasElement: 1, $isTypeDefiningElement: 1, $isTypeParameterizedElement: 1, $isSimplyBoundableMixin: 1, $isTypeParameterizedElementMixin: 1, $isTypeParameterSerializationContext: 1};
  G.HideElementCombinatorImpl.prototype = {$isHideElementCombinator: 1, $isNamespaceCombinator: 1};
  G.ImportElementImpl.prototype = {$isImportElement: 1};
  G.LabelElementImpl.prototype = {$isLabelElement0: 1};
  G.LibraryElementImpl.prototype = {$isLibraryElement: 1};
  G.LibraryResolutionCapability.prototype = {};
  G.LibraryResynthesizerContext.prototype = {};
  G.LocalVariableElementImpl.prototype = {$isLocalElement: 1, $isLocalVariableElement: 1};
  G.MethodElementImpl.prototype = {$isClassMemberElement: 1, $isMethodElement: 1};
  G.MixinElementImpl.prototype = {};
  G.Modifier.prototype = {$isComparable: 1,
    $asComparable: function() {
      return [G.Modifier];
    }
  };
  G.MultiplyDefinedElementImpl.prototype = {$isElement0: 1, $isMultiplyDefinedElement: 1, $isAnalysisTarget: 1};
  G.MultiplyInheritedMethodElementImpl.prototype = {$isMultiplyInheritedExecutableElement: 1};
  G.MultiplyInheritedPropertyAccessorElementImpl.prototype = {$isMultiplyInheritedExecutableElement: 1};
  G.NonParameterVariableElementImpl.prototype = {};
  G.ParameterElementImpl.prototype = {$isLocalElement: 1, $isParameterElement: 1, $isParameterElementMixin: 1};
  G.ParameterElementImpl_ofImplicitSetter.prototype = {};
  G.ParameterElementMixin.prototype = {$isElement0: 1, $isLocalElement: 1, $isParameterElement: 1, $isVariableElement: 1, $isConstantEvaluationTarget: 1, $isAnalysisTarget: 1};
  G.PrefixElementImpl.prototype = {$isPrefixElement: 1};
  G.PropertyAccessorElementImpl.prototype = {$isPropertyAccessorElement: 1};
  G.PropertyAccessorElementImpl_ImplicitGetter.prototype = {};
  G.PropertyAccessorElementImpl_ImplicitSetter.prototype = {};
  G.PropertyInducingElementImpl.prototype = {$isPropertyInducingElement: 1};
  G.ResynthesizerContext.prototype = {};
  G.ShowElementCombinatorImpl.prototype = {$isNamespaceCombinator: 1, $isShowElementCombinator: 1};
  G.SimplyBoundableMixin.prototype = {$isElement0: 1, $isTypeParameterizedElement: 1, $isAnalysisTarget: 1};
  G.TopLevelVariableElementImpl.prototype = {$isTopLevelVariableElement: 1};
  G.TypeParameterElementImpl.prototype = {$isTypeDefiningElement: 1, $isTypeParameterElement: 1};
  G.TypeParameterizedElementMixin.prototype = {$isElement0: 1, $isTypeParameterizedElement: 1, $isElementImpl: 1, $isTypeParameterSerializationContext: 1, $isAnalysisTarget: 1};
  G.TypeParameterSerializationContext.prototype = {};
  G.UnitExplicitTopLevelAccessors.prototype = {};
  G.UnitExplicitTopLevelVariables.prototype = {};
  G.UriReferencedElementImpl.prototype = {$isUriReferencedElement: 1};
  G.VariableElementImpl.prototype = {$isVariableElement: 1, $isConstantEvaluationTarget: 1};
  G._ClassElementImpl_AbstractClassElementImpl_TypeParameterizedElementMixin.prototype = {$isTypeParameterizedElementMixin: 1, $isTypeParameterSerializationContext: 1};
  G._ClassElementImpl_AbstractClassElementImpl_TypeParameterizedElementMixin_SimplyBoundableMixin.prototype = {$isSimplyBoundableMixin: 1, $isTypeParameterizedElementMixin: 1, $isTypeParameterSerializationContext: 1};
  G._ConstFieldElementImpl_FieldElementImpl_ConstVariableElement.prototype = {$isConstVariableElement: 1};
  G._ConstLocalVariableElementImpl_LocalVariableElementImpl_ConstVariableElement.prototype = {$isConstVariableElement: 1};
  G._ConstTopLevelVariableElementImpl_TopLevelVariableElementImpl_ConstVariableElement.prototype = {$isConstVariableElement: 1};
  G._DefaultFieldFormalParameterElementImpl_FieldFormalParameterElementImpl_ConstVariableElement.prototype = {$isConstVariableElement: 1};
  G._DefaultParameterElementImpl_ParameterElementImpl_ConstVariableElement.prototype = {$isConstVariableElement: 1};
  G._ExecutableElementImpl_ElementImpl_TypeParameterizedElementMixin.prototype = {$isTypeParameterizedElement: 1, $isTypeParameterizedElementMixin: 1, $isTypeParameterSerializationContext: 1};
  G._GenericFunctionTypeElementImpl_ElementImpl_TypeParameterizedElementMixin.prototype = {$isTypeParameterizedElement: 1, $isTypeParameterizedElementMixin: 1, $isTypeParameterSerializationContext: 1};
  G._GenericTypeAliasElementImpl_ElementImpl_TypeParameterizedElementMixin.prototype = {$isTypeParameterizedElement: 1, $isTypeParameterizedElementMixin: 1, $isTypeParameterSerializationContext: 1};
  G._GenericTypeAliasElementImpl_ElementImpl_TypeParameterizedElementMixin_SimplyBoundableMixin.prototype = {$isTypeParameterizedElement: 1, $isSimplyBoundableMixin: 1, $isTypeParameterizedElementMixin: 1, $isTypeParameterSerializationContext: 1};
  G._ParameterElementImpl_VariableElementImpl_ParameterElementMixin.prototype = {$isLocalElement: 1, $isParameterElement: 1, $isParameterElementMixin: 1};
  K.ClassElementHandle.prototype = {$isClassElement: 1, $isTypeDefiningElement: 1, $isTypeParameterizedElement: 1};
  K.CompilationUnitElementHandle.prototype = {$isCompilationUnitElement: 1, $isUriReferencedElement: 1};
  K.ConstructorElementHandle.prototype = {$isClassMemberElement: 1, $isConstructorElement: 1, $isConstantEvaluationTarget: 1};
  K.ElementHandle.prototype = {$isElement0: 1, $isAnalysisTarget: 1};
  K.ElementResynthesizer.prototype = {};
  K.ExecutableElementHandle.prototype = {$isExecutableElement: 1, $isFunctionTypedElement: 1, $isTypeParameterizedElement: 1};
  K.ExportElementHandle.prototype = {$isExportElement: 1, $isUriReferencedElement: 1};
  K.FieldElementHandle.prototype = {$isClassMemberElement: 1, $isFieldElement: 1};
  K.FunctionElementHandle.prototype = {$isFunctionElement: 1, $isLocalElement: 1};
  K.FunctionTypeAliasElementHandle.prototype = {$isFunctionTypeAliasElement: 1, $isFunctionTypedElement: 1, $isTypeDefiningElement: 1, $isTypeParameterizedElement: 1};
  K.GenericTypeAliasElementHandle.prototype = {$isFunctionTypeAliasElement: 1, $isFunctionTypedElement: 1, $isGenericTypeAliasElement: 1, $isTypeDefiningElement: 1, $isTypeParameterizedElement: 1};
  K.ImportElementHandle.prototype = {$isImportElement: 1, $isUriReferencedElement: 1};
  K.LabelElementHandle.prototype = {$isLabelElement0: 1};
  K.LibraryElementHandle.prototype = {$isLibraryElement: 1};
  K.LocalVariableElementHandle.prototype = {$isLocalElement: 1, $isLocalVariableElement: 1};
  K.MethodElementHandle.prototype = {$isClassMemberElement: 1, $isMethodElement: 1};
  K.ParameterElementHandle.prototype = {$isLocalElement: 1, $isParameterElement: 1, $isParameterElementMixin: 1};
  K.PrefixElementHandle.prototype = {$isPrefixElement: 1};
  K.PropertyAccessorElementHandle.prototype = {$isPropertyAccessorElement: 1};
  K.PropertyInducingElementHandle.prototype = {$isPropertyInducingElement: 1};
  K.TopLevelVariableElementHandle.prototype = {$isTopLevelVariableElement: 1};
  K.TypeParameterElementHandle.prototype = {$isTypeDefiningElement: 1, $isTypeParameterElement: 1};
  K.VariableElementHandle.prototype = {$isVariableElement: 1, $isConstantEvaluationTarget: 1};
  K._ParameterElementHandle_VariableElementHandle_ParameterElementMixin.prototype = {$isLocalElement: 1, $isParameterElement: 1, $isParameterElementMixin: 1};
  Z.Conflict.prototype = {};
  Z.InheritanceManager2.prototype = {};
  Z.Interface.prototype = {};
  Z.Name.prototype = {};
  O.ConstructorMember.prototype = {$isClassMemberElement: 1, $isConstructorElement: 1, $isConstantEvaluationTarget: 1};
  O.ExecutableMember.prototype = {$isExecutableElement: 1, $isFunctionTypedElement: 1, $isTypeParameterizedElement: 1};
  O.FieldFormalParameterMember.prototype = {$isFieldFormalParameterElement: 1};
  O.FieldMember.prototype = {$isClassMemberElement: 1, $isFieldElement: 1, $isPropertyInducingElement: 1};
  O.FunctionMember.prototype = {$isFunctionElement: 1, $isLocalElement: 1};
  O.Member.prototype = {$isElement0: 1, $isAnalysisTarget: 1};
  O.MethodMember.prototype = {$isClassMemberElement: 1, $isMethodElement: 1};
  O.ParameterMember.prototype = {$isLocalElement: 1, $isParameterElement: 1, $isParameterElementMixin: 1};
  O.PropertyAccessorMember.prototype = {$isPropertyAccessorElement: 1};
  O.TypeParameterMember.prototype = {$isTypeDefiningElement: 1, $isTypeParameterElement: 1};
  O.VariableMember.prototype = {$isVariableElement: 1, $isConstantEvaluationTarget: 1};
  O._ParameterMember_VariableMember_ParameterElementMixin.prototype = {$isLocalElement: 1, $isParameterElement: 1, $isParameterElementMixin: 1};
  F.BottomTypeImpl.prototype = {};
  F.CircularFunctionTypeImpl.prototype = {$isFunctionType: 1, $isParameterizedType: 1, $isFunctionTypeImpl: 1, $is_FunctionTypeImplLazy: 1};
  F.CircularTypeImpl.prototype = {};
  F.DeferredFunctionTypeImpl.prototype = {};
  F.DynamicTypeImpl.prototype = {};
  F.FunctionTypeImpl.prototype = {$isFunctionType: 1, $isParameterizedType: 1};
  F.InterfaceTypeImpl.prototype = {$isInterfaceType: 1, $isParameterizedType: 1};
  F.Nullability.prototype = {};
  F.TypeImpl0.prototype = {$isDartType: 1};
  F.TypeParameterTypeImpl.prototype = {$isTypeParameterType: 1};
  F.UndefinedTypeImpl.prototype = {};
  F.VoidType.prototype = {$isDartType: 1};
  F.VoidTypeImpl.prototype = {$isVoidType: 1};
  F._FunctionTypeImplLazy.prototype = {};
  F._FunctionTypeImplStrict.prototype = {};
  O.HintCode.prototype = {};
  X.LintCode.prototype = {};
  E.ParserErrorCode.prototype = {};
  F.TodoCode.prototype = {};
  M.ExitDetector.prototype = {
    $asAstVisitor: function() {
      return [P.bool];
    },
    $asGeneralizingAstVisitor: function() {
      return [P.bool];
    },
    $asUIAsCodeVisitorMixin: function() {
      return [P.bool];
    },
    $as_GeneralizingAstVisitor_Object_UIAsCodeVisitorMixin: function() {
      return [P.bool];
    }
  };
  R.InheritanceManager.prototype = {};
  R.MemberMap.prototype = {};
  M.MethodInvocationResolver.prototype = {};
  S.BlockScope.prototype = {};
  S.ClassScope.prototype = {};
  S.ConstructorInitializerScope.prototype = {};
  S.EnclosedScope.prototype = {};
  S.FunctionScope.prototype = {};
  S.FunctionTypeScope.prototype = {};
  S.ImplicitLabelScope.prototype = {};
  S.LabelScope.prototype = {};
  S.LibraryImportScope.prototype = {};
  S.LibraryScope.prototype = {};
  S.Namespace.prototype = {};
  S.NamespaceBuilder.prototype = {};
  S.PrefixedNamespace.prototype = {$isNamespace: 1};
  S.Scope.prototype = {};
  S.TypeParameterScope.prototype = {};
  D.CharacterRangeReader.prototype = {};
  O.Scanner.prototype = {};
  S.SdkPatcher.prototype = {};
  E.AbstractDartSdk.prototype = {$isDartSdk: 1};
  E.EmbedderSdk.prototype = {};
  E.FolderBasedDartSdk.prototype = {};
  E.SdkExtensionFinder.prototype = {};
  E.SdkLibrariesReader.prototype = {};
  V.AnalyzerError.prototype = {$isException: 1};
  V.AnalyzerErrorGroup.prototype = {$isException: 1};
  A.CheckedModeCompileTimeErrorCode.prototype = {};
  A.CompileTimeErrorCode.prototype = {};
  A.StaticTypeWarningCode.prototype = {};
  A.StaticWarningCode.prototype = {};
  A.StrongModeCode.prototype = {};
  R.InheritanceOverrideVerifier.prototype = {};
  R._ClassVerifier.prototype = {};
  T.PendingError.prototype = {};
  T.PendingMissingRequiredParameterError.prototype = {$isPendingError: 1};
  G.AstBuilder.prototype = {};
  G._ConstructorNameWithInvalidTypeArgs.prototype = {};
  G._InvalidCollectionElement.prototype = {$isAstNode: 1, $isCollectionElement: 1, $isSyntacticEntity: 1};
  G._Modifiers.prototype = {};
  G._OperatorName.prototype = {};
  G._OptionalFormalParameters.prototype = {};
  G._ParameterDefaultValue.prototype = {};
  G._RedirectingFactoryBody.prototype = {};
  N.FastaErrorReporter.prototype = {};
  O.ToAnalyzerTokenStreamConverter.prototype = {};
  E.ResourceUriResolver.prototype = {};
  L.ConstantEvaluator0.prototype = {};
  A.DeclarationResolver.prototype = {
    $asAstVisitor: function() {
      return [-1];
    },
    $asRecursiveAstVisitor: function() {
      return [-1];
    },
    $asUIAsCodeVisitorMixin: function() {
      return [-1];
    },
    $as_RecursiveAstVisitor_Object_UIAsCodeVisitorMixin: function() {
      return [-1];
    }
  };
  A.ElementWalker.prototype = {};
  A._ElementMismatchException.prototype = {};
  X.ElementResolver.prototype = {
    $asAstVisitor: function() {
      return [-1];
    },
    $asSimpleAstVisitor: function() {
      return [-1];
    },
    $asUIAsCodeVisitorMixin: function() {
      return [-1];
    },
    $as_SimpleAstVisitor_Object_UIAsCodeVisitorMixin: function() {
      return [-1];
    }
  };
  X.SyntheticIdentifier.prototype = {};
  O.AnalysisContext0.prototype = {};
  O.AnalysisDelta.prototype = {};
  O.AnalysisEngine.prototype = {};
  O.AnalysisErrorInfo.prototype = {};
  O.AnalysisErrorInfoImpl.prototype = {$isAnalysisErrorInfo: 1};
  O.AnalysisLevel.prototype = {$isComparable: 1,
    $asComparable: function() {
      return [O.AnalysisLevel];
    }
  };
  O.AnalysisListener.prototype = {};
  O.AnalysisNotScheduledError.prototype = {$isException: 1};
  O.AnalysisOptions.prototype = {};
  O.AnalysisOptionsImpl.prototype = {$isAnalysisOptions: 1};
  O.AnalysisResult1.prototype = {};
  O.CacheConsistencyValidationStatistics.prototype = {};
  O.CacheConsistencyValidator.prototype = {};
  O.CacheState.prototype = {$isComparable: 1,
    $asComparable: function() {
      return [O.CacheState];
    }
  };
  O.ChangeNotice.prototype = {$isAnalysisErrorInfo: 1};
  O.ChangeNoticeImpl.prototype = {$isAnalysisErrorInfo: 1, $isChangeNotice: 1};
  O.ChangeSet.prototype = {};
  O.ChangeSet_ContentChange.prototype = {};
  O.ComputedResult.prototype = {};
  O.ImplicitAnalysisEvent.prototype = {};
  O.InternalAnalysisContext.prototype = {$isAnalysisContext0: 1};
  O.Logger.prototype = {};
  O.NullLogger.prototype = {$isLogger: 1};
  O.ObsoleteSourceAnalysisException.prototype = {};
  O.PerformanceStatistics.prototype = {};
  O.ResolutionEraser.prototype = {
    $asAstVisitor: function() {
      return [-1];
    },
    $asGeneralizingAstVisitor: function() {
      return [-1];
    },
    $asUIAsCodeVisitorMixin: function() {
      return [-1];
    },
    $as_GeneralizingAstVisitor_Object_UIAsCodeVisitorMixin: function() {
      return [-1];
    }
  };
  O.ResultChangedEvent.prototype = {};
  O.SourcesChangedEvent.prototype = {};
  R.ErrorVerifier.prototype = {
    $asAstVisitor: function() {
      return [-1];
    },
    $asRecursiveAstVisitor: function() {
      return [-1];
    },
    $asUIAsCodeVisitorMixin: function() {
      return [-1];
    },
    $as_RecursiveAstVisitor_Object_UIAsCodeVisitorMixin: function() {
      return [-1];
    }
  };
  R.HiddenElements.prototype = {};
  R.RequiredConstantsComputer.prototype = {
    $asAstVisitor: function() {
    },
    $asRecursiveAstVisitor: function() {
    },
    $asUIAsCodeVisitorMixin: function() {
    },
    $as_RecursiveAstVisitor_Object_UIAsCodeVisitorMixin: function() {
    }
  };
  R._HasTypedefSelfReferenceVisitor.prototype = {
    $asElementVisitor: function() {
      return [-1];
    },
    $asGeneralizingElementVisitor: function() {
      return [-1];
    }
  };
  R._InvocationCollector.prototype = {
    $asAstVisitor: function() {
    },
    $asRecursiveAstVisitor: function() {
    },
    $asUIAsCodeVisitorMixin: function() {
    },
    $as_RecursiveAstVisitor_Object_UIAsCodeVisitorMixin: function() {
    }
  };
  R._UninstantiatedBoundChecker.prototype = {
    $asAstVisitor: function() {
    },
    $asRecursiveAstVisitor: function() {
    },
    $asUIAsCodeVisitorMixin: function() {
    },
    $as_RecursiveAstVisitor_Object_UIAsCodeVisitorMixin: function() {
    }
  };
  L.ResolutionContext.prototype = {};
  L.ResolutionContextBuilder.prototype = {};
  E.MappedInterner.prototype = {$isInterner: 1};
  F.Character.prototype = {};
  F.Enum.prototype = {$isComparable: 1};
  F.PrintStringWriter.prototype = {};
  F.PrintWriter.prototype = {};
  Y.FileNameUtilities.prototype = {};
  Y.StringUtilities.prototype = {};
  Y.UUID.prototype = {};
  K.FileUtilities2.prototype = {};
  K.OSUtilities.prototype = {};
  E.JavaFile.prototype = {};
  E.JavaSystemIO.prototype = {};
  X.CommentAndMetadata.prototype = {};
  X.FinalConstVarOrType.prototype = {};
  X.Modifiers.prototype = {};
  X.Parser.prototype = {};
  X._TooDeepTreeError.prototype = {};
  X.ParserAdapter.prototype = {$isParser: 1};
  X._Parser2.prototype = {};
  L.AstRewriteVisitor.prototype = {};
  L.BestPracticesVerifier.prototype = {
    $asAstVisitor: function() {
      return [-1];
    },
    $asRecursiveAstVisitor: function() {
      return [-1];
    },
    $asUIAsCodeVisitorMixin: function() {
      return [-1];
    },
    $as_RecursiveAstVisitor_Object_UIAsCodeVisitorMixin: function() {
      return [-1];
    }
  };
  L.BuildLibraryElementUtils.prototype = {};
  L.Dart2JSVerifier.prototype = {
    $asAstVisitor: function() {
      return [-1];
    },
    $asRecursiveAstVisitor: function() {
      return [-1];
    },
    $asUIAsCodeVisitorMixin: function() {
      return [-1];
    },
    $as_RecursiveAstVisitor_Object_UIAsCodeVisitorMixin: function() {
      return [-1];
    }
  };
  L.DeadCodeVerifier.prototype = {
    $asAstVisitor: function() {
      return [-1];
    },
    $asRecursiveAstVisitor: function() {
      return [-1];
    },
    $asUIAsCodeVisitorMixin: function() {
      return [-1];
    },
    $as_RecursiveAstVisitor_Object_UIAsCodeVisitorMixin: function() {
      return [-1];
    }
  };
  L.DirectiveResolver.prototype = {
    $asAstVisitor: function() {
    },
    $asSimpleAstVisitor: function() {
    },
    $asUIAsCodeVisitorMixin: function() {
    },
    $as_SimpleAstVisitor_Object_UIAsCodeVisitorMixin: function() {
    }
  };
  L.ElementHolder.prototype = {};
  L.EnumMemberBuilder.prototype = {
    $asAstVisitor: function() {
      return [-1];
    },
    $asRecursiveAstVisitor: function() {
      return [-1];
    },
    $asUIAsCodeVisitorMixin: function() {
      return [-1];
    },
    $as_RecursiveAstVisitor_Object_UIAsCodeVisitorMixin: function() {
      return [-1];
    }
  };
  L.GatherUsedImportedElementsVisitor.prototype = {
    $asAstVisitor: function() {
    },
    $asRecursiveAstVisitor: function() {
    },
    $asUIAsCodeVisitorMixin: function() {
    },
    $as_RecursiveAstVisitor_Object_UIAsCodeVisitorMixin: function() {
    }
  };
  L.GatherUsedLocalElementsVisitor.prototype = {
    $asAstVisitor: function() {
    },
    $asRecursiveAstVisitor: function() {
    },
    $asUIAsCodeVisitorMixin: function() {
    },
    $as_RecursiveAstVisitor_Object_UIAsCodeVisitorMixin: function() {
    }
  };
  L.ImportsVerifier.prototype = {};
  L.InferenceContext.prototype = {};
  L.INIT_STATE.prototype = {$isComparable: 1,
    $asComparable: function() {
      return [L.INIT_STATE];
    }
  };
  L.InstanceFieldResolverVisitor.prototype = {};
  L.OverrideVerifier.prototype = {
    $asAstVisitor: function() {
    },
    $asRecursiveAstVisitor: function() {
    },
    $asUIAsCodeVisitorMixin: function() {
    },
    $as_RecursiveAstVisitor_Object_UIAsCodeVisitorMixin: function() {
    }
  };
  L.PartialResolverVisitor.prototype = {};
  L.RedirectingConstructorKind.prototype = {$isComparable: 1,
    $asComparable: function() {
      return [L.RedirectingConstructorKind];
    }
  };
  L.ResolverErrorCode.prototype = {};
  L.ResolverVisitor.prototype = {};
  L.ScopedVisitor.prototype = {
    $asAstVisitor: function() {
      return [-1];
    },
    $asUnifyingAstVisitor: function() {
      return [-1];
    },
    $asUIAsCodeVisitorMixin: function() {
      return [-1];
    },
    $as_UnifyingAstVisitor_Object_UIAsCodeVisitorMixin: function() {
      return [-1];
    }
  };
  L.ToDoFinder.prototype = {};
  L.TypeNameResolver.prototype = {};
  L.TypeParameterBoundsResolver.prototype = {};
  L.TypePromotionManager.prototype = {};
  L.TypePromotionManager_TypePromoteScope.prototype = {};
  L.TypeProvider.prototype = {};
  L.TypeProviderBase.prototype = {$isTypeProvider: 1};
  L.TypeProviderImpl.prototype = {};
  L.TypeResolverMode.prototype = {};
  L.TypeResolverVisitor.prototype = {};
  L.UnusedLocalElementsVerifier.prototype = {
    $asAstVisitor: function() {
    },
    $asRecursiveAstVisitor: function() {
    },
    $asUIAsCodeVisitorMixin: function() {
    },
    $as_RecursiveAstVisitor_Object_UIAsCodeVisitorMixin: function() {
    }
  };
  L.UsedImportedElements.prototype = {};
  L.UsedLocalElements.prototype = {};
  L.VariableResolverVisitor.prototype = {};
  L._InvalidAccessVerifier.prototype = {};
  L._LabelTracker.prototype = {};
  L._LeafElements.prototype = {};
  L._LiteralResolution.prototype = {};
  L._LiteralResolutionKind.prototype = {};
  L._ResolverVisitor_isVariableAccessedInClosure.prototype = {
    $asAstVisitor: function() {
      return [-1];
    },
    $asRecursiveAstVisitor: function() {
      return [-1];
    },
    $asUIAsCodeVisitorMixin: function() {
      return [-1];
    },
    $as_RecursiveAstVisitor_Object_UIAsCodeVisitorMixin: function() {
      return [-1];
    }
  };
  L._ResolverVisitor_isVariablePotentiallyMutatedIn.prototype = {
    $asAstVisitor: function() {
      return [-1];
    },
    $asRecursiveAstVisitor: function() {
      return [-1];
    },
    $asUIAsCodeVisitorMixin: function() {
      return [-1];
    },
    $as_RecursiveAstVisitor_Object_UIAsCodeVisitorMixin: function() {
      return [-1];
    }
  };
  E.DartSdk.prototype = {};
  E.DartSdkManager.prototype = {};
  E.LibraryMap.prototype = {};
  E.SdkDescription.prototype = {};
  E.SdkLibrariesReader_LibraryBuilder.prototype = {
    $asAstVisitor: function() {
      return [-1];
    },
    $asRecursiveAstVisitor: function() {
      return [-1];
    },
    $asUIAsCodeVisitorMixin: function() {
      return [-1];
    },
    $as_RecursiveAstVisitor_Object_UIAsCodeVisitorMixin: function() {
      return [-1];
    }
  };
  E.SdkLibrary.prototype = {};
  E.SdkLibraryImpl.prototype = {$isSdkLibrary: 1};
  Z.BasicSource.prototype = {};
  Z.ContentCache.prototype = {};
  Z.CustomUriResolver.prototype = {};
  Z.DartUriResolver.prototype = {};
  Z.LineInfo_Location.prototype = {};
  Z.LocalSourcePredicate.prototype = {};
  Z.LocalSourcePredicate_FALSE.prototype = {$isLocalSourcePredicate: 1};
  Z.LocalSourcePredicate_NOT_SDK.prototype = {$isLocalSourcePredicate: 1};
  Z.LocalSourcePredicate_TRUE.prototype = {$isLocalSourcePredicate: 1};
  Z.NonExistingSource.prototype = {};
  Z.Source.prototype = {$isAnalysisTarget: 1};
  Z.Source_ContentReceiver.prototype = {};
  Z.SourceContainer.prototype = {};
  Z.SourceFactory.prototype = {};
  Z.SourceKind.prototype = {$isComparable: 1,
    $asComparable: function() {
      return [Z.SourceKind];
    }
  };
  Z.UriKind.prototype = {$isComparable: 1,
    $asComparable: function() {
      return [Z.UriKind];
    }
  };
  Z.UriResolver.prototype = {};
  X.ExplicitSourceResolver.prototype = {};
  X.FileBasedSource.prototype = {};
  X.FileUriResolver.prototype = {};
  X.LocalSourcePredicate0.prototype = {};
  X.LocalSourcePredicate_FALSE0.prototype = {$isLocalSourcePredicate0: 1};
  X.LocalSourcePredicate_NOT_SDK0.prototype = {$isLocalSourcePredicate0: 1};
  X.LocalSourcePredicate_TRUE0.prototype = {$isLocalSourcePredicate0: 1};
  X.PackageUriResolver.prototype = {};
  X.RelativeFileUriResolver.prototype = {};
  S.StaticTypeAnalyzer.prototype = {
    $asAstVisitor: function() {
      return [-1];
    },
    $asSimpleAstVisitor: function() {
      return [-1];
    },
    $asUIAsCodeVisitorMixin: function() {
      return [-1];
    },
    $as_SimpleAstVisitor_Object_UIAsCodeVisitorMixin: function() {
      return [-1];
    }
  };
  S._InferredCollectionElementTypeInformation.prototype = {};
  N.AstTestFactory.prototype = {};
  B.ElementFactory.prototype = {};
  X.TokenFactory.prototype = {};
  B.TimestampedData.prototype = {};
  N.Dart2TypeSystem.prototype = {};
  N.GenericInferrer.prototype = {};
  N.TypeComparison.prototype = {};
  N.TypeSystem0.prototype = {$isTypeSystem: 1};
  N.UnknownInferredType.prototype = {};
  N.UnknownInferredTypeElement.prototype = {$isTypeDefiningElement: 1};
  N._TypeConstraint.prototype = {};
  N._TypeConstraintFromArgument.prototype = {};
  N._TypeConstraintFromExtendsClause.prototype = {};
  N._TypeConstraintFromFunctionContext.prototype = {};
  N._TypeConstraintFromReturnType.prototype = {};
  N._TypeConstraintOrigin.prototype = {};
  N._TypeRange.prototype = {};
  L.BooleanArray.prototype = {};
  L.MapIterator.prototype = {};
  L.MultipleMapIterator.prototype = {$isMapIterator: 1};
  L.SingleMapIterator.prototype = {$isMapIterator: 1};
  L.TokenMap.prototype = {};
  Q.ParameterKind.prototype = {$isComparable: 1,
    $asComparable: function() {
      return [Q.ParameterKind];
    }
  };
  K.JenkinsSmiHash.prototype = {};
  K.LimitedQueue.prototype = {};
  K.PerformanceTag.prototype = {};
  K._PerformanceTagImpl.prototype = {$isPerformanceTag: 1};
  G.SdkConstraintExtractor.prototype = {};
  B.SdkConstraintVerifier.prototype = {
    $asAstVisitor: function() {
      return [-1];
    },
    $asRecursiveAstVisitor: function() {
      return [-1];
    },
    $asUIAsCodeVisitorMixin: function() {
      return [-1];
    },
    $as_RecursiveAstVisitor_Object_UIAsCodeVisitorMixin: function() {
      return [-1];
    }
  };
  O.HtmlErrorCode.prototype = {};
  O.HtmlWarningCode.prototype = {};
  Q.IgnoreInfo.prototype = {};
  B.DriverOptions.prototype = {};
  B.LintDriver.prototype = {};
  B.StdLogger.prototype = {};
  T.LintConfig.prototype = {};
  T.RuleConfig.prototype = {};
  T._LintConfig.prototype = {$isLintConfig: 1};
  T._RuleConfig.prototype = {};
  F.CamelCaseString.prototype = {};
  F.DartLinter.prototype = {$isAnalysisErrorListener: 1};
  F.FileGlobFilter.prototype = {};
  F.Group.prototype = {$isComparable: 1,
    $asComparable: function() {
      return [F.Group];
    }
  };
  F.Hyperlink.prototype = {};
  F.LinterContext.prototype = {};
  F.LinterContextImpl.prototype = {$isLinterContext: 1};
  F.LinterContextUnit.prototype = {};
  F.LinterException.prototype = {$isException: 1};
  F.LinterOptions.prototype = {};
  F.LintFilter.prototype = {};
  F.LintRule.prototype = {$isComparable: 1,
    $asComparable: function() {
      return [F.LintRule];
    }
  };
  F.Maturity.prototype = {$isComparable: 1,
    $asComparable: function() {
      return [F.Maturity];
    }
  };
  F.NodeLintRule.prototype = {};
  F.NodeLintRuleWithContext.prototype = {};
  F.PrintingReporter.prototype = {$isLogger: 1, $isReporter: 1};
  F.Reporter.prototype = {};
  F.SourceLinter.prototype = {$isAnalysisErrorListener: 1, $isDartLinter: 1};
  F._LintCode.prototype = {};
  F.LinterVisitor.prototype = {
    $asAstVisitor: function() {
      return [-1];
    },
    $asRecursiveAstVisitor: function() {
      return [-1];
    },
    $asUIAsCodeVisitorMixin: function() {
      return [-1];
    },
    $as_RecursiveAstVisitor_Object_UIAsCodeVisitorMixin: function() {
      return [-1];
    }
  };
  F.NodeLintRegistry.prototype = {};
  F._Subscription.prototype = {};
  X.LinterRuleOptionsValidator.prototype = {};
  K.DartProject.prototype = {};
  K.ProjectVisitor.prototype = {};
  K._ApiModel.prototype = {};
  B.PSDependency.prototype = {};
  B.PSDependencyList.prototype = {$isIterableMixin: 1,
    $asIterableMixin: function() {
      return [B.PSDependency];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [B.PSDependency];
    }
  };
  B.PSEntry.prototype = {};
  B.PSGitRepo.prototype = {};
  B.PSHost.prototype = {};
  B.PSNode.prototype = {};
  B.PSNodeList.prototype = {$isIterableMixin: 1,
    $asIterableMixin: function() {
      return [B.PSNode];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [B.PSNode];
    }
  };
  B.Pubspec.prototype = {};
  B.PubspecVisitor.prototype = {};
  B._PSDependency.prototype = {};
  B._PSDependencyList.prototype = {};
  B._PSGitRepo.prototype = {$isPSGitRepo: 1};
  B._PSHost.prototype = {$isPSHost: 1};
  B._PSNode.prototype = {$isPSNode: 1};
  B._PSNodeList.prototype = {};
  B._Pubspec.prototype = {$isPubspec: 1};
  B._StringBuilder.prototype = {};
  B._PSDependencyList_Object_IterableMixin.prototype = {$isIterableMixin: 1,
    $asIterableMixin: function() {
      return [B.PSDependency];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [B.PSDependency];
    }
  };
  B._PSNodeList_Object_IterableMixin.prototype = {$isIterableMixin: 1,
    $asIterableMixin: function() {
      return [B.PSNode];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [B.PSNode];
    }
  };
  E.Registry.prototype = {$isIterableMixin: 1,
    $asIterableMixin: function() {
      return [F.LintRule];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [F.LintRule];
    }
  };
  E._Registry_Object_IterableMixin.prototype = {$isIterableMixin: 1,
    $asIterableMixin: function() {
      return [F.LintRule];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [F.LintRule];
    }
  };
  M.Spelunker.prototype = {};
  M._ErrorListener.prototype = {$isAnalysisErrorListener: 1};
  M._SourceVisitor.prototype = {
    $asAstVisitor: function() {
    },
    $asGeneralizingAstVisitor: function() {
    },
    $asUIAsCodeVisitorMixin: function() {
    },
    $as_GeneralizingAstVisitor_Object_UIAsCodeVisitorMixin: function() {
    }
  };
  B.OptionsValidator.prototype = {};
  A.Linter.prototype = {};
  A.LintRegistry.prototype = {};
  D.PackageMapUriResolver.prototype = {};
  B.FileSource.prototype = {};
  K.StringSource.prototype = {};
  D.ApiSignature.prototype = {};
  V.Id.prototype = {};
  V.SummaryClass.prototype = {};
  V.TopLevel.prototype = {};
  V.Variant.prototype = {};
  V.VariantId.prototype = {};
  Z.ExprBuilder.prototype = {};
  Q.BoolListReader.prototype = {
    $asReader: function() {
      return [[P.List, P.bool]];
    }
  };
  Q.BoolReader.prototype = {
    $asReader: function() {
      return [P.bool];
    }
  };
  Q.BufferContext.prototype = {};
  Q.Builder.prototype = {};
  Q.Float64ListReader.prototype = {
    $asReader: function() {
      return [[P.List, P.double]];
    }
  };
  Q.Int32Reader.prototype = {
    $asReader: function() {
      return [P.int];
    }
  };
  Q.Int8Reader.prototype = {
    $asReader: function() {
      return [P.int];
    }
  };
  Q.ListReader.prototype = {
    $asReader: function($E) {
      return [[P.List, $E]];
    }
  };
  Q.Offset.prototype = {};
  Q.Reader.prototype = {};
  Q.StringReader.prototype = {
    $asReader: function() {
      return [P.String];
    }
  };
  Q.TableReader.prototype = {};
  Q.Uint32ListReader.prototype = {
    $asReader: function() {
      return [[P.List, P.int]];
    }
  };
  Q.Uint32Reader.prototype = {
    $asReader: function() {
      return [P.int];
    }
  };
  Q.Uint8ListReader.prototype = {
    $asReader: function() {
      return [[P.List, P.int]];
    }
  };
  Q.Uint8Reader.prototype = {
    $asReader: function() {
      return [P.int];
    }
  };
  Q.Float64Reader.prototype = {
    $asReader: function() {
      return [P.double];
    }
  };
  Q._FbBoolList.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.bool];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [P.bool];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.bool];
    },
    $isList: 1,
    $asList: function() {
      return [P.bool];
    }
  };
  Q._FbFloat64List.prototype = {
    $asEfficientLengthIterable: function() {
      return [P.double];
    },
    $asListMixin: function() {
      return [P.double];
    },
    $asIterable: function() {
      return [P.double];
    },
    $asList: function() {
      return [P.double];
    },
    $as_FbList: function() {
      return [P.double];
    },
    $as__FbList_Object_ListMixin: function() {
      return [P.double];
    }
  };
  Q._FbGenericList.prototype = {};
  Q._FbList.prototype = {$isEfficientLengthIterable: 1, $isListMixin: 1, $isIterable: 1, $isList: 1};
  Q._FbUint32List.prototype = {
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $asListMixin: function() {
      return [P.int];
    },
    $asIterable: function() {
      return [P.int];
    },
    $asList: function() {
      return [P.int];
    },
    $as_FbList: function() {
      return [P.int];
    },
    $as__FbList_Object_ListMixin: function() {
      return [P.int];
    }
  };
  Q._FbUint8List.prototype = {
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $asListMixin: function() {
      return [P.int];
    },
    $asIterable: function() {
      return [P.int];
    },
    $asList: function() {
      return [P.int];
    },
    $as_FbList: function() {
      return [P.int];
    },
    $as__FbList_Object_ListMixin: function() {
      return [P.int];
    }
  };
  Q._VTable.prototype = {};
  Q.__FbBoolList_Object_ListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.bool];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [P.bool];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.bool];
    },
    $isList: 1,
    $asList: function() {
      return [P.bool];
    }
  };
  Q.__FbList_Object_ListMixin.prototype = {$isEfficientLengthIterable: 1, $isListMixin: 1, $isIterable: 1, $isList: 1};
  X._AvailableDeclarationKindReader.prototype = {
    $asReader: function() {
      return [B.AvailableDeclarationKind];
    }
  };
  X._EntityRefKindReader.prototype = {
    $asReader: function() {
      return [B.EntityRefKind];
    }
  };
  X._IndexNameKindReader.prototype = {
    $asReader: function() {
      return [B.IndexNameKind];
    }
  };
  X._IndexRelationKindReader.prototype = {
    $asReader: function() {
      return [B.IndexRelationKind];
    }
  };
  X._IndexSyntheticElementKindReader.prototype = {
    $asReader: function() {
      return [B.IndexSyntheticElementKind];
    }
  };
  X._LinkedNodeCommentTypeReader.prototype = {
    $asReader: function() {
      return [B.LinkedNodeCommentType];
    }
  };
  X._LinkedNodeFormalParameterKindReader.prototype = {
    $asReader: function() {
      return [B.LinkedNodeFormalParameterKind];
    }
  };
  X._LinkedNodeKindReader.prototype = {
    $asReader: function() {
      return [B.LinkedNodeKind];
    }
  };
  X._LinkedNodeTypeKindReader.prototype = {
    $asReader: function() {
      return [B.LinkedNodeTypeKind];
    }
  };
  X._ReferenceKindReader.prototype = {
    $asReader: function() {
      return [B.ReferenceKind];
    }
  };
  X._TopLevelInferenceErrorKindReader.prototype = {
    $asReader: function() {
      return [B.TopLevelInferenceErrorKind];
    }
  };
  X._TypedefStyleReader.prototype = {
    $asReader: function() {
      return [B.TypedefStyle];
    }
  };
  X._UnlinkedConstructorInitializerKindReader.prototype = {
    $asReader: function() {
      return [B.UnlinkedConstructorInitializerKind];
    }
  };
  X._UnlinkedExecutableKindReader.prototype = {
    $asReader: function() {
      return [B.UnlinkedExecutableKind];
    }
  };
  X._UnlinkedExprAssignOperatorReader.prototype = {
    $asReader: function() {
      return [B.UnlinkedExprAssignOperator];
    }
  };
  X._UnlinkedExprOperationReader.prototype = {
    $asReader: function() {
      return [B.UnlinkedExprOperation];
    }
  };
  X._UnlinkedParamKindReader.prototype = {
    $asReader: function() {
      return [B.UnlinkedParamKind];
    }
  };
  X._UnlinkedTokenKindReader.prototype = {
    $asReader: function() {
      return [B.UnlinkedTokenKind];
    }
  };
  X._UnlinkedTokenTypeReader.prototype = {
    $asReader: function() {
      return [B.UnlinkedTokenType];
    }
  };
  X.AnalysisDriverExceptionContextBuilder.prototype = {$isSummaryClass: 1, $is_AnalysisDriverExceptionContextMixin: 1, $isAnalysisDriverExceptionContext: 1};
  X._AnalysisDriverExceptionContextReader.prototype = {
    $asReader: function() {
      return [X._AnalysisDriverExceptionContextImpl];
    },
    $asTableReader: function() {
      return [X._AnalysisDriverExceptionContextImpl];
    }
  };
  X._AnalysisDriverExceptionContextImpl.prototype = {$isSummaryClass: 1, $is_AnalysisDriverExceptionContextMixin: 1, $isAnalysisDriverExceptionContext: 1};
  X._AnalysisDriverExceptionContextMixin.prototype = {$isSummaryClass: 1, $isAnalysisDriverExceptionContext: 1};
  X.AnalysisDriverExceptionFileBuilder.prototype = {$isSummaryClass: 1, $is_AnalysisDriverExceptionFileMixin: 1, $isAnalysisDriverExceptionFile: 1};
  X._AnalysisDriverExceptionFileReader.prototype = {
    $asReader: function() {
      return [X._AnalysisDriverExceptionFileImpl];
    },
    $asTableReader: function() {
      return [X._AnalysisDriverExceptionFileImpl];
    }
  };
  X._AnalysisDriverExceptionFileImpl.prototype = {$isSummaryClass: 1, $is_AnalysisDriverExceptionFileMixin: 1, $isAnalysisDriverExceptionFile: 1};
  X._AnalysisDriverExceptionFileMixin.prototype = {$isSummaryClass: 1, $isAnalysisDriverExceptionFile: 1};
  X.AnalysisDriverResolvedUnitBuilder.prototype = {$isSummaryClass: 1, $is_AnalysisDriverResolvedUnitMixin: 1, $isAnalysisDriverResolvedUnit: 1};
  X._AnalysisDriverResolvedUnitReader.prototype = {
    $asReader: function() {
      return [X._AnalysisDriverResolvedUnitImpl];
    },
    $asTableReader: function() {
      return [X._AnalysisDriverResolvedUnitImpl];
    }
  };
  X._AnalysisDriverResolvedUnitImpl.prototype = {$isSummaryClass: 1, $is_AnalysisDriverResolvedUnitMixin: 1, $isAnalysisDriverResolvedUnit: 1};
  X._AnalysisDriverResolvedUnitMixin.prototype = {$isSummaryClass: 1, $isAnalysisDriverResolvedUnit: 1};
  X.AnalysisDriverSubtypeBuilder.prototype = {$isSummaryClass: 1, $is_AnalysisDriverSubtypeMixin: 1, $isAnalysisDriverSubtype: 1};
  X._AnalysisDriverSubtypeReader.prototype = {
    $asReader: function() {
      return [X._AnalysisDriverSubtypeImpl];
    },
    $asTableReader: function() {
      return [X._AnalysisDriverSubtypeImpl];
    }
  };
  X._AnalysisDriverSubtypeImpl.prototype = {$isSummaryClass: 1, $is_AnalysisDriverSubtypeMixin: 1, $isAnalysisDriverSubtype: 1};
  X._AnalysisDriverSubtypeMixin.prototype = {$isSummaryClass: 1, $isAnalysisDriverSubtype: 1};
  X.AnalysisDriverUnitErrorBuilder.prototype = {$isSummaryClass: 1, $is_AnalysisDriverUnitErrorMixin: 1, $isAnalysisDriverUnitError: 1};
  X._AnalysisDriverUnitErrorReader.prototype = {
    $asReader: function() {
      return [X._AnalysisDriverUnitErrorImpl];
    },
    $asTableReader: function() {
      return [X._AnalysisDriverUnitErrorImpl];
    }
  };
  X._AnalysisDriverUnitErrorImpl.prototype = {$isSummaryClass: 1, $is_AnalysisDriverUnitErrorMixin: 1, $isAnalysisDriverUnitError: 1};
  X._AnalysisDriverUnitErrorMixin.prototype = {$isSummaryClass: 1, $isAnalysisDriverUnitError: 1};
  X.AnalysisDriverUnitIndexBuilder.prototype = {$isSummaryClass: 1, $is_AnalysisDriverUnitIndexMixin: 1, $isAnalysisDriverUnitIndex: 1};
  X._AnalysisDriverUnitIndexReader.prototype = {
    $asReader: function() {
      return [X._AnalysisDriverUnitIndexImpl];
    },
    $asTableReader: function() {
      return [X._AnalysisDriverUnitIndexImpl];
    }
  };
  X._AnalysisDriverUnitIndexImpl.prototype = {$isSummaryClass: 1, $is_AnalysisDriverUnitIndexMixin: 1, $isAnalysisDriverUnitIndex: 1};
  X._AnalysisDriverUnitIndexMixin.prototype = {$isSummaryClass: 1, $isAnalysisDriverUnitIndex: 1};
  X.AnalysisDriverUnlinkedUnitBuilder.prototype = {$isSummaryClass: 1, $is_AnalysisDriverUnlinkedUnitMixin: 1, $isAnalysisDriverUnlinkedUnit: 1};
  X._AnalysisDriverUnlinkedUnitReader.prototype = {
    $asReader: function() {
      return [X._AnalysisDriverUnlinkedUnitImpl];
    },
    $asTableReader: function() {
      return [X._AnalysisDriverUnlinkedUnitImpl];
    }
  };
  X._AnalysisDriverUnlinkedUnitImpl.prototype = {$isSummaryClass: 1, $is_AnalysisDriverUnlinkedUnitMixin: 1, $isAnalysisDriverUnlinkedUnit: 1};
  X._AnalysisDriverUnlinkedUnitMixin.prototype = {$isSummaryClass: 1, $isAnalysisDriverUnlinkedUnit: 1};
  X.AvailableDeclarationBuilder.prototype = {$isSummaryClass: 1, $is_AvailableDeclarationMixin: 1, $isAvailableDeclaration: 1};
  X._AvailableDeclarationReader.prototype = {
    $asReader: function() {
      return [X._AvailableDeclarationImpl];
    },
    $asTableReader: function() {
      return [X._AvailableDeclarationImpl];
    }
  };
  X._AvailableDeclarationImpl.prototype = {$isSummaryClass: 1, $is_AvailableDeclarationMixin: 1, $isAvailableDeclaration: 1};
  X._AvailableDeclarationMixin.prototype = {$isSummaryClass: 1, $isAvailableDeclaration: 1};
  X.AvailableFileBuilder.prototype = {$isSummaryClass: 1, $is_AvailableFileMixin: 1, $isAvailableFile: 1};
  X._AvailableFileReader.prototype = {
    $asReader: function() {
      return [X._AvailableFileImpl];
    },
    $asTableReader: function() {
      return [X._AvailableFileImpl];
    }
  };
  X._AvailableFileImpl.prototype = {$isSummaryClass: 1, $is_AvailableFileMixin: 1, $isAvailableFile: 1};
  X._AvailableFileMixin.prototype = {$isSummaryClass: 1, $isAvailableFile: 1};
  X.AvailableFileExportBuilder.prototype = {$isSummaryClass: 1, $is_AvailableFileExportMixin: 1, $isAvailableFileExport: 1};
  X._AvailableFileExportReader.prototype = {
    $asReader: function() {
      return [X._AvailableFileExportImpl];
    },
    $asTableReader: function() {
      return [X._AvailableFileExportImpl];
    }
  };
  X._AvailableFileExportImpl.prototype = {$isSummaryClass: 1, $is_AvailableFileExportMixin: 1, $isAvailableFileExport: 1};
  X._AvailableFileExportMixin.prototype = {$isSummaryClass: 1, $isAvailableFileExport: 1};
  X.AvailableFileExportCombinatorBuilder.prototype = {$isSummaryClass: 1, $is_AvailableFileExportCombinatorMixin: 1, $isAvailableFileExportCombinator: 1};
  X._AvailableFileExportCombinatorReader.prototype = {
    $asReader: function() {
      return [X._AvailableFileExportCombinatorImpl];
    },
    $asTableReader: function() {
      return [X._AvailableFileExportCombinatorImpl];
    }
  };
  X._AvailableFileExportCombinatorImpl.prototype = {$isSummaryClass: 1, $is_AvailableFileExportCombinatorMixin: 1, $isAvailableFileExportCombinator: 1};
  X._AvailableFileExportCombinatorMixin.prototype = {$isSummaryClass: 1, $isAvailableFileExportCombinator: 1};
  X.CodeRangeBuilder.prototype = {$isSummaryClass: 1, $is_CodeRangeMixin: 1, $isCodeRange: 1};
  X._CodeRangeReader.prototype = {
    $asReader: function() {
      return [X._CodeRangeImpl];
    },
    $asTableReader: function() {
      return [X._CodeRangeImpl];
    }
  };
  X._CodeRangeImpl.prototype = {$isSummaryClass: 1, $is_CodeRangeMixin: 1, $isCodeRange: 1};
  X._CodeRangeMixin.prototype = {$isSummaryClass: 1, $isCodeRange: 1};
  X.EntityRefBuilder.prototype = {$isSummaryClass: 1, $is_EntityRefMixin: 1, $isEntityRef: 1};
  X._EntityRefReader.prototype = {
    $asReader: function() {
      return [X._EntityRefImpl];
    },
    $asTableReader: function() {
      return [X._EntityRefImpl];
    }
  };
  X._EntityRefImpl.prototype = {$isSummaryClass: 1, $is_EntityRefMixin: 1, $isEntityRef: 1};
  X._EntityRefMixin.prototype = {$isSummaryClass: 1, $isEntityRef: 1};
  X.LinkedDependencyBuilder.prototype = {$isSummaryClass: 1, $is_LinkedDependencyMixin: 1, $isLinkedDependency: 1};
  X._LinkedDependencyReader.prototype = {
    $asReader: function() {
      return [X._LinkedDependencyImpl];
    },
    $asTableReader: function() {
      return [X._LinkedDependencyImpl];
    }
  };
  X._LinkedDependencyImpl.prototype = {$isSummaryClass: 1, $is_LinkedDependencyMixin: 1, $isLinkedDependency: 1};
  X._LinkedDependencyMixin.prototype = {$isSummaryClass: 1, $isLinkedDependency: 1};
  X.LinkedExportNameBuilder.prototype = {$isSummaryClass: 1, $is_LinkedExportNameMixin: 1, $isLinkedExportName: 1};
  X._LinkedExportNameReader.prototype = {
    $asReader: function() {
      return [X._LinkedExportNameImpl];
    },
    $asTableReader: function() {
      return [X._LinkedExportNameImpl];
    }
  };
  X._LinkedExportNameImpl.prototype = {$isSummaryClass: 1, $is_LinkedExportNameMixin: 1, $isLinkedExportName: 1};
  X._LinkedExportNameMixin.prototype = {$isSummaryClass: 1, $isLinkedExportName: 1};
  X.LinkedLibraryBuilder.prototype = {$isSummaryClass: 1, $is_LinkedLibraryMixin: 1, $isLinkedLibrary: 1};
  X._LinkedLibraryReader.prototype = {
    $asReader: function() {
      return [X._LinkedLibraryImpl];
    },
    $asTableReader: function() {
      return [X._LinkedLibraryImpl];
    }
  };
  X._LinkedLibraryImpl.prototype = {$isSummaryClass: 1, $is_LinkedLibraryMixin: 1, $isLinkedLibrary: 1};
  X._LinkedLibraryMixin.prototype = {$isSummaryClass: 1, $isLinkedLibrary: 1};
  X.LinkedNodeBuilder.prototype = {$isSummaryClass: 1, $is_LinkedNodeMixin: 1, $isLinkedNode: 1};
  X._LinkedNodeReader.prototype = {
    $asReader: function() {
      return [X._LinkedNodeImpl];
    },
    $asTableReader: function() {
      return [X._LinkedNodeImpl];
    }
  };
  X._LinkedNodeImpl.prototype = {$isSummaryClass: 1, $is_LinkedNodeMixin: 1, $isLinkedNode: 1};
  X._LinkedNodeMixin.prototype = {$isSummaryClass: 1, $isLinkedNode: 1};
  X.LinkedNodeBundleBuilder.prototype = {$isSummaryClass: 1, $is_LinkedNodeBundleMixin: 1, $isLinkedNodeBundle: 1};
  X._LinkedNodeBundleReader.prototype = {
    $asReader: function() {
      return [X._LinkedNodeBundleImpl];
    },
    $asTableReader: function() {
      return [X._LinkedNodeBundleImpl];
    }
  };
  X._LinkedNodeBundleImpl.prototype = {$isSummaryClass: 1, $is_LinkedNodeBundleMixin: 1, $isLinkedNodeBundle: 1};
  X._LinkedNodeBundleMixin.prototype = {$isSummaryClass: 1, $isLinkedNodeBundle: 1};
  X.LinkedNodeLibraryBuilder.prototype = {$isSummaryClass: 1, $is_LinkedNodeLibraryMixin: 1, $isLinkedNodeLibrary: 1};
  X._LinkedNodeLibraryReader.prototype = {
    $asReader: function() {
      return [X._LinkedNodeLibraryImpl];
    },
    $asTableReader: function() {
      return [X._LinkedNodeLibraryImpl];
    }
  };
  X._LinkedNodeLibraryImpl.prototype = {$isSummaryClass: 1, $is_LinkedNodeLibraryMixin: 1, $isLinkedNodeLibrary: 1};
  X._LinkedNodeLibraryMixin.prototype = {$isSummaryClass: 1, $isLinkedNodeLibrary: 1};
  X.LinkedNodeReferencesBuilder.prototype = {$isSummaryClass: 1, $is_LinkedNodeReferencesMixin: 1, $isLinkedNodeReferences: 1};
  X._LinkedNodeReferencesReader.prototype = {
    $asReader: function() {
      return [X._LinkedNodeReferencesImpl];
    },
    $asTableReader: function() {
      return [X._LinkedNodeReferencesImpl];
    }
  };
  X._LinkedNodeReferencesImpl.prototype = {$isSummaryClass: 1, $is_LinkedNodeReferencesMixin: 1, $isLinkedNodeReferences: 1};
  X._LinkedNodeReferencesMixin.prototype = {$isSummaryClass: 1, $isLinkedNodeReferences: 1};
  X.LinkedNodeTypeBuilder.prototype = {$isSummaryClass: 1, $is_LinkedNodeTypeMixin: 1, $isLinkedNodeType: 1};
  X._LinkedNodeTypeReader.prototype = {
    $asReader: function() {
      return [X._LinkedNodeTypeImpl];
    },
    $asTableReader: function() {
      return [X._LinkedNodeTypeImpl];
    }
  };
  X._LinkedNodeTypeImpl.prototype = {$isSummaryClass: 1, $is_LinkedNodeTypeMixin: 1, $isLinkedNodeType: 1};
  X._LinkedNodeTypeMixin.prototype = {$isSummaryClass: 1, $isLinkedNodeType: 1};
  X.LinkedNodeUnitBuilder.prototype = {$isSummaryClass: 1, $is_LinkedNodeUnitMixin: 1, $isLinkedNodeUnit: 1};
  X._LinkedNodeUnitReader.prototype = {
    $asReader: function() {
      return [X._LinkedNodeUnitImpl];
    },
    $asTableReader: function() {
      return [X._LinkedNodeUnitImpl];
    }
  };
  X._LinkedNodeUnitImpl.prototype = {$isSummaryClass: 1, $is_LinkedNodeUnitMixin: 1, $isLinkedNodeUnit: 1};
  X._LinkedNodeUnitMixin.prototype = {$isSummaryClass: 1, $isLinkedNodeUnit: 1};
  X.LinkedNodeVariablesDeclarationBuilder.prototype = {$isSummaryClass: 1, $is_LinkedNodeVariablesDeclarationMixin: 1, $isLinkedNodeVariablesDeclaration: 1};
  X._LinkedNodeVariablesDeclarationReader.prototype = {
    $asReader: function() {
      return [X._LinkedNodeVariablesDeclarationImpl];
    },
    $asTableReader: function() {
      return [X._LinkedNodeVariablesDeclarationImpl];
    }
  };
  X._LinkedNodeVariablesDeclarationImpl.prototype = {$isSummaryClass: 1, $is_LinkedNodeVariablesDeclarationMixin: 1, $isLinkedNodeVariablesDeclaration: 1};
  X._LinkedNodeVariablesDeclarationMixin.prototype = {$isSummaryClass: 1, $isLinkedNodeVariablesDeclaration: 1};
  X.LinkedReferenceBuilder.prototype = {$isSummaryClass: 1, $is_LinkedReferenceMixin: 1, $isLinkedReference: 1};
  X._LinkedReferenceReader.prototype = {
    $asReader: function() {
      return [X._LinkedReferenceImpl];
    },
    $asTableReader: function() {
      return [X._LinkedReferenceImpl];
    }
  };
  X._LinkedReferenceImpl.prototype = {$isSummaryClass: 1, $is_LinkedReferenceMixin: 1, $isLinkedReference: 1};
  X._LinkedReferenceMixin.prototype = {$isSummaryClass: 1, $isLinkedReference: 1};
  X.LinkedUnitBuilder.prototype = {$isSummaryClass: 1, $is_LinkedUnitMixin: 1, $isLinkedUnit: 1};
  X._LinkedUnitReader.prototype = {
    $asReader: function() {
      return [X._LinkedUnitImpl];
    },
    $asTableReader: function() {
      return [X._LinkedUnitImpl];
    }
  };
  X._LinkedUnitImpl.prototype = {$isSummaryClass: 1, $is_LinkedUnitMixin: 1, $isLinkedUnit: 1};
  X._LinkedUnitMixin.prototype = {$isSummaryClass: 1, $isLinkedUnit: 1};
  X.PackageBundleBuilder.prototype = {$isSummaryClass: 1, $is_PackageBundleMixin: 1, $isPackageBundle: 1};
  X._PackageBundleReader.prototype = {
    $asReader: function() {
      return [X._PackageBundleImpl];
    },
    $asTableReader: function() {
      return [X._PackageBundleImpl];
    }
  };
  X._PackageBundleImpl.prototype = {$isSummaryClass: 1, $is_PackageBundleMixin: 1, $isPackageBundle: 1};
  X._PackageBundleMixin.prototype = {$isSummaryClass: 1, $isPackageBundle: 1};
  X.PackageIndexBuilder.prototype = {$isSummaryClass: 1, $is_PackageIndexMixin: 1, $isPackageIndex: 1};
  X._PackageIndexReader.prototype = {
    $asReader: function() {
      return [X._PackageIndexImpl];
    },
    $asTableReader: function() {
      return [X._PackageIndexImpl];
    }
  };
  X._PackageIndexImpl.prototype = {$isSummaryClass: 1, $is_PackageIndexMixin: 1, $isPackageIndex: 1};
  X._PackageIndexMixin.prototype = {$isSummaryClass: 1, $isPackageIndex: 1};
  X.TopLevelInferenceErrorBuilder.prototype = {$isSummaryClass: 1, $is_TopLevelInferenceErrorMixin: 1, $isTopLevelInferenceError: 1};
  X._TopLevelInferenceErrorReader.prototype = {
    $asReader: function() {
      return [X._TopLevelInferenceErrorImpl];
    },
    $asTableReader: function() {
      return [X._TopLevelInferenceErrorImpl];
    }
  };
  X._TopLevelInferenceErrorImpl.prototype = {$isSummaryClass: 1, $is_TopLevelInferenceErrorMixin: 1, $isTopLevelInferenceError: 1};
  X._TopLevelInferenceErrorMixin.prototype = {$isSummaryClass: 1, $isTopLevelInferenceError: 1};
  X.UnitIndexBuilder.prototype = {$isSummaryClass: 1, $is_UnitIndexMixin: 1, $isUnitIndex: 1};
  X._UnitIndexReader.prototype = {
    $asReader: function() {
      return [X._UnitIndexImpl];
    },
    $asTableReader: function() {
      return [X._UnitIndexImpl];
    }
  };
  X._UnitIndexImpl.prototype = {$isSummaryClass: 1, $is_UnitIndexMixin: 1, $isUnitIndex: 1};
  X._UnitIndexMixin.prototype = {$isSummaryClass: 1, $isUnitIndex: 1};
  X.UnlinkedClassBuilder.prototype = {$isSummaryClass: 1, $is_UnlinkedClassMixin: 1, $isUnlinkedClass: 1};
  X._UnlinkedClassReader.prototype = {
    $asReader: function() {
      return [X._UnlinkedClassImpl];
    },
    $asTableReader: function() {
      return [X._UnlinkedClassImpl];
    }
  };
  X._UnlinkedClassImpl.prototype = {$isSummaryClass: 1, $is_UnlinkedClassMixin: 1, $isUnlinkedClass: 1};
  X._UnlinkedClassMixin.prototype = {$isSummaryClass: 1, $isUnlinkedClass: 1};
  X.UnlinkedCombinatorBuilder.prototype = {$isSummaryClass: 1, $is_UnlinkedCombinatorMixin: 1, $isUnlinkedCombinator: 1};
  X._UnlinkedCombinatorReader.prototype = {
    $asReader: function() {
      return [X._UnlinkedCombinatorImpl];
    },
    $asTableReader: function() {
      return [X._UnlinkedCombinatorImpl];
    }
  };
  X._UnlinkedCombinatorImpl.prototype = {$isSummaryClass: 1, $is_UnlinkedCombinatorMixin: 1, $isUnlinkedCombinator: 1};
  X._UnlinkedCombinatorMixin.prototype = {$isSummaryClass: 1, $isUnlinkedCombinator: 1};
  X.UnlinkedConfigurationBuilder.prototype = {$isSummaryClass: 1, $is_UnlinkedConfigurationMixin: 1, $isUnlinkedConfiguration: 1};
  X._UnlinkedConfigurationReader.prototype = {
    $asReader: function() {
      return [X._UnlinkedConfigurationImpl];
    },
    $asTableReader: function() {
      return [X._UnlinkedConfigurationImpl];
    }
  };
  X._UnlinkedConfigurationImpl.prototype = {$isSummaryClass: 1, $is_UnlinkedConfigurationMixin: 1, $isUnlinkedConfiguration: 1};
  X._UnlinkedConfigurationMixin.prototype = {$isSummaryClass: 1, $isUnlinkedConfiguration: 1};
  X.UnlinkedConstructorInitializerBuilder.prototype = {$isSummaryClass: 1, $is_UnlinkedConstructorInitializerMixin: 1, $isUnlinkedConstructorInitializer: 1};
  X._UnlinkedConstructorInitializerReader.prototype = {
    $asReader: function() {
      return [X._UnlinkedConstructorInitializerImpl];
    },
    $asTableReader: function() {
      return [X._UnlinkedConstructorInitializerImpl];
    }
  };
  X._UnlinkedConstructorInitializerImpl.prototype = {$isSummaryClass: 1, $is_UnlinkedConstructorInitializerMixin: 1, $isUnlinkedConstructorInitializer: 1};
  X._UnlinkedConstructorInitializerMixin.prototype = {$isSummaryClass: 1, $isUnlinkedConstructorInitializer: 1};
  X.UnlinkedDocumentationCommentBuilder.prototype = {$isSummaryClass: 1, $is_UnlinkedDocumentationCommentMixin: 1, $isUnlinkedDocumentationComment: 1};
  X._UnlinkedDocumentationCommentReader.prototype = {
    $asReader: function() {
      return [X._UnlinkedDocumentationCommentImpl];
    },
    $asTableReader: function() {
      return [X._UnlinkedDocumentationCommentImpl];
    }
  };
  X._UnlinkedDocumentationCommentImpl.prototype = {$isSummaryClass: 1, $is_UnlinkedDocumentationCommentMixin: 1, $isUnlinkedDocumentationComment: 1};
  X._UnlinkedDocumentationCommentMixin.prototype = {$isSummaryClass: 1, $isUnlinkedDocumentationComment: 1};
  X.UnlinkedEnumBuilder.prototype = {$isSummaryClass: 1, $is_UnlinkedEnumMixin: 1, $isUnlinkedEnum: 1};
  X._UnlinkedEnumReader.prototype = {
    $asReader: function() {
      return [X._UnlinkedEnumImpl];
    },
    $asTableReader: function() {
      return [X._UnlinkedEnumImpl];
    }
  };
  X._UnlinkedEnumImpl.prototype = {$isSummaryClass: 1, $is_UnlinkedEnumMixin: 1, $isUnlinkedEnum: 1};
  X._UnlinkedEnumMixin.prototype = {$isSummaryClass: 1, $isUnlinkedEnum: 1};
  X.UnlinkedEnumValueBuilder.prototype = {$isSummaryClass: 1, $is_UnlinkedEnumValueMixin: 1, $isUnlinkedEnumValue: 1};
  X._UnlinkedEnumValueReader.prototype = {
    $asReader: function() {
      return [X._UnlinkedEnumValueImpl];
    },
    $asTableReader: function() {
      return [X._UnlinkedEnumValueImpl];
    }
  };
  X._UnlinkedEnumValueImpl.prototype = {$isSummaryClass: 1, $is_UnlinkedEnumValueMixin: 1, $isUnlinkedEnumValue: 1};
  X._UnlinkedEnumValueMixin.prototype = {$isSummaryClass: 1, $isUnlinkedEnumValue: 1};
  X.UnlinkedExecutableBuilder.prototype = {$isSummaryClass: 1, $is_UnlinkedExecutableMixin: 1, $isUnlinkedExecutable: 1};
  X._UnlinkedExecutableReader.prototype = {
    $asReader: function() {
      return [X._UnlinkedExecutableImpl];
    },
    $asTableReader: function() {
      return [X._UnlinkedExecutableImpl];
    }
  };
  X._UnlinkedExecutableImpl.prototype = {$isSummaryClass: 1, $is_UnlinkedExecutableMixin: 1, $isUnlinkedExecutable: 1};
  X._UnlinkedExecutableMixin.prototype = {$isSummaryClass: 1, $isUnlinkedExecutable: 1};
  X.UnlinkedExportNonPublicBuilder.prototype = {$isSummaryClass: 1, $is_UnlinkedExportNonPublicMixin: 1, $isUnlinkedExportNonPublic: 1};
  X._UnlinkedExportNonPublicReader.prototype = {
    $asReader: function() {
      return [X._UnlinkedExportNonPublicImpl];
    },
    $asTableReader: function() {
      return [X._UnlinkedExportNonPublicImpl];
    }
  };
  X._UnlinkedExportNonPublicImpl.prototype = {$isSummaryClass: 1, $is_UnlinkedExportNonPublicMixin: 1, $isUnlinkedExportNonPublic: 1};
  X._UnlinkedExportNonPublicMixin.prototype = {$isSummaryClass: 1, $isUnlinkedExportNonPublic: 1};
  X.UnlinkedExportPublicBuilder.prototype = {$isSummaryClass: 1, $is_UnlinkedExportPublicMixin: 1, $isUnlinkedExportPublic: 1};
  X._UnlinkedExportPublicReader.prototype = {
    $asReader: function() {
      return [X._UnlinkedExportPublicImpl];
    },
    $asTableReader: function() {
      return [X._UnlinkedExportPublicImpl];
    }
  };
  X._UnlinkedExportPublicImpl.prototype = {$isSummaryClass: 1, $is_UnlinkedExportPublicMixin: 1, $isUnlinkedExportPublic: 1};
  X._UnlinkedExportPublicMixin.prototype = {$isSummaryClass: 1, $isUnlinkedExportPublic: 1};
  X.UnlinkedExprBuilder.prototype = {$isSummaryClass: 1, $is_UnlinkedExprMixin: 1, $isUnlinkedExpr: 1};
  X._UnlinkedExprReader.prototype = {
    $asReader: function() {
      return [X._UnlinkedExprImpl];
    },
    $asTableReader: function() {
      return [X._UnlinkedExprImpl];
    }
  };
  X._UnlinkedExprImpl.prototype = {$isSummaryClass: 1, $is_UnlinkedExprMixin: 1, $isUnlinkedExpr: 1};
  X._UnlinkedExprMixin.prototype = {$isSummaryClass: 1, $isUnlinkedExpr: 1};
  X.UnlinkedImportBuilder.prototype = {$isSummaryClass: 1, $is_UnlinkedImportMixin: 1, $isUnlinkedImport: 1};
  X._UnlinkedImportReader.prototype = {
    $asReader: function() {
      return [X._UnlinkedImportImpl];
    },
    $asTableReader: function() {
      return [X._UnlinkedImportImpl];
    }
  };
  X._UnlinkedImportImpl.prototype = {$isSummaryClass: 1, $is_UnlinkedImportMixin: 1, $isUnlinkedImport: 1};
  X._UnlinkedImportMixin.prototype = {$isSummaryClass: 1, $isUnlinkedImport: 1};
  X.UnlinkedParamBuilder.prototype = {$isSummaryClass: 1, $is_UnlinkedParamMixin: 1, $isUnlinkedParam: 1};
  X._UnlinkedParamReader.prototype = {
    $asReader: function() {
      return [X._UnlinkedParamImpl];
    },
    $asTableReader: function() {
      return [X._UnlinkedParamImpl];
    }
  };
  X._UnlinkedParamImpl.prototype = {$isSummaryClass: 1, $is_UnlinkedParamMixin: 1, $isUnlinkedParam: 1};
  X._UnlinkedParamMixin.prototype = {$isSummaryClass: 1, $isUnlinkedParam: 1};
  X.UnlinkedPartBuilder.prototype = {$isSummaryClass: 1, $is_UnlinkedPartMixin: 1, $isUnlinkedPart: 1};
  X._UnlinkedPartReader.prototype = {
    $asReader: function() {
      return [X._UnlinkedPartImpl];
    },
    $asTableReader: function() {
      return [X._UnlinkedPartImpl];
    }
  };
  X._UnlinkedPartImpl.prototype = {$isSummaryClass: 1, $is_UnlinkedPartMixin: 1, $isUnlinkedPart: 1};
  X._UnlinkedPartMixin.prototype = {$isSummaryClass: 1, $isUnlinkedPart: 1};
  X.UnlinkedPublicNameBuilder.prototype = {$isSummaryClass: 1, $is_UnlinkedPublicNameMixin: 1, $isUnlinkedPublicName: 1};
  X._UnlinkedPublicNameReader.prototype = {
    $asReader: function() {
      return [X._UnlinkedPublicNameImpl];
    },
    $asTableReader: function() {
      return [X._UnlinkedPublicNameImpl];
    }
  };
  X._UnlinkedPublicNameImpl.prototype = {$isSummaryClass: 1, $is_UnlinkedPublicNameMixin: 1, $isUnlinkedPublicName: 1};
  X._UnlinkedPublicNameMixin.prototype = {$isSummaryClass: 1, $isUnlinkedPublicName: 1};
  X.UnlinkedPublicNamespaceBuilder.prototype = {$isSummaryClass: 1, $is_UnlinkedPublicNamespaceMixin: 1, $isUnlinkedPublicNamespace: 1};
  X._UnlinkedPublicNamespaceReader.prototype = {
    $asReader: function() {
      return [X._UnlinkedPublicNamespaceImpl];
    },
    $asTableReader: function() {
      return [X._UnlinkedPublicNamespaceImpl];
    }
  };
  X._UnlinkedPublicNamespaceImpl.prototype = {$isSummaryClass: 1, $is_UnlinkedPublicNamespaceMixin: 1, $isUnlinkedPublicNamespace: 1};
  X._UnlinkedPublicNamespaceMixin.prototype = {$isSummaryClass: 1, $isUnlinkedPublicNamespace: 1};
  X.UnlinkedReferenceBuilder.prototype = {$isSummaryClass: 1, $is_UnlinkedReferenceMixin: 1, $isUnlinkedReference: 1};
  X._UnlinkedReferenceReader.prototype = {
    $asReader: function() {
      return [X._UnlinkedReferenceImpl];
    },
    $asTableReader: function() {
      return [X._UnlinkedReferenceImpl];
    }
  };
  X._UnlinkedReferenceImpl.prototype = {$isSummaryClass: 1, $is_UnlinkedReferenceMixin: 1, $isUnlinkedReference: 1};
  X._UnlinkedReferenceMixin.prototype = {$isSummaryClass: 1, $isUnlinkedReference: 1};
  X.UnlinkedTokensBuilder.prototype = {$isSummaryClass: 1, $is_UnlinkedTokensMixin: 1, $isUnlinkedTokens: 1};
  X._UnlinkedTokensReader.prototype = {
    $asReader: function() {
      return [X._UnlinkedTokensImpl];
    },
    $asTableReader: function() {
      return [X._UnlinkedTokensImpl];
    }
  };
  X._UnlinkedTokensImpl.prototype = {$isSummaryClass: 1, $is_UnlinkedTokensMixin: 1, $isUnlinkedTokens: 1};
  X._UnlinkedTokensMixin.prototype = {$isSummaryClass: 1, $isUnlinkedTokens: 1};
  X.UnlinkedTypedefBuilder.prototype = {$isSummaryClass: 1, $is_UnlinkedTypedefMixin: 1, $isUnlinkedTypedef: 1};
  X._UnlinkedTypedefReader.prototype = {
    $asReader: function() {
      return [X._UnlinkedTypedefImpl];
    },
    $asTableReader: function() {
      return [X._UnlinkedTypedefImpl];
    }
  };
  X._UnlinkedTypedefImpl.prototype = {$isSummaryClass: 1, $is_UnlinkedTypedefMixin: 1, $isUnlinkedTypedef: 1};
  X._UnlinkedTypedefMixin.prototype = {$isSummaryClass: 1, $isUnlinkedTypedef: 1};
  X.UnlinkedTypeParamBuilder.prototype = {$isSummaryClass: 1, $is_UnlinkedTypeParamMixin: 1, $isUnlinkedTypeParam: 1};
  X._UnlinkedTypeParamReader.prototype = {
    $asReader: function() {
      return [X._UnlinkedTypeParamImpl];
    },
    $asTableReader: function() {
      return [X._UnlinkedTypeParamImpl];
    }
  };
  X._UnlinkedTypeParamImpl.prototype = {$isSummaryClass: 1, $is_UnlinkedTypeParamMixin: 1, $isUnlinkedTypeParam: 1};
  X._UnlinkedTypeParamMixin.prototype = {$isSummaryClass: 1, $isUnlinkedTypeParam: 1};
  X.UnlinkedUnitBuilder.prototype = {$isSummaryClass: 1, $is_UnlinkedUnitMixin: 1, $isUnlinkedUnit: 1};
  X._UnlinkedUnitReader.prototype = {
    $asReader: function() {
      return [X._UnlinkedUnitImpl];
    },
    $asTableReader: function() {
      return [X._UnlinkedUnitImpl];
    }
  };
  X._UnlinkedUnitImpl.prototype = {$isSummaryClass: 1, $is_UnlinkedUnitMixin: 1, $isUnlinkedUnit: 1};
  X._UnlinkedUnitMixin.prototype = {$isSummaryClass: 1, $isUnlinkedUnit: 1};
  X.UnlinkedVariableBuilder.prototype = {$isSummaryClass: 1, $is_UnlinkedVariableMixin: 1, $isUnlinkedVariable: 1};
  X._UnlinkedVariableReader.prototype = {
    $asReader: function() {
      return [X._UnlinkedVariableImpl];
    },
    $asTableReader: function() {
      return [X._UnlinkedVariableImpl];
    }
  };
  X._UnlinkedVariableImpl.prototype = {$isSummaryClass: 1, $is_UnlinkedVariableMixin: 1, $isUnlinkedVariable: 1};
  X._UnlinkedVariableMixin.prototype = {$isSummaryClass: 1, $isUnlinkedVariable: 1};
  X._AnalysisDriverExceptionContextBuilder_Object__AnalysisDriverExceptionContextMixin.prototype = {$isSummaryClass: 1, $is_AnalysisDriverExceptionContextMixin: 1, $isAnalysisDriverExceptionContext: 1};
  X._AnalysisDriverExceptionFileBuilder_Object__AnalysisDriverExceptionFileMixin.prototype = {$isSummaryClass: 1, $is_AnalysisDriverExceptionFileMixin: 1, $isAnalysisDriverExceptionFile: 1};
  X._AnalysisDriverResolvedUnitBuilder_Object__AnalysisDriverResolvedUnitMixin.prototype = {$isSummaryClass: 1, $is_AnalysisDriverResolvedUnitMixin: 1, $isAnalysisDriverResolvedUnit: 1};
  X._AnalysisDriverSubtypeBuilder_Object__AnalysisDriverSubtypeMixin.prototype = {$isSummaryClass: 1, $is_AnalysisDriverSubtypeMixin: 1, $isAnalysisDriverSubtype: 1};
  X._AnalysisDriverUnitErrorBuilder_Object__AnalysisDriverUnitErrorMixin.prototype = {$isSummaryClass: 1, $is_AnalysisDriverUnitErrorMixin: 1, $isAnalysisDriverUnitError: 1};
  X._AnalysisDriverUnitIndexBuilder_Object__AnalysisDriverUnitIndexMixin.prototype = {$isSummaryClass: 1, $is_AnalysisDriverUnitIndexMixin: 1, $isAnalysisDriverUnitIndex: 1};
  X._AnalysisDriverUnlinkedUnitBuilder_Object__AnalysisDriverUnlinkedUnitMixin.prototype = {$isSummaryClass: 1, $is_AnalysisDriverUnlinkedUnitMixin: 1, $isAnalysisDriverUnlinkedUnit: 1};
  X._AvailableDeclarationBuilder_Object__AvailableDeclarationMixin.prototype = {$isSummaryClass: 1, $is_AvailableDeclarationMixin: 1, $isAvailableDeclaration: 1};
  X._AvailableFileBuilder_Object__AvailableFileMixin.prototype = {$isSummaryClass: 1, $is_AvailableFileMixin: 1, $isAvailableFile: 1};
  X._AvailableFileExportBuilder_Object__AvailableFileExportMixin.prototype = {$isSummaryClass: 1, $is_AvailableFileExportMixin: 1, $isAvailableFileExport: 1};
  X._AvailableFileExportCombinatorBuilder_Object__AvailableFileExportCombinatorMixin.prototype = {$isSummaryClass: 1, $is_AvailableFileExportCombinatorMixin: 1, $isAvailableFileExportCombinator: 1};
  X._CodeRangeBuilder_Object__CodeRangeMixin.prototype = {$isSummaryClass: 1, $is_CodeRangeMixin: 1, $isCodeRange: 1};
  X._EntityRefBuilder_Object__EntityRefMixin.prototype = {$isSummaryClass: 1, $is_EntityRefMixin: 1, $isEntityRef: 1};
  X._LinkedDependencyBuilder_Object__LinkedDependencyMixin.prototype = {$isSummaryClass: 1, $is_LinkedDependencyMixin: 1, $isLinkedDependency: 1};
  X._LinkedExportNameBuilder_Object__LinkedExportNameMixin.prototype = {$isSummaryClass: 1, $is_LinkedExportNameMixin: 1, $isLinkedExportName: 1};
  X._LinkedLibraryBuilder_Object__LinkedLibraryMixin.prototype = {$isSummaryClass: 1, $is_LinkedLibraryMixin: 1, $isLinkedLibrary: 1};
  X._LinkedNodeBuilder_Object__LinkedNodeMixin.prototype = {$isSummaryClass: 1, $is_LinkedNodeMixin: 1, $isLinkedNode: 1};
  X._LinkedNodeBundleBuilder_Object__LinkedNodeBundleMixin.prototype = {$isSummaryClass: 1, $is_LinkedNodeBundleMixin: 1, $isLinkedNodeBundle: 1};
  X._LinkedNodeLibraryBuilder_Object__LinkedNodeLibraryMixin.prototype = {$isSummaryClass: 1, $is_LinkedNodeLibraryMixin: 1, $isLinkedNodeLibrary: 1};
  X._LinkedNodeReferencesBuilder_Object__LinkedNodeReferencesMixin.prototype = {$isSummaryClass: 1, $is_LinkedNodeReferencesMixin: 1, $isLinkedNodeReferences: 1};
  X._LinkedNodeTypeBuilder_Object__LinkedNodeTypeMixin.prototype = {$isSummaryClass: 1, $is_LinkedNodeTypeMixin: 1, $isLinkedNodeType: 1};
  X._LinkedNodeUnitBuilder_Object__LinkedNodeUnitMixin.prototype = {$isSummaryClass: 1, $is_LinkedNodeUnitMixin: 1, $isLinkedNodeUnit: 1};
  X._LinkedNodeVariablesDeclarationBuilder_Object__LinkedNodeVariablesDeclarationMixin.prototype = {$isSummaryClass: 1, $is_LinkedNodeVariablesDeclarationMixin: 1, $isLinkedNodeVariablesDeclaration: 1};
  X._LinkedReferenceBuilder_Object__LinkedReferenceMixin.prototype = {$isSummaryClass: 1, $is_LinkedReferenceMixin: 1, $isLinkedReference: 1};
  X._LinkedUnitBuilder_Object__LinkedUnitMixin.prototype = {$isSummaryClass: 1, $is_LinkedUnitMixin: 1, $isLinkedUnit: 1};
  X._PackageBundleBuilder_Object__PackageBundleMixin.prototype = {$isSummaryClass: 1, $is_PackageBundleMixin: 1, $isPackageBundle: 1};
  X._PackageIndexBuilder_Object__PackageIndexMixin.prototype = {$isSummaryClass: 1, $is_PackageIndexMixin: 1, $isPackageIndex: 1};
  X._TopLevelInferenceErrorBuilder_Object__TopLevelInferenceErrorMixin.prototype = {$isSummaryClass: 1, $is_TopLevelInferenceErrorMixin: 1, $isTopLevelInferenceError: 1};
  X._UnitIndexBuilder_Object__UnitIndexMixin.prototype = {$isSummaryClass: 1, $is_UnitIndexMixin: 1, $isUnitIndex: 1};
  X._UnlinkedClassBuilder_Object__UnlinkedClassMixin.prototype = {$isSummaryClass: 1, $is_UnlinkedClassMixin: 1, $isUnlinkedClass: 1};
  X._UnlinkedCombinatorBuilder_Object__UnlinkedCombinatorMixin.prototype = {$isSummaryClass: 1, $is_UnlinkedCombinatorMixin: 1, $isUnlinkedCombinator: 1};
  X._UnlinkedConfigurationBuilder_Object__UnlinkedConfigurationMixin.prototype = {$isSummaryClass: 1, $is_UnlinkedConfigurationMixin: 1, $isUnlinkedConfiguration: 1};
  X._UnlinkedConstructorInitializerBuilder_Object__UnlinkedConstructorInitializerMixin.prototype = {$isSummaryClass: 1, $is_UnlinkedConstructorInitializerMixin: 1, $isUnlinkedConstructorInitializer: 1};
  X._UnlinkedDocumentationCommentBuilder_Object__UnlinkedDocumentationCommentMixin.prototype = {$isSummaryClass: 1, $is_UnlinkedDocumentationCommentMixin: 1, $isUnlinkedDocumentationComment: 1};
  X._UnlinkedEnumBuilder_Object__UnlinkedEnumMixin.prototype = {$isSummaryClass: 1, $is_UnlinkedEnumMixin: 1, $isUnlinkedEnum: 1};
  X._UnlinkedEnumValueBuilder_Object__UnlinkedEnumValueMixin.prototype = {$isSummaryClass: 1, $is_UnlinkedEnumValueMixin: 1, $isUnlinkedEnumValue: 1};
  X._UnlinkedExecutableBuilder_Object__UnlinkedExecutableMixin.prototype = {$isSummaryClass: 1, $is_UnlinkedExecutableMixin: 1, $isUnlinkedExecutable: 1};
  X._UnlinkedExportNonPublicBuilder_Object__UnlinkedExportNonPublicMixin.prototype = {$isSummaryClass: 1, $is_UnlinkedExportNonPublicMixin: 1, $isUnlinkedExportNonPublic: 1};
  X._UnlinkedExportPublicBuilder_Object__UnlinkedExportPublicMixin.prototype = {$isSummaryClass: 1, $is_UnlinkedExportPublicMixin: 1, $isUnlinkedExportPublic: 1};
  X._UnlinkedExprBuilder_Object__UnlinkedExprMixin.prototype = {$isSummaryClass: 1, $is_UnlinkedExprMixin: 1, $isUnlinkedExpr: 1};
  X._UnlinkedImportBuilder_Object__UnlinkedImportMixin.prototype = {$isSummaryClass: 1, $is_UnlinkedImportMixin: 1, $isUnlinkedImport: 1};
  X._UnlinkedParamBuilder_Object__UnlinkedParamMixin.prototype = {$isSummaryClass: 1, $is_UnlinkedParamMixin: 1, $isUnlinkedParam: 1};
  X._UnlinkedPartBuilder_Object__UnlinkedPartMixin.prototype = {$isSummaryClass: 1, $is_UnlinkedPartMixin: 1, $isUnlinkedPart: 1};
  X._UnlinkedPublicNameBuilder_Object__UnlinkedPublicNameMixin.prototype = {$isSummaryClass: 1, $is_UnlinkedPublicNameMixin: 1, $isUnlinkedPublicName: 1};
  X._UnlinkedPublicNamespaceBuilder_Object__UnlinkedPublicNamespaceMixin.prototype = {$isSummaryClass: 1, $is_UnlinkedPublicNamespaceMixin: 1, $isUnlinkedPublicNamespace: 1};
  X._UnlinkedReferenceBuilder_Object__UnlinkedReferenceMixin.prototype = {$isSummaryClass: 1, $is_UnlinkedReferenceMixin: 1, $isUnlinkedReference: 1};
  X._UnlinkedTokensBuilder_Object__UnlinkedTokensMixin.prototype = {$isSummaryClass: 1, $is_UnlinkedTokensMixin: 1, $isUnlinkedTokens: 1};
  X._UnlinkedTypeParamBuilder_Object__UnlinkedTypeParamMixin.prototype = {$isSummaryClass: 1, $is_UnlinkedTypeParamMixin: 1, $isUnlinkedTypeParam: 1};
  X._UnlinkedTypedefBuilder_Object__UnlinkedTypedefMixin.prototype = {$isSummaryClass: 1, $is_UnlinkedTypedefMixin: 1, $isUnlinkedTypedef: 1};
  X._UnlinkedUnitBuilder_Object__UnlinkedUnitMixin.prototype = {$isSummaryClass: 1, $is_UnlinkedUnitMixin: 1, $isUnlinkedUnit: 1};
  X._UnlinkedVariableBuilder_Object__UnlinkedVariableMixin.prototype = {$isSummaryClass: 1, $is_UnlinkedVariableMixin: 1, $isUnlinkedVariable: 1};
  X.__AnalysisDriverExceptionContextImpl_Object__AnalysisDriverExceptionContextMixin.prototype = {$isSummaryClass: 1, $is_AnalysisDriverExceptionContextMixin: 1, $isAnalysisDriverExceptionContext: 1};
  X.__AnalysisDriverExceptionFileImpl_Object__AnalysisDriverExceptionFileMixin.prototype = {$isSummaryClass: 1, $is_AnalysisDriverExceptionFileMixin: 1, $isAnalysisDriverExceptionFile: 1};
  X.__AnalysisDriverResolvedUnitImpl_Object__AnalysisDriverResolvedUnitMixin.prototype = {$isSummaryClass: 1, $is_AnalysisDriverResolvedUnitMixin: 1, $isAnalysisDriverResolvedUnit: 1};
  X.__AnalysisDriverSubtypeImpl_Object__AnalysisDriverSubtypeMixin.prototype = {$isSummaryClass: 1, $is_AnalysisDriverSubtypeMixin: 1, $isAnalysisDriverSubtype: 1};
  X.__AnalysisDriverUnitErrorImpl_Object__AnalysisDriverUnitErrorMixin.prototype = {$isSummaryClass: 1, $is_AnalysisDriverUnitErrorMixin: 1, $isAnalysisDriverUnitError: 1};
  X.__AnalysisDriverUnitIndexImpl_Object__AnalysisDriverUnitIndexMixin.prototype = {$isSummaryClass: 1, $is_AnalysisDriverUnitIndexMixin: 1, $isAnalysisDriverUnitIndex: 1};
  X.__AnalysisDriverUnlinkedUnitImpl_Object__AnalysisDriverUnlinkedUnitMixin.prototype = {$isSummaryClass: 1, $is_AnalysisDriverUnlinkedUnitMixin: 1, $isAnalysisDriverUnlinkedUnit: 1};
  X.__AvailableDeclarationImpl_Object__AvailableDeclarationMixin.prototype = {$isSummaryClass: 1, $is_AvailableDeclarationMixin: 1, $isAvailableDeclaration: 1};
  X.__AvailableFileExportCombinatorImpl_Object__AvailableFileExportCombinatorMixin.prototype = {$isSummaryClass: 1, $is_AvailableFileExportCombinatorMixin: 1, $isAvailableFileExportCombinator: 1};
  X.__AvailableFileExportImpl_Object__AvailableFileExportMixin.prototype = {$isSummaryClass: 1, $is_AvailableFileExportMixin: 1, $isAvailableFileExport: 1};
  X.__AvailableFileImpl_Object__AvailableFileMixin.prototype = {$isSummaryClass: 1, $is_AvailableFileMixin: 1, $isAvailableFile: 1};
  X.__CodeRangeImpl_Object__CodeRangeMixin.prototype = {$isSummaryClass: 1, $is_CodeRangeMixin: 1, $isCodeRange: 1};
  X.__EntityRefImpl_Object__EntityRefMixin.prototype = {$isSummaryClass: 1, $is_EntityRefMixin: 1, $isEntityRef: 1};
  X.__LinkedDependencyImpl_Object__LinkedDependencyMixin.prototype = {$isSummaryClass: 1, $is_LinkedDependencyMixin: 1, $isLinkedDependency: 1};
  X.__LinkedExportNameImpl_Object__LinkedExportNameMixin.prototype = {$isSummaryClass: 1, $is_LinkedExportNameMixin: 1, $isLinkedExportName: 1};
  X.__LinkedLibraryImpl_Object__LinkedLibraryMixin.prototype = {$isSummaryClass: 1, $is_LinkedLibraryMixin: 1, $isLinkedLibrary: 1};
  X.__LinkedNodeBundleImpl_Object__LinkedNodeBundleMixin.prototype = {$isSummaryClass: 1, $is_LinkedNodeBundleMixin: 1, $isLinkedNodeBundle: 1};
  X.__LinkedNodeImpl_Object__LinkedNodeMixin.prototype = {$isSummaryClass: 1, $is_LinkedNodeMixin: 1, $isLinkedNode: 1};
  X.__LinkedNodeLibraryImpl_Object__LinkedNodeLibraryMixin.prototype = {$isSummaryClass: 1, $is_LinkedNodeLibraryMixin: 1, $isLinkedNodeLibrary: 1};
  X.__LinkedNodeReferencesImpl_Object__LinkedNodeReferencesMixin.prototype = {$isSummaryClass: 1, $is_LinkedNodeReferencesMixin: 1, $isLinkedNodeReferences: 1};
  X.__LinkedNodeTypeImpl_Object__LinkedNodeTypeMixin.prototype = {$isSummaryClass: 1, $is_LinkedNodeTypeMixin: 1, $isLinkedNodeType: 1};
  X.__LinkedNodeUnitImpl_Object__LinkedNodeUnitMixin.prototype = {$isSummaryClass: 1, $is_LinkedNodeUnitMixin: 1, $isLinkedNodeUnit: 1};
  X.__LinkedNodeVariablesDeclarationImpl_Object__LinkedNodeVariablesDeclarationMixin.prototype = {$isSummaryClass: 1, $is_LinkedNodeVariablesDeclarationMixin: 1, $isLinkedNodeVariablesDeclaration: 1};
  X.__LinkedReferenceImpl_Object__LinkedReferenceMixin.prototype = {$isSummaryClass: 1, $is_LinkedReferenceMixin: 1, $isLinkedReference: 1};
  X.__LinkedUnitImpl_Object__LinkedUnitMixin.prototype = {$isSummaryClass: 1, $is_LinkedUnitMixin: 1, $isLinkedUnit: 1};
  X.__PackageBundleImpl_Object__PackageBundleMixin.prototype = {$isSummaryClass: 1, $is_PackageBundleMixin: 1, $isPackageBundle: 1};
  X.__PackageIndexImpl_Object__PackageIndexMixin.prototype = {$isSummaryClass: 1, $is_PackageIndexMixin: 1, $isPackageIndex: 1};
  X.__TopLevelInferenceErrorImpl_Object__TopLevelInferenceErrorMixin.prototype = {$isSummaryClass: 1, $is_TopLevelInferenceErrorMixin: 1, $isTopLevelInferenceError: 1};
  X.__UnitIndexImpl_Object__UnitIndexMixin.prototype = {$isSummaryClass: 1, $is_UnitIndexMixin: 1, $isUnitIndex: 1};
  X.__UnlinkedClassImpl_Object__UnlinkedClassMixin.prototype = {$isSummaryClass: 1, $is_UnlinkedClassMixin: 1, $isUnlinkedClass: 1};
  X.__UnlinkedCombinatorImpl_Object__UnlinkedCombinatorMixin.prototype = {$isSummaryClass: 1, $is_UnlinkedCombinatorMixin: 1, $isUnlinkedCombinator: 1};
  X.__UnlinkedConfigurationImpl_Object__UnlinkedConfigurationMixin.prototype = {$isSummaryClass: 1, $is_UnlinkedConfigurationMixin: 1, $isUnlinkedConfiguration: 1};
  X.__UnlinkedConstructorInitializerImpl_Object__UnlinkedConstructorInitializerMixin.prototype = {$isSummaryClass: 1, $is_UnlinkedConstructorInitializerMixin: 1, $isUnlinkedConstructorInitializer: 1};
  X.__UnlinkedDocumentationCommentImpl_Object__UnlinkedDocumentationCommentMixin.prototype = {$isSummaryClass: 1, $is_UnlinkedDocumentationCommentMixin: 1, $isUnlinkedDocumentationComment: 1};
  X.__UnlinkedEnumImpl_Object__UnlinkedEnumMixin.prototype = {$isSummaryClass: 1, $is_UnlinkedEnumMixin: 1, $isUnlinkedEnum: 1};
  X.__UnlinkedEnumValueImpl_Object__UnlinkedEnumValueMixin.prototype = {$isSummaryClass: 1, $is_UnlinkedEnumValueMixin: 1, $isUnlinkedEnumValue: 1};
  X.__UnlinkedExecutableImpl_Object__UnlinkedExecutableMixin.prototype = {$isSummaryClass: 1, $is_UnlinkedExecutableMixin: 1, $isUnlinkedExecutable: 1};
  X.__UnlinkedExportNonPublicImpl_Object__UnlinkedExportNonPublicMixin.prototype = {$isSummaryClass: 1, $is_UnlinkedExportNonPublicMixin: 1, $isUnlinkedExportNonPublic: 1};
  X.__UnlinkedExportPublicImpl_Object__UnlinkedExportPublicMixin.prototype = {$isSummaryClass: 1, $is_UnlinkedExportPublicMixin: 1, $isUnlinkedExportPublic: 1};
  X.__UnlinkedExprImpl_Object__UnlinkedExprMixin.prototype = {$isSummaryClass: 1, $is_UnlinkedExprMixin: 1, $isUnlinkedExpr: 1};
  X.__UnlinkedImportImpl_Object__UnlinkedImportMixin.prototype = {$isSummaryClass: 1, $is_UnlinkedImportMixin: 1, $isUnlinkedImport: 1};
  X.__UnlinkedParamImpl_Object__UnlinkedParamMixin.prototype = {$isSummaryClass: 1, $is_UnlinkedParamMixin: 1, $isUnlinkedParam: 1};
  X.__UnlinkedPartImpl_Object__UnlinkedPartMixin.prototype = {$isSummaryClass: 1, $is_UnlinkedPartMixin: 1, $isUnlinkedPart: 1};
  X.__UnlinkedPublicNameImpl_Object__UnlinkedPublicNameMixin.prototype = {$isSummaryClass: 1, $is_UnlinkedPublicNameMixin: 1, $isUnlinkedPublicName: 1};
  X.__UnlinkedPublicNamespaceImpl_Object__UnlinkedPublicNamespaceMixin.prototype = {$isSummaryClass: 1, $is_UnlinkedPublicNamespaceMixin: 1, $isUnlinkedPublicNamespace: 1};
  X.__UnlinkedReferenceImpl_Object__UnlinkedReferenceMixin.prototype = {$isSummaryClass: 1, $is_UnlinkedReferenceMixin: 1, $isUnlinkedReference: 1};
  X.__UnlinkedTokensImpl_Object__UnlinkedTokensMixin.prototype = {$isSummaryClass: 1, $is_UnlinkedTokensMixin: 1, $isUnlinkedTokens: 1};
  X.__UnlinkedTypeParamImpl_Object__UnlinkedTypeParamMixin.prototype = {$isSummaryClass: 1, $is_UnlinkedTypeParamMixin: 1, $isUnlinkedTypeParam: 1};
  X.__UnlinkedTypedefImpl_Object__UnlinkedTypedefMixin.prototype = {$isSummaryClass: 1, $is_UnlinkedTypedefMixin: 1, $isUnlinkedTypedef: 1};
  X.__UnlinkedUnitImpl_Object__UnlinkedUnitMixin.prototype = {$isSummaryClass: 1, $is_UnlinkedUnitMixin: 1, $isUnlinkedUnit: 1};
  X.__UnlinkedVariableImpl_Object__UnlinkedVariableMixin.prototype = {$isSummaryClass: 1, $is_UnlinkedVariableMixin: 1, $isUnlinkedVariable: 1};
  B.AnalysisDriverExceptionContext.prototype = {};
  B.AnalysisDriverExceptionFile.prototype = {};
  B.AnalysisDriverResolvedUnit.prototype = {};
  B.AnalysisDriverSubtype.prototype = {};
  B.AnalysisDriverUnitError.prototype = {};
  B.AnalysisDriverUnitIndex.prototype = {};
  B.AnalysisDriverUnlinkedUnit.prototype = {};
  B.AvailableDeclaration.prototype = {};
  B.AvailableDeclarationKind.prototype = {};
  B.AvailableFile.prototype = {};
  B.AvailableFileExport.prototype = {};
  B.AvailableFileExportCombinator.prototype = {};
  B.CodeRange.prototype = {};
  B.EntityRef.prototype = {};
  B.EntityRefKind.prototype = {};
  B.IndexNameKind.prototype = {};
  B.IndexRelationKind.prototype = {};
  B.IndexSyntheticElementKind.prototype = {};
  B.LinkedDependency.prototype = {};
  B.LinkedExportName.prototype = {};
  B.LinkedLibrary.prototype = {};
  B.LinkedNode.prototype = {};
  B.LinkedNodeBundle.prototype = {};
  B.LinkedNodeCommentType.prototype = {};
  B.LinkedNodeFormalParameterKind.prototype = {};
  B.LinkedNodeKind.prototype = {};
  B.LinkedNodeLibrary.prototype = {};
  B.LinkedNodeReferences.prototype = {};
  B.LinkedNodeType.prototype = {};
  B.LinkedNodeTypeKind.prototype = {};
  B.LinkedNodeUnit.prototype = {};
  B.LinkedNodeVariablesDeclaration.prototype = {};
  B.LinkedReference.prototype = {};
  B.LinkedUnit.prototype = {};
  B.PackageBundle.prototype = {};
  B.PackageDependencyInfo.prototype = {};
  B.PackageIndex.prototype = {};
  B.ReferenceKind.prototype = {};
  B.TopLevelInferenceError.prototype = {};
  B.TopLevelInferenceErrorKind.prototype = {};
  B.TypedefStyle.prototype = {};
  B.UnitIndex.prototype = {};
  B.UnlinkedClass.prototype = {};
  B.UnlinkedCombinator.prototype = {};
  B.UnlinkedConfiguration.prototype = {};
  B.UnlinkedConstructorInitializer.prototype = {};
  B.UnlinkedConstructorInitializerKind.prototype = {};
  B.UnlinkedDocumentationComment.prototype = {};
  B.UnlinkedEnum.prototype = {};
  B.UnlinkedEnumValue.prototype = {};
  B.UnlinkedExecutable.prototype = {};
  B.UnlinkedExecutableKind.prototype = {};
  B.UnlinkedExportNonPublic.prototype = {};
  B.UnlinkedExportPublic.prototype = {};
  B.UnlinkedExpr.prototype = {};
  B.UnlinkedExprAssignOperator.prototype = {};
  B.UnlinkedExprOperation.prototype = {};
  B.UnlinkedImport.prototype = {};
  B.UnlinkedParam.prototype = {};
  B.UnlinkedParamKind.prototype = {};
  B.UnlinkedPart.prototype = {};
  B.UnlinkedPublicName.prototype = {};
  B.UnlinkedPublicNamespace.prototype = {};
  B.UnlinkedReference.prototype = {};
  B.UnlinkedTokenKind.prototype = {};
  B.UnlinkedTokens.prototype = {};
  B.UnlinkedTokenType.prototype = {};
  B.UnlinkedTypedef.prototype = {};
  B.UnlinkedTypeParam.prototype = {};
  B.UnlinkedUnit.prototype = {};
  B.UnlinkedVariable.prototype = {};
  D.AnalysisSessionForLink.prototype = {$isAnalysisSession: 1};
  D.ClassElementForLink.prototype = {$isClassElement: 1, $isElement0: 1, $isTypeDefiningElement: 1, $isTypeParameterizedElement: 1, $isAbstractClassElementImpl: 1, $isElementImpl: 1, $isReferenceableElementForLink: 1, $isAnalysisTarget: 1};
  D.ClassElementForLink_Class.prototype = {$isClassElementImpl: 1, $isSimplyBoundableMixin: 1, $isTypeParameterizedElementMixin: 1, $isTypeParameterSerializationContext: 1, $isSimplyBoundableForLinkMixin: 1, $is_ClassElementImpl_AbstractClassElementImpl_TypeParameterizedElementMixin: 1, $is_ClassElementImpl_AbstractClassElementImpl_TypeParameterizedElementMixin_SimplyBoundableMixin: 1};
  D.ClassElementForLink_Enum.prototype = {$isEnumElementImpl: 1};
  D.CompilationUnitElementForLink.prototype = {$isCompilationUnitElement: 1, $isElement0: 1, $isUriReferencedElement: 1, $isCompilationUnitElementImpl: 1, $isElementImpl: 1, $isResynthesizerContext: 1, $isUriReferencedElementImpl: 1, $isAnalysisTarget: 1};
  D.CompilationUnitElementInBuildUnit.prototype = {};
  D.CompilationUnitElementInDependency.prototype = {};
  D.ConstConstructorNode.prototype = {};
  D.ConstDependencyWalker.prototype = {
    $asDependencyWalker: function() {
      return [D.ConstNode];
    }
  };
  D.ConstNode.prototype = {
    $asNode0: function() {
      return [D.ConstNode];
    }
  };
  D.ConstParameterNode.prototype = {};
  D.ConstructorElementForLink.prototype = {$isClassMemberElement: 1, $isConstructorElement: 1, $isConstantEvaluationTarget: 1, $isConstructorElementImpl: 1, $isReferenceableElementForLink: 1};
  D.ConstructorElementForLink_Synthetic.prototype = {};
  D.ConstVariableNode.prototype = {};
  D.ContextForLink.prototype = {$isAnalysisContext0: 1};
  D.DependencyWalker.prototype = {};
  D.ExecutableElementForLink.prototype = {$isElement0: 1, $isExecutableElement: 1, $isFunctionTypedElement: 1, $isTypeParameterizedElement: 1, $isElementImpl: 1, $isExecutableElementImpl: 1, $isTypeParameterizedElementMixin: 1, $isTypeParameterSerializationContext: 1, $isParameterParentElementForLink: 1, $isAnalysisTarget: 1, $is_ExecutableElementImpl_ElementImpl_TypeParameterizedElementMixin: 1};
  D.ExecutableElementForLink_NonLocal.prototype = {};
  D.ExprTypeComputer.prototype = {};
  D.FieldElementForLink.prototype = {$isClassMemberElement: 1, $isElement0: 1, $isFieldElement: 1, $isPropertyInducingElement: 1, $isVariableElement: 1, $isConstantEvaluationTarget: 1, $isAnalysisTarget: 1};
  D.FieldElementForLink_ClassField.prototype = {$isClassMemberElement: 1, $isFieldElement: 1, $isFieldElementForLink: 1};
  D.FieldElementForLink_EnumField.prototype = {};
  D.FieldElementForLink_EnumField_index.prototype = {};
  D.FieldElementForLink_EnumField_value.prototype = {};
  D.FieldElementForLink_EnumField_values.prototype = {};
  D.FieldFormalParameterElementForLink.prototype = {$isFieldFormalParameterElement: 1};
  D.FunctionElementForLink_FunctionTypedParam.prototype = {$isElement0: 1, $isExecutableElement: 1, $isFunctionElement: 1, $isFunctionTypedElement: 1, $isLocalElement: 1, $isTypeParameterizedElement: 1, $isParameterParentElementForLink: 1, $isAnalysisTarget: 1};
  D.FunctionElementForLink_Initializer.prototype = {$isElement0: 1, $isExecutableElement: 1, $isFunctionElement: 1, $isFunctionTypedElement: 1, $isLocalElement: 1, $isTypeParameterizedElement: 1, $isElementImpl: 1, $isExecutableElementImpl: 1, $isFunctionElementImpl: 1, $isFunctionTypedElementImpl: 1, $isTypeParameterizedElementMixin: 1, $isTypeParameterSerializationContext: 1, $isExecutableElementForLink: 1, $isFunctionElementForLink_Local: 1, $isParameterParentElementForLink: 1, $isReferenceableElementForLink: 1, $isAnalysisTarget: 1, $is_ExecutableElementImpl_ElementImpl_TypeParameterizedElementMixin: 1, $is_ExecutableElementForLink_Object_TypeParameterizedElementMixin: 1, $is_ExecutableElementForLink_Object_TypeParameterizedElementMixin_ParameterParentElementForLink: 1};
  D.FunctionElementForLink_Local.prototype = {$isElement0: 1, $isExecutableElement: 1, $isFunctionElement: 1, $isFunctionTypedElement: 1, $isLocalElement: 1, $isTypeParameterizedElement: 1, $isElementImpl: 1, $isExecutableElementImpl: 1, $isFunctionElementImpl: 1, $isFunctionTypedElementImpl: 1, $isTypeParameterizedElementMixin: 1, $isTypeParameterSerializationContext: 1, $isExecutableElementForLink: 1, $isParameterParentElementForLink: 1, $isReferenceableElementForLink: 1, $isAnalysisTarget: 1, $is_ExecutableElementImpl_ElementImpl_TypeParameterizedElementMixin: 1, $is_ExecutableElementForLink_Object_TypeParameterizedElementMixin: 1, $is_ExecutableElementForLink_Object_TypeParameterizedElementMixin_ParameterParentElementForLink: 1};
  D.FunctionElementForLink_Local_NonSynthetic.prototype = {$isFunctionElement: 1, $isLocalElement: 1, $isFunctionElementImpl: 1, $isFunctionTypedElementImpl: 1, $isFunctionElementForLink_Local: 1, $isReferenceableElementForLink: 1};
  D.FunctionElementForLink_Synthetic.prototype = {$isFunctionElement: 1, $isLocalElement: 1, $isFunctionElementImpl: 1, $isFunctionTypedElementImpl: 1, $isFunctionElementForLink_Local: 1, $isReferenceableElementForLink: 1};
  D.FunctionTypeAliasElementForLink.prototype = {$isElement0: 1, $isFunctionTypeAliasElement: 1, $isFunctionTypedElement: 1, $isTypeDefiningElement: 1, $isTypeParameterizedElement: 1, $isElementImpl: 1, $isTypeParameterizedElementMixin: 1, $isTypeParameterSerializationContext: 1, $isParameterParentElementForLink: 1, $isReferenceableElementForLink: 1, $isSimplyBoundableForLinkMixin: 1, $isAnalysisTarget: 1};
  D.GenericFunctionTypeElementForLink.prototype = {$isElement0: 1, $isFunctionTypedElement: 1, $isGenericFunctionTypeElement: 1, $isTypeParameterizedElement: 1, $isElementImpl: 1, $isFunctionTypedElementImpl: 1, $isGenericFunctionTypeElementImpl: 1, $isTypeParameterizedElementMixin: 1, $isTypeParameterSerializationContext: 1, $isParameterParentElementForLink: 1, $isReferenceableElementForLink: 1, $isAnalysisTarget: 1, $is_GenericFunctionTypeElementImpl_ElementImpl_TypeParameterizedElementMixin: 1};
  D.GenericTypeAliasElementForLink.prototype = {$isElement0: 1, $isFunctionTypeAliasElement: 1, $isFunctionTypedElement: 1, $isGenericTypeAliasElement: 1, $isTypeDefiningElement: 1, $isTypeParameterizedElement: 1, $isElementImpl: 1, $isGenericTypeAliasElementImpl: 1, $isSimplyBoundableMixin: 1, $isTypeParameterizedElementMixin: 1, $isTypeParameterSerializationContext: 1, $isFunctionTypeAliasElementForLink: 1, $isParameterParentElementForLink: 1, $isReferenceableElementForLink: 1, $isSimplyBoundableForLinkMixin: 1, $isAnalysisTarget: 1, $is_GenericTypeAliasElementImpl_ElementImpl_TypeParameterizedElementMixin: 1, $is_GenericTypeAliasElementImpl_ElementImpl_TypeParameterizedElementMixin_SimplyBoundableMixin: 1, $is_FunctionTypeAliasElementForLink_Object_TypeParameterizedElementMixin: 1, $is_FunctionTypeAliasElementForLink_Object_TypeParameterizedElementMixin_ParameterParentElementForLink: 1, $is_FunctionTypeAliasElementForLink_Object_TypeParameterizedElementMixin_ParameterParentElementForLink_ReferenceableElementForLink: 1, $is_FunctionTypeAliasElementForLink_Object_TypeParameterizedElementMixin_ParameterParentElementForLink_ReferenceableElementForLink_SimplyBoundableForLinkMixin: 1};
  D.InlineFunctionTypeParameterContext.prototype = {$isTypeParameterSerializationContext: 1};
  D.LibraryCycleDependencyWalker.prototype = {
    $asDependencyWalker: function() {
      return [D.LibraryCycleNode];
    }
  };
  D.LibraryCycleForLink.prototype = {};
  D.LibraryCycleNode.prototype = {
    $asNode0: function() {
      return [D.LibraryCycleNode];
    }
  };
  D.LibraryDependencyWalker.prototype = {
    $asDependencyWalker: function() {
      return [D.LibraryNode];
    }
  };
  D.LibraryElementForLink.prototype = {$isElement0: 1, $isLibraryElement: 1, $isElementImpl: 1, $isLibraryElementImpl: 1, $isAnalysisTarget: 1};
  D.LibraryElementInBuildUnit.prototype = {
    $asLibraryElementForLink: function() {
      return [D.CompilationUnitElementInBuildUnit];
    }
  };
  D.LibraryElementInDependency.prototype = {
    $asLibraryElementForLink: function() {
      return [D.CompilationUnitElementInDependency];
    }
  };
  D.LibraryNode.prototype = {
    $asNode0: function() {
      return [D.LibraryNode];
    }
  };
  D.Linker.prototype = {};
  D.MethodElementForLink.prototype = {$isClassMemberElement: 1, $isMethodElement: 1, $isMethodElementImpl: 1, $isReferenceableElementForLink: 1};
  D.Node0.prototype = {};
  D.NonstaticMemberElementForLink.prototype = {$isElement0: 1, $isReferenceableElementForLink: 1, $isAnalysisTarget: 1};
  D.ParameterElementForLink.prototype = {$isElement0: 1, $isLocalElement: 1, $isParameterElement: 1, $isVariableElement: 1, $isConstantEvaluationTarget: 1, $isElementImpl: 1, $isParameterElementImpl: 1, $isParameterElementMixin: 1, $isVariableElementImpl: 1, $isAnalysisTarget: 1, $is_ParameterElementImpl_VariableElementImpl_ParameterElementMixin: 1};
  D.ParameterElementForLink_VariableSetter.prototype = {$isElement0: 1, $isLocalElement: 1, $isParameterElement: 1, $isVariableElement: 1, $isConstantEvaluationTarget: 1, $isElementImpl: 1, $isParameterElementImpl: 1, $isParameterElementMixin: 1, $isVariableElementImpl: 1, $isAnalysisTarget: 1, $is_ParameterElementImpl_VariableElementImpl_ParameterElementMixin: 1};
  D.ParameterParentElementForLink.prototype = {$isElement0: 1, $isAnalysisTarget: 1};
  D.PropertyAccessorElementForLink.prototype = {$isElement0: 1, $isExecutableElement: 1, $isFunctionTypedElement: 1, $isPropertyAccessorElement: 1, $isTypeParameterizedElement: 1, $isElementImpl: 1, $isExecutableElementImpl: 1, $isPropertyAccessorElementImpl: 1, $isTypeParameterizedElementMixin: 1, $isTypeParameterSerializationContext: 1, $isReferenceableElementForLink: 1, $isAnalysisTarget: 1, $is_ExecutableElementImpl_ElementImpl_TypeParameterizedElementMixin: 1};
  D.PropertyAccessorElementForLink_EnumField.prototype = {$isElement0: 1, $isExecutableElement: 1, $isFunctionTypedElement: 1, $isPropertyAccessorElement: 1, $isTypeParameterizedElement: 1, $isElementImpl: 1, $isExecutableElementImpl: 1, $isPropertyAccessorElementImpl: 1, $isTypeParameterizedElementMixin: 1, $isTypeParameterSerializationContext: 1, $isPropertyAccessorElementForLink: 1, $isReferenceableElementForLink: 1, $isAnalysisTarget: 1, $is_ExecutableElementImpl_ElementImpl_TypeParameterizedElementMixin: 1};
  D.PropertyAccessorElementForLink_Executable.prototype = {$isPropertyAccessorElement: 1, $isPropertyAccessorElementImpl: 1, $isPropertyAccessorElementForLink: 1, $isReferenceableElementForLink: 1};
  D.PropertyAccessorElementForLink_Variable.prototype = {$isElement0: 1, $isExecutableElement: 1, $isFunctionTypedElement: 1, $isPropertyAccessorElement: 1, $isTypeParameterizedElement: 1, $isElementImpl: 1, $isExecutableElementImpl: 1, $isPropertyAccessorElementImpl: 1, $isTypeParameterizedElementMixin: 1, $isTypeParameterSerializationContext: 1, $isPropertyAccessorElementForLink: 1, $isReferenceableElementForLink: 1, $isAnalysisTarget: 1, $is_ExecutableElementImpl_ElementImpl_TypeParameterizedElementMixin: 1};
  D.ReferenceableElementForLink.prototype = {$isElement0: 1, $isAnalysisTarget: 1};
  D.SimplyBoundableForLinkMixin.prototype = {$isElement0: 1, $isReferenceableElementForLink: 1, $isAnalysisTarget: 1};
  D.SimplyBoundedDependencyWalker.prototype = {
    $asDependencyWalker: function() {
      return [D.SimplyBoundedNode];
    }
  };
  D.SimplyBoundedNode.prototype = {
    $asNode0: function() {
      return [D.SimplyBoundedNode];
    }
  };
  D.SpecialTypeElementForLink.prototype = {$isElement0: 1, $isReferenceableElementForLink: 1, $isAnalysisTarget: 1};
  D.SyntheticVariableElementForLink.prototype = {$isElement0: 1, $isPropertyInducingElement: 1, $isVariableElement: 1, $isConstantEvaluationTarget: 1, $isElementImpl: 1, $isNonParameterVariableElementImpl: 1, $isPropertyInducingElementImpl: 1, $isVariableElementImpl: 1, $isAnalysisTarget: 1};
  D.TopLevelFunctionElementForLink.prototype = {$isFunctionElement: 1, $isLocalElement: 1, $isFunctionElementImpl: 1, $isFunctionTypedElementImpl: 1, $isReferenceableElementForLink: 1};
  D.TopLevelVariableElementForLink.prototype = {$isTopLevelVariableElement: 1};
  D.TypeInferenceDependencyWalker.prototype = {
    $asDependencyWalker: function() {
      return [D.TypeInferenceNode];
    }
  };
  D.TypeInferenceNode.prototype = {
    $asNode0: function() {
      return [D.TypeInferenceNode];
    }
  };
  D.TypeProviderForLink.prototype = {};
  D.UndefinedElementForLink.prototype = {$isElement0: 1, $isReferenceableElementForLink: 1, $isAnalysisTarget: 1};
  D.VariableElementForLink.prototype = {$isElement0: 1, $isPropertyInducingElement: 1, $isVariableElement: 1, $isConstantEvaluationTarget: 1, $isElementImpl: 1, $isNonParameterVariableElementImpl: 1, $isVariableElementImpl: 1, $isAnalysisTarget: 1};
  D._LibraryResynthesizer.prototype = {};
  D._ReferenceInfo.prototype = {};
  D._UnitResynthesizer.prototype = {$isUnitResynthesizerMixin: 1};
  D._ClassElementForLink_Object_ReferenceableElementForLink.prototype = {$isElement0: 1, $isReferenceableElementForLink: 1, $isAnalysisTarget: 1};
  D._ClassElementForLink_Class_ClassElementForLink_TypeParameterizedElementMixin.prototype = {$isTypeParameterizedElementMixin: 1, $isTypeParameterSerializationContext: 1};
  D._ClassElementForLink_Class_ClassElementForLink_TypeParameterizedElementMixin_SimplyBoundableForLinkMixin.prototype = {$isTypeParameterizedElementMixin: 1, $isTypeParameterSerializationContext: 1, $isSimplyBoundableForLinkMixin: 1};
  D._ConstructorElementForLink_ExecutableElementForLink_NonLocal_ReferenceableElementForLink.prototype = {$isReferenceableElementForLink: 1};
  D._ExecutableElementForLink_Object_TypeParameterizedElementMixin.prototype = {$isElement0: 1, $isTypeParameterizedElement: 1, $isElementImpl: 1, $isTypeParameterizedElementMixin: 1, $isTypeParameterSerializationContext: 1, $isAnalysisTarget: 1};
  D._ExecutableElementForLink_Object_TypeParameterizedElementMixin_ParameterParentElementForLink.prototype = {$isElement0: 1, $isTypeParameterizedElement: 1, $isElementImpl: 1, $isTypeParameterizedElementMixin: 1, $isTypeParameterSerializationContext: 1, $isParameterParentElementForLink: 1, $isAnalysisTarget: 1};
  D._FunctionElementForLink_FunctionTypedParam_Object_ParameterParentElementForLink.prototype = {$isElement0: 1, $isParameterParentElementForLink: 1, $isAnalysisTarget: 1};
  D._FunctionElementForLink_Initializer_Object_ReferenceableElementForLink.prototype = {$isElement0: 1, $isReferenceableElementForLink: 1, $isAnalysisTarget: 1};
  D._FunctionElementForLink_Initializer_Object_ReferenceableElementForLink_TypeParameterizedElementMixin.prototype = {$isElement0: 1, $isTypeParameterizedElement: 1, $isElementImpl: 1, $isTypeParameterizedElementMixin: 1, $isTypeParameterSerializationContext: 1, $isReferenceableElementForLink: 1, $isAnalysisTarget: 1};
  D._FunctionElementForLink_Local_NonSynthetic_ExecutableElementForLink_ReferenceableElementForLink.prototype = {$isReferenceableElementForLink: 1};
  D._FunctionElementForLink_Synthetic_ExecutableElementForLink_ReferenceableElementForLink.prototype = {$isReferenceableElementForLink: 1};
  D._FunctionTypeAliasElementForLink_Object_TypeParameterizedElementMixin.prototype = {$isElement0: 1, $isTypeParameterizedElement: 1, $isElementImpl: 1, $isTypeParameterizedElementMixin: 1, $isTypeParameterSerializationContext: 1, $isAnalysisTarget: 1};
  D._FunctionTypeAliasElementForLink_Object_TypeParameterizedElementMixin_ParameterParentElementForLink.prototype = {$isElement0: 1, $isTypeParameterizedElement: 1, $isElementImpl: 1, $isTypeParameterizedElementMixin: 1, $isTypeParameterSerializationContext: 1, $isParameterParentElementForLink: 1, $isAnalysisTarget: 1};
  D._FunctionTypeAliasElementForLink_Object_TypeParameterizedElementMixin_ParameterParentElementForLink_ReferenceableElementForLink.prototype = {$isElement0: 1, $isTypeParameterizedElement: 1, $isElementImpl: 1, $isTypeParameterizedElementMixin: 1, $isTypeParameterSerializationContext: 1, $isParameterParentElementForLink: 1, $isReferenceableElementForLink: 1, $isAnalysisTarget: 1};
  D._FunctionTypeAliasElementForLink_Object_TypeParameterizedElementMixin_ParameterParentElementForLink_ReferenceableElementForLink_SimplyBoundableForLinkMixin.prototype = {$isElement0: 1, $isTypeParameterizedElement: 1, $isElementImpl: 1, $isTypeParameterizedElementMixin: 1, $isTypeParameterSerializationContext: 1, $isParameterParentElementForLink: 1, $isReferenceableElementForLink: 1, $isSimplyBoundableForLinkMixin: 1, $isAnalysisTarget: 1};
  D._GenericFunctionTypeElementForLink_Object_TypeParameterizedElementMixin.prototype = {$isElement0: 1, $isTypeParameterizedElement: 1, $isElementImpl: 1, $isTypeParameterizedElementMixin: 1, $isTypeParameterSerializationContext: 1, $isAnalysisTarget: 1};
  D._GenericFunctionTypeElementForLink_Object_TypeParameterizedElementMixin_ParameterParentElementForLink.prototype = {$isElement0: 1, $isTypeParameterizedElement: 1, $isElementImpl: 1, $isTypeParameterizedElementMixin: 1, $isTypeParameterSerializationContext: 1, $isParameterParentElementForLink: 1, $isAnalysisTarget: 1};
  D._GenericFunctionTypeElementForLink_Object_TypeParameterizedElementMixin_ParameterParentElementForLink_ReferenceableElementForLink.prototype = {$isElement0: 1, $isTypeParameterizedElement: 1, $isElementImpl: 1, $isTypeParameterizedElementMixin: 1, $isTypeParameterSerializationContext: 1, $isParameterParentElementForLink: 1, $isReferenceableElementForLink: 1, $isAnalysisTarget: 1};
  D._GenericTypeAliasElementForLink_Object_TypeParameterizedElementMixin.prototype = {$isElement0: 1, $isTypeParameterizedElement: 1, $isElementImpl: 1, $isTypeParameterizedElementMixin: 1, $isTypeParameterSerializationContext: 1, $isAnalysisTarget: 1};
  D._GenericTypeAliasElementForLink_Object_TypeParameterizedElementMixin_ParameterParentElementForLink.prototype = {$isElement0: 1, $isTypeParameterizedElement: 1, $isElementImpl: 1, $isTypeParameterizedElementMixin: 1, $isTypeParameterSerializationContext: 1, $isParameterParentElementForLink: 1, $isAnalysisTarget: 1};
  D._GenericTypeAliasElementForLink_Object_TypeParameterizedElementMixin_ParameterParentElementForLink_ReferenceableElementForLink.prototype = {$isElement0: 1, $isTypeParameterizedElement: 1, $isElementImpl: 1, $isTypeParameterizedElementMixin: 1, $isTypeParameterSerializationContext: 1, $isParameterParentElementForLink: 1, $isReferenceableElementForLink: 1, $isAnalysisTarget: 1};
  D._GenericTypeAliasElementForLink_Object_TypeParameterizedElementMixin_ParameterParentElementForLink_ReferenceableElementForLink_SimplyBoundableForLinkMixin.prototype = {$isElement0: 1, $isTypeParameterizedElement: 1, $isElementImpl: 1, $isTypeParameterizedElementMixin: 1, $isTypeParameterSerializationContext: 1, $isParameterParentElementForLink: 1, $isReferenceableElementForLink: 1, $isSimplyBoundableForLinkMixin: 1, $isAnalysisTarget: 1};
  D._MethodElementForLink_ExecutableElementForLink_NonLocal_ReferenceableElementForLink.prototype = {$isReferenceableElementForLink: 1};
  D._NonstaticMemberElementForLink_Object_ReferenceableElementForLink.prototype = {$isElement0: 1, $isReferenceableElementForLink: 1, $isAnalysisTarget: 1};
  D._PropertyAccessorElementForLink_EnumField_Object_ReferenceableElementForLink.prototype = {$isElement0: 1, $isReferenceableElementForLink: 1, $isAnalysisTarget: 1};
  D._PropertyAccessorElementForLink_Executable_ExecutableElementForLink_NonLocal_ReferenceableElementForLink.prototype = {$isReferenceableElementForLink: 1};
  D._PropertyAccessorElementForLink_Variable_Object_ReferenceableElementForLink.prototype = {$isElement0: 1, $isReferenceableElementForLink: 1, $isAnalysisTarget: 1};
  D._SpecialTypeElementForLink_Object_ReferenceableElementForLink.prototype = {$isElement0: 1, $isReferenceableElementForLink: 1, $isAnalysisTarget: 1};
  D._TopLevelFunctionElementForLink_ExecutableElementForLink_NonLocal_ReferenceableElementForLink.prototype = {$isReferenceableElementForLink: 1};
  D._UndefinedElementForLink_Object_ReferenceableElementForLink.prototype = {$isElement0: 1, $isReferenceableElementForLink: 1, $isAnalysisTarget: 1};
  D.__UnitResynthesizer_UnitResynthesizer_UnitResynthesizerMixin.prototype = {$isUnitResynthesizerMixin: 1};
  N.NameFilter.prototype = {};
  E.ConflictingSummaryException.prototype = {$isException: 1};
  E.InputPackagesResultProvider.prototype = {};
  E.InSummaryPackageUriResolver.prototype = {};
  E.InSummarySource.prototype = {};
  E.InSummaryUriResolver.prototype = {};
  E.ResynthesizerResultProvider.prototype = {};
  E.StoreBasedSummaryResynthesizer.prototype = {};
  E.SummaryDataStore.prototype = {};
  M._ClassMeaning.prototype = {};
  M._ExportNamespace.prototype = {};
  M._Meaning.prototype = {};
  M._Namespace0.prototype = {};
  M._PrefixMeaning.prototype = {};
  M._Prelinker.prototype = {};
  U._CombinatorEncoder.prototype = {
    $asAstVisitor: function() {
      return [X.UnlinkedCombinatorBuilder];
    },
    $asSimpleAstVisitor: function() {
      return [X.UnlinkedCombinatorBuilder];
    },
    $asUIAsCodeVisitorMixin: function() {
      return [X.UnlinkedCombinatorBuilder];
    },
    $as_SimpleAstVisitor_Object_UIAsCodeVisitorMixin: function() {
      return [X.UnlinkedCombinatorBuilder];
    }
  };
  U._PublicNamespaceVisitor.prototype = {
    $asAstVisitor: function() {
    },
    $asRecursiveAstVisitor: function() {
    },
    $asUIAsCodeVisitorMixin: function() {
    },
    $as_RecursiveAstVisitor_Object_UIAsCodeVisitorMixin: function() {
    }
  };
  N.LibraryResynthesizer.prototype = {};
  N.LibraryResynthesizerContextMixin.prototype = {$isLibraryResynthesizerContext: 1};
  N.LibraryResynthesizerMixin.prototype = {$isLibraryResynthesizer: 1};
  N.RecursiveInstantiateToBounds.prototype = {};
  N.ReferenceInfo.prototype = {};
  N.SummaryResynthesizer.prototype = {};
  N.SummaryResynthesizerContext.prototype = {$isResynthesizerContext: 1};
  N.UnitResynthesizer.prototype = {};
  N.UnitResynthesizerMixin.prototype = {$isUnitResynthesizer: 1};
  N._DeferredInitializerElement.prototype = {};
  N._LibraryResynthesizer0.prototype = {};
  N._LibraryResynthesizerContext.prototype = {};
  N._ReferenceInfo0.prototype = {};
  N._UnitResynthesizer0.prototype = {$isUnitResynthesizerMixin: 1};
  N.__UnitResynthesizer_UnitResynthesizer_UnitResynthesizerMixin0.prototype = {$isUnitResynthesizerMixin: 1};
  U._ConstExprSerializer.prototype = {};
  U._Scope.prototype = {};
  U._ScopedClassMember.prototype = {};
  U._ScopedEntity.prototype = {};
  U._ScopedTypeParameter.prototype = {};
  U._SummarizeAstVisitor.prototype = {
    $asAstVisitor: function() {
    },
    $asRecursiveAstVisitor: function() {
    },
    $asUIAsCodeVisitorMixin: function() {
    },
    $as_RecursiveAstVisitor_Object_UIAsCodeVisitorMixin: function() {
    }
  };
  U._TypeParameterScope.prototype = {};
  F.AbstractConstExprSerializer.prototype = {};
  E.SummaryBasedDartSdk.prototype = {$isDartSdk: 1};
  E.SummaryTypeProvider.prototype = {};
  R.AstBinaryReader.prototype = {};
  M.LinkedBundleContext.prototype = {};
  G.LinkedElementFactory.prototype = {};
  G._ElementRequest.prototype = {};
  G._Library.prototype = {};
  F.LinkedUnitContext.prototype = {};
  F.Reference.prototype = {};
  Y.TokensContext.prototype = {};
  O.TokensResult.prototype = {};
  O.TokensWriter.prototype = {};
  O.LibrarySpecificUnit.prototype = {$isAnalysisTarget: 1};
  Z.AnalysisContextTarget.prototype = {$isAnalysisTarget: 1};
  Z.AnalysisTarget.prototype = {};
  Z.AnalysisTask.prototype = {};
  Z.ListResultDescriptor.prototype = {$isResultDescriptor: 1,
    $asResultDescriptor: function($E) {
      return [[P.List, $E]];
    }
  };
  Z.ListTaskInput.prototype = {$isTaskInput: 1,
    $asTaskInput: function($E) {
      return [[P.List, $E]];
    }
  };
  Z.MapTaskInput.prototype = {$isTaskInput: 1,
    $asTaskInput: function($K, $V) {
      return [[P.Map, $K, $V]];
    }
  };
  Z.ModificationTimeMismatchError.prototype = {};
  Z.ResultCachingPolicy.prototype = {};
  Z.ResultDescriptor.prototype = {};
  Z.TargetedResult.prototype = {};
  Z.TaskDescriptor.prototype = {};
  Z.TaskInput.prototype = {};
  Z.TaskInputBuilder.prototype = {};
  Z.TaskSuitability.prototype = {};
  Z.WorkManager.prototype = {};
  Z.WorkOrderPriority.prototype = {};
  O.BuildCompilationUnitElementTask.prototype = {};
  O.BuildDirectiveElementsTask.prototype = {};
  O.BuildEnumMemberElementsTask.prototype = {};
  O.BuildExportNamespaceTask.prototype = {};
  O.BuildLibraryElementTask.prototype = {};
  O.BuildPublicNamespaceTask.prototype = {};
  O.BuildSourceExportClosureTask.prototype = {};
  O.BuildTypeProviderTask.prototype = {};
  O.ComputeConstantDependenciesTask.prototype = {};
  O.ComputeConstantValueTask.prototype = {};
  O.ComputeInferableStaticVariableDependenciesTask.prototype = {};
  O.ComputeLibraryCycleTask.prototype = {};
  O.ComputeRequiredConstantsTask.prototype = {};
  O.ConstantEvaluationAnalysisTask.prototype = {};
  O.ContainingLibrariesTask.prototype = {};
  O.DartErrorsTask.prototype = {};
  O.EvaluateUnitConstantsTask.prototype = {};
  O.GatherUsedImportedElementsTask.prototype = {};
  O.GatherUsedLocalElementsTask.prototype = {};
  O.GenerateHintsTask.prototype = {};
  O.GenerateLintsTask.prototype = {};
  O.InferInstanceMembersInUnitTask.prototype = {};
  O.InferStaticVariableTask.prototype = {};
  O.InferStaticVariableTypesInUnitTask.prototype = {};
  O.InferStaticVariableTypeTask.prototype = {};
  O.LibraryErrorsReadyTask.prototype = {};
  O.LibraryUnitErrorsTask.prototype = {};
  O.ParseDartTask.prototype = {};
  O.PartiallyResolveUnitReferencesTask.prototype = {};
  O.ReadyLibraryElement2Task.prototype = {};
  O.ReadyLibraryElement5Task.prototype = {};
  O.ReadyLibraryElement7Task.prototype = {};
  O.ReadyResolvedUnitTask.prototype = {};
  O.ResolveConstantExpressionTask.prototype = {};
  O.ResolveDirectiveElementsTask.prototype = {};
  O.ResolvedUnit7InLibraryClosureTask.prototype = {};
  O.ResolvedUnit7InLibraryTask.prototype = {};
  O.ResolveInstanceFieldsInUnitTask.prototype = {};
  O.ResolveLibraryReferencesTask.prototype = {};
  O.ResolveLibraryTask.prototype = {};
  O.ResolveLibraryTypeNamesTask.prototype = {};
  O.ResolveTopLevelLibraryTypeBoundsTask.prototype = {};
  O.ResolveTopLevelUnitTypeBoundsTask.prototype = {};
  O.ResolveUnitTask.prototype = {};
  O.ResolveUnitTypeNamesTask.prototype = {};
  O.ResolveVariableReferencesTask.prototype = {};
  O.ScanDartTask.prototype = {};
  O.StrongModeVerifyUnitTask.prototype = {};
  O.VerifyUnitTask.prototype = {};
  O._ExportSourceClosureTaskInput.prototype = {
    $asTaskInput: function() {
      return [[P.List, Z.Source]];
    },
    $asTaskInputImpl: function() {
      return [[P.List, Z.Source]];
    }
  };
  O._NameOrSource0.prototype = {};
  O._SourceClosureKind.prototype = {};
  O._SourceClosureTaskInputBuilder.prototype = {$isTaskInputBuilder: 1,
    $asTaskInputBuilder: function() {
      return [[P.List, Z.Source]];
    }
  };
  G.DartWorkManager.prototype = {$isWorkManager: 1};
  L.AnalysisDriver0.prototype = {};
  L.CycleAwareDependencyWalker.prototype = {};
  L.ExtendedAnalysisContext.prototype = {$isAnalysisContext0: 1, $isInternalAnalysisContext: 1};
  L.InfiniteTaskLoopException.prototype = {};
  L.StronglyConnectedComponent.prototype = {};
  L.WorkItem.prototype = {};
  L.WorkOrder.prototype = {$isIterator: 1,
    $asIterator: function() {
      return [L.WorkItem];
    }
  };
  L._WorkOrderDependencyWalker.prototype = {
    $asCycleAwareDependencyWalker: function() {
      return [L.WorkItem];
    }
  };
  R.GetContentTask.prototype = {};
  R.SourceBasedAnalysisTask.prototype = {};
  V.ConstantTaskInput.prototype = {};
  V.ConstantTaskInputBuilder.prototype = {$isTaskInputBuilder: 1};
  V.ListTaskInputImpl.prototype = {$isListTaskInput: 1,
    $asTaskInput: function($E) {
      return [[P.List, $E]];
    },
    $isListTaskInputMixin: 1,
    $asSimpleTaskInput: function($E) {
      return [[P.List, $E]];
    },
    $asTaskInputImpl: function($E) {
      return [[P.List, $E]];
    }
  };
  V.ListTaskInputMixin.prototype = {$isListTaskInput: 1, $isTaskInput: 1,
    $asTaskInput: function($E) {
      return [[P.List, $E]];
    }
  };
  V.ListToFlattenListTaskInput.prototype = {$isListTaskInput: 1,
    $asListTaskInput: function($B, $E) {
      return [$E];
    },
    $asTaskInput: function($B, $E) {
      return [[P.List, $E]];
    },
    $isListTaskInputMixin: 1,
    $asListTaskInputMixin: function($B, $E) {
      return [$E];
    },
    $asTaskInputImpl: function($B, $E) {
      return [[P.List, $E]];
    },
    $as_ListToCollectionTaskInput: function($B, $E) {
      return [$B, $E, [P.List, $E]];
    }
  };
  V.ListToFlattenListTaskInputBuilder.prototype = {
    $asTaskInputBuilder: function($B, $E) {
      return [[P.List, $E]];
    },
    $as_ListToCollectionTaskInputBuilder: function($B, $E) {
      return [$B, $E, [P.List, $E]];
    }
  };
  V.ListToListTaskInput.prototype = {$isListTaskInput: 1,
    $asListTaskInput: function($B, $E) {
      return [$E];
    },
    $asTaskInput: function($B, $E) {
      return [[P.List, $E]];
    },
    $isListTaskInputMixin: 1,
    $asListTaskInputMixin: function($B, $E) {
      return [$E];
    },
    $asTaskInputImpl: function($B, $E) {
      return [[P.List, $E]];
    },
    $as_ListToCollectionTaskInput: function($B, $E) {
      return [$B, $E, [P.List, $E]];
    }
  };
  V.ListToListTaskInputBuilder.prototype = {
    $asTaskInputBuilder: function($B, $E) {
      return [[P.List, $E]];
    },
    $as_ListToCollectionTaskInputBuilder: function($B, $E) {
      return [$B, $E, [P.List, $E]];
    }
  };
  V.ListToMapTaskInput.prototype = {$isMapTaskInput: 1,
    $asTaskInput: function($B, $E) {
      return [[P.Map, $B, $E]];
    },
    $isMapTaskInputMixin: 1,
    $asTaskInputImpl: function($B, $E) {
      return [[P.Map, $B, $E]];
    },
    $as_ListToCollectionTaskInput: function($B, $E) {
      return [$B, $E, [P.Map, $B, $E]];
    }
  };
  V.ListToMapTaskInputBuilder.prototype = {
    $asTaskInputBuilder: function($B, $E) {
      return [[P.Map, $B, $E]];
    },
    $as_ListToCollectionTaskInputBuilder: function($B, $E) {
      return [$B, $E, [P.Map, $B, $E]];
    }
  };
  V.MapTaskInputMixin.prototype = {$isMapTaskInput: 1, $isTaskInput: 1,
    $asTaskInput: function($K, $V) {
      return [[P.Map, $K, $V]];
    }
  };
  V.MapToFlattenListTaskInput.prototype = {
    $asTaskInput: function($K, $V, $E) {
      return [[P.List, $E]];
    },
    $asTaskInputImpl: function($K, $V, $E) {
      return [[P.List, $E]];
    }
  };
  V.MapToFlattenListTaskInputBuilder.prototype = {$isTaskInputBuilder: 1,
    $asTaskInputBuilder: function($K, $V, $E) {
      return [[P.List, $E]];
    }
  };
  V.ObjectToListTaskInput.prototype = {$isListTaskInput: 1,
    $asTaskInput: function($E) {
      return [[P.List, $E]];
    },
    $isListTaskInputMixin: 1,
    $asTaskInputImpl: function($E) {
      return [[P.List, $E]];
    }
  };
  V.ObjectToListTaskInputBuilder.prototype = {$isTaskInputBuilder: 1,
    $asTaskInputBuilder: function($E) {
      return [[P.List, $E]];
    }
  };
  V.SimpleTaskInput.prototype = {};
  V.SimpleTaskInputBuilder.prototype = {$isTaskInputBuilder: 1};
  V.TaskInputImpl.prototype = {$isTaskInput: 1};
  V.TopLevelTaskInputBuilder.prototype = {$isTaskInputBuilder: 1,
    $asTaskInputBuilder: function() {
      return [[P.Map, P.String, P.Object]];
    }
  };
  V._ListToCollectionTaskInput.prototype = {
    $asTaskInput: function($B, $E, $C) {
      return [$C];
    },
    $asTaskInputImpl: function($B, $E, $C) {
      return [$C];
    }
  };
  V._ListToCollectionTaskInputBuilder.prototype = {$isTaskInputBuilder: 1,
    $asTaskInputBuilder: function($B, $E, $C) {
      return [$C];
    }
  };
  V._ListTaskInputImpl_SimpleTaskInput_ListTaskInputMixin.prototype = {$isListTaskInput: 1,
    $asTaskInput: function($E) {
      return [[P.List, $E]];
    },
    $isListTaskInputMixin: 1,
    $asSimpleTaskInput: function($E) {
      return [[P.List, $E]];
    },
    $asTaskInputImpl: function($E) {
      return [[P.List, $E]];
    }
  };
  V._ListToFlattenListTaskInput__ListToCollectionTaskInput_ListTaskInputMixin.prototype = {$isListTaskInput: 1,
    $asListTaskInput: function($B, $E) {
      return [$E];
    },
    $asTaskInput: function($B, $E) {
      return [[P.List, $E]];
    },
    $isListTaskInputMixin: 1,
    $asListTaskInputMixin: function($B, $E) {
      return [$E];
    },
    $asTaskInputImpl: function($B, $E) {
      return [[P.List, $E]];
    },
    $as_ListToCollectionTaskInput: function($B, $E) {
      return [$B, $E, [P.List, $E]];
    }
  };
  V._ListToListTaskInput__ListToCollectionTaskInput_ListTaskInputMixin.prototype = {$isListTaskInput: 1,
    $asListTaskInput: function($B, $E) {
      return [$E];
    },
    $asTaskInput: function($B, $E) {
      return [[P.List, $E]];
    },
    $isListTaskInputMixin: 1,
    $asListTaskInputMixin: function($B, $E) {
      return [$E];
    },
    $asTaskInputImpl: function($B, $E) {
      return [[P.List, $E]];
    },
    $as_ListToCollectionTaskInput: function($B, $E) {
      return [$B, $E, [P.List, $E]];
    }
  };
  V._ListToMapTaskInput__ListToCollectionTaskInput_MapTaskInputMixin.prototype = {$isMapTaskInput: 1,
    $asTaskInput: function($B, $E) {
      return [[P.Map, $B, $E]];
    },
    $isMapTaskInputMixin: 1,
    $asTaskInputImpl: function($B, $E) {
      return [[P.Map, $B, $E]];
    },
    $as_ListToCollectionTaskInput: function($B, $E) {
      return [$B, $E, [P.Map, $B, $E]];
    }
  };
  V._ObjectToListTaskInput_TaskInputImpl_ListTaskInputMixin.prototype = {$isListTaskInput: 1,
    $asTaskInput: function($E) {
      return [[P.List, $E]];
    },
    $isListTaskInputMixin: 1,
    $asTaskInputImpl: function($E) {
      return [[P.List, $E]];
    }
  };
  Q.TaskManager.prototype = {};
  Z.ListResultDescriptorImpl.prototype = {$isListResultDescriptor: 1,
    $asResultDescriptor: function($E) {
      return [[P.List, $E]];
    },
    $asResultDescriptorImpl: function($E) {
      return [[P.List, $E]];
    }
  };
  Z.ResultDescriptorImpl.prototype = {$isResultDescriptor: 1};
  Z.SimpleResultCachingPolicy.prototype = {$isResultCachingPolicy: 1};
  Z.TaskDescriptorImpl.prototype = {$isTaskDescriptor: 1};
  B.AnalyzerOptions.prototype = {};
  B.AnalyzerOptionsValidator.prototype = {};
  B.CompositeValidator.prototype = {};
  B.EnabledExperimentsValidator.prototype = {};
  B.ErrorBuilder.prototype = {};
  B.ErrorFilterOptionValidator.prototype = {};
  B.GenerateOptionsErrorsTask.prototype = {};
  B.LanguageOptionValidator.prototype = {};
  B.LinterOptionsValidator.prototype = {};
  B.OptionsFileValidator.prototype = {};
  B.StrongModeOptionValueValidator.prototype = {};
  B.TopLevelAnalyzerOptionsValidator.prototype = {};
  B.TopLevelOptionValidator.prototype = {};
  B.TrueOrFalseValueErrorBuilder.prototype = {};
  B._OptionsProcessor.prototype = {};
  B.CodeChecker.prototype = {
    $asAstVisitor: function() {
    },
    $asRecursiveAstVisitor: function() {
    },
    $asUIAsCodeVisitorMixin: function() {
    },
    $as_RecursiveAstVisitor_Object_UIAsCodeVisitorMixin: function() {
    }
  };
  B._OverrideChecker.prototype = {};
  B._TopLevelInitializerValidator.prototype = {
    $asAstVisitor: function() {
      return [-1];
    },
    $asRecursiveAstVisitor: function() {
      return [-1];
    },
    $asUIAsCodeVisitorMixin: function() {
      return [-1];
    },
    $as_RecursiveAstVisitor_Object_UIAsCodeVisitorMixin: function() {
      return [-1];
    }
  };
  Q.InstanceMemberInferrer.prototype = {};
  Q.VariableGatherer.prototype = {
    $asAstVisitor: function() {
    },
    $asRecursiveAstVisitor: function() {
    },
    $asUIAsCodeVisitorMixin: function() {
    },
    $as_RecursiveAstVisitor_Object_UIAsCodeVisitorMixin: function() {
    }
  };
  Q._CycleException.prototype = {$isException: 1};
  Q._FieldOverrideInferenceResult.prototype = {};
  B.Merger.prototype = {};
  T.BasicWorkspace.prototype = {};
  T.BasicWorkspacePackage.prototype = {};
  V.BazelFileUriResolver.prototype = {};
  V.BazelPackageUriResolver.prototype = {};
  V.BazelWorkspace.prototype = {};
  V.BazelWorkspacePackage.prototype = {};
  D.GnWorkspace.prototype = {};
  D.GnWorkspacePackage.prototype = {};
  G.PackageBuildFileUriResolver.prototype = {};
  G.PackageBuildPackageUriResolver.prototype = {};
  G.PackageBuildWorkspace.prototype = {};
  G.PackageBuildWorkspacePackage.prototype = {};
  B.PubWorkspace.prototype = {};
  B.PubWorkspacePackage.prototype = {};
  M.SimpleWorkspace.prototype = {};
  Y.Workspace.prototype = {};
  Y.WorkspacePackage.prototype = {};
  D.Archive.prototype = {
    $asIterableBase: function() {
      return [B.ArchiveFile];
    },
    $asIterable: function() {
      return [B.ArchiveFile];
    }
  };
  B.ArchiveFile.prototype = {};
  A.Bz2BitReader.prototype = {};
  M.Bz2BitWriter.prototype = {};
  U.BZip2.prototype = {};
  L.BZip2Decoder.prototype = {};
  D.BZip2Encoder.prototype = {};
  M.GZipDecoder.prototype = {};
  D.GZipEncoder.prototype = {};
  V.TarFile.prototype = {};
  Q.TarDecoder.prototype = {};
  S.TarEncoder.prototype = {};
  T.Adler32.prototype = {};
  T._Adler32Sink.prototype = {};
  R.ArchiveException.prototype = {$isException: 1};
  X.Crc32.prototype = {};
  X._Crc32Sink.prototype = {};
  T.InputStreamBase.prototype = {};
  T.InputStream.prototype = {};
  T.MemPtr.prototype = {};
  Q.OutputStreamBase.prototype = {};
  Q.OutputStream.prototype = {};
  E.ZipDirectory.prototype = {};
  Q.ZipFile.prototype = {};
  X.ZipFileHeader.prototype = {};
  Q.ZipDecoder.prototype = {};
  K._ZipFileData.prototype = {};
  K._ZipEncoderData.prototype = {};
  K.ZipEncoder.prototype = {};
  G._ZLibDecoder.prototype = {};
  T.Deflate.prototype = {};
  T._DeflaterConfig.prototype = {};
  T._HuffmanTree.prototype = {};
  T._StaticTree.prototype = {};
  Y.HuffmanTable.prototype = {};
  S.Inflate.prototype = {};
  Z.ZLibDecoderBase.prototype = {};
  Z.ZLibDecoder0.prototype = {};
  X.ZLibEncoder0.prototype = {};
  Y.AllowAnythingParser.prototype = {$isArgParser: 1};
  N.ArgParser.prototype = {};
  Z.ArgParserException.prototype = {};
  V.ArgResults.prototype = {};
  G.Option.prototype = {};
  G.OptionType.prototype = {};
  G.Parser0.prototype = {};
  G.Usage.prototype = {};
  S.AsyncCache.prototype = {};
  S.AsyncMemoizer.prototype = {};
  E.CancelableOperation.prototype = {};
  E.CancelableCompleter0.prototype = {};
  V.DelegatingEventSink.prototype = {$isEventSink: 1, $isSink: 1};
  R.DelegatingFuture.prototype = {$isFuture: 1};
  O.DelegatingSink.prototype = {$isSink: 1};
  Y.DelegatingStream.prototype = {};
  G.DelegatingStreamConsumer.prototype = {$isStreamConsumer: 1};
  O.DelegatingStreamSink.prototype = {$isEventSink: 1, $isStreamConsumer: 1, $isStreamSink: 1, $isSink: 1};
  Y.DelegatingStreamSubscription.prototype = {$isStreamSubscription: 1};
  F.FutureGroup.prototype = {$isSink: 1,
    $asSink: function($T) {
      return [[P.Future, $T]];
    }
  };
  V.LazyStream.prototype = {};
  S.NullStreamSink.prototype = {$isEventSink: 1, $isStreamConsumer: 1, $isStreamSink: 1, $isSink: 1};
  L.RestartableTimer.prototype = {$isTimer: 1};
  U.CaptureSink.prototype = {$isEventSink: 1, $isSink: 1};
  Z.CaptureStreamTransformer.prototype = {
    $asStreamTransformer: function($T) {
      return [$T, [E.Result, $T]];
    },
    $asStreamTransformerBase: function($T) {
      return [$T, [E.Result, $T]];
    }
  };
  V.ErrorResult.prototype = {$isResult: 1,
    $asResult: function() {
      return [P.Null];
    }
  };
  R.ResultFuture.prototype = {};
  A.ReleaseSink.prototype = {$isEventSink: 1,
    $asEventSink: function($T) {
      return [[E.Result, $T]];
    },
    $isSink: 1,
    $asSink: function($T) {
      return [[E.Result, $T]];
    }
  };
  D.ReleaseStreamTransformer.prototype = {
    $asStreamTransformer: function($T) {
      return [[E.Result, $T], $T];
    },
    $asStreamTransformerBase: function($T) {
      return [[E.Result, $T], $T];
    }
  };
  E.Result.prototype = {};
  F.ValueResult.prototype = {$isResult: 1};
  B.SingleSubscriptionTransformer.prototype = {};
  Y.StreamCompleter.prototype = {};
  Y._CompleterStream.prototype = {};
  L.StreamGroup.prototype = {$isSink: 1,
    $asSink: function($T) {
      return [[P.Stream, $T]];
    }
  };
  L._StreamGroupState.prototype = {};
  G.StreamQueue.prototype = {};
  G.StreamQueueTransaction.prototype = {};
  G._EventRequest.prototype = {};
  G._NextRequest.prototype = {$is_EventRequest: 1};
  G._PeekRequest.prototype = {$is_EventRequest: 1};
  G._SkipRequest.prototype = {$is_EventRequest: 1};
  G._ListRequest.prototype = {$is_EventRequest: 1};
  G._TakeRequest.prototype = {};
  G._LookAheadRequest.prototype = {};
  G._CancelRequest.prototype = {$is_EventRequest: 1};
  G._RestRequest.prototype = {$is_EventRequest: 1};
  G._HasNextRequest.prototype = {$is_EventRequest: 1};
  G._TransactionRequest.prototype = {$is_EventRequest: 1};
  T.StreamSinkCompleter.prototype = {};
  T._CompleterSink.prototype = {$isEventSink: 1, $isStreamConsumer: 1, $isStreamSink: 1, $isSink: 1};
  F.StreamSinkTransformer.prototype = {};
  X.HandlerTransformer.prototype = {$isStreamSinkTransformer: 1};
  X._HandlerSink.prototype = {$isEventSink: 1,
    $asEventSink: function($S, $T) {
      return [$S];
    },
    $isStreamConsumer: 1,
    $asStreamConsumer: function($S, $T) {
      return [$S];
    },
    $isStreamSink: 1,
    $asStreamSink: function($S, $T) {
      return [$S];
    },
    $isSink: 1,
    $asSink: function($S, $T) {
      return [$S];
    }
  };
  X._SafeCloseSink.prototype = {};
  Q.StreamTransformerWrapper.prototype = {$isStreamSinkTransformer: 1};
  Q._StreamTransformerWrapperSink.prototype = {$isEventSink: 1,
    $asEventSink: function($S, $T) {
      return [$S];
    },
    $isStreamConsumer: 1,
    $asStreamConsumer: function($S, $T) {
      return [$S];
    },
    $isStreamSink: 1,
    $asStreamSink: function($S, $T) {
      return [$S];
    },
    $isSink: 1,
    $asSink: function($S, $T) {
      return [$S];
    }
  };
  M.TypeSafeStreamSinkTransformer.prototype = {$isStreamSinkTransformer: 1};
  N.StreamSplitter.prototype = {};
  D._TransformedSubscription.prototype = {$isStreamSubscription: 1};
  L.StreamZip.prototype = {
    $asStream: function($T) {
      return [[P.List, $T]];
    }
  };
  T.SubscriptionStream.prototype = {};
  T._CancelOnErrorSubscriptionWrapper.prototype = {};
  Y.TypeSafeStreamSubscription.prototype = {$isStreamSubscription: 1};
  M._TypeSafeStreamTransformer.prototype = {};
  G.AsyncMessageGrouper.prototype = {$isMessageGrouper: 1};
  L.BazelWorkerDriver.prototype = {};
  L._WorkAttempt.prototype = {};
  N.DriverConnection.prototype = {};
  N.StdDriverConnection.prototype = {$isDriverConnection: 1};
  N.IsolateDriverConnection.prototype = {$isDriverConnection: 1};
  M.MessageGrouper.prototype = {};
  Y.MessageGrouperState.prototype = {};
  Y._LengthReader.prototype = {};
  Y._MessageReader.prototype = {};
  X.SyncMessageGrouper.prototype = {$isMessageGrouper: 1};
  N.AsyncWorkerLoop.prototype = {$isWorkerLoop: 1};
  M.SyncWorkerLoop.prototype = {$isWorkerLoop: 1};
  S.WorkerConnection.prototype = {};
  S.AsyncWorkerConnection.prototype = {$isWorkerConnection: 1};
  S.SyncWorkerConnection.prototype = {$isWorkerConnection: 1};
  S.StdAsyncWorkerConnection.prototype = {$isWorkerConnection: 1, $isAsyncWorkerConnection: 1};
  S.SendPortAsyncWorkerConnection.prototype = {$isWorkerConnection: 1, $isAsyncWorkerConnection: 1};
  S.StdSyncWorkerConnection.prototype = {$isWorkerConnection: 1, $isSyncWorkerConnection: 1};
  O.WorkerLoop.prototype = {};
  M.Input.prototype = {};
  M.WorkRequest.prototype = {};
  M.WorkResponse.prototype = {};
  L.Resolver.prototype = {};
  L.ReleasableResolver.prototype = {$isResolver: 1};
  L.Resolvers.prototype = {};
  L.NonLibraryAssetException.prototype = {$isException: 1};
  T.AssetNotFoundException.prototype = {$isException: 1};
  T.PackageNotFoundException.prototype = {$isException: 1};
  T.InvalidOutputException.prototype = {$isException: 1};
  T.InvalidInputException.prototype = {$isException: 1};
  T.BuildStepCompletedException.prototype = {$isException: 1};
  T.UnresolvableAssetException.prototype = {$isException: 1};
  N.AssetId.prototype = {$isComparable: 1,
    $asComparable: function() {
      return [N.AssetId];
    }
  };
  D.AssetReader.prototype = {};
  D.MultiPackageAssetReader.prototype = {};
  X.AssetWriter.prototype = {};
  X.AssetWriterSpy.prototype = {$isAssetWriter: 1};
  M.BuildStep.prototype = {$isAssetReader: 1, $isAssetWriter: 1};
  M.StageTracker.prototype = {};
  M.NoOpStageTracker.prototype = {$isStageTracker: 1};
  V.BuildStepImpl.prototype = {$isAssetReader: 1, $isAssetWriter: 1, $isBuildStep: 1};
  V._DelayedResolver.prototype = {$isResolver: 1};
  R.Builder0.prototype = {};
  R.BuilderOptions.prototype = {};
  T.UnexpectedOutputException.prototype = {$isException: 1};
  F.FileDeletingBuilder.prototype = {$isPostProcessBuilder: 1};
  B.MultiplexingBuilder.prototype = {$isBuilder0: 1};
  F.PostProcessBuildStep.prototype = {};
  G.PostProcessBuilder.prototype = {};
  Y.Resource0.prototype = {};
  Y.ResourceManager.prototype = {};
  R.ModuleStrategy.prototype = {};
  A._WorkerException.prototype = {$isException: 1};
  A.AnalyzerSummaryException.prototype = {};
  A.KernelException.prototype = {};
  A.MissingModulesException.prototype = {$isException: 1};
  L.KernelBuilder.prototype = {$isBuilder0: 1};
  L._ModuleNode.prototype = {};
  Z.MetaModule.prototype = {};
  F.MetaModuleBuilder.prototype = {$isBuilder0: 1};
  N.MetaModuleCleanBuilder.prototype = {$isBuilder0: 1};
  Z._CleanMetaModuleCache.prototype = {};
  Z.ModuleBuilder.prototype = {$isBuilder0: 1};
  K.ModuleLibrary.prototype = {};
  S.ModuleLibraryBuilder.prototype = {$isBuilder0: 1};
  U.Module.prototype = {};
  U._AssetIdConverter.prototype = {$isJsonConverter: 1,
    $asJsonConverter: function() {
      return [N.AssetId, [P.List,,]];
    }
  };
  U._DartPlatformConverter.prototype = {$isJsonConverter: 1,
    $asJsonConverter: function() {
      return [T.DartPlatform, P.String];
    }
  };
  T.DartPlatform.prototype = {};
  R.UnlinkedSummaryBuilder.prototype = {$isBuilder0: 1};
  R.LinkedSummaryBuilder.prototype = {$isBuilder0: 1};
  M.Dart2JsBatchWorkerPool.prototype = {};
  M._Dart2JsWorker.prototype = {};
  M._Dart2JsJob.prototype = {};
  M.Dart2JsResult.prototype = {};
  B.Dart2JsArchiveExtractor.prototype = {$isPostProcessBuilder: 1};
  Q.DevCompilerBuilder.prototype = {$isBuilder0: 1};
  Q.fixSourceMapSources_closure.prototype = {
    call$1: function(source) {
      var uri = P.Uri_parse(H.stringTypeCheck(source)),
        newSegments = J.$eq$(J.get$first$ax(uri.get$pathSegments()), "packages") ? uri.get$pathSegments() : J.skip$1$ax(uri.get$pathSegments(), 1);
      return J.toString$0$(P._Uri__Uri(null, $.$get$url().joinAll$1(C.JSArray_methods.followedBy$1(H.setRuntimeTypeInfo(["/"], [P.String]), newSegments)), null, null));
    },
    $signature: 3
  };
  A._WorkerException0.prototype = {$isException: 1};
  A.AnalyzerSummaryException0.prototype = {};
  A.DartDevcCompilationException.prototype = {};
  A.KernelSummaryException.prototype = {};
  B.WebCompiler.prototype = {};
  B.WebEntrypointBuilder.prototype = {$isBuilder0: 1};
  M.CanonicalizedMap.prototype = {$isMap: 1,
    $asMap: function($C, $K, $V) {
      return [$K, $V];
    }
  };
  S.CombinedIterableView.prototype = {};
  S._CombinedIterator.prototype = {$isIterator: 1};
  B.CombinedListView.prototype = {$isUnmodifiableListMixin: 1, $isUnmodifiableListBase: 1, $isUnmodifiableListView: 1};
  L.CombinedMapView.prototype = {};
  O.EmptyUnmodifiableSet.prototype = {$isEfficientLengthIterable: 1, $isSet: 1, $isUnmodifiableSetView: 1, $isUnmodifiableSetMixin: 1, $is_DelegatingIterableBase: 1, $isDelegatingIterable: 1, $isDelegatingSet: 1, $is_UnmodifiableSetView_DelegatingSet_UnmodifiableSetMixin: 1};
  U.Equality.prototype = {};
  U.EqualityBy.prototype = {$isEquality: 1,
    $asEquality: function($E, $F) {
      return [$E];
    }
  };
  U.DefaultEquality.prototype = {$isEquality: 1};
  U.IdentityEquality.prototype = {$isEquality: 1};
  U.IterableEquality.prototype = {$isEquality: 1,
    $asEquality: function($E) {
      return [[P.Iterable, $E]];
    }
  };
  U.ListEquality.prototype = {$isEquality: 1,
    $asEquality: function($E) {
      return [[P.List, $E]];
    }
  };
  U._UnorderedEquality.prototype = {$isEquality: 1,
    $asEquality: function($E, $T) {
      return [$T];
    }
  };
  U.UnorderedIterableEquality.prototype = {
    $asEquality: function($E) {
      return [[P.Iterable, $E]];
    },
    $as_UnorderedEquality: function($E) {
      return [$E, [P.Iterable, $E]];
    }
  };
  U.SetEquality.prototype = {
    $asEquality: function($E) {
      return [[P.Set, $E]];
    },
    $as_UnorderedEquality: function($E) {
      return [$E, [P.Set, $E]];
    }
  };
  U._MapEntry.prototype = {};
  U.MapEquality.prototype = {$isEquality: 1,
    $asEquality: function($K, $V) {
      return [[P.Map, $K, $V]];
    }
  };
  U.MultiEquality.prototype = {$isEquality: 1};
  U.DeepCollectionEquality.prototype = {$isEquality: 1,
    $asEquality: function() {
    }
  };
  U.CaseInsensitiveEquality.prototype = {$isEquality: 1,
    $asEquality: function() {
      return [P.String];
    }
  };
  N.EqualityMap.prototype = {};
  E.EqualitySet.prototype = {};
  A.IterableZip.prototype = {
    $asIterableBase: function($T) {
      return [[P.List, $T]];
    },
    $asIterable: function($T) {
      return [[P.List, $T]];
    }
  };
  A._IteratorZip.prototype = {$isIterator: 1,
    $asIterator: function($T) {
      return [[P.List, $T]];
    }
  };
  Y.PriorityQueue.prototype = {};
  Y.HeapPriorityQueue.prototype = {$isPriorityQueue: 1};
  Q.QueueList.prototype = {$isEfficientLengthIterable: 1, $isListMixin: 1, $isQueue: 1, $isIterable: 1, $isList: 1};
  Q._CastQueueList.prototype = {
    $asEfficientLengthIterable: function($S, $T) {
      return [$T];
    },
    $asListMixin: function($S, $T) {
      return [$T];
    },
    $asQueue: function($S, $T) {
      return [$T];
    },
    $asIterable: function($S, $T) {
      return [$T];
    },
    $asList: function($S, $T) {
      return [$T];
    },
    $asQueueList: function($S, $T) {
      return [$T];
    },
    $as_QueueList_Object_ListMixin: function($S, $T) {
      return [$T];
    }
  };
  Q._QueueList_Object_ListMixin.prototype = {$isEfficientLengthIterable: 1, $isListMixin: 1, $isIterable: 1, $isList: 1};
  M.UnionSet.prototype = {$isUnmodifiableSetMixin: 1};
  M._UnionSet_SetBase_UnmodifiableSetMixin.prototype = {$isUnmodifiableSetMixin: 1};
  Y.UnionSetController.prototype = {};
  L.NonGrowableListView.prototype = {$isNonGrowableListMixin: 1};
  L.NonGrowableListMixin.prototype = {$isEfficientLengthIterable: 1, $isIterable: 1, $isList: 1};
  L.UnmodifiableSetView.prototype = {$isUnmodifiableSetMixin: 1};
  L.UnmodifiableSetMixin.prototype = {$isEfficientLengthIterable: 1, $isIterable: 1, $isSet: 1};
  L.UnmodifiableMapMixin.prototype = {$isMap: 1};
  L._NonGrowableListView_DelegatingList_NonGrowableListMixin.prototype = {$isNonGrowableListMixin: 1};
  L._UnmodifiableSetView_DelegatingSet_UnmodifiableSetMixin.prototype = {$isUnmodifiableSetMixin: 1};
  B.Pair.prototype = {};
  M._DelegatingIterableBase.prototype = {$isIterable: 1};
  M.DelegatingIterable.prototype = {};
  M.DelegatingList.prototype = {$isEfficientLengthIterable: 1, $isList: 1};
  M.DelegatingSet.prototype = {$isEfficientLengthIterable: 1, $isSet: 1};
  M.DelegatingQueue.prototype = {$isEfficientLengthIterable: 1, $isQueue: 1};
  M.DelegatingMap.prototype = {$isMap: 1};
  M.MapKeySet.prototype = {$isEfficientLengthIterable: 1, $isSet: 1, $isUnmodifiableSetMixin: 1};
  M.MapValueSet.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function($K, $V) {
      return [$V];
    },
    $asIterable: function($K, $V) {
      return [$V];
    },
    $isSet: 1,
    $asSet: function($K, $V) {
      return [$V];
    },
    $as_DelegatingIterableBase: function($K, $V) {
      return [$V];
    }
  };
  M._MapKeySet__DelegatingIterableBase_UnmodifiableSetMixin.prototype = {$isEfficientLengthIterable: 1, $isSet: 1, $isUnmodifiableSetMixin: 1};
  Y.AccumulatorSink.prototype = {$isSink: 1};
  A.ByteAccumulatorSink.prototype = {};
  N.HexCodec.prototype = {
    $asCodec: function() {
      return [[P.List, P.int], P.String];
    }
  };
  A.HexDecoder.prototype = {
    $asStreamTransformer: function() {
      return [P.String, [P.List, P.int]];
    },
    $asStreamTransformerBase: function() {
      return [P.String, [P.List, P.int]];
    },
    $asConverter: function() {
      return [P.String, [P.List, P.int]];
    }
  };
  A._HexDecoderSink.prototype = {};
  A._HexDecoderByteSink.prototype = {};
  R.HexEncoder.prototype = {
    $asStreamTransformer: function() {
      return [[P.List, P.int], P.String];
    },
    $asStreamTransformerBase: function() {
      return [[P.List, P.int], P.String];
    },
    $asConverter: function() {
      return [[P.List, P.int], P.String];
    }
  };
  R._HexEncoderSink.prototype = {};
  E._IdentityConverter.prototype = {
    $asStreamTransformer: function($T) {
      return [$T, $T];
    },
    $asStreamTransformerBase: function($T) {
      return [$T, $T];
    },
    $asConverter: function($T) {
      return [$T, $T];
    }
  };
  E.IdentityCodec.prototype = {
    $asCodec: function($T) {
      return [$T, $T];
    }
  };
  U.PercentCodec.prototype = {
    $asCodec: function() {
      return [[P.List, P.int], P.String];
    }
  };
  B.PercentDecoder.prototype = {
    $asStreamTransformer: function() {
      return [P.String, [P.List, P.int]];
    },
    $asStreamTransformerBase: function() {
      return [P.String, [P.List, P.int]];
    },
    $asConverter: function() {
      return [P.String, [P.List, P.int]];
    }
  };
  B._PercentDecoderSink.prototype = {};
  B._PercentDecoderByteSink.prototype = {};
  B.PercentEncoder.prototype = {
    $asStreamTransformer: function() {
      return [[P.List, P.int], P.String];
    },
    $asStreamTransformerBase: function() {
      return [[P.List, P.int], P.String];
    },
    $asConverter: function() {
      return [[P.List, P.int], P.String];
    }
  };
  B._PercentEncoderSink.prototype = {};
  N.StringAccumulatorSink.prototype = {};
  B.Digest.prototype = {};
  R.DigestSink.prototype = {
    $asSink: function() {
      return [B.Digest];
    }
  };
  A.Hash.prototype = {
    $asStreamTransformer: function() {
      return [[P.List, P.int], B.Digest];
    },
    $asStreamTransformerBase: function() {
      return [[P.List, P.int], B.Digest];
    },
    $asConverter: function() {
      return [[P.List, P.int], B.Digest];
    }
  };
  G.HashSink.prototype = {$isSink: 1,
    $asSink: function() {
      return [[P.List, P.int]];
    }
  };
  D.Hmac.prototype = {
    $asStreamTransformer: function() {
      return [[P.List, P.int], B.Digest];
    },
    $asStreamTransformerBase: function() {
      return [[P.List, P.int], B.Digest];
    },
    $asConverter: function() {
      return [[P.List, P.int], B.Digest];
    }
  };
  D._HmacSink.prototype = {};
  M.MD5.prototype = {};
  M._MD5Sink.prototype = {};
  L.Sha1.prototype = {};
  L._Sha1Sink.prototype = {};
  V.Sha256.prototype = {};
  V._Sha256Sink.prototype = {};
  V.Int32.prototype = {$isComparable: 1,
    $asComparable: function() {
    },
    $isIntX: 1
  };
  V.Int64.prototype = {$isComparable: 1,
    $asComparable: function() {
    },
    $isIntX: 1
  };
  V.IntX.prototype = {$isComparable: 1,
    $asComparable: function() {
    }
  };
  G.CompilerOptions.prototype = {};
  U.DiagnosticMessage.prototype = {};
  S.ExperimentalFlag.prototype = {};
  R.FileSystem0.prototype = {};
  R.FileSystemEntity0.prototype = {};
  R.FileSystemException1.prototype = {$isException: 1};
  E.StandardFileSystem.prototype = {$isFileSystem0: 1};
  E._IoFileSystemEntity.prototype = {$isFileSystemEntity0: 1};
  E.DataFileSystemEntity.prototype = {$isFileSystemEntity0: 1};
  A.ErrorCode.prototype = {};
  A.ErrorSeverity.prototype = {$isComparable: 1,
    $asComparable: function() {
      return [A.ErrorSeverity];
    }
  };
  A.ErrorType.prototype = {$isComparable: 1,
    $asComparable: function() {
      return [A.ErrorType];
    }
  };
  X.LibrariesSpecification.prototype = {};
  X.TargetLibrariesSpecification.prototype = {};
  X.LibraryInfo.prototype = {};
  X.LibrariesSpecificationException.prototype = {};
  Z.ProcessedOptions.prototype = {};
  Z.HermeticFileSystem.prototype = {$isFileSystem0: 1};
  Z.HermeticAccessException.prototype = {};
  T.SyntacticEntity.prototype = {};
  G.CompilerContext.prototype = {};
  E.Crash.prototype = {};
  B.Code.prototype = {};
  B.Message.prototype = {};
  B.MessageCode.prototype = {
    $asCode: function() {
      return [P.Null];
    },
    $isMessage: 1
  };
  B.Template.prototype = {};
  B.LocatedMessage.prototype = {$isComparable: 1,
    $asComparable: function() {
      return [B.LocatedMessage];
    }
  };
  B.FormattedMessage.prototype = {$isDiagnosticMessage: 1};
  B.DiagnosticMessageFromJson.prototype = {$isDiagnosticMessage: 1};
  D.TypeLabeler.prototype = {$isDartTypeVisitor: 1,
    $asDartTypeVisitor: function() {
      return [-1];
    },
    $isConstantVisitor0: 1,
    $asConstantVisitor0: function() {
      return [-1];
    }
  };
  D.LabeledClassName.prototype = {};
  E.ErrorCollectingListener.prototype = {};
  M.Assert.prototype = {};
  V.AsyncModifier.prototype = {};
  M.ClassMemberParser.prototype = {};
  A.DirectiveContext.prototype = {};
  A.DirectiveState.prototype = {};
  D.ErrorDelegationListener.prototype = {};
  N.FormalParameterKind.prototype = {};
  Y.ForwardingListener.prototype = {$isListener: 1, $isUnescapeErrorListener: 1};
  D.IdentifierContext.prototype = {};
  G.CatchParameterIdentifierContext.prototype = {};
  G.ClassOrMixinIdentifierContext.prototype = {};
  G.CombinatorIdentifierContext.prototype = {};
  G.ConstructorReferenceIdentifierContext.prototype = {};
  G.DottedNameIdentifierContext.prototype = {};
  G.EnumDeclarationIdentifierContext.prototype = {};
  G.EnumValueDeclarationIdentifierContext.prototype = {};
  G.ExpressionIdentifierContext.prototype = {};
  G.FieldDeclarationIdentifierContext.prototype = {};
  G.FieldInitializerIdentifierContext.prototype = {};
  G.FormalParameterDeclarationIdentifierContext.prototype = {};
  G.ImportPrefixIdentifierContext.prototype = {};
  G.LiteralSymbolIdentifierContext.prototype = {};
  G.LocalFunctionDeclarationIdentifierContext.prototype = {};
  G.LabelDeclarationIdentifierContext.prototype = {};
  G.LabelReferenceIdentifierContext.prototype = {};
  G.LibraryIdentifierContext.prototype = {};
  G.LocalVariableDeclarationIdentifierContext.prototype = {};
  G.MetadataReferenceIdentifierContext.prototype = {};
  G.MethodDeclarationIdentifierContext.prototype = {};
  G.NamedArgumentReferenceIdentifierContext.prototype = {};
  G.TopLevelDeclarationIdentifierContext.prototype = {};
  G.TypedefDeclarationIdentifierContext.prototype = {};
  G.TypeReferenceIdentifierContext.prototype = {};
  G.TypeVariableDeclarationIdentifierContext.prototype = {};
  F.Listener.prototype = {$isUnescapeErrorListener: 1};
  N.LiteralEntryInfo.prototype = {};
  R.ForCondition.prototype = {};
  R.ForSpread.prototype = {};
  R.ForInSpread.prototype = {};
  R.ForEntry.prototype = {};
  R.ForInEntry.prototype = {};
  R.ForComplete.prototype = {};
  R.ForInComplete.prototype = {};
  R.IfCondition.prototype = {};
  R.IfSpread.prototype = {};
  R.IfEntry.prototype = {};
  R.IfComplete.prototype = {};
  R.IfElse.prototype = {};
  R.ElseSpread.prototype = {};
  R.ElseEntry.prototype = {};
  R.IfElseComplete.prototype = {};
  R.SpreadOperator.prototype = {};
  R.Nested.prototype = {};
  E.LoopState.prototype = {};
  S.MemberKind.prototype = {};
  X.ModifierRecoveryContext.prototype = {};
  A.Parser1.prototype = {};
  K.ParserError.prototype = {};
  R.ClassHeaderRecoveryListener.prototype = {};
  R.ImportRecoveryListener.prototype = {};
  R.MixinHeaderRecoveryListener.prototype = {};
  R.TokenStreamRewriter.prototype = {};
  R.TokenStreamGhostWriter.prototype = {$isTokenStreamRewriter: 1};
  Q.TopLevelParser.prototype = {};
  R.TypeInfo.prototype = {};
  R.TypeParamOrArgInfo.prototype = {};
  O.NoType.prototype = {$isTypeInfo: 1};
  O.PrefixedType.prototype = {$isTypeInfo: 1};
  O.SimpleNullableTypeWith1Argument.prototype = {};
  O.SimpleTypeWith1Argument.prototype = {$isTypeInfo: 1};
  O.SimpleNullableType.prototype = {};
  O.SimpleType.prototype = {$isTypeInfo: 1};
  O.VoidType0.prototype = {$isTypeInfo: 1};
  O.ComplexTypeInfo.prototype = {$isTypeInfo: 1};
  O.NoTypeParamOrArg.prototype = {};
  O.SimpleTypeArgument1.prototype = {};
  O.SimpleTypeArgument1GtEq.prototype = {};
  O.SimpleTypeArgument1GtGt.prototype = {};
  O.ComplexTypeParamOrArgInfo.prototype = {};
  X.DebugAbort.prototype = {};
  Y.Quote.prototype = {};
  Y.UnescapeErrorListener.prototype = {};
  G.Scanner0.prototype = {};
  G.ScannerResult.prototype = {};
  U.AbstractScanner.prototype = {$isScanner0: 1};
  U.LineStarts.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [P.int];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.int];
    },
    $isList: 1,
    $asList: function() {
      return [P.int];
    }
  };
  U._LineStarts_Object_ListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [P.int];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.int];
    },
    $isList: 1,
    $asList: function() {
      return [P.int];
    }
  };
  V.ArrayBasedScanner.prototype = {};
  S.ErrorToken.prototype = {};
  S.EncodingErrorToken.prototype = {};
  S.NonAsciiIdentifierToken.prototype = {};
  S.NonAsciiWhitespaceToken.prototype = {};
  S.AsciiControlCharacterToken.prototype = {};
  S.UnsupportedOperator.prototype = {};
  S.UnterminatedString.prototype = {};
  S.UnterminatedToken.prototype = {};
  S.UnmatchedToken.prototype = {};
  U.KeywordState.prototype = {};
  U.ArrayKeywordState.prototype = {$isKeywordState: 1};
  U.LowerCaseArrayKeywordState.prototype = {};
  U.UpperCaseArrayKeywordState.prototype = {};
  U.LeafKeywordState.prototype = {$isKeywordState: 1};
  D.Node1.prototype = {};
  D.StringCanonicalizer.prototype = {};
  T.StringScanner.prototype = {};
  D.StringToken0.prototype = {$isStringToken: 1};
  D.SyntheticStringToken0.prototype = {$isSyntheticStringToken: 1};
  D.CommentToken0.prototype = {$isCommentToken: 1};
  D.DartDocToken.prototype = {$isDocumentationCommentToken: 1};
  D._LazySubstring.prototype = {};
  D._CompactLazySubstring.prototype = {};
  D._FullLazySubstring.prototype = {};
  B.Utf8BytesScanner.prototype = {};
  Y.Severity.prototype = {};
  R.NullValue.prototype = {};
  R.StackListener.prototype = {};
  R.Stack.prototype = {};
  R.FixedNullableList.prototype = {};
  R.GrowableList.prototype = {};
  R.ParserRecovery.prototype = {};
  G.Ticker.prototype = {};
  F.UriTranslator.prototype = {};
  N.Link0.prototype = {$isIterable: 1};
  N.LinkBuilder.prototype = {};
  S.LinkIterator.prototype = {$isIterator: 1};
  S.MappedLinkIterator.prototype = {
    $asIterator: function($S, $T) {
      return [$T];
    }
  };
  S.MappedLinkIterable.prototype = {
    $asIterableBase: function($S, $T) {
      return [$T];
    },
    $asIterable: function($S, $T) {
      return [$T];
    }
  };
  S.LinkEntry.prototype = {};
  S.LinkBuilderImplementation.prototype = {$isLinkBuilder: 1};
  A.ScannerErrorCode.prototype = {};
  E.Interner.prototype = {};
  E.NullInterner.prototype = {$isInterner: 1};
  D.CharacterReader.prototype = {};
  D.CharSequenceReader.prototype = {$isCharacterReader: 1};
  D.SubSequenceReader.prototype = {};
  D.StringUtilities0.prototype = {};
  L.BeginToken.prototype = {};
  L.CommentToken.prototype = {};
  L.DocumentationCommentToken.prototype = {};
  L.Keyword.prototype = {};
  L.KeywordToken.prototype = {};
  L.SimpleToken.prototype = {$isSyntacticEntity: 1, $isToken: 1};
  L.StringToken.prototype = {};
  L.SyntheticBeginToken.prototype = {};
  L.SyntheticKeywordToken.prototype = {};
  L.SyntheticStringToken.prototype = {};
  L.SyntheticToken.prototype = {};
  L.Token.prototype = {$isSyntacticEntity: 1};
  L.TokenClass.prototype = {};
  L.TokenType.prototype = {};
  D.Glob.prototype = {$isPattern: 1};
  U.AstNode0.prototype = {};
  U.SequenceNode.prototype = {};
  U.StarNode.prototype = {};
  U.DoubleStarNode.prototype = {};
  U.AnyCharNode.prototype = {};
  U.RangeNode.prototype = {};
  U.OptionsNode.prototype = {};
  U.LiteralNode.prototype = {};
  Y.ListTree.prototype = {};
  Y._ListTreeNode.prototype = {};
  G.Parser2.prototype = {};
  B.Range0.prototype = {};
  B.GlobMatch.prototype = {$isMatch: 1};
  B._CrawlAsync.prototype = {};
  Q.JS.prototype = {};
  Q._Anonymous.prototype = {};
  G.BadKeyException.prototype = {$isException: 1};
  G.UnrecognizedKeysException.prototype = {};
  G.MissingRequiredKeysException.prototype = {};
  G.DisallowedNullValueException.prototype = {};
  D.CheckedFromJsonException.prototype = {$isException: 1};
  R.JsonConverter.prototype = {};
  K.JsonKey.prototype = {};
  E.JsonLiteral.prototype = {};
  K.FieldRename.prototype = {};
  K.JsonSerializable.prototype = {};
  Y.JsonValue.prototype = {};
  T.$JsonMapWrapper.prototype = {
    $asMapBase: function() {
      return [P.String, null];
    },
    $asMapMixin: function() {
      return [P.String, null];
    },
    $asUnmodifiableMapBase: function() {
      return [P.String, null];
    },
    $as_UnmodifiableMapMixin: function() {
      return [P.String, null];
    },
    $asMap: function() {
      return [P.String, null];
    }
  };
  T._MappingList.prototype = {
    $asEfficientLengthIterable: function() {
    },
    $asListBase: function() {
    },
    $asListMixin: function() {
    },
    $asIterable: function() {
    },
    $asList: function() {
    },
    $as_ListBase_Object_ListMixin: function() {
    }
  };
  T._MappingMap.prototype = {
    $asMapBase: function($K, $V) {
      return [P.String, null];
    },
    $asMapMixin: function($K, $V) {
      return [P.String, null];
    },
    $asUnmodifiableMapBase: function($K, $V) {
      return [P.String, null];
    },
    $as_UnmodifiableMapMixin: function($K, $V) {
      return [P.String, null];
    },
    $asMap: function($K, $V) {
      return [P.String, null];
    }
  };
  T.Node2.prototype = {};
  T.TreeNode.prototype = {};
  T.NamedNode.prototype = {};
  T.FileUriNode.prototype = {};
  T.Reference0.prototype = {};
  T.Library.prototype = {$isComparable: 1,
    $asComparable: function() {
      return [T.Library];
    },
    $isFileUriNode: 1
  };
  T.LibraryDependency.prototype = {};
  T.LibraryPart.prototype = {};
  T.Combinator0.prototype = {};
  T.Typedef.prototype = {$isFileUriNode: 1};
  T.ClassLevel.prototype = {};
  T.Class.prototype = {$isFileUriNode: 1};
  T.Member0.prototype = {$isFileUriNode: 1};
  T.Field.prototype = {};
  T.Constructor.prototype = {};
  T.RedirectingFactoryConstructor.prototype = {};
  T.Procedure.prototype = {};
  T.ProcedureKind.prototype = {};
  T.Initializer.prototype = {};
  T.InvalidInitializer.prototype = {};
  T.FieldInitializer.prototype = {};
  T.SuperInitializer.prototype = {};
  T.RedirectingInitializer.prototype = {};
  T.LocalInitializer.prototype = {};
  T.AssertInitializer0.prototype = {};
  T.FunctionNode.prototype = {};
  T.AsyncMarker.prototype = {};
  T.Expression0.prototype = {};
  T.InvalidExpression.prototype = {};
  T.VariableGet.prototype = {};
  T.VariableSet.prototype = {};
  T.PropertyGet.prototype = {};
  T.PropertySet.prototype = {};
  T.DirectPropertyGet.prototype = {};
  T.DirectPropertySet.prototype = {};
  T.DirectMethodInvocation.prototype = {};
  T.SuperPropertyGet.prototype = {};
  T.SuperPropertySet.prototype = {};
  T.StaticGet.prototype = {};
  T.StaticSet.prototype = {};
  T.Arguments.prototype = {};
  T.NamedExpression0.prototype = {};
  T.InvocationExpression0.prototype = {};
  T.MethodInvocation0.prototype = {};
  T.SuperMethodInvocation.prototype = {};
  T.StaticInvocation.prototype = {};
  T.ConstructorInvocation0.prototype = {};
  T.Instantiation0.prototype = {};
  T.Not.prototype = {};
  T.LogicalExpression.prototype = {};
  T.ConditionalExpression0.prototype = {};
  T.StringConcatenation.prototype = {};
  T.ListConcatenation.prototype = {};
  T.SetConcatenation.prototype = {};
  T.MapConcatenation.prototype = {};
  T.IsExpression0.prototype = {};
  T.AsExpression0.prototype = {};
  T.BasicLiteral.prototype = {};
  T.StringLiteral0.prototype = {};
  T.IntLiteral.prototype = {};
  T.DoubleLiteral0.prototype = {};
  T.BoolLiteral.prototype = {};
  T.NullLiteral0.prototype = {};
  T.SymbolLiteral0.prototype = {};
  T.TypeLiteral.prototype = {};
  T.ThisExpression0.prototype = {};
  T.Rethrow.prototype = {};
  T.Throw.prototype = {};
  T.ListLiteral0.prototype = {};
  T.SetLiteral0.prototype = {};
  T.MapLiteral0.prototype = {};
  T.MapEntry0.prototype = {};
  T.AwaitExpression0.prototype = {};
  T.FunctionExpression0.prototype = {};
  T.ConstantExpression.prototype = {};
  T.Let.prototype = {};
  T.BlockExpression.prototype = {};
  T.LoadLibrary.prototype = {};
  T.CheckLibraryIsLoaded.prototype = {};
  T.Statement0.prototype = {};
  T.ExpressionStatement0.prototype = {};
  T.Block0.prototype = {};
  T.AssertBlock.prototype = {};
  T.EmptyStatement0.prototype = {};
  T.AssertStatement0.prototype = {};
  T.LabeledStatement0.prototype = {};
  T.BreakStatement0.prototype = {};
  T.WhileStatement0.prototype = {};
  T.DoStatement0.prototype = {};
  T.ForStatement0.prototype = {};
  T.ForInStatement.prototype = {};
  T.SwitchStatement0.prototype = {};
  T.SwitchCase0.prototype = {};
  T.ContinueSwitchStatement.prototype = {};
  T.IfStatement0.prototype = {};
  T.ReturnStatement0.prototype = {};
  T.TryCatch.prototype = {};
  T.Catch.prototype = {};
  T.TryFinally.prototype = {};
  T.YieldStatement0.prototype = {};
  T.VariableDeclaration0.prototype = {};
  T.FunctionDeclaration0.prototype = {};
  T.Name0.prototype = {$isNode2: 1};
  T._PrivateName.prototype = {};
  T._PublicName.prototype = {};
  T.DartType0.prototype = {};
  T.InvalidType.prototype = {};
  T.DynamicType.prototype = {};
  T.VoidType1.prototype = {};
  T.BottomType.prototype = {};
  T.InterfaceType0.prototype = {};
  T.FunctionType0.prototype = {};
  T.TypedefType.prototype = {};
  T.NamedType0.prototype = {$isComparable: 1,
    $asComparable: function() {
      return [T.NamedType0];
    }
  };
  T.TypeParameterType0.prototype = {};
  T.TypeParameter0.prototype = {};
  T.Supertype.prototype = {};
  T.Constant.prototype = {};
  T.PrimitiveConstant.prototype = {};
  T.NullConstant.prototype = {
    $asPrimitiveConstant: function() {
      return [P.Null];
    }
  };
  T.BoolConstant.prototype = {
    $asPrimitiveConstant: function() {
      return [P.bool];
    }
  };
  T.IntConstant.prototype = {
    $asPrimitiveConstant: function() {
      return [P.int];
    }
  };
  T.DoubleConstant.prototype = {
    $asPrimitiveConstant: function() {
      return [P.double];
    }
  };
  T.StringConstant.prototype = {
    $asPrimitiveConstant: function() {
      return [P.String];
    }
  };
  T.SymbolConstant.prototype = {};
  T.MapConstant.prototype = {};
  T.ConstantMapEntry.prototype = {};
  T.ListConstant.prototype = {};
  T.SetConstant.prototype = {};
  T.InstanceConstant.prototype = {};
  T.PartialInstantiationConstant.prototype = {};
  T.TearOffConstant.prototype = {};
  T.TypeLiteralConstant.prototype = {};
  T.UnevaluatedConstant.prototype = {};
  T.Component.prototype = {};
  T.Location0.prototype = {};
  T.MetadataRepository.prototype = {};
  T.BinarySink.prototype = {};
  T.BinarySource.prototype = {};
  T._ChildReplacer.prototype = {};
  T.Source0.prototype = {};
  R.ParseError.prototype = {};
  R.InvalidKernelVersionError.prototype = {};
  R.CanonicalNameError.prototype = {};
  R._ComponentIndex.prototype = {};
  R.BinaryBuilder.prototype = {};
  R.BinaryBuilderWithMetadata.prototype = {$isBinarySource: 1};
  R._MetadataSubsection.prototype = {};
  G.BinaryPrinter.prototype = {$isBinarySink: 1, $isExpressionVisitor: 1,
    $asExpressionVisitor: function() {
      return [-1];
    },
    $isStatementVisitor: 1,
    $asStatementVisitor: function() {
      return [-1];
    },
    $isMemberVisitor: 1,
    $asMemberVisitor: function() {
      return [-1];
    },
    $isInitializerVisitor: 1,
    $asInitializerVisitor: function() {
      return [-1];
    },
    $isTreeVisitor: 1,
    $asTreeVisitor: function() {
      return [-1];
    },
    $isDartTypeVisitor: 1,
    $asDartTypeVisitor: function() {
      return [-1];
    },
    $isConstantVisitor0: 1,
    $asConstantVisitor0: function() {
      return [-1];
    },
    $isMemberReferenceVisitor: 1,
    $asMemberReferenceVisitor: function() {
      return [-1];
    },
    $isVisitor: 1,
    $asVisitor: function() {
      return [-1];
    }
  };
  G.VariableIndexer.prototype = {};
  G.LabelIndexer.prototype = {};
  G.SwitchCaseIndexer.prototype = {};
  G.ConstantIndexer.prototype = {
    $asExpressionVisitor: function() {
    },
    $asStatementVisitor: function() {
    },
    $asMemberVisitor: function() {
    },
    $asInitializerVisitor: function() {
    },
    $asTreeVisitor: function() {
    },
    $asDartTypeVisitor: function() {
    },
    $asConstantVisitor0: function() {
    },
    $asMemberReferenceVisitor: function() {
    },
    $asVisitor: function() {
    },
    $asRecursiveVisitor: function() {
    }
  };
  G.TypeParameterIndexer.prototype = {};
  G.StringIndexer.prototype = {};
  G.UriIndexer.prototype = {};
  G.BufferedSink.prototype = {};
  G._MetadataSubsection0.prototype = {};
  G.BytesSink.prototype = {$isSink: 1,
    $asSink: function() {
      return [[P.List, P.int]];
    }
  };
  G.NotQuiteString.prototype = {};
  S.Tag.prototype = {};
  S.ConstantTag.prototype = {};
  T.CanonicalName.prototype = {};
  T.MixinInferrer.prototype = {};
  T.ClassHierarchy.prototype = {};
  T.ClassHierarchySubtypes.prototype = {};
  T._ClassInfoSubtype.prototype = {};
  T._ClosedWorldClassHierarchySubtypes.prototype = {$isClassHierarchySubtypes: 1};
  T.ClosedWorldClassHierarchy.prototype = {$isClassHierarchy: 1};
  T._IntervalListBuilder.prototype = {};
  T._ClassInfo.prototype = {};
  T.ClassSet.prototype = {
    $asIterableBase: function() {
      return [T.Class];
    },
    $asIterable: function() {
      return [T.Class];
    }
  };
  T._LubHeap.prototype = {
    $asHeap: function() {
      return [T._ClassInfo];
    }
  };
  R.CloneVisitor.prototype = {$isExpressionVisitor: 1,
    $asExpressionVisitor: function() {
    },
    $isStatementVisitor: 1,
    $asStatementVisitor: function() {
    },
    $isMemberVisitor: 1,
    $asMemberVisitor: function() {
    },
    $isInitializerVisitor: 1,
    $asInitializerVisitor: function() {
    },
    $isTreeVisitor: 1,
    $asTreeVisitor: function() {
    }
  };
  R.CloneWithoutBody.prototype = {};
  D.CoqLib.prototype = {};
  Q.CoreTypes.prototype = {};
  Y.ImportTable.prototype = {};
  Y.ComponentImportTable.prototype = {$isImportTable: 1};
  Y.LibraryImportTable.prototype = {$isImportTable: 1};
  Y._ImportTableBuilder.prototype = {
    $asExpressionVisitor: function() {
    },
    $asStatementVisitor: function() {
    },
    $asMemberVisitor: function() {
    },
    $asInitializerVisitor: function() {
    },
    $asTreeVisitor: function() {
    },
    $asDartTypeVisitor: function() {
    },
    $asConstantVisitor0: function() {
    },
    $asMemberReferenceVisitor: function() {
    },
    $asVisitor: function() {
    },
    $asRecursiveVisitor: function() {
    }
  };
  Y.LibraryIndex.prototype = {};
  Y._ClassTable.prototype = {};
  Y._MemberTable.prototype = {};
  F.Heap.prototype = {};
  Z.HierarchyBasedTypeEnvironment.prototype = {};
  R.TargetFlags.prototype = {};
  R.DiagnosticReporter.prototype = {};
  R.Target.prototype = {};
  R.NoneTarget.prototype = {};
  U.Namer.prototype = {};
  U.NormalNamer.prototype = {};
  U.ConstantNamer.prototype = {$isNamer: 1,
    $asNamer: function() {
      return [T.Constant];
    },
    $asExpressionVisitor: function() {
      return [P.Null];
    },
    $asStatementVisitor: function() {
      return [P.Null];
    },
    $asMemberVisitor: function() {
      return [P.Null];
    },
    $asInitializerVisitor: function() {
      return [P.Null];
    },
    $asTreeVisitor: function() {
      return [P.Null];
    },
    $asDartTypeVisitor: function() {
      return [P.Null];
    },
    $asConstantVisitor0: function() {
      return [P.Null];
    },
    $asMemberReferenceVisitor: function() {
      return [P.Null];
    },
    $asVisitor: function() {
      return [P.Null];
    },
    $asRecursiveVisitor: function() {
      return [P.Null];
    }
  };
  U.Disambiguator.prototype = {};
  U.NameSystem.prototype = {};
  U.Annotator.prototype = {};
  U.Printer.prototype = {
    $asExpressionVisitor: function() {
      return [P.Null];
    },
    $asStatementVisitor: function() {
      return [P.Null];
    },
    $asMemberVisitor: function() {
      return [P.Null];
    },
    $asInitializerVisitor: function() {
      return [P.Null];
    },
    $asTreeVisitor: function() {
      return [P.Null];
    },
    $asDartTypeVisitor: function() {
      return [P.Null];
    },
    $asConstantVisitor0: function() {
      return [P.Null];
    },
    $asMemberReferenceVisitor: function() {
      return [P.Null];
    },
    $asVisitor: function() {
      return [P.Null];
    }
  };
  U.Precedence0.prototype = {
    $asExpressionVisitor: function() {
      return [P.int];
    }
  };
  U.ExpressionPrinter.prototype = {};
  U._ConstantNamer_RecursiveVisitor_Namer.prototype = {$isNamer: 1,
    $asNamer: function() {
      return [T.Constant];
    },
    $asExpressionVisitor: function() {
      return [P.Null];
    },
    $asStatementVisitor: function() {
      return [P.Null];
    },
    $asMemberVisitor: function() {
      return [P.Null];
    },
    $asInitializerVisitor: function() {
      return [P.Null];
    },
    $asTreeVisitor: function() {
      return [P.Null];
    },
    $asDartTypeVisitor: function() {
      return [P.Null];
    },
    $asConstantVisitor0: function() {
      return [P.Null];
    },
    $asMemberReferenceVisitor: function() {
      return [P.Null];
    },
    $asVisitor: function() {
      return [P.Null];
    },
    $asRecursiveVisitor: function() {
      return [P.Null];
    }
  };
  V.ConstantsTransformer.prototype = {};
  V.ConstantEvaluator1.prototype = {
    $asExpressionVisitor: function() {
    },
    $asStatementVisitor: function() {
    },
    $asMemberVisitor: function() {
    },
    $asInitializerVisitor: function() {
    },
    $asTreeVisitor: function() {
    },
    $asDartTypeVisitor: function() {
    },
    $asConstantVisitor0: function() {
    },
    $asMemberReferenceVisitor: function() {
    },
    $asVisitor: function() {
    },
    $asRecursiveVisitor: function() {
    }
  };
  V.InstanceBuilder.prototype = {};
  V.EvaluationEnvironment.prototype = {};
  V.NumberSemantics.prototype = {};
  V.ConstantsBackend.prototype = {};
  V._AbortCurrentEvaluation.prototype = {};
  V.ErrorReporter0.prototype = {};
  V.SimpleErrorReporter.prototype = {};
  V.IsInstantiatedVisitor.prototype = {
    $asDartTypeVisitor: function() {
      return [P.bool];
    }
  };
  K.TransformerFlag.prototype = {};
  M.FreshTypeParameters.prototype = {};
  M.Substitution.prototype = {};
  M._NullSubstitution.prototype = {};
  M._MapSubstitution.prototype = {};
  M._TopSubstitutor.prototype = {};
  M._ClassBottomSubstitution.prototype = {};
  M._CombinedSubstitution.prototype = {};
  M._FilteredSubstitution.prototype = {};
  M._InnerTypeSubstitutor.prototype = {};
  M._TypeSubstitutor.prototype = {
    $asDartTypeVisitor: function() {
      return [T.DartType0];
    }
  };
  M._DeepTypeSubstitutor.prototype = {};
  M._TypeUnification.prototype = {};
  M._OccurrenceVisitor.prototype = {
    $asDartTypeVisitor: function() {
      return [P.bool];
    }
  };
  V.TypeEnvironment.prototype = {};
  V.SubtypeTester.prototype = {};
  U.ExpressionVisitor.prototype = {};
  U.StatementVisitor.prototype = {};
  U.MemberVisitor.prototype = {};
  U.InitializerVisitor.prototype = {};
  U.TreeVisitor.prototype = {$isExpressionVisitor: 1, $isStatementVisitor: 1, $isMemberVisitor: 1, $isInitializerVisitor: 1};
  U.DartTypeVisitor.prototype = {};
  U.DartTypeVisitor1.prototype = {};
  U.ConstantVisitor0.prototype = {};
  U.MemberReferenceVisitor.prototype = {};
  U.Visitor.prototype = {$isDartTypeVisitor: 1, $isConstantVisitor0: 1, $isMemberReferenceVisitor: 1};
  U.RecursiveVisitor.prototype = {};
  U.Transformer.prototype = {
    $asExpressionVisitor: function() {
      return [T.TreeNode];
    },
    $asStatementVisitor: function() {
      return [T.TreeNode];
    },
    $asMemberVisitor: function() {
      return [T.TreeNode];
    },
    $asInitializerVisitor: function() {
      return [T.TreeNode];
    },
    $asTreeVisitor: function() {
      return [T.TreeNode];
    }
  };
  U.ExpressionVisitor1.prototype = {};
  U.StatementVisitor1.prototype = {};
  U.BodyVisitor1.prototype = {$isStatementVisitor1: 1};
  N.Logger0.prototype = {};
  N.Level.prototype = {$isComparable: 1,
    $asComparable: function() {
      return [N.Level];
    }
  };
  N.LogRecord.prototype = {};
  Q.Immutable.prototype = {};
  Q.Required.prototype = {};
  Q._AlwaysThrows.prototype = {};
  Q._Checked.prototype = {};
  Q._Experimental.prototype = {};
  Q._Factory.prototype = {};
  Q._IsTest.prototype = {};
  Q._IsTestGroup.prototype = {};
  Q._Literal.prototype = {};
  Q._MustCallSuper.prototype = {};
  Q._OptionalTypeArgs.prototype = {};
  Q._Protected.prototype = {};
  Q._Sealed.prototype = {};
  Q._Virtual.prototype = {};
  Q._VisibleForOverriding.prototype = {};
  Q._VisibleForTesting.prototype = {};
  M.Packages.prototype = {};
  Z.NoPackages.prototype = {$isPackages: 1};
  Z.PackagesBase.prototype = {$isPackages: 1};
  Z.MapPackages.prototype = {};
  Z.NonFilePackagesDirectoryPackages.prototype = {};
  M.Context.prototype = {
    get$current: function() {
      var t1 = this._context$_current;
      return t1 != null ? t1 : D.current();
    },
    get$separator: function() {
      return this.style.get$separator();
    },
    absolute$7: function(part1, part2, part3, part4, part5, part6, part7) {
      var _this = this;
      H.stringTypeCheck(part1);
      H.stringTypeCheck(part2);
      H.stringTypeCheck(part3);
      H.stringTypeCheck(part4);
      H.stringTypeCheck(part5);
      H.stringTypeCheck(part6);
      H.stringTypeCheck(part7);
      M._validateArgList("absolute", H.setRuntimeTypeInfo([part1, part2, part3, part4, part5, part6, part7], [P.String]));
      if (part2 == null && _this.isAbsolute$1(part1) && !_this.isRootRelative$1(part1))
        return part1;
      return _this.join$8(0, _this.get$current(), part1, part2, part3, part4, part5, part6, part7);
    },
    absolute$1: function(part1) {
      return this.absolute$7(part1, null, null, null, null, null, null);
    },
    dirname$1: function(path) {
      var t1,
        parsed = this._parse$1(H.stringTypeCheck(path));
      parsed.removeTrailingSeparators$0();
      if (J.get$isEmpty$asx(parsed.parts)) {
        t1 = parsed.root;
        return t1 == null ? "." : t1;
      }
      if (J.$eq$(J.get$length$asx(parsed.parts), 1)) {
        t1 = parsed.root;
        return t1 == null ? "." : t1;
      }
      J.removeLast$0$ax(parsed.parts);
      J.removeLast$0$ax(parsed.separators);
      parsed.removeTrailingSeparators$0();
      return parsed.toString$0(0);
    },
    isAbsolute$1: function(path) {
      return J.$gt$n(this.style.rootLength$1(H.stringTypeCheck(path)), 0);
    },
    isRelative$1: function(path) {
      return !this.isAbsolute$1(H.stringTypeCheck(path));
    },
    isRootRelative$1: function(path) {
      return this.style.isRootRelative$1(H.stringTypeCheck(path));
    },
    join$8: function(_, part1, part2, part3, part4, part5, part6, part7, part8) {
      var parts = H.setRuntimeTypeInfo([H.stringTypeCheck(part1), H.stringTypeCheck(part2), H.stringTypeCheck(part3), H.stringTypeCheck(part4), H.stringTypeCheck(part5), H.stringTypeCheck(part6), H.stringTypeCheck(part7), H.stringTypeCheck(part8)], [P.String]);
      M._validateArgList("join", parts);
      return this.joinAll$1(C.JSArray_methods.where$1(parts, new M.Context_join_closure()));
    },
    join$1: function($receiver, part1) {
      return this.join$8($receiver, part1, null, null, null, null, null, null, null);
    },
    join$2: function($receiver, part1, part2) {
      return this.join$8($receiver, part1, part2, null, null, null, null, null, null);
    },
    joinAll$1: function(parts) {
      var buffer, t1, t2, needsSeparator, isAbsoluteAndNotRootRelative, t3, parsed, path, t4, _this = this;
      H.assertSubtype(parts, "$isIterable", [P.String], "$asIterable");
      buffer = P.StringBuffer$("");
      for (t1 = J.get$iterator$ax(J.where$1$ax(parts, new M.Context_joinAll_closure())), t2 = _this.style, needsSeparator = false, isAbsoluteAndNotRootRelative = false; t1.moveNext$0();) {
        t3 = t1.get$current();
        if (_this.isRootRelative$1(t3) && isAbsoluteAndNotRootRelative) {
          parsed = _this._parse$1(t3);
          path = buffer.toString$0(0);
          t4 = H.stringTypeCheck(J.substring$2$s(path, 0, t2.rootLength$2$withDrive(path, true)));
          parsed.root = t4;
          if (t2.needsSeparator$1(t4))
            J.$indexSet$ax(parsed.separators, 0, t2.get$separator());
          buffer.clear$0(0);
          buffer.write$1(J.toString$0$(parsed));
        } else if (_this.isAbsolute$1(t3)) {
          isAbsoluteAndNotRootRelative = !_this.isRootRelative$1(t3);
          buffer.clear$0(0);
          buffer.write$1(t3);
        } else {
          if (!(t3.length > 0 && t2.containsSeparator$1(t3[0])))
            if (needsSeparator)
              buffer.write$1(_this.get$separator());
          buffer.write$1(t3);
        }
        needsSeparator = t2.needsSeparator$1(t3);
      }
      return buffer.toString$0(0);
    },
    split$1: function(_, path) {
      var t1,
        parsed = this._parse$1(H.stringTypeCheck(path));
      parsed.set$parts(J.toList$0$ax(J.where$1$ax(parsed.parts, new M.Context_split_closure())));
      t1 = parsed.root;
      if (t1 != null)
        J.insert$2$ax(parsed.parts, 0, t1);
      return parsed.parts;
    },
    normalize$1: function(path) {
      var parsed;
      H.stringTypeCheck(path);
      if (!this._needsNormalization$1(path))
        return path;
      parsed = this._parse$1(path);
      parsed.normalize$0();
      return parsed.toString$0(0);
    },
    _needsNormalization$1: function(path) {
      var codeUnits, t1, root, t2, i, start, previous, t3, previousPrevious, t4, codeUnit;
      H.stringTypeCheck(path);
      codeUnits = J.get$codeUnits$s(path);
      t1 = this.style;
      root = t1.rootLength$1(path);
      if (root !== 0) {
        if (J.$eq$(t1, $.$get$Style_windows())) {
          if (typeof root !== "number")
            return H.iae(root);
          t2 = J.getInterceptor$asx(codeUnits);
          i = 0;
          for (; i < root; ++i)
            if (J.$eq$(t2.$index(codeUnits, i), 47))
              return true;
        }
        start = root;
        previous = 47;
      } else {
        start = 0;
        previous = null;
      }
      t2 = J.getInterceptor$asx(codeUnits);
      t3 = J.getInterceptor$(t1);
      i = start;
      previousPrevious = null;
      while (true) {
        t4 = t2.get$length(codeUnits);
        if (typeof i !== "number")
          return i.$lt();
        if (typeof t4 !== "number")
          return H.iae(t4);
        if (!(i < t4))
          break;
        codeUnit = t2.$index(codeUnits, i);
        if (t1.isSeparator$1(codeUnit)) {
          if (t3.$eq(t1, $.$get$Style_windows()) && codeUnit === 47)
            return true;
          if (previous != null && t1.isSeparator$1(previous))
            return true;
          if (previous === 46)
            t4 = previousPrevious == null || previousPrevious === 46 || t1.isSeparator$1(previousPrevious);
          else
            t4 = false;
          if (t4)
            return true;
        }
        ++i;
        previousPrevious = previous;
        previous = codeUnit;
      }
      if (previous == null)
        return true;
      if (t1.isSeparator$1(previous))
        return true;
      if (previous === 46)
        t1 = previousPrevious == null || t1.isSeparator$1(previousPrevious) || previousPrevious === 46;
      else
        t1 = false;
      if (t1)
        return true;
      return false;
    },
    relative$2$from: function(path, from) {
      var t1, fromParsed, pathParsed, t2, _this = this,
        _s26_ = 'Unable to find a path to "';
      H.stringTypeCheck(path);
      H.stringTypeCheck(from);
      t1 = from == null;
      if (t1 && _this.isRelative$1(path))
        return _this.normalize$1(path);
      from = t1 ? _this.get$current() : _this.absolute$1(from);
      if (_this.isRelative$1(from) && _this.isAbsolute$1(path))
        return _this.normalize$1(path);
      if (_this.isRelative$1(path) || _this.isRootRelative$1(path))
        path = _this.absolute$1(path);
      if (_this.isRelative$1(path) && _this.isAbsolute$1(from))
        throw H.wrapException(X.PathException$(_s26_ + H.S(path) + '" from "' + H.S(from) + '".'));
      fromParsed = _this._parse$1(from);
      fromParsed.normalize$0();
      pathParsed = _this._parse$1(path);
      pathParsed.normalize$0();
      if (J.$gt$n(J.get$length$asx(fromParsed.parts), 0) && J.$eq$(J.$index$asx(fromParsed.parts, 0), "."))
        return J.toString$0$(pathParsed);
      if (!J.$eq$(fromParsed.root, pathParsed.root)) {
        t1 = fromParsed.root;
        if (t1 != null) {
          t2 = pathParsed.root;
          t1 = t2 == null || !_this.style.pathsEqual$2(t1, t2);
        } else
          t1 = true;
      } else
        t1 = false;
      if (t1)
        return J.toString$0$(pathParsed);
      t1 = _this.style;
      while (true) {
        if (!(J.$gt$n(J.get$length$asx(fromParsed.get$parts()), 0) && J.$gt$n(J.get$length$asx(pathParsed.get$parts()), 0) && t1.pathsEqual$2(J.$index$asx(fromParsed.get$parts(), 0), J.$index$asx(pathParsed.get$parts(), 0))))
          break;
        J.removeAt$1$ax(fromParsed.get$parts(), 0);
        J.removeAt$1$ax(fromParsed.get$separators(), 1);
        J.removeAt$1$ax(pathParsed.get$parts(), 0);
        J.removeAt$1$ax(pathParsed.get$separators(), 1);
      }
      if (J.$gt$n(J.get$length$asx(fromParsed.get$parts()), 0) && J.$eq$(J.$index$asx(fromParsed.get$parts(), 0), ".."))
        throw H.wrapException(X.PathException$(_s26_ + H.S(path) + '" from "' + H.S(from) + '".'));
      t2 = P.String;
      J.insertAll$2$ax(pathParsed.get$parts(), 0, P.List_List$filled(J.get$length$asx(fromParsed.get$parts()), "..", t2));
      J.$indexSet$ax(pathParsed.get$separators(), 0, "");
      J.insertAll$2$ax(pathParsed.get$separators(), 1, P.List_List$filled(J.get$length$asx(fromParsed.get$parts()), t1.get$separator(), t2));
      if (J.$eq$(J.get$length$asx(pathParsed.get$parts()), 0))
        return ".";
      if (J.$gt$n(J.get$length$asx(pathParsed.get$parts()), 1) && J.$eq$(J.get$last$ax(pathParsed.get$parts()), ".")) {
        J.removeLast$0$ax(pathParsed.get$parts());
        t1 = pathParsed.get$separators();
        t2 = J.getInterceptor$ax(t1);
        t2.removeLast$0(t1);
        t2.removeLast$0(t1);
        t2.add$1(t1, "");
      }
      pathParsed.set$root("");
      pathParsed.removeTrailingSeparators$0();
      return J.toString$0$(pathParsed);
    },
    relative$1: function(path) {
      return this.relative$2$from(path, null);
    },
    isWithin$2: function($parent, child) {
      return J.$eq$(this._isWithinOrEquals$2(H.stringTypeCheck($parent), H.stringTypeCheck(child)), C._PathRelation_within);
    },
    _isWithinOrEquals$2: function($parent, child) {
      var relative, parentIsAbsolute, childIsAbsolute, t1, childIsRootRelative, parentIsRootRelative, result, exception, _this = this;
      H.stringTypeCheck($parent);
      H.stringTypeCheck(child);
      parentIsAbsolute = _this.isAbsolute$1($parent);
      childIsAbsolute = _this.isAbsolute$1(child);
      if (parentIsAbsolute && !childIsAbsolute) {
        child = _this.absolute$1(child);
        if (_this.style.isRootRelative$1($parent))
          $parent = _this.absolute$1($parent);
      } else if (childIsAbsolute && !parentIsAbsolute) {
        $parent = _this.absolute$1($parent);
        if (_this.style.isRootRelative$1(child))
          child = _this.absolute$1(child);
      } else if (childIsAbsolute && parentIsAbsolute) {
        t1 = _this.style;
        childIsRootRelative = t1.isRootRelative$1(child);
        parentIsRootRelative = t1.isRootRelative$1($parent);
        if (childIsRootRelative && !parentIsRootRelative)
          child = _this.absolute$1(child);
        else if (parentIsRootRelative && !childIsRootRelative)
          $parent = _this.absolute$1($parent);
      }
      result = _this._isWithinOrEqualsFast$2($parent, child);
      if (result !== C._PathRelation_inconclusive)
        return result;
      relative = null;
      try {
        relative = _this.relative$2$from(child, $parent);
      } catch (exception) {
        if (H.unwrapException(exception) instanceof X.PathException)
          return C._PathRelation_different;
        else
          throw exception;
      }
      if (!_this.isRelative$1(relative))
        return C._PathRelation_different;
      if (J.$eq$(relative, "."))
        return C._PathRelation_equal;
      if (J.$eq$(relative, ".."))
        return C._PathRelation_different;
      return J.$ge$n(J.get$length$asx(relative), 3) && J.startsWith$1$s(relative, "..") && _this.style.isSeparator$1(J.codeUnitAt$1$s(relative, 2)) ? C._PathRelation_different : C._PathRelation_within;
    },
    _isWithinOrEqualsFast$2: function($parent, child) {
      var t1, parentRootLength, childRootLength, t2, t3, i, childIndex, parentIndex, lastCodeUnit, lastParentSeparator, t4, parentCodeUnit, childCodeUnit, parentIndex0, direction, _this = this;
      H.stringTypeCheck($parent);
      H.stringTypeCheck(child);
      if ($parent === ".")
        $parent = "";
      t1 = _this.style;
      parentRootLength = t1.rootLength$1($parent);
      childRootLength = t1.rootLength$1(child);
      if (parentRootLength != childRootLength)
        return C._PathRelation_different;
      if (typeof parentRootLength !== "number")
        return H.iae(parentRootLength);
      t2 = J.getInterceptor$s($parent);
      t3 = J.getInterceptor$s(child);
      i = 0;
      for (; i < parentRootLength; ++i)
        if (!t1.codeUnitsEqual$2(t2._codeUnitAt$1($parent, i), t3._codeUnitAt$1(child, i)))
          return C._PathRelation_different;
      t2 = $parent.length;
      childIndex = childRootLength;
      parentIndex = parentRootLength;
      lastCodeUnit = 47;
      lastParentSeparator = null;
      while (true) {
        if (parentIndex < t2) {
          t4 = child.length;
          if (typeof childIndex !== "number")
            return childIndex.$lt();
          t4 = childIndex < t4;
        } else
          t4 = false;
        if (!t4)
          break;
        c$0: {
          parentCodeUnit = C.JSString_methods.codeUnitAt$1($parent, parentIndex);
          childCodeUnit = t3.codeUnitAt$1(child, childIndex);
          if (t1.codeUnitsEqual$2(parentCodeUnit, childCodeUnit)) {
            if (t1.isSeparator$1(parentCodeUnit))
              lastParentSeparator = parentIndex;
            ++parentIndex;
            if (typeof childIndex !== "number")
              return childIndex.$add();
            ++childIndex;
            lastCodeUnit = parentCodeUnit;
            break c$0;
          }
          if (t1.isSeparator$1(parentCodeUnit) && t1.isSeparator$1(lastCodeUnit)) {
            parentIndex0 = parentIndex + 1;
            lastParentSeparator = parentIndex;
            parentIndex = parentIndex0;
            break c$0;
          } else if (t1.isSeparator$1(childCodeUnit) && t1.isSeparator$1(lastCodeUnit)) {
            if (typeof childIndex !== "number")
              return childIndex.$add();
            ++childIndex;
            break c$0;
          }
          if (parentCodeUnit === 46 && t1.isSeparator$1(lastCodeUnit)) {
            ++parentIndex;
            if (parentIndex === t2)
              break;
            parentCodeUnit = C.JSString_methods.codeUnitAt$1($parent, parentIndex);
            if (t1.isSeparator$1(parentCodeUnit)) {
              parentIndex0 = parentIndex + 1;
              lastParentSeparator = parentIndex;
              parentIndex = parentIndex0;
              break c$0;
            }
            if (parentCodeUnit === 46) {
              ++parentIndex;
              if (parentIndex === t2 || t1.isSeparator$1(C.JSString_methods.codeUnitAt$1($parent, parentIndex)))
                return C._PathRelation_inconclusive;
            }
          }
          if (childCodeUnit === 46 && t1.isSeparator$1(lastCodeUnit)) {
            if (typeof childIndex !== "number")
              return childIndex.$add();
            ++childIndex;
            t4 = child.length;
            if (childIndex === t4)
              break;
            childCodeUnit = C.JSString_methods.codeUnitAt$1(child, childIndex);
            if (t1.isSeparator$1(childCodeUnit)) {
              ++childIndex;
              break c$0;
            }
            if (childCodeUnit === 46) {
              ++childIndex;
              if (childIndex === t4 || t1.isSeparator$1(C.JSString_methods.codeUnitAt$1(child, childIndex)))
                return C._PathRelation_inconclusive;
            }
          }
          if (_this._pathDirection$2(child, childIndex) !== C._PathDirection_988)
            return C._PathRelation_inconclusive;
          if (_this._pathDirection$2($parent, parentIndex) !== C._PathDirection_988)
            return C._PathRelation_inconclusive;
          return C._PathRelation_different;
        }
      }
      if (childIndex === child.length) {
        if (parentIndex === t2 || t1.isSeparator$1(C.JSString_methods.codeUnitAt$1($parent, parentIndex)))
          lastParentSeparator = parentIndex;
        else if (lastParentSeparator == null)
          lastParentSeparator = P.max(0, parentRootLength - 1, P.int);
        direction = _this._pathDirection$2($parent, lastParentSeparator == null ? parentRootLength - 1 : lastParentSeparator);
        if (direction === C._PathDirection_8Gl)
          return C._PathRelation_equal;
        return direction === C._PathDirection_ZGD ? C._PathRelation_inconclusive : C._PathRelation_different;
      }
      direction = _this._pathDirection$2(child, childIndex);
      if (direction === C._PathDirection_8Gl)
        return C._PathRelation_equal;
      if (direction === C._PathDirection_ZGD)
        return C._PathRelation_inconclusive;
      return t1.isSeparator$1(C.JSString_methods.codeUnitAt$1(child, childIndex)) || t1.isSeparator$1(lastCodeUnit) ? C._PathRelation_within : C._PathRelation_different;
    },
    _pathDirection$2: function(path, index) {
      var t1, t2, i, depth, reachedRoot, i0, t3;
      H.stringTypeCheck(path);
      H.intTypeCheck(index);
      t1 = path.length;
      t2 = this.style;
      i = index;
      depth = 0;
      reachedRoot = false;
      while (true) {
        if (typeof i !== "number")
          return i.$lt();
        if (!(i < t1))
          break;
        while (true) {
          if (!(i < t1 && t2.isSeparator$1(C.JSString_methods.codeUnitAt$1(path, i))))
            break;
          ++i;
        }
        if (i === t1)
          break;
        i0 = i;
        while (true) {
          if (!(i0 < t1 && !t2.isSeparator$1(C.JSString_methods.codeUnitAt$1(path, i0))))
            break;
          ++i0;
        }
        t3 = i0 - i;
        if (!(t3 === 1 && J.$eq$(C.JSString_methods.codeUnitAt$1(path, i), 46)))
          if (t3 === 2 && J.$eq$(C.JSString_methods.codeUnitAt$1(path, i), 46) && J.$eq$(C.JSString_methods.codeUnitAt$1(path, i + 1), 46)) {
            --depth;
            if (depth < 0)
              break;
            if (depth === 0)
              reachedRoot = true;
          } else
            ++depth;
        if (i0 === t1)
          break;
        i = i0 + 1;
      }
      if (depth < 0)
        return C._PathDirection_ZGD;
      if (depth === 0)
        return C._PathDirection_8Gl;
      if (reachedRoot)
        return C._PathDirection_FIw;
      return C._PathDirection_988;
    },
    fromUri$1: function(uri) {
      return this.style.pathFromUri$1(M._parseUri(uri));
    },
    toUri$1: function(path) {
      var t1, _this = this;
      H.stringTypeCheck(path);
      t1 = _this.style;
      if (_this.isRelative$1(path))
        return t1.relativePathToUri$1(path);
      else
        return t1.absolutePathToUri$1(_this.join$2(0, _this.get$current(), path));
    },
    prettyUri$1: function(uri) {
      var path, rel, _this = this,
        typedUri = M._parseUri(uri);
      if (J.$eq$(typedUri.get$scheme(), "file") && J.$eq$(_this.style, $.$get$Style_url()))
        return typedUri.toString$0(0);
      else if (!J.$eq$(typedUri.get$scheme(), "file") && !J.$eq$(typedUri.get$scheme(), "") && !J.$eq$(_this.style, $.$get$Style_url()))
        return typedUri.toString$0(0);
      path = _this.normalize$1(_this.fromUri$1(typedUri));
      rel = _this.relative$1(path);
      return J.$gt$n(J.get$length$asx(_this.split$1(0, rel)), J.get$length$asx(_this.split$1(0, path))) ? path : rel;
    },
    _parse$1: function(path) {
      return X.ParsedPath_ParsedPath$parse(H.stringTypeCheck(path), this.style);
    },
    get$style: function() {
      return this.style;
    }
  };
  M.Context_join_closure.prototype = {
    call$1: function(part) {
      return H.stringTypeCheck(part) != null;
    },
    $signature: 0
  };
  M.Context_joinAll_closure.prototype = {
    call$1: function(part) {
      return H.stringTypeCheck(part) !== "";
    },
    $signature: 0
  };
  M.Context_split_closure.prototype = {
    call$1: function(part) {
      return !J.get$isEmpty$asx(H.stringTypeCheck(part));
    },
    $signature: 0
  };
  M._validateArgList_closure.prototype = {
    call$1: function(arg) {
      H.stringTypeCheck(arg);
      return arg == null ? "null" : '"' + arg + '"';
    },
    $signature: 3
  };
  M._PathDirection.prototype = {
    toString$0: function(_) {
      return this.name;
    }
  };
  M._PathRelation.prototype = {
    toString$0: function(_) {
      return this.name;
    }
  };
  B.InternalStyle.prototype = {
    getRoot$1: function(path) {
      var $length, t1;
      H.stringTypeCheck(path);
      $length = this.rootLength$1(path);
      if (typeof $length !== "number")
        return $length.$gt();
      if ($length > 0)
        return J.substring$2$s(path, 0, $length);
      if (this.isRootRelative$1(path)) {
        if (0 >= path.length)
          return H.ioore(path, 0);
        t1 = path[0];
      } else
        t1 = null;
      return t1;
    },
    relativePathToUri$1: function(path) {
      var segments;
      H.stringTypeCheck(path);
      segments = J.split$1$s(this.get$context(), path);
      if (this.isSeparator$1(J.codeUnitAt$1$s(path, path.length - 1)))
        J.add$1$ax(segments, "");
      return P._Uri__Uri(null, null, segments, null);
    },
    codeUnitsEqual$2: function(codeUnit1, codeUnit2) {
      return H.intTypeCheck(codeUnit1) == H.intTypeCheck(codeUnit2);
    },
    pathsEqual$2: function(path1, path2) {
      return H.stringTypeCheck(path1) == H.stringTypeCheck(path2);
    }
  };
  X.ParsedPath.prototype = {
    get$isAbsolute: function() {
      return this.root != null;
    },
    get$hasTrailingSeparator: function() {
      if (!J.get$isEmpty$asx(this.parts))
        var t1 = J.$eq$(J.get$last$ax(this.parts), "") || !J.$eq$(J.get$last$ax(this.separators), "");
      else
        t1 = false;
      return t1;
    },
    removeTrailingSeparators$0: function() {
      var t1, t2, _this = this;
      while (true) {
        if (!(!J.get$isEmpty$asx(_this.parts) && J.$eq$(J.get$last$ax(_this.parts), "")))
          break;
        J.removeLast$0$ax(_this.parts);
        J.removeLast$0$ax(_this.separators);
      }
      if (J.$gt$n(J.get$length$asx(_this.separators), 0)) {
        t1 = _this.separators;
        t2 = J.getInterceptor$asx(t1);
        t2.$indexSet(t1, J.$sub$n(t2.get$length(t1), 1), "");
      }
    },
    normalize$0: function() {
      var t2, leadingDoubles, t3, newSeparators, _this = this,
        t1 = P.String,
        newParts = H.setRuntimeTypeInfo([], [t1]);
      for (t2 = J.get$iterator$ax(_this.parts), leadingDoubles = 0; t2.moveNext$0();) {
        t3 = t2.get$current();
        if (!(t3 === "." || t3 === ""))
          if (t3 === "..")
            if (newParts.length > 0)
              newParts.pop();
            else
              ++leadingDoubles;
          else
            C.JSArray_methods.add$1(newParts, t3);
      }
      if (!_this.get$isAbsolute())
        C.JSArray_methods.insertAll$2(newParts, 0, P.List_List$filled(leadingDoubles, "..", t1));
      if (newParts.length === 0 && !_this.get$isAbsolute())
        C.JSArray_methods.add$1(newParts, ".");
      newSeparators = P.List_List$generate(newParts.length, new X.ParsedPath_normalize_closure(_this), true, t1);
      J.insert$2$ax(newSeparators, 0, _this.get$isAbsolute() && newParts.length > 0 && _this.style.needsSeparator$1(_this.root) ? _this.style.get$separator() : "");
      _this.set$parts(newParts);
      _this.set$separators(newSeparators);
      if (_this.root != null && J.$eq$(_this.style, $.$get$Style_windows()))
        _this.root = H.stringTypeCheck(J.replaceAll$2$s(_this.root, "/", "\\"));
      _this.removeTrailingSeparators$0();
    },
    toString$0: function(_) {
      var i, _this = this,
        builder = P.StringBuffer$(""),
        t1 = _this.root;
      if (t1 != null)
        builder.write$1(t1);
      i = 0;
      while (true) {
        t1 = J.get$length$asx(_this.parts);
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (!(i < t1))
          break;
        builder.write$1(J.$index$asx(_this.separators, i));
        builder.write$1(J.$index$asx(_this.parts, i));
        ++i;
      }
      builder.write$1(J.get$last$ax(_this.separators));
      return builder.toString$0(0);
    },
    set$root: function(root) {
      this.root = H.stringTypeCheck(root);
    },
    set$parts: function(parts) {
      this.parts = H.assertSubtype(parts, "$isList", [P.String], "$asList");
    },
    set$separators: function(separators) {
      this.separators = H.assertSubtype(separators, "$isList", [P.String], "$asList");
    },
    isRootRelative$1: function(arg0) {
      return this.isRootRelative.call$1(arg0);
    },
    get$style: function() {
      return this.style;
    },
    get$parts: function() {
      return this.parts;
    },
    get$separators: function() {
      return this.separators;
    }
  };
  X.ParsedPath_normalize_closure.prototype = {
    call$1: function(_) {
      H.intTypeCheck(_);
      return this.$this.get$style().get$separator();
    },
    $signature: 19
  };
  X.PathException.prototype = {
    toString$0: function(_) {
      return "PathException: " + H.S(this.message);
    },
    $isException: 1,
    get$message: function(receiver) {
      return this.message;
    }
  };
  K.PathMap.prototype = {
    $asMapView: function($V) {
      return [P.String, $V];
    },
    $asMap: function($V) {
      return [P.String, $V];
    }
  };
  B.PathSet.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.String];
    },
    $asIterableBase: function() {
      return [P.String];
    },
    $asIterable: function() {
      return [P.String];
    },
    $isSet: 1,
    $asSet: function() {
      return [P.String];
    }
  };
  O.Style.prototype = {
    get$context: function() {
      return M.Context_Context(this);
    },
    toString$0: function(_) {
      return this.get$name(this);
    }
  };
  E.PosixStyle.prototype = {
    containsSeparator$1: function(path) {
      return J.contains$1$asx(H.stringTypeCheck(path), "/");
    },
    isSeparator$1: function(codeUnit) {
      return H.intTypeCheck(codeUnit) === 47;
    },
    needsSeparator$1: function(path) {
      H.stringTypeCheck(path);
      return J.getInterceptor$asx(path).get$isNotEmpty(path) && !this.isSeparator$1(C.JSString_methods.codeUnitAt$1(path, path.length - 1));
    },
    rootLength$2$withDrive: function(path, withDrive) {
      H.stringTypeCheck(path);
      H.boolTypeCheck(withDrive);
      if (J.getInterceptor$asx(path).get$isNotEmpty(path) && this.isSeparator$1(C.JSString_methods._codeUnitAt$1(path, 0)))
        return 1;
      return 0;
    },
    rootLength$1: function(path) {
      return this.rootLength$2$withDrive(path, false);
    },
    isRootRelative$1: function(path) {
      H.stringTypeCheck(path);
      return false;
    },
    pathFromUri$1: function(uri) {
      H.interceptedTypeCheck(uri, "$isUri");
      if (J.$eq$(uri.get$scheme(), "") || J.$eq$(uri.get$scheme(), "file"))
        return P.Uri_decodeComponent(uri.get$path(uri));
      throw H.wrapException(P.ArgumentError$("Uri " + H.S(uri) + " must have scheme 'file:'."));
    },
    absolutePathToUri$1: function(path) {
      var parsed = X.ParsedPath_ParsedPath$parse(H.stringTypeCheck(path), this);
      if (J.get$isEmpty$asx(parsed.parts))
        J.addAll$1$ax(parsed.parts, H.setRuntimeTypeInfo(["", ""], [P.String]));
      else if (parsed.get$hasTrailingSeparator())
        J.add$1$ax(parsed.parts, "");
      return P._Uri__Uri(null, null, parsed.parts, "file");
    },
    get$name: function() {
      return "posix";
    },
    get$separator: function() {
      return "/";
    },
    get$separators: function() {
      return null;
    }
  };
  F.UrlStyle.prototype = {
    containsSeparator$1: function(path) {
      return J.contains$1$asx(H.stringTypeCheck(path), "/");
    },
    isSeparator$1: function(codeUnit) {
      return H.intTypeCheck(codeUnit) === 47;
    },
    needsSeparator$1: function(path) {
      var t1;
      H.stringTypeCheck(path);
      if (J.getInterceptor$asx(path).get$isEmpty(path))
        return false;
      t1 = path.length;
      if (!this.isSeparator$1(C.JSString_methods.codeUnitAt$1(path, t1 - 1)))
        return true;
      return C.JSString_methods.endsWith$1(path, "://") && J.$eq$(this.rootLength$1(path), t1);
    },
    rootLength$2$withDrive: function(path, withDrive) {
      var t1, i, codeUnit, index, t2;
      H.stringTypeCheck(path);
      H.boolTypeCheck(withDrive);
      if (J.getInterceptor$asx(path).get$isEmpty(path))
        return 0;
      if (this.isSeparator$1(C.JSString_methods._codeUnitAt$1(path, 0)))
        return 1;
      for (t1 = path.length, i = 0; i < t1; ++i) {
        codeUnit = C.JSString_methods._codeUnitAt$1(path, i);
        if (this.isSeparator$1(codeUnit))
          return 0;
        if (codeUnit === 58) {
          if (i === 0)
            return 0;
          index = C.JSString_methods.indexOf$2(path, "/", C.JSString_methods.startsWith$2(path, "//", i + 1) ? i + 3 : i);
          if (typeof index !== "number")
            return index.$le();
          if (index <= 0)
            return t1;
          if (!withDrive || t1 < index + 3)
            return index;
          if (!C.JSString_methods.startsWith$1(path, "file://"))
            return index;
          if (!B.isDriveLetter(path, index + 1))
            return index;
          t2 = index + 3;
          return t1 === t2 ? t2 : index + 4;
        }
      }
      return 0;
    },
    rootLength$1: function(path) {
      return this.rootLength$2$withDrive(path, false);
    },
    isRootRelative$1: function(path) {
      H.stringTypeCheck(path);
      return J.getInterceptor$asx(path).get$isNotEmpty(path) && this.isSeparator$1(C.JSString_methods._codeUnitAt$1(path, 0));
    },
    pathFromUri$1: function(uri) {
      return J.toString$0$(H.interceptedTypeCheck(uri, "$isUri"));
    },
    relativePathToUri$1: function(path) {
      return P.Uri_parse(H.stringTypeCheck(path));
    },
    absolutePathToUri$1: function(path) {
      return P.Uri_parse(H.stringTypeCheck(path));
    },
    get$name: function() {
      return "url";
    },
    get$separator: function() {
      return "/";
    },
    get$separators: function() {
      return null;
    }
  };
  L.WindowsStyle.prototype = {
    containsSeparator$1: function(path) {
      return J.contains$1$asx(H.stringTypeCheck(path), "/");
    },
    isSeparator$1: function(codeUnit) {
      H.intTypeCheck(codeUnit);
      return codeUnit === 47 || codeUnit === 92;
    },
    needsSeparator$1: function(path) {
      H.stringTypeCheck(path);
      if (J.getInterceptor$asx(path).get$isEmpty(path))
        return false;
      return !this.isSeparator$1(C.JSString_methods.codeUnitAt$1(path, path.length - 1));
    },
    rootLength$2$withDrive: function(path, withDrive) {
      var t1, t2, index;
      H.stringTypeCheck(path);
      H.boolTypeCheck(withDrive);
      if (J.getInterceptor$asx(path).get$isEmpty(path))
        return 0;
      t1 = C.JSString_methods._codeUnitAt$1(path, 0);
      t2 = J.getInterceptor$(t1);
      if (t2.$eq(t1, 47))
        return 1;
      if (t2.$eq(t1, 92)) {
        t1 = path.length;
        if (t1 < 2 || !J.$eq$(C.JSString_methods._codeUnitAt$1(path, 1), 92))
          return 1;
        index = C.JSString_methods.indexOf$2(path, "\\", 2);
        if (typeof index !== "number")
          return index.$gt();
        if (index > 0) {
          index = C.JSString_methods.indexOf$2(path, "\\", index + 1);
          if (typeof index !== "number")
            return index.$gt();
          if (index > 0)
            return index;
        }
        return t1;
      }
      if (path.length < 3)
        return 0;
      if (!B.isAlphabetic(t1))
        return 0;
      if (!J.$eq$(C.JSString_methods._codeUnitAt$1(path, 1), 58))
        return 0;
      if (!this.isSeparator$1(C.JSString_methods._codeUnitAt$1(path, 2)))
        return 0;
      return 3;
    },
    rootLength$1: function(path) {
      return this.rootLength$2$withDrive(path, false);
    },
    isRootRelative$1: function(path) {
      return J.$eq$(this.rootLength$1(H.stringTypeCheck(path)), 1);
    },
    pathFromUri$1: function(uri) {
      var path;
      H.interceptedTypeCheck(uri, "$isUri");
      if (!J.$eq$(uri.get$scheme(), "") && !J.$eq$(uri.get$scheme(), "file"))
        throw H.wrapException(P.ArgumentError$("Uri " + H.S(uri) + " must have scheme 'file:'."));
      path = uri.get$path(uri);
      if (J.$eq$(uri.get$host(), "")) {
        if (path.length >= 3 && J.startsWith$1$s(path, "/") && B.isDriveLetter(path, 1))
          path = J.replaceFirst$2$s(path, "/", "");
      } else
        path = "\\\\" + H.S(uri.get$host()) + H.S(path);
      return P.Uri_decodeComponent(J.replaceAll$2$s(path, "/", "\\"));
    },
    absolutePathToUri$1: function(path) {
      var rootParts, t1,
        parsed = X.ParsedPath_ParsedPath$parse(H.stringTypeCheck(path), this);
      if (J.startsWith$1$s(parsed.root, "\\\\")) {
        rootParts = J.where$1$ax(J.split$1$s(parsed.root, "\\"), new L.WindowsStyle_absolutePathToUri_closure());
        t1 = J.getInterceptor$ax(rootParts);
        J.insert$2$ax(parsed.parts, 0, t1.get$last(rootParts));
        if (parsed.get$hasTrailingSeparator())
          J.add$1$ax(parsed.parts, "");
        return P._Uri__Uri(t1.get$first(rootParts), null, parsed.parts, "file");
      } else {
        if (J.$eq$(J.get$length$asx(parsed.parts), 0) || parsed.get$hasTrailingSeparator())
          J.add$1$ax(parsed.parts, "");
        J.insert$2$ax(parsed.parts, 0, J.replaceAll$2$s(J.replaceAll$2$s(parsed.root, "/", ""), "\\", ""));
        return P._Uri__Uri(null, null, parsed.parts, "file");
      }
    },
    codeUnitsEqual$2: function(codeUnit1, codeUnit2) {
      var upperCase1;
      H.intTypeCheck(codeUnit1);
      H.intTypeCheck(codeUnit2);
      if (codeUnit1 == codeUnit2)
        return true;
      if (codeUnit1 === 47)
        return codeUnit2 === 92;
      if (codeUnit1 === 92)
        return codeUnit2 === 47;
      if (typeof codeUnit1 !== "number")
        return codeUnit1.$xor();
      if (typeof codeUnit2 !== "number")
        return H.iae(codeUnit2);
      if ((codeUnit1 ^ codeUnit2) >>> 0 !== 32)
        return false;
      upperCase1 = (codeUnit1 | 32) >>> 0;
      return upperCase1 >= 97 && upperCase1 <= 122;
    },
    pathsEqual$2: function(path1, path2) {
      var t1, t2, i;
      H.stringTypeCheck(path1);
      H.stringTypeCheck(path2);
      if (path1 == path2)
        return true;
      t1 = path1.length;
      if (t1 !== path2.length)
        return false;
      for (t2 = J.getInterceptor$s(path2), i = 0; i < t1; ++i)
        if (!this.codeUnitsEqual$2(C.JSString_methods._codeUnitAt$1(path1, i), t2._codeUnitAt$1(path2, i)))
          return false;
      return true;
    },
    get$name: function() {
      return "windows";
    },
    get$separator: function() {
      return "\\";
    },
    get$separators: function() {
      return null;
    }
  };
  L.WindowsStyle_absolutePathToUri_closure.prototype = {
    call$1: function(part) {
      return H.stringTypeCheck(part) !== "";
    },
    $signature: 0
  };
  O.Pool.prototype = {};
  O.PoolResource.prototype = {};
  M.BuilderInfo.prototype = {};
  M.CodedBufferReader.prototype = {};
  M.CodedBufferWriter.prototype = {};
  M.EventPlugin.prototype = {};
  M.InvalidProtocolBufferException.prototype = {$isException: 1};
  M.Extension.prototype = {};
  M._ExtensionFieldSet.prototype = {};
  M.ExtensionRegistry.prototype = {};
  M._EmptyExtensionRegistry.prototype = {$isExtensionRegistry: 1};
  M.FieldInfo.prototype = {};
  M.MapFieldInfo.prototype = {
    $asFieldInfo: function($K, $V) {
      return [[M.PbMap, $K, $V]];
    }
  };
  M._FieldSet.prototype = {};
  M.PbFieldType.prototype = {};
  M.GeneratedMessage.prototype = {};
  M.PackageName.prototype = {};
  M.ServerContext.prototype = {};
  M.GeneratedService.prototype = {};
  M.FrozenPbList.prototype = {};
  M.PbList.prototype = {};
  M.PbListBase.prototype = {};
  M.PbMap.prototype = {};
  M.ProtobufEnum.prototype = {};
  M.ReadonlyMessageMixin.prototype = {};
  M.ClientContext.prototype = {};
  M.RpcClient.prototype = {};
  M.UnknownFieldSet.prototype = {};
  M.UnknownFieldSetField.prototype = {};
  T.Version.prototype = {$isComparable: 1,
    $asComparable: function() {
      return [X.VersionRange];
    },
    $isVersionConstraint: 1,
    $isVersionRange: 1
  };
  U.VersionConstraint.prototype = {};
  U._EmptyVersion.prototype = {$isVersionConstraint: 1};
  X.VersionRange.prototype = {$isComparable: 1,
    $asComparable: function() {
      return [X.VersionRange];
    },
    $isVersionConstraint: 1
  };
  X.CompatibleWithVersionRange.prototype = {};
  E.VersionUnion.prototype = {$isVersionConstraint: 1};
  U.ScratchSpace.prototype = {};
  L.SourceMapBuilder.prototype = {};
  L.Entry0.prototype = {$isComparable: 1,
    $asComparable: function() {
      return [L.Entry0];
    }
  };
  T.Mapping.prototype = {};
  T.MultiSectionMapping.prototype = {
    MultiSectionMapping$fromJson$3$mapUrl: function(sections, otherMaps, mapUrl) {
      var t1, t2, t3, t4, t5, t6, t7, t8, section, t9, line, column, url, map, _s6_ = "offset", _null = null;
      for (t1 = J.get$iterator$ax(sections), t2 = this._maps, t3 = J.getInterceptor$ax(t2), t4 = this._lineStart, t5 = J.getInterceptor$asx(t4), t6 = this._columnStart, t7 = J.getInterceptor$ax(t6), t8 = otherMaps != null; t1.moveNext$0();) {
        section = t1.get$current();
        t9 = J.getInterceptor$asx(section);
        if (t9.$index(section, _s6_) == null)
          throw H.wrapException(P.FormatException$("section missing offset", _null, _null));
        line = J.$index$asx(t9.$index(section, _s6_), "line");
        if (line == null)
          throw H.wrapException(P.FormatException$("offset missing line", _null, _null));
        column = J.$index$asx(t9.$index(section, _s6_), "column");
        if (column == null)
          throw H.wrapException(P.FormatException$("offset missing column", _null, _null));
        t5.add$1(t4, H.intTypeCheck(line));
        t7.add$1(t6, H.intTypeCheck(column));
        url = t9.$index(section, "url");
        map = t9.$index(section, "map");
        t9 = url != null;
        if (t9 && map != null)
          throw H.wrapException(P.FormatException$("section can't use both url and map entries", _null, _null));
        else if (t9) {
          if (!t8 || otherMaps.$index(0, url) == null)
            throw H.wrapException(P.FormatException$("section contains refers to " + H.S(url) + ', but no map was given for it. Make sure a map is passed in "otherMaps"', _null, _null));
          t3.add$1(t2, T.parseJson(otherMaps.$index(0, url), url, otherMaps));
        } else if (map != null)
          t3.add$1(t2, T.parseJson(H.interceptedTypeCheck(map, "$isMap"), mapUrl, otherMaps));
        else
          throw H.wrapException(P.FormatException$("section missing url or map", _null, _null));
      }
      if (J.$eq$(t5.get$length(t4), 0))
        throw H.wrapException(P.FormatException$("expected at least one section", _null, _null));
    },
    _indexFor$2: function(line, column) {
      var t7,
        t1 = this._lineStart,
        t2 = J.getInterceptor$asx(t1),
        t3 = J.getInterceptor$n(line),
        t4 = this._columnStart,
        t5 = J.getInterceptor$asx(t4),
        t6 = J.getInterceptor$n(column),
        i = 0;
      while (true) {
        t7 = t2.get$length(t1);
        if (typeof t7 !== "number")
          return H.iae(t7);
        if (!(i < t7))
          break;
        if (H.boolTypeCheck(t3.$lt(line, t2.$index(t1, i))))
          return i - 1;
        if (t3.$eq(line, t2.$index(t1, i)) && H.boolTypeCheck(t6.$lt(column, t5.$index(t4, i))))
          return i - 1;
        ++i;
      }
      return J.$sub$n(t2.get$length(t1), 1);
    },
    spanFor$4$files$uri: function(line, column, files, uri) {
      var index, t1, t2, t3, _this = this;
      H.intTypeCheck(line);
      H.intTypeCheck(column);
      H.assertSubtype(files, "$isMap", [P.String, Y.SourceFile], "$asMap");
      H.stringTypeCheck(uri);
      index = _this._indexFor$2(line, column);
      t1 = J.$index$asx(_this._maps, index);
      t2 = J.$index$asx(_this._lineStart, index);
      if (typeof line !== "number")
        return line.$sub();
      if (typeof t2 !== "number")
        return H.iae(t2);
      t3 = J.$index$asx(_this._columnStart, index);
      if (typeof column !== "number")
        return column.$sub();
      if (typeof t3 !== "number")
        return H.iae(t3);
      return t1.spanFor$3$files(line - t2, column - t3, files);
    },
    spanFor$3$uri: function(line, column, uri) {
      return this.spanFor$4$files$uri(line, column, null, uri);
    },
    spanFor$3$files: function(line, column, files) {
      return this.spanFor$4$files$uri(line, column, files, null);
    },
    toString$0: function(_) {
      var t7, _this = this,
        buff = P.StringBuffer$(H.S(_this.get$runtimeType(_this)) + " : ["),
        t1 = _this._lineStart,
        t2 = J.getInterceptor$asx(t1),
        t3 = _this._columnStart,
        t4 = J.getInterceptor$asx(t3),
        t5 = _this._maps,
        t6 = J.getInterceptor$asx(t5),
        i = 0;
      while (true) {
        t7 = t2.get$length(t1);
        if (typeof t7 !== "number")
          return H.iae(t7);
        if (!(i < t7))
          break;
        buff.write$1("(");
        buff.write$1(t2.$index(t1, i));
        buff.write$1(",");
        buff.write$1(t4.$index(t3, i));
        buff.write$1(":");
        buff.write$1(t6.$index(t5, i));
        buff.write$1(")");
        ++i;
      }
      buff.write$1("]");
      return buff.toString$0(0);
    }
  };
  T.MappingBundle.prototype = {
    addMapping$1: function(mapping) {
      H.interceptedTypeCheck(mapping, "$isSingleMapping");
      J.$indexSet$ax(this._mappings, mapping.targetUrl, mapping);
    },
    toJson$0: function() {
      return J.toList$0$ax(J.map$1$1$ax(this._mappings.get$values(), new T.MappingBundle_toJson_closure(), [P.Map,,,]));
    },
    toString$0: function(_) {
      var t1,
        buff = P.StringBuffer$("");
      for (t1 = J.get$iterator$ax(this._mappings.get$values()); t1.moveNext$0();)
        buff.write$1(J.toString$0$(t1.get$current()));
      return buff.toString$0(0);
    },
    containsMapping$1: function(url) {
      return this._mappings.containsKey$1(H.stringTypeCheck(url));
    },
    spanFor$4$files$uri: function(line, column, files, uri) {
      var separatorCodeUnits, t1, t2, onBoundary, i, candidate, $location;
      H.intTypeCheck(line);
      H.intTypeCheck(column);
      H.assertSubtype(files, "$isMap", [P.String, Y.SourceFile], "$asMap");
      H.stringTypeCheck(uri);
      if (uri == null)
        throw H.wrapException(P.ArgumentError$notNull("uri"));
      separatorCodeUnits = H.setRuntimeTypeInfo([47, 58], [P.int]);
      for (t1 = uri.length, t2 = this._mappings, onBoundary = true, i = 0; i < t1; ++i) {
        if (onBoundary) {
          candidate = C.JSString_methods.substring$1(uri, i);
          if (t2.containsKey$1(candidate))
            return J.$index$asx(t2, candidate).spanFor$4$files$uri(line, column, files, candidate);
        }
        onBoundary = C.JSArray_methods.contains$1(separatorCodeUnits, C.JSString_methods._codeUnitAt$1(uri, i));
      }
      if (typeof line !== "number")
        return line.$mul();
      if (typeof column !== "number")
        return H.iae(column);
      $location = V.SourceLocation$(line * 1000000 + column, column, line, P.Uri_parse(uri));
      return G.SourceMapSpan$($location, $location, "", false);
    },
    spanFor$3$uri: function(line, column, uri) {
      return this.spanFor$4$files$uri(line, column, null, uri);
    },
    spanFor$3$files: function(line, column, files) {
      return this.spanFor$4$files$uri(line, column, files, null);
    }
  };
  T.MappingBundle_toJson_closure.prototype = {
    call$1: function(v) {
      return H.interceptedTypeCheck(v, "$isSingleMapping").toJson$0();
    },
    $signature: 20
  };
  T.SingleMapping.prototype = {
    SingleMapping$fromJson$2$mapUrl: function(map, mapUrl) {
      var t6, source, tokenizer, entries, t7, line, column, srcUrlId, srcLine, srcColumn, srcNameId, t8, _this = this,
        _s14_ = "sourcesContent",
        _null = null,
        sourcesContent = map.$index(0, _s14_) == null ? C.List_empty : P.List_List$from(H.listSuperNativeTypeCheck(map.$index(0, _s14_), "$isIterable"), true, P.String),
        t1 = _this.files,
        t2 = _this.urls,
        t3 = J.getInterceptor$asx(t2),
        t4 = J.getInterceptor$ax(t1),
        t5 = J.getInterceptor$asx(sourcesContent),
        i = 0;
      while (true) {
        t6 = t3.get$length(t2);
        if (typeof t6 !== "number")
          return H.iae(t6);
        if (i < t6) {
          t6 = t5.get$length(sourcesContent);
          if (typeof t6 !== "number")
            return H.iae(t6);
          t6 = i < t6;
        } else
          t6 = false;
        if (!t6)
          break;
        c$0: {
          source = t5.$index(sourcesContent, i);
          if (source == null)
            break c$0;
          t4.$indexSet(t1, i, Y.SourceFile$fromString(H.stringTypeCheck(source), t3.$index(t2, i)));
        }
        ++i;
      }
      tokenizer = T._MappingTokenizer$(H.stringTypeCheck(map.$index(0, "mappings")));
      t1 = [T.TargetEntry];
      entries = H.setRuntimeTypeInfo([], t1);
      for (t4 = _this.names, t5 = J.getInterceptor$asx(t4), t6 = _this.lines, t7 = J.getInterceptor$ax(t6), line = 0, column = 0, srcUrlId = 0, srcLine = 0, srcColumn = 0, srcNameId = 0; tokenizer.get$hasTokens();) {
        if (tokenizer.get$nextKind().get$isNewLine()) {
          if (!C.JSArray_methods.get$isEmpty(entries)) {
            t7.add$1(t6, T.TargetLineEntry$(line, entries));
            entries = H.setRuntimeTypeInfo([], t1);
          }
          ++line;
          tokenizer._consumeNewLine$0();
          column = 0;
          continue;
        }
        if (tokenizer.get$nextKind().get$isNewSegment())
          throw H.wrapException(_this._segmentError$2(0, line));
        t8 = tokenizer._consumeValue$0();
        if (typeof t8 !== "number")
          return H.iae(t8);
        column += t8;
        if (!tokenizer.get$nextKind().get$isValue())
          C.JSArray_methods.add$1(entries, T.TargetEntry$(column, _null, _null, _null, _null));
        else {
          t8 = tokenizer._consumeValue$0();
          if (typeof t8 !== "number")
            return H.iae(t8);
          srcUrlId += t8;
          t8 = t3.get$length(t2);
          if (typeof t8 !== "number")
            return H.iae(t8);
          if (srcUrlId >= t8)
            throw H.wrapException(P.StateError$("Invalid source url id. " + H.S(_this.targetUrl) + ", " + line + ", " + H.S(srcUrlId)));
          if (!tokenizer.get$nextKind().get$isValue())
            throw H.wrapException(_this._segmentError$2(2, line));
          t8 = tokenizer._consumeValue$0();
          if (typeof t8 !== "number")
            return H.iae(t8);
          srcLine += t8;
          if (!tokenizer.get$nextKind().get$isValue())
            throw H.wrapException(_this._segmentError$2(3, line));
          t8 = tokenizer._consumeValue$0();
          if (typeof t8 !== "number")
            return H.iae(t8);
          srcColumn += t8;
          if (!tokenizer.get$nextKind().get$isValue())
            C.JSArray_methods.add$1(entries, T.TargetEntry$(column, srcUrlId, srcLine, srcColumn, _null));
          else {
            t8 = tokenizer._consumeValue$0();
            if (typeof t8 !== "number")
              return H.iae(t8);
            srcNameId += t8;
            t8 = t5.get$length(t4);
            if (typeof t8 !== "number")
              return H.iae(t8);
            if (srcNameId >= t8)
              throw H.wrapException(P.StateError$("Invalid name id: " + H.S(_this.targetUrl) + ", " + line + ", " + H.S(srcNameId)));
            C.JSArray_methods.add$1(entries, T.TargetEntry$(column, srcUrlId, srcLine, srcColumn, srcNameId));
          }
        }
        if (tokenizer.get$nextKind().get$isNewSegment())
          tokenizer._consumeNewSegment$0();
      }
      if (!C.JSArray_methods.get$isEmpty(entries))
        t7.add$1(t6, T.TargetLineEntry$(line, entries));
      map.forEach$1(0, new T.SingleMapping$fromJson_closure(_this));
    },
    toJson$0: function() {
      var t1, line, column, srcLine, srcColumn, srcUrlId, srcNameId, first, t2, nextLine, i, t3, newUrlId, result, _this = this,
        buff = P.StringBuffer$("");
      for (t1 = J.get$iterator$ax(_this.lines), line = 0, column = 0, srcLine = 0, srcColumn = 0, srcUrlId = 0, srcNameId = 0, first = true; t1.moveNext$0();) {
        t2 = t1.get$current();
        nextLine = t2.line;
        if (typeof nextLine !== "number")
          return nextLine.$gt();
        if (nextLine > line) {
          for (i = line; i < nextLine; ++i)
            buff.write$1(";");
          line = nextLine;
          column = 0;
          first = true;
        }
        for (t2 = J.get$iterator$ax(t2.entries); t2.moveNext$0(); first = false) {
          t3 = t2.get$current();
          if (!first)
            buff.write$1(",");
          column = T.SingleMapping__append(buff, column, t3.column);
          newUrlId = t3.sourceUrlId;
          if (newUrlId == null)
            continue;
          srcUrlId = T.SingleMapping__append(buff, srcUrlId, newUrlId);
          srcLine = T.SingleMapping__append(buff, srcLine, t3.sourceLine);
          srcColumn = T.SingleMapping__append(buff, srcColumn, t3.sourceColumn);
          t3 = t3.sourceNameId;
          if (t3 == null)
            continue;
          srcNameId = T.SingleMapping__append(buff, srcNameId, t3);
        }
      }
      t1 = _this.sourceRoot;
      if (t1 == null)
        t1 = "";
      result = P.LinkedHashMap_LinkedHashMap$_literal(["version", 3, "sourceRoot", t1, "sources", _this.urls, "names", _this.names, "mappings", buff.toString$0(0)], P.String, P.Object);
      t1 = _this.targetUrl;
      if (t1 != null)
        result.$indexSet(0, "file", t1);
      J.forEach$1$ax(_this.extensions, new T.SingleMapping_toJson_closure(result));
      return result;
    },
    _segmentError$2: function(seen, line) {
      H.intTypeCheck(seen);
      H.intTypeCheck(line);
      return P.StateError$("Invalid entry in sourcemap, expected 1, 4, or 5 values, but got " + H.S(seen) + ".\ntargeturl: " + H.S(this.targetUrl) + ", line: " + H.S(line));
    },
    _findLine$1: function(line) {
      var t1 = this.lines,
        index = O.binarySearch(t1, new T.SingleMapping__findLine_closure(H.intTypeCheck(line)));
      if (typeof index !== "number")
        return index.$le();
      return index <= 0 ? null : J.$index$asx(t1, index - 1);
    },
    _findColumn$3: function(line, column, lineEntry) {
      var entries, index;
      H.intTypeCheck(line);
      H.intTypeCheck(column);
      H.interceptedTypeCheck(lineEntry, "$isTargetLineEntry");
      if (lineEntry == null || J.$eq$(J.get$length$asx(lineEntry.entries), 0))
        return;
      if (!J.$eq$(lineEntry.line, line))
        return J.get$last$ax(lineEntry.entries);
      entries = lineEntry.entries;
      index = O.binarySearch(entries, new T.SingleMapping__findColumn_closure(column));
      if (typeof index !== "number")
        return index.$le();
      return index <= 0 ? null : J.$index$asx(entries, index - 1);
    },
    spanFor$4$files$uri: function(line, column, files, uri) {
      var entry, url, t1, start, text, t2, _this = this;
      H.intTypeCheck(line);
      H.intTypeCheck(column);
      H.assertSubtype(files, "$isMap", [P.String, Y.SourceFile], "$asMap");
      H.stringTypeCheck(uri);
      entry = _this._findColumn$3(line, column, _this._findLine$1(line));
      if (entry == null || entry.sourceUrlId == null)
        return;
      url = J.$index$asx(_this.urls, entry.sourceUrlId);
      t1 = _this.sourceRoot;
      if (t1 != null)
        url = H.S(t1) + H.S(url);
      if (files != null && files.$index(0, url) != null) {
        start = files.$index(0, url).getOffset$2(entry.sourceLine, entry.sourceColumn);
        t1 = entry.sourceNameId;
        if (t1 != null) {
          text = J.$index$asx(_this.names, t1);
          t1 = files.$index(0, url);
          t2 = text.length;
          if (typeof start !== "number")
            return start.$add();
          return G.SourceMapFileSpan$(t1.span$2(start, start + t2), true);
        } else
          return G.SourceMapFileSpan$(files.$index(0, url).location$1(start).pointSpan$0(), false);
      } else {
        t1 = _this._mapUrl;
        t1 = t1 == null ? url : t1.resolve$1(url);
        t2 = entry.sourceLine;
        start = V.SourceLocation$(0, entry.sourceColumn, t2, t1);
        t1 = entry.sourceNameId;
        if (t1 != null)
          return G.SourceMapSpan$identifier(start, J.$index$asx(_this.names, t1));
        else
          return G.SourceMapSpan$(start, start, "", false);
      }
    },
    spanFor$3$uri: function(line, column, uri) {
      return this.spanFor$4$files$uri(line, column, null, uri);
    },
    spanFor$3$files: function(line, column, files) {
      return this.spanFor$4$files$uri(line, column, files, null);
    },
    toString$0: function(_) {
      var _this = this,
        t1 = P.StringBuffer$(H.S(_this.get$runtimeType(_this)) + " : [");
      t1.write$1("targetUrl: ");
      t1.write$1(_this.targetUrl);
      t1.write$1(", sourceRoot: ");
      t1.write$1(_this.sourceRoot);
      t1.write$1(", urls: ");
      t1.write$1(_this.urls);
      t1.write$1(", names: ");
      t1.write$1(_this.names);
      t1.write$1(", lines: ");
      t1.write$1(_this.lines);
      t1.write$1("]");
      return t1.toString$0(0);
    },
    get$extensions: function() {
      return this.extensions;
    }
  };
  T.SingleMapping$fromJson_closure.prototype = {
    call$2: function($name, value) {
      if (H.boolTypeCheck(J.startsWith$1$s($name, "x_")))
        J.$indexSet$ax(this.$this.get$extensions(), H.stringTypeCheck($name), value);
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: 4
  };
  T.SingleMapping_toJson_closure0.prototype = {$signature: 21};
  T.SingleMapping_toJson_closure.prototype = {
    call$2: function($name, value) {
      J.$indexSet$ax(this.result, H.stringTypeCheck($name), value);
      return value;
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: 22
  };
  T.SingleMapping__findLine_closure.prototype = {
    call$1: function(e) {
      return H.boolTypeCheck(J.$gt$n(e.get$line(), this.line));
    },
    $signature: 12
  };
  T.SingleMapping__findColumn_closure.prototype = {
    call$1: function(e) {
      return H.boolTypeCheck(J.$gt$n(e.get$column(), this.column));
    },
    $signature: 12
  };
  T.TargetLineEntry.prototype = {
    toString$0: function(_) {
      var _this = this;
      return H.S(_this.get$runtimeType(_this)) + ": " + H.S(_this.line) + " " + H.S(_this.entries);
    },
    get$line: function() {
      return this.line;
    }
  };
  T.TargetEntry.prototype = {
    toString$0: function(_) {
      var _this = this;
      return H.S(_this.get$runtimeType(_this)) + ": (" + H.S(_this.column) + ", " + H.S(_this.sourceUrlId) + ", " + H.S(_this.sourceLine) + ", " + H.S(_this.sourceColumn) + ", " + H.S(_this.sourceNameId) + ")";
    },
    get$column: function() {
      return this.column;
    }
  };
  T._MappingTokenizer.prototype = {
    moveNext$0: function() {
      var t2,
        t1 = H.intTypeCheck(J.$add$ansx(this.index, 1));
      this.index = t1;
      t2 = this._parser$_length;
      if (typeof t1 !== "number")
        return t1.$lt();
      if (typeof t2 !== "number")
        return H.iae(t2);
      return t1 < t2;
    },
    get$current: function() {
      var _this = this;
      return J.$ge$n(_this.index, 0) && J.$lt$n(_this.index, _this._parser$_length) ? J.$index$asx(_this._internal, _this.index) : null;
    },
    get$hasTokens: function() {
      var t1 = this._parser$_length,
        t2 = J.getInterceptor$n(t1);
      return J.$lt$n(this.index, t2.$sub(t1, 1)) && t2.$gt(t1, 0);
    },
    get$nextKind: function() {
      if (!this.get$hasTokens())
        return C._TokenKind_false_false_true;
      var next = J.$index$asx(this._internal, J.$add$ansx(this.index, 1));
      if (next === ";")
        return C._TokenKind_true_false_false;
      if (next === ",")
        return C._TokenKind_false_true_false;
      return C._TokenKind_false_false_false;
    },
    _consumeValue$0: function() {
      return L.decodeVlq(this);
    },
    _consumeNewLine$0: function() {
      this.index = H.intTypeCheck(J.$add$ansx(this.index, 1));
    },
    _consumeNewSegment$0: function() {
      this.index = H.intTypeCheck(J.$add$ansx(this.index, 1));
    },
    toString$0: function(_) {
      var t3, _this = this,
        buff = P.StringBuffer$(""),
        t1 = _this._internal,
        t2 = J.getInterceptor$asx(t1),
        i = 0;
      while (true) {
        t3 = _this.index;
        if (typeof t3 !== "number")
          return H.iae(t3);
        if (!(i < t3))
          break;
        buff.write$1(t2.$index(t1, i));
        ++i;
      }
      buff.write$1("\x1b[31m");
      buff.write$1(_this.get$current() == null ? "" : _this.get$current());
      buff.write$1("\x1b[0m");
      i = J.$add$ansx(_this.index, 1);
      while (true) {
        t3 = t2.get$length(t1);
        if (typeof i !== "number")
          return i.$lt();
        if (typeof t3 !== "number")
          return H.iae(t3);
        if (!(i < t3))
          break;
        buff.write$1(t2.$index(t1, i));
        ++i;
      }
      buff.write$1(" (" + H.S(_this.index) + ")");
      return buff.toString$0(0);
    },
    $isIterator: 1,
    $asIterator: function() {
      return [P.String];
    }
  };
  T._TokenKind.prototype = {
    get$isValue: function() {
      return !this.isNewLine && !this.isNewSegment && !this.isEof;
    },
    get$isNewLine: function() {
      return this.isNewLine;
    },
    get$isNewSegment: function() {
      return this.isNewSegment;
    }
  };
  A.Printer0.prototype = {};
  A.NestedPrinter.prototype = {$isNestedItem: 1};
  A.NestedItem.prototype = {};
  D.TextEditTransaction.prototype = {};
  D._TextEdit.prototype = {$isComparable: 1,
    $asComparable: function() {
      return [D._TextEdit];
    }
  };
  G.SourceMapSpan.prototype = {};
  G.SourceMapFileSpan.prototype = {
    get$start: function() {
      return this._inner.get$start();
    },
    get$end: function() {
      return this._inner.get$end();
    },
    get$sourceUrl: function() {
      return this._inner.get$sourceUrl();
    },
    get$length: function(_) {
      return J.get$length$asx(this._inner);
    },
    toString$0: function(_) {
      return J.replaceAll$2$s(J.toString$0$(this._inner), "FileSpan", "SourceMapFileSpan");
    },
    $isComparable: 1,
    $asComparable: function() {
      return [V.SourceSpan];
    },
    $isSourceMapSpan: 1,
    $isFileSpan: 1,
    $isSourceSpan: 1,
    $isSourceSpanBase: 1,
    $isSourceSpanMixin: 1,
    $isSourceSpanWithContext: 1
  };
  L.closure.prototype = {
    call$0: function() {
      var i,
        map = P.LinkedHashMap_LinkedHashMap$_empty(P.String, P.int);
      for (i = 0; i < 64; ++i)
        map.$indexSet(0, "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"[i], i);
      return map;
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 24
  };
  Y.SourceFile.prototype = {
    get$length: function(_) {
      return J.get$length$asx(this._decodedChars);
    },
    get$lines: function() {
      return J.get$length$asx(this._lineStarts);
    },
    SourceFile$decoded$2$url: function(decodedChars, url) {
      var t5, c, j,
        t1 = this._decodedChars,
        t2 = J.getInterceptor$asx(t1),
        t3 = this._lineStarts,
        t4 = J.getInterceptor$ax(t3),
        i = 0;
      while (true) {
        t5 = t2.get$length(t1);
        if (typeof t5 !== "number")
          return H.iae(t5);
        if (!(i < t5))
          break;
        c = t2.$index(t1, i);
        if (c === 13) {
          j = i + 1;
          t5 = t2.get$length(t1);
          if (typeof t5 !== "number")
            return H.iae(t5);
          if (j >= t5 || !J.$eq$(t2.$index(t1, j), 10))
            c = 10;
        }
        if (c === 10)
          t4.add$1(t3, i + 1);
        ++i;
      }
    },
    span$2: function(start, end) {
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      return Y._FileSpan$(this, start, end == null ? this.get$length(this) : end);
    },
    location$1: function(offset) {
      return Y.FileLocation$_(this, H.intTypeCheck(offset));
    },
    getLine$1: function(offset) {
      var t1, t2, t3, _this = this;
      H.intTypeCheck(offset);
      if (typeof offset !== "number")
        return offset.$lt();
      if (offset < 0)
        throw H.wrapException(P.RangeError$("Offset may not be negative, was " + offset + "."));
      else {
        t1 = _this.get$length(_this);
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (offset > t1)
          throw H.wrapException(P.RangeError$("Offset " + offset + " must not be greater than the number of characters in the file, " + H.S(_this.get$length(_this)) + "."));
      }
      t1 = _this._lineStarts;
      t2 = J.getInterceptor$ax(t1);
      t3 = t2.get$first(t1);
      if (typeof t3 !== "number")
        return H.iae(t3);
      if (offset < t3)
        return -1;
      t3 = t2.get$last(t1);
      if (typeof t3 !== "number")
        return H.iae(t3);
      if (offset >= t3)
        return J.$sub$n(t2.get$length(t1), 1);
      if (_this._isNearCachedLine$1(offset))
        return _this._cachedLine;
      return _this._cachedLine = H.intTypeCheck(J.$sub$n(_this._binarySearch$1(offset), 1));
    },
    _isNearCachedLine$1: function(offset) {
      var t1, t2, t3, _this = this;
      H.intTypeCheck(offset);
      t1 = _this._cachedLine;
      if (t1 == null)
        return false;
      t2 = _this._lineStarts;
      t3 = J.getInterceptor$asx(t2);
      t1 = t3.$index(t2, t1);
      if (typeof offset !== "number")
        return offset.$lt();
      if (typeof t1 !== "number")
        return H.iae(t1);
      if (offset < t1)
        return false;
      if (!J.$ge$n(_this._cachedLine, J.$sub$n(t3.get$length(t2), 1))) {
        t1 = t3.$index(t2, J.$add$ansx(_this._cachedLine, 1));
        if (typeof t1 !== "number")
          return H.iae(t1);
        t1 = offset < t1;
      } else
        t1 = true;
      if (t1)
        return true;
      if (!J.$ge$n(_this._cachedLine, J.$sub$n(t3.get$length(t2), 2))) {
        t1 = t3.$index(t2, J.$add$ansx(_this._cachedLine, 2));
        if (typeof t1 !== "number")
          return H.iae(t1);
        t1 = offset < t1;
      } else
        t1 = true;
      if (t1) {
        _this._cachedLine = H.intTypeCheck(J.$add$ansx(_this._cachedLine, 1));
        return true;
      }
      return false;
    },
    _binarySearch$1: function(offset) {
      var t1, t2, max, min, half;
      H.intTypeCheck(offset);
      t1 = this._lineStarts;
      t2 = J.getInterceptor$asx(t1);
      max = J.$sub$n(t2.get$length(t1), 1);
      min = 0;
      while (true) {
        if (typeof max !== "number")
          return H.iae(max);
        if (!(min < max))
          break;
        half = min + C.JSInt_methods._tdivFast$1(max - min, 2);
        if (J.$gt$n(t2.$index(t1, half), offset))
          max = half;
        else
          min = half + 1;
      }
      return max;
    },
    getColumn$1: function(offset) {
      var t1, line, lineStart, _this = this;
      H.intTypeCheck(offset);
      if (typeof offset !== "number")
        return offset.$lt();
      if (offset < 0)
        throw H.wrapException(P.RangeError$("Offset may not be negative, was " + offset + "."));
      else {
        t1 = _this.get$length(_this);
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (offset > t1)
          throw H.wrapException(P.RangeError$("Offset " + offset + " must be not be greater than the number of characters in the file, " + H.S(_this.get$length(_this)) + "."));
      }
      line = _this.getLine$1(offset);
      lineStart = J.$index$asx(_this._lineStarts, line);
      if (typeof lineStart !== "number")
        return lineStart.$gt();
      if (lineStart > offset)
        throw H.wrapException(P.RangeError$("Line " + H.S(line) + " comes after offset " + offset + "."));
      return offset - lineStart;
    },
    getOffset$2: function(line, column) {
      var t1, t2, result, t3, t4, _this = this;
      H.intTypeCheck(line);
      H.intTypeCheck(column);
      if (column == null)
        column = 0;
      if (typeof line !== "number")
        return line.$lt();
      if (line < 0)
        throw H.wrapException(P.RangeError$("Line may not be negative, was " + line + "."));
      else {
        t1 = _this.get$lines();
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (line >= t1)
          throw H.wrapException(P.RangeError$("Line " + line + " must be less than the number of lines in the file, " + H.S(_this.get$lines()) + "."));
        else if (column < 0)
          throw H.wrapException(P.RangeError$("Column may not be negative, was " + column + "."));
      }
      t1 = _this._lineStarts;
      t2 = J.getInterceptor$asx(t1);
      result = J.$add$ansx(t2.$index(t1, line), column);
      t3 = _this.get$length(_this);
      if (typeof result !== "number")
        return result.$gt();
      if (typeof t3 !== "number")
        return H.iae(t3);
      if (!(result > t3)) {
        t3 = line + 1;
        t4 = _this.get$lines();
        if (typeof t4 !== "number")
          return H.iae(t4);
        if (t3 < t4) {
          t1 = t2.$index(t1, t3);
          if (typeof t1 !== "number")
            return H.iae(t1);
          t1 = result >= t1;
        } else
          t1 = false;
      } else
        t1 = true;
      if (t1)
        throw H.wrapException(P.RangeError$("Line " + line + " doesn't have " + column + " columns."));
      return result;
    },
    getText$2: function(start, end) {
      return P.String_String$fromCharCodes(J.sublist$2$ax(this._decodedChars, H.intTypeCheck(start), H.intTypeCheck(end)), 0, null);
    },
    get$url: function(receiver) {
      return this.url;
    }
  };
  Y.FileLocation.prototype = {
    get$sourceUrl: function() {
      return J.get$url$z(this.file);
    },
    get$line: function() {
      return this.file.getLine$1(this.offset);
    },
    get$column: function() {
      return this.file.getColumn$1(this.offset);
    },
    FileLocation$_$2: function(file, offset) {
      var t3, t4,
        t1 = this.offset,
        t2 = J.getInterceptor$n(t1);
      if (t2.$lt(t1, 0))
        throw H.wrapException(P.RangeError$("Offset may not be negative, was " + H.S(t1) + "."));
      else {
        t3 = this.file;
        t4 = J.getInterceptor$asx(t3);
        if (t2.$gt(t1, t4.get$length(t3)))
          throw H.wrapException(P.RangeError$("Offset " + H.S(t1) + " must not be greater than the number of characters in the file, " + H.S(t4.get$length(t3)) + "."));
      }
    },
    pointSpan$0: function() {
      var t1 = this.offset;
      return Y._FileSpan$(this.file, t1, t1);
    },
    get$offset: function() {
      return this.offset;
    }
  };
  Y.FileSpan.prototype = {$isComparable: 1,
    $asComparable: function() {
      return [V.SourceSpan];
    },
    $isSourceSpan: 1,
    $isSourceSpanBase: 1,
    $isSourceSpanMixin: 1,
    $isSourceSpanWithContext: 1
  };
  Y._FileSpan.prototype = {
    get$sourceUrl: function() {
      return J.get$url$z(this.file);
    },
    get$length: function(_) {
      return J.$sub$n(this._end, this._file$_start);
    },
    get$start: function() {
      return Y.FileLocation$_(this.file, this._file$_start);
    },
    get$end: function() {
      return Y.FileLocation$_(this.file, this._end);
    },
    get$text: function() {
      return this.file.getText$2(this._file$_start, this._end);
    },
    _FileSpan$3: function(file, _start, _end) {
      var t4, t5,
        t1 = this._end,
        t2 = this._file$_start,
        t3 = J.getInterceptor$n(t1);
      if (t3.$lt(t1, t2))
        throw H.wrapException(P.ArgumentError$("End " + H.S(t1) + " must come after start " + H.S(t2) + "."));
      else {
        t4 = this.file;
        t5 = J.getInterceptor$asx(t4);
        if (t3.$gt(t1, t5.get$length(t4)))
          throw H.wrapException(P.RangeError$("End " + H.S(t1) + " must not be greater than the number of characters in the file, " + H.S(t5.get$length(t4)) + "."));
        else if (J.$lt$n(t2, 0))
          throw H.wrapException(P.RangeError$("Start may not be negative, was " + H.S(t2) + "."));
      }
    },
    $eq: function(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (!J.getInterceptor$(other).$isFileSpan)
        return _this.super$SourceSpanMixin$$eq(0, other);
      if (!other.$is_FileSpan)
        return _this.super$SourceSpanMixin$$eq(0, other) && J.$eq$(_this.get$sourceUrl(), other.get$sourceUrl());
      return J.$eq$(_this._file$_start, other._file$_start) && J.$eq$(_this._end, other._end) && J.$eq$(_this.get$sourceUrl(), other.get$sourceUrl());
    },
    get$hashCode: function(_) {
      return Y.SourceSpanMixin.prototype.get$hashCode.call(this, this);
    },
    $isFileSpan: 1,
    $isSourceSpanBase: 1,
    $isSourceSpanWithContext: 1
  };
  U.Highlighter.prototype = {};
  V.SourceLocation.prototype = {
    get$toolString: function() {
      var source = this.sourceUrl;
      return H.S(source == null ? "unknown source" : source) + ":" + H.S(J.$add$ansx(this.line, 1)) + ":" + H.S(J.$add$ansx(this.column, 1));
    },
    SourceLocation$4$column$line$sourceUrl: function(offset, column, line, sourceUrl) {
      if (typeof offset !== "number")
        return offset.$lt();
      if (offset < 0)
        throw H.wrapException(P.RangeError$("Offset may not be negative, was " + offset + "."));
      else if (line != null && line < 0)
        throw H.wrapException(P.RangeError$("Line may not be negative, was " + H.S(line) + "."));
      else if (column != null && column < 0)
        throw H.wrapException(P.RangeError$("Column may not be negative, was " + H.S(column) + "."));
    },
    distance$1: function(other) {
      var t1;
      H.interceptedTypeCheck(other, "$isSourceLocation");
      t1 = this.sourceUrl;
      if (!J.$eq$(t1, other.get$sourceUrl()))
        throw H.wrapException(P.ArgumentError$('Source URLs "' + H.S(t1) + '" and "' + H.S(other.get$sourceUrl()) + "\" don't match."));
      return J.abs$0$in(J.$sub$n(this.offset, other.get$offset()));
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return !!J.getInterceptor$(other).$isSourceLocation && J.$eq$(this.sourceUrl, other.get$sourceUrl()) && J.$eq$(this.offset, other.get$offset());
    },
    get$hashCode: function(_) {
      return J.$add$ansx(J.get$hashCode$(this.sourceUrl), this.offset);
    },
    toString$0: function(_) {
      var _this = this;
      return "<" + H.S(_this.get$runtimeType(_this)) + ": " + H.S(_this.offset) + " " + H.S(_this.get$toolString()) + ">";
    },
    $isComparable: 1,
    $asComparable: function() {
      return [V.SourceLocation];
    },
    get$sourceUrl: function() {
      return this.sourceUrl;
    },
    get$offset: function() {
      return this.offset;
    },
    get$line: function() {
      return this.line;
    },
    get$column: function() {
      return this.column;
    }
  };
  V.SourceLocationBase.prototype = {};
  D.SourceLocationMixin.prototype = {
    get$toolString: function() {
      var _this = this;
      return H.S(_this.get$sourceUrl() == null ? "unknown source" : _this.get$sourceUrl()) + ":" + H.S(J.$add$ansx(_this.get$line(), 1)) + ":" + H.S(J.$add$ansx(_this.get$column(), 1));
    },
    distance$1: function(other) {
      H.interceptedTypeCheck(other, "$isSourceLocation");
      if (!J.$eq$(this.get$sourceUrl(), other.get$sourceUrl()))
        throw H.wrapException(P.ArgumentError$('Source URLs "' + H.S(this.get$sourceUrl()) + '" and "' + H.S(other.get$sourceUrl()) + "\" don't match."));
      return J.abs$0$in(J.$sub$n(this.offset, other.get$offset()));
    },
    pointSpan$0: function() {
      return V.SourceSpan_SourceSpan(this, this, "");
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return !!J.getInterceptor$(other).$isSourceLocation && J.$eq$(this.get$sourceUrl(), other.get$sourceUrl()) && J.$eq$(this.offset, other.get$offset());
    },
    get$hashCode: function(_) {
      return J.$add$ansx(J.get$hashCode$(this.get$sourceUrl()), this.offset);
    },
    toString$0: function(_) {
      var _this = this;
      return "<" + H.S(_this.get$runtimeType(_this)) + ": " + H.S(_this.offset) + " " + H.S(_this.get$toolString()) + ">";
    },
    $isComparable: 1,
    $asComparable: function() {
      return [V.SourceLocation];
    },
    $isSourceLocation: 1
  };
  V.SourceSpan.prototype = {$isComparable: 1,
    $asComparable: function() {
      return [V.SourceSpan];
    }
  };
  V.SourceSpanBase.prototype = {
    SourceSpanBase$3: function(start, end, text) {
      var t3,
        t1 = this.end,
        t2 = this.start;
      if (!J.$eq$(t1.get$sourceUrl(), t2.get$sourceUrl()))
        throw H.wrapException(P.ArgumentError$('Source URLs "' + H.S(t2.get$sourceUrl()) + '" and  "' + H.S(t1.get$sourceUrl()) + "\" don't match."));
      else if (J.$lt$n(t1.get$offset(), t2.get$offset()))
        throw H.wrapException(P.ArgumentError$("End " + H.S(t1) + " must come after start " + H.S(t2) + "."));
      else {
        t3 = this.text;
        if (!J.$eq$(J.get$length$asx(t3), t2.distance$1(t1)))
          throw H.wrapException(P.ArgumentError$('Text "' + H.S(t3) + '" must be ' + H.S(t2.distance$1(t1)) + " characters long."));
      }
    },
    get$start: function() {
      return this.start;
    },
    get$end: function() {
      return this.end;
    },
    get$text: function() {
      return this.text;
    }
  };
  G.SourceSpanException.prototype = {$isException: 1};
  G.SourceSpanFormatException.prototype = {$isFormatException: 1};
  Y.SourceSpanMixin.prototype = {
    get$sourceUrl: function() {
      return this.get$start().get$sourceUrl();
    },
    get$length: function(_) {
      return J.$sub$n(this.get$end().get$offset(), this.get$start().get$offset());
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return !!J.getInterceptor$(other).$isSourceSpan && J.$eq$(this.get$start(), other.get$start()) && J.$eq$(this.get$end(), other.get$end());
    },
    get$hashCode: function(_) {
      var t1 = J.get$hashCode$(this.get$start()),
        t2 = J.get$hashCode$(this.get$end());
      if (typeof t2 !== "number")
        return H.iae(t2);
      return J.$add$ansx(t1, 31 * t2);
    },
    toString$0: function(_) {
      var _this = this;
      return "<" + H.S(_this.get$runtimeType(_this)) + ": from " + H.S(_this.get$start()) + " to " + H.S(_this.get$end()) + ' "' + H.S(_this.get$text()) + '">';
    },
    $isComparable: 1,
    $asComparable: function() {
      return [V.SourceSpan];
    },
    $isSourceSpan: 1
  };
  X.SourceSpanWithContext.prototype = {};
  U.Chain.prototype = {
    toTrace$0: function() {
      return Y.Trace$(J.expand$1$1$ax(this.traces, new U.Chain_toTrace_closure(), A.Frame), null);
    },
    toString$0: function(_) {
      var t1 = this.traces,
        t2 = P.int,
        t3 = J.getInterceptor$ax(t1);
      return J.join$1$ax(t3.map$1$1(t1, new U.Chain_toString_closure(J.fold$1$2$ax(t3.map$1$1(t1, new U.Chain_toString_closure0(), t2), 0, H.instantiate1(P.math__max$closure(), t2), t2)), P.String), "===== asynchronous gap ===========================\n");
    },
    $isStackTrace: 1
  };
  U.Chain_Chain$parse_closure.prototype = {
    call$1: function(trace) {
      return Y.Trace$parseVM(H.stringTypeCheck(trace));
    },
    $signature: 13
  };
  U.Chain_Chain$parse_closure0.prototype = {
    call$1: function(trace) {
      return Y.Trace$parseFriendly(H.stringTypeCheck(trace));
    },
    $signature: 13
  };
  U.Chain_toTrace_closure.prototype = {
    call$1: function(trace) {
      return H.interceptedTypeCheck(trace, "$isTrace").get$frames();
    },
    $signature: 34
  };
  U.Chain_toString_closure0.prototype = {
    call$1: function(trace) {
      var t1 = P.int;
      return J.fold$1$2$ax(J.map$1$1$ax(H.interceptedTypeCheck(trace, "$isTrace").get$frames(), new U.Chain_toString__closure0(), t1), 0, H.instantiate1(P.math__max$closure(), t1), t1);
    },
    $signature: 27
  };
  U.Chain_toString__closure0.prototype = {
    call$1: function(frame) {
      return J.get$length$asx(H.interceptedTypeCheck(frame, "$isFrame").get$location());
    },
    $signature: 14
  };
  U.Chain_toString_closure.prototype = {
    call$1: function(trace) {
      return J.join$0$ax(J.map$1$1$ax(H.interceptedTypeCheck(trace, "$isTrace").get$frames(), new U.Chain_toString__closure(this.longest), P.String));
    },
    $signature: 29
  };
  U.Chain_toString__closure.prototype = {
    call$1: function(frame) {
      H.interceptedTypeCheck(frame, "$isFrame");
      return H.S(J.padRight$1$s(frame.get$location(), this.longest)) + "  " + H.S(frame.get$member()) + "\n";
    },
    $signature: 15
  };
  A.Frame.prototype = {
    get$library: function() {
      var t1 = this.uri;
      if (J.$eq$(t1.get$scheme(), "data"))
        return "data:...";
      return D.prettyUri(t1);
    },
    get$location: function() {
      var t2, _this = this,
        t1 = _this.line;
      if (t1 == null)
        return _this.get$library();
      t2 = _this.column;
      if (t2 == null)
        return H.S(_this.get$library()) + " " + H.S(t1);
      return H.S(_this.get$library()) + " " + H.S(t1) + ":" + H.S(t2);
    },
    toString$0: function(_) {
      return H.S(this.get$location()) + " in " + H.S(this.member);
    },
    location$1: function(arg0) {
      return this.get$location().call$1(arg0);
    },
    get$uri: function() {
      return this.uri;
    },
    get$line: function() {
      return this.line;
    },
    get$column: function() {
      return this.column;
    },
    get$member: function() {
      return this.member;
    }
  };
  A.Frame_Frame$parseVM_closure.prototype = {
    call$0: function() {
      var match, member, uri, lineAndColumn, line, _null = null,
        t1 = this.frame;
      if (J.$eq$(t1, "..."))
        return A.Frame$(P._Uri__Uri(_null, _null, _null, _null), _null, _null, "...");
      match = $.$get$_vmFrame().firstMatch$1(t1);
      if (match == null)
        return N.UnparsedFrame$(t1);
      member = J.replaceAll$2$s(J.replaceAll$2$s(match.$index(0, 1), $.$get$_asyncBody(), "<async>"), "<anonymous closure>", "<fn>");
      uri = P.Uri_parse(match.$index(0, 2));
      lineAndColumn = J.split$1$s(match.$index(0, 3), ":");
      t1 = J.getInterceptor$asx(lineAndColumn);
      line = J.$gt$n(t1.get$length(lineAndColumn), 1) ? P.int_parse(t1.$index(lineAndColumn, 1), _null, _null) : _null;
      return A.Frame$(uri, line, J.$gt$n(t1.get$length(lineAndColumn), 2) ? P.int_parse(t1.$index(lineAndColumn, 2), _null, _null) : _null, member);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 5
  };
  A.Frame_Frame$parseV8_closure.prototype = {
    call$0: function() {
      var _s4_ = "<fn>",
        t1 = this.frame,
        match = $.$get$_v8Frame().firstMatch$1(t1);
      if (match == null)
        return N.UnparsedFrame$(t1);
      t1 = new A.Frame_Frame$parseV8_closure_parseLocation(t1);
      if (match.$index(0, 2) != null)
        return t1.call$2(match.$index(0, 2), J.replaceAll$2$s(J.replaceAll$2$s(J.replaceAll$2$s(match.$index(0, 1), "<anonymous>", _s4_), "Anonymous function", _s4_), "(anonymous function)", _s4_));
      else
        return t1.call$2(match.$index(0, 3), _s4_);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 5
  };
  A.Frame_Frame$parseV8_closure_parseLocation.prototype = {
    call$2: function($location, member) {
      var evalMatch, urlMatch, _null = null,
        t1 = $.$get$_v8EvalLocation();
      H.stringTypeCheck($location);
      evalMatch = t1.firstMatch$1($location);
      for (; evalMatch != null;) {
        $location = H.stringTypeCheck(evalMatch.$index(0, 1));
        evalMatch = t1.firstMatch$1($location);
      }
      if ($location === "native")
        return A.Frame$(P.Uri_parse("native"), _null, _null, H.stringTypeCheck(member));
      urlMatch = $.$get$_v8UrlLocation().firstMatch$1($location);
      if (urlMatch == null)
        return N.UnparsedFrame$(this.frame);
      return A.Frame$(A.Frame__uriOrPathToUri(urlMatch.$index(0, 1)), P.int_parse(urlMatch.$index(0, 2), _null, _null), P.int_parse(urlMatch.$index(0, 3), _null, _null), H.stringTypeCheck(member));
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: 32
  };
  A.Frame_Frame$parseFirefox_closure.prototype = {
    call$0: function() {
      var uri, member, line, column, _null = null,
        t1 = this.frame,
        match = $.$get$_firefoxSafariFrame().firstMatch$1(t1);
      if (match == null)
        return N.UnparsedFrame$(t1);
      uri = A.Frame__uriOrPathToUri(match.$index(0, 3));
      if (match.$index(0, 1) != null) {
        member = J.$add$ansx(match.$index(0, 1), J.join$0$ax(P.List_List$filled(J.get$length$asx(C.JSString_methods.allMatches$1("/", match.$index(0, 2))), ".<fn>", P.String)));
        if (J.$eq$(member, ""))
          member = "<fn>";
        member = J.replaceFirst$2$s(member, $.$get$_initialDot(), "");
      } else
        member = "<fn>";
      line = J.$eq$(match.$index(0, 4), "") ? _null : P.int_parse(match.$index(0, 4), _null, _null);
      column = match.$index(0, 5) == null || J.$eq$(match.$index(0, 5), "") ? _null : P.int_parse(match.$index(0, 5), _null, _null);
      return A.Frame$(uri, line, column, H.stringTypeCheck(member));
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 5
  };
  A.Frame_Frame$parseFriendly_closure.prototype = {
    call$0: function() {
      var uri, line, column, _null = null,
        t1 = this.frame,
        match = $.$get$_friendlyFrame().firstMatch$1(t1);
      if (match == null)
        throw H.wrapException(P.FormatException$("Couldn't parse package:stack_trace stack trace line '" + H.S(t1) + "'.", _null, _null));
      uri = J.$eq$(match.$index(0, 1), "data:...") ? P.Uri_Uri$dataFromString("") : P.Uri_parse(match.$index(0, 1));
      if (J.$eq$(uri.get$scheme(), ""))
        uri = D.toUri(D.absolute(D.fromUri(uri)));
      line = match.$index(0, 2) == null ? _null : P.int_parse(match.$index(0, 2), _null, _null);
      column = match.$index(0, 3) == null ? _null : P.int_parse(match.$index(0, 3), _null, _null);
      return A.Frame$(uri, line, column, match.$index(0, 4));
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 5
  };
  X.LazyChain.prototype = {$isStackTrace: 1, $isChain: 1};
  T.LazyTrace.prototype = {
    get$_trace: function() {
      var t1 = this._lazy_trace$_inner;
      return t1 == null ? this._lazy_trace$_inner = H.interceptedTypeCheck(this._thunk.call$0(), "$isTrace") : t1;
    },
    get$frames: function() {
      return this.get$_trace().get$frames();
    },
    toString$0: function(_) {
      return J.toString$0$(this.get$_trace());
    },
    $isStackTrace: 1,
    $isTrace: 1
  };
  O.StackZoneSpecification.prototype = {};
  O._Node.prototype = {};
  Y.Trace.prototype = {
    foldFrames$1: function(predicate) {
      var newFrames, t1, t2, _box_0 = {};
      _box_0.predicate = predicate;
      H.functionTypeCheck(predicate, {func: 1, ret: P.bool, args: [A.Frame]});
      newFrames = H.setRuntimeTypeInfo([], [A.Frame]);
      for (t1 = J.get$iterator$ax(J.get$reversed$ax(this.frames)); t1.moveNext$0();) {
        t2 = t1.get$current();
        if (t2 instanceof N.UnparsedFrame || !_box_0.predicate.call$1(t2))
          C.JSArray_methods.add$1(newFrames, t2);
        else if (C.JSArray_methods.get$isEmpty(newFrames) || !_box_0.predicate.call$1(C.JSArray_methods.get$last(newFrames)))
          C.JSArray_methods.add$1(newFrames, A.Frame$(t2.get$uri(), t2.get$line(), t2.get$column(), t2.get$member()));
      }
      return Y.Trace$(C.JSArray_methods.get$reversed(newFrames), J.toString$0$(this.original));
    },
    toString$0: function(_) {
      var t1 = this.frames,
        t2 = P.int,
        t3 = J.getInterceptor$ax(t1);
      return J.join$0$ax(t3.map$1$1(t1, new Y.Trace_toString_closure(J.fold$1$2$ax(t3.map$1$1(t1, new Y.Trace_toString_closure0(), t2), 0, H.instantiate1(P.math__max$closure(), t2), t2)), P.String));
    },
    $isStackTrace: 1,
    get$frames: function() {
      return this.frames;
    }
  };
  Y.Trace_Trace$from_closure.prototype = {
    call$0: function() {
      return Y.Trace_Trace$parse(J.toString$0$(this.trace));
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 33
  };
  Y.Trace__parseVM_closure.prototype = {
    call$1: function(line) {
      return A.Frame_Frame$parseVM(H.stringTypeCheck(line));
    },
    $signature: 2
  };
  Y.Trace$parseV8_closure.prototype = {
    call$1: function(line) {
      return !J.startsWith$1$s(H.stringTypeCheck(line), $.$get$_v8TraceLine());
    },
    $signature: 0
  };
  Y.Trace$parseV8_closure0.prototype = {
    call$1: function(line) {
      return A.Frame_Frame$parseV8(H.stringTypeCheck(line));
    },
    $signature: 2
  };
  Y.Trace$parseJSCore_closure.prototype = {
    call$1: function(line) {
      return H.stringTypeCheck(line) !== "\tat ";
    },
    $signature: 0
  };
  Y.Trace$parseJSCore_closure0.prototype = {
    call$1: function(line) {
      return A.Frame_Frame$parseV8(H.stringTypeCheck(line));
    },
    $signature: 2
  };
  Y.Trace$parseFirefox_closure.prototype = {
    call$1: function(line) {
      H.stringTypeCheck(line);
      return J.get$isNotEmpty$asx(line) && line !== "[native code]";
    },
    $signature: 0
  };
  Y.Trace$parseFirefox_closure0.prototype = {
    call$1: function(line) {
      return A.Frame_Frame$parseFirefox(H.stringTypeCheck(line));
    },
    $signature: 2
  };
  Y.Trace$parseFriendly_closure.prototype = {
    call$1: function(line) {
      return !J.startsWith$1$s(H.stringTypeCheck(line), "=====");
    },
    $signature: 0
  };
  Y.Trace$parseFriendly_closure0.prototype = {
    call$1: function(line) {
      return A.Frame_Frame$parseFriendly(H.stringTypeCheck(line));
    },
    $signature: 2
  };
  Y.Trace_foldFrames_closure.prototype = {$signature: 6};
  Y.Trace_foldFrames_closure0.prototype = {$signature: 7};
  Y.Trace_toString_closure0.prototype = {
    call$1: function(frame) {
      return J.get$length$asx(H.interceptedTypeCheck(frame, "$isFrame").get$location());
    },
    $signature: 14
  };
  Y.Trace_toString_closure.prototype = {
    call$1: function(frame) {
      H.interceptedTypeCheck(frame, "$isFrame");
      if (frame instanceof N.UnparsedFrame)
        return H.S(frame) + "\n";
      return H.S(J.padRight$1$s(frame.get$location(), this.longest)) + "  " + H.S(frame.get$member()) + "\n";
    },
    $signature: 15
  };
  N.UnparsedFrame.prototype = {
    toString$0: function(_) {
      return this.member;
    },
    $isFrame: 1,
    location$1: function(arg0) {
      return "unparsed".call$1(arg0);
    },
    get$uri: function() {
      return this.uri;
    },
    get$line: function() {
      return null;
    },
    get$column: function() {
      return null;
    },
    get$location: function() {
      return "unparsed";
    },
    get$member: function() {
      return this.member;
    }
  };
  Q.VMTrace.prototype = {$isStackTrace: 1};
  D.EagerSpanScanner.prototype = {};
  D._EagerSpanScannerState.prototype = {$isLineScannerState: 1};
  E.StringScannerException.prototype = {};
  Z.LineScanner.prototype = {};
  Z.LineScannerState.prototype = {};
  R.RelativeSpanScanner.prototype = {$isLineScanner: 1, $isSpanScanner: 1};
  R._SpanScannerState.prototype = {$isLineScannerState: 1};
  S.SpanScanner.prototype = {$isLineScanner: 1};
  S._SpanScannerState0.prototype = {$isLineScannerState: 1};
  X.StringScanner0.prototype = {};
  A.AsciiGlyphSet.prototype = {$isGlyphSet: 1};
  E.GlyphSet.prototype = {};
  K.UnicodeGlyphSet.prototype = {$isGlyphSet: 1};
  N._TypedDataBuffer.prototype = {};
  N._IntBuffer.prototype = {
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $asListBase: function() {
      return [P.int];
    },
    $asListMixin: function() {
      return [P.int];
    },
    $asIterable: function() {
      return [P.int];
    },
    $asList: function() {
      return [P.int];
    },
    $as_TypedDataBuffer: function() {
      return [P.int];
    },
    $as_ListBase_Object_ListMixin: function() {
      return [P.int];
    }
  };
  N._FloatBuffer.prototype = {
    $asEfficientLengthIterable: function() {
      return [P.double];
    },
    $asListBase: function() {
      return [P.double];
    },
    $asListMixin: function() {
      return [P.double];
    },
    $asIterable: function() {
      return [P.double];
    },
    $asList: function() {
      return [P.double];
    },
    $as_TypedDataBuffer: function() {
      return [P.double];
    },
    $as_ListBase_Object_ListMixin: function() {
      return [P.double];
    }
  };
  N.Uint8Buffer.prototype = {};
  N.Int8Buffer.prototype = {};
  N.Uint8ClampedBuffer.prototype = {};
  N.Uint16Buffer.prototype = {};
  N.Int16Buffer.prototype = {};
  N.Uint32Buffer.prototype = {};
  N.Int32Buffer.prototype = {};
  N.Uint64Buffer.prototype = {};
  N.Int64Buffer.prototype = {};
  N.Float32Buffer.prototype = {};
  N.Float64Buffer.prototype = {};
  N.Int32x4Buffer.prototype = {
    $asEfficientLengthIterable: function() {
      return [P.Int32x4];
    },
    $asListBase: function() {
      return [P.Int32x4];
    },
    $asListMixin: function() {
      return [P.Int32x4];
    },
    $asIterable: function() {
      return [P.Int32x4];
    },
    $asList: function() {
      return [P.Int32x4];
    },
    $as_TypedDataBuffer: function() {
      return [P.Int32x4];
    },
    $as_ListBase_Object_ListMixin: function() {
      return [P.Int32x4];
    }
  };
  N.Float32x4Buffer.prototype = {
    $asEfficientLengthIterable: function() {
      return [P.Float32x4];
    },
    $asListBase: function() {
      return [P.Float32x4];
    },
    $asListMixin: function() {
      return [P.Float32x4];
    },
    $asIterable: function() {
      return [P.Float32x4];
    },
    $asList: function() {
      return [P.Float32x4];
    },
    $as_TypedDataBuffer: function() {
      return [P.Float32x4];
    },
    $as_ListBase_Object_ListMixin: function() {
      return [P.Float32x4];
    }
  };
  R.AsyncQueue.prototype = {};
  V._ConstructableFileSystemEvent.prototype = {$isFileSystemEvent: 1};
  V.ConstructableFileSystemCreateEvent.prototype = {$isFileSystemCreateEvent: 1};
  V.ConstructableFileSystemDeleteEvent.prototype = {$isFileSystemDeleteEvent: 1};
  V.ConstructableFileSystemModifyEvent.prototype = {$isFileSystemModifyEvent: 1};
  V.ConstructableFileSystemMoveEvent.prototype = {$isFileSystemMoveEvent: 1};
  B.DirectoryWatcher.prototype = {$isWatcher: 1};
  E.LinuxDirectoryWatcher.prototype = {$isDirectoryWatcher: 1};
  E._LinuxDirectoryWatcher.prototype = {$isDirectoryWatcher: 1, $isManuallyClosedWatcher: 1, $isWatcher: 1};
  R.MacOSDirectoryWatcher.prototype = {$isDirectoryWatcher: 1};
  R._MacOSDirectoryWatcher.prototype = {$isDirectoryWatcher: 1, $isManuallyClosedWatcher: 1, $isWatcher: 1};
  D.PollingDirectoryWatcher.prototype = {$isDirectoryWatcher: 1};
  D._PollingDirectoryWatcher.prototype = {$isDirectoryWatcher: 1, $isManuallyClosedWatcher: 1, $isWatcher: 1};
  L.WindowsDirectoryWatcher.prototype = {$isDirectoryWatcher: 1};
  L._EventBatcher.prototype = {};
  L._WindowsDirectoryWatcher.prototype = {$isDirectoryWatcher: 1, $isManuallyClosedWatcher: 1, $isWatcher: 1};
  F.FileWatcher.prototype = {$isWatcher: 1};
  R.NativeFileWatcher.prototype = {$isFileWatcher: 1};
  R._NativeFileWatcher.prototype = {$isFileWatcher: 1, $isManuallyClosedWatcher: 1, $isWatcher: 1};
  D.PollingFileWatcher.prototype = {$isFileWatcher: 1};
  D._PollingFileWatcher.prototype = {$isFileWatcher: 1, $isManuallyClosedWatcher: 1, $isWatcher: 1};
  B.PathSet0.prototype = {};
  B._Entry.prototype = {};
  O.ResubscribableWatcher.prototype = {$isWatcher: 1};
  O.ManuallyClosedWatcher.prototype = {$isWatcher: 1};
  B.BatchedStreamTransformer.prototype = {
    $asStreamTransformer: function($T) {
      return [$T, [P.List, $T]];
    },
    $asStreamTransformerBase: function($T) {
      return [$T, [P.List, $T]];
    }
  };
  E.WatchEvent.prototype = {};
  E.ChangeType.prototype = {};
  G.Watcher.prototype = {};
  U._DeepEquals.prototype = {};
  X.Event1.prototype = {};
  X.DocumentStartEvent.prototype = {$isEvent1: 1};
  X.DocumentEndEvent.prototype = {$isEvent1: 1};
  X.AliasEvent.prototype = {$isEvent1: 1};
  X._ValueEvent.prototype = {$isEvent1: 1};
  X.ScalarEvent.prototype = {};
  X.SequenceStartEvent.prototype = {};
  X.MappingStartEvent.prototype = {};
  X.EventType.prototype = {};
  A.Loader.prototype = {};
  N.NullSpan.prototype = {};
  G.Parser3.prototype = {};
  G._State0.prototype = {};
  O.Scanner1.prototype = {};
  O._SimpleKey.prototype = {};
  O._Chomping.prototype = {};
  O.ScalarStyle.prototype = {};
  O.CollectionStyle.prototype = {};
  L.Token0.prototype = {};
  L.VersionDirectiveToken.prototype = {$isToken0: 1};
  L.TagDirectiveToken.prototype = {$isToken0: 1};
  L.AnchorToken.prototype = {$isToken0: 1};
  L.AliasToken.prototype = {$isToken0: 1};
  L.TagToken.prototype = {$isToken0: 1};
  L.ScalarToken.prototype = {$isToken0: 1};
  L.TokenType0.prototype = {};
  B.Pair0.prototype = {};
  L.YamlDocument.prototype = {};
  L.VersionDirective.prototype = {};
  L.TagDirective.prototype = {};
  Z.YamlException.prototype = {};
  Z.YamlNode.prototype = {};
  Z.YamlMap.prototype = {$isMapMixin: 1,
    $asMapMixin: function() {
    },
    $isMap: 1,
    $asMap: function() {
    },
    $isUnmodifiableMapMixin: 1,
    $asUnmodifiableMapMixin: function() {
    }
  };
  Z.YamlList.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
    },
    $isListMixin: 1,
    $asListMixin: function() {
    },
    $isIterable: 1,
    $asIterable: function() {
    },
    $isList: 1,
    $asList: function() {
    }
  };
  Z.YamlScalar.prototype = {};
  Z._YamlList_YamlNode_ListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
    },
    $isListMixin: 1,
    $asListMixin: function() {
    },
    $isIterable: 1,
    $asIterable: function() {
    },
    $isList: 1,
    $asList: function() {
    }
  };
  Z._YamlMap_YamlNode_MapMixin.prototype = {$isMapMixin: 1,
    $asMapMixin: function() {
    },
    $isMap: 1,
    $asMap: function() {
    }
  };
  Z._YamlMap_YamlNode_MapMixin_UnmodifiableMapMixin.prototype = {$isMapMixin: 1,
    $asMapMixin: function() {
    },
    $isMap: 1,
    $asMap: function() {
    },
    $isUnmodifiableMapMixin: 1,
    $asUnmodifiableMapMixin: function() {
    }
  };
  A.YamlMapWrapper.prototype = {
    $asMapBase: function() {
    },
    $asMapMixin: function() {
    },
    $asMap: function() {
    },
    $isUnmodifiableMapMixin: 1,
    $asUnmodifiableMapMixin: function() {
    },
    $isYamlNode: 1,
    $isYamlMap: 1,
    $is_YamlMap_YamlNode_MapMixin: 1,
    $is_YamlMap_YamlNode_MapMixin_UnmodifiableMapMixin: 1
  };
  A._YamlMapNodes.prototype = {
    $asMapBase: function() {
      return [null, Z.YamlNode];
    },
    $asMapMixin: function() {
      return [null, Z.YamlNode];
    },
    $asMap: function() {
      return [null, Z.YamlNode];
    },
    $isUnmodifiableMapMixin: 1,
    $asUnmodifiableMapMixin: function() {
      return [null, Z.YamlNode];
    }
  };
  A.YamlListWrapper.prototype = {
    $asEfficientLengthIterable: function() {
    },
    $asListBase: function() {
    },
    $asListMixin: function() {
    },
    $asIterable: function() {
    },
    $asList: function() {
    },
    $isYamlNode: 1,
    $isYamlList: 1,
    $as_ListBase_Object_ListMixin: function() {
    },
    $is_YamlList_YamlNode_ListMixin: 1
  };
  A._YamlListNodes.prototype = {
    $asEfficientLengthIterable: function() {
      return [Z.YamlNode];
    },
    $asListBase: function() {
      return [Z.YamlNode];
    },
    $asListMixin: function() {
      return [Z.YamlNode];
    },
    $asIterable: function() {
      return [Z.YamlNode];
    },
    $asList: function() {
      return [Z.YamlNode];
    },
    $as_ListBase_Object_ListMixin: function() {
      return [Z.YamlNode];
    }
  };
  A._YamlMapWrapper_MapBase_UnmodifiableMapMixin.prototype = {
    $asMapBase: function() {
    },
    $asMapMixin: function() {
    },
    $asMap: function() {
    },
    $isUnmodifiableMapMixin: 1,
    $asUnmodifiableMapMixin: function() {
    }
  };
  A.__YamlMapNodes_MapBase_UnmodifiableMapMixin.prototype = {
    $asMapBase: function() {
      return [null, Z.YamlNode];
    },
    $asMapMixin: function() {
      return [null, Z.YamlNode];
    },
    $asMap: function() {
      return [null, Z.YamlNode];
    },
    $isUnmodifiableMapMixin: 1,
    $asUnmodifiableMapMixin: function() {
      return [null, Z.YamlNode];
    }
  };
  O.mapStackTrace_closure.prototype = {
    call$1: function(trace) {
      return Y.Trace_Trace$from(O.mapStackTrace(this.sourceMap, H.interceptedTypeCheck(trace, "$isTrace"), this.roots));
    },
    $signature: 37
  };
  O.mapStackTrace_closure0.prototype = {
    call$1: function(frame) {
      var column, t1, t2, span, sourceUrl, t3, relative, packageRoot, sourceUrl0, _s5_ = "dart:";
      H.interceptedTypeCheck(frame, "$isFrame");
      if (frame.get$line() == null)
        return;
      column = frame.get$column() == null ? 0 : frame.get$column();
      t1 = J.$sub$n(frame.get$line(), 1);
      if (typeof column !== "number")
        return column.$sub();
      t2 = frame.get$uri();
      t2 = t2 == null ? null : J.toString$0$(t2);
      span = this.sourceMap.spanFor$3$uri(t1, column - 1, t2);
      if (span == null)
        return;
      sourceUrl = J.toString$0$(span.get$sourceUrl());
      for (t1 = J.get$iterator$ax(this.roots); t1.moveNext$0();) {
        t2 = t1.get$current();
        if (t2 != null && $.$get$url().isWithin$2(t2, sourceUrl)) {
          t3 = $.$get$url();
          relative = t3.relative$2$from(sourceUrl, t2);
          if (J.getInterceptor$asx(relative).contains$1(relative, _s5_)) {
            sourceUrl = C.JSString_methods.substring$1(relative, C.JSString_methods.indexOf$1(relative, _s5_));
            break;
          }
          packageRoot = H.S(t2) + "/packages";
          if (t3.isWithin$2(packageRoot, sourceUrl)) {
            sourceUrl0 = C.JSString_methods.$add("package:", t3.relative$2$from(sourceUrl, packageRoot));
            sourceUrl = sourceUrl0;
            break;
          }
        }
      }
      return A.Frame$(P.Uri_parse(!J.getInterceptor$s(sourceUrl).startsWith$1(sourceUrl, _s5_) && C.JSString_methods.startsWith$1(sourceUrl, "package:$sdk") ? "dart:sdk_internal" : sourceUrl), J.$add$ansx(span.get$start().get$line(), 1), J.$add$ansx(span.get$start().get$column(), 1), O._prettifyMember(frame.get$member()));
    },
    $signature: 7
  };
  O.mapStackTrace_closure1.prototype = {
    call$1: function(frame) {
      return H.interceptedTypeCheck(frame, "$isFrame") != null;
    },
    $signature: 6
  };
  O.mapStackTrace_closure2.prototype = {
    call$1: function(frame) {
      return J.contains$1$asx(H.interceptedTypeCheck(frame, "$isFrame").get$uri().get$scheme(), "dart");
    },
    $signature: 6
  };
  D.DartStackTraceUtility.prototype = {};
  D.LazyMapping.prototype = {
    toJson$0: function() {
      return this._bundle.toJson$0();
    },
    spanFor$4$files$uri: function(line, column, files, uri) {
      var t1, t2, rawMap, parsedMap, mapping, span, pathSegments;
      H.intTypeCheck(line);
      H.intTypeCheck(column);
      t1 = P.String;
      H.assertSubtype(files, "$isMap", [t1, Y.SourceFile], "$asMap");
      H.stringTypeCheck(uri);
      if (uri == null)
        throw H.wrapException(P.ArgumentError$notNull("uri"));
      t2 = this._bundle;
      if (!t2.containsMapping$1(uri)) {
        rawMap = this._provider.call$1(uri);
        parsedMap = H.interceptedTypeCast(typeof rawMap === "string" ? P.jsonDecode(rawMap) : rawMap, "$isMap");
        if (parsedMap != null) {
          parsedMap.$indexSet(0, "sources", Q.fixSourceMapSources(J.cast$1$0$ax(H.listTypeCast(parsedMap.$index(0, "sources")), t1)));
          mapping = H.interceptedTypeCast(T.parse(P.jsonEncode(parsedMap)), "$isSingleMapping");
          mapping.targetUrl = uri;
          mapping.sourceRoot = H.S(D.dirname(uri)) + "/";
          t2.addMapping$1(mapping);
        }
      }
      span = t2.spanFor$4$files$uri(line, column, files, uri);
      if (span == null || span.get$start().get$sourceUrl() == null)
        return;
      pathSegments = span.get$start().get$sourceUrl().get$pathSegments();
      t1 = J.getInterceptor$asx(pathSegments);
      if (t1.get$isNotEmpty(pathSegments) && J.$eq$(t1.get$last(pathSegments), "null"))
        return;
      return span;
    },
    spanFor$3$uri: function(line, column, uri) {
      return this.spanFor$4$files$uri(line, column, null, uri);
    },
    spanFor$3$files: function(line, column, files) {
      return this.spanFor$4$files$uri(line, column, files, null);
    }
  };
  D.closure0.prototype = {
    call$1: function(s) {
      return H.S(s);
    },
    $signature: 38
  };
  (function aliases() {
    var _ = J.Interceptor.prototype;
    _.super$Interceptor$noSuchMethod = _.noSuchMethod$1;
    _ = J.JavaScriptObject.prototype;
    _.super$JavaScriptObject$toString = _.toString$0;
    _ = P.ListMixin.prototype;
    _.super$ListMixin$setRange = _.setRange$4;
    _ = P.Converter.prototype;
    _.super$Converter$fuse = _.fuse$1$1;
    _ = P.Iterable.prototype;
    _.super$Iterable$where = _.where$1;
    _.super$Iterable$skipWhile = _.skipWhile$1;
    _ = Y.SourceSpanMixin.prototype;
    _.super$SourceSpanMixin$$eq = _.$eq;
  })();
  (function installTearOffs() {
    var _static_1 = hunkHelpers._static_1,
      _static = hunkHelpers.installStaticTearOff;
    _static_1(P, "convert___defaultToEncodable$closure", "_defaultToEncodable", 1);
    _static_1(P, "core_Uri_decodeComponent$closure", "Uri_decodeComponent", 3);
    _static(P, "math__max$closure", 2, null, ["call$1$2", "call$2"], ["max", function(a, b) {
      return P.max(a, b, P.num);
    }], 39, 1);
    _static_1(D, "stack_trace_mapper__mapper$closure", "mapper", 3);
    _static_1(D, "stack_trace_mapper__setSourceMapProvider$closure", "setSourceMapProvider", 26);
  })();
  (function inheritance() {
    var _mixin = hunkHelpers.mixin,
      _inherit = hunkHelpers.inherit,
      _inheritMany = hunkHelpers.inheritMany;
    _inherit(P.Object, null);
    _inheritMany(P.Object, [H.ChromeObject, H.Event, H.API_ChromeApp, H.API_Chrome, H.API_app_window, H.API_app_runtime, H.API_file_system, H.JS_CONST, H._CryptoUtils, H._HashBase, H.HttpServer, H.HttpConnectionsInfo, H.HttpHeaders, H.HeaderValue, H.HttpSession, H.ContentType, H.Cookie, H.HttpRequest, H.HttpResponse, H.HttpClient, H.HttpClientRequest, H.HttpClientResponse, H.HttpClientCredentials, H.HttpConnectionInfo, H.RedirectInfo, H.DetachedSocket, H.HttpException, H.RedirectException, H.HttpDate, H._HttpHeaders, H._HeaderValue, H._Cookie, H._ServiceObject, H._CopyingBytesBuilder, P.Stream, H._StreamSinkImpl, P.ChunkedConversionSink, H._HttpOutgoing, H._HttpClientConnection, H._ConnectionInfo, H._ConnectionTarget, H._HttpClient, P.LinkedListEntry, H._ProxyConfiguration, H._Proxy, H._HttpConnectionInfo, H._AuthenticationScheme, H._Credentials, H._HttpClientCredentials, H._RedirectInfo, H._Const, H._CharCode, H._State, H._HttpVersion, H._MessageType, H._HttpDetachedStreamSubscription, H._HttpSession, H._HttpSessionManager, H.HttpOverrides, H.WebSocketStatus, H.CompressionOptions, H.WebSocketTransformer, H.WebSocket, H.WebSocketException, H._WebSocketMessageType, H._WebSocketOpcode, H._EncodedString, H._CompressionMaxWindowBits, P.StreamTransformerBase, H._WebSocketPing, H._WebSocketPong, H._WebSocketPerMessageDeflate, H._WebSocketConsumer, J.Interceptor, J.JSIndexable, J.JSObject, J._Growable, J.ArrayIterator, H.CastStreamSubscription, P.Iterable, H.CastIterator, P.MapMixin, P._ListBase_Object_ListMixin, H.ExternalName, H.Since, H.HttpStatus, H.ListIterator, P.Iterator, H.ExpandIterator, H.EmptyIterator, H.FollowedByIterator, H.WhereTypeIterator, H.IterableElementError, H.LinkedListEntry0, H._LinkedListIterator, H.FixedLengthListMixin, H.UnmodifiableListMixin, H.UnmodifiableListError, H.NonGrowableListError, H.Sort, H.Symbol, H.JsGetName, H.JsBuiltin, H.Native, H._Patch, P.MapView, H.ConstantMap, H.Closure, H.InternalMap, H.JSInvocationMirror, H.Primitives, H.JsCache, H.TypeErrorDecoder, P.Error, H.ExceptionAndStackTrace, H._StackTrace, H.Creates, H.Returns, H.JSName, H.TypeImpl, H.TypeVariable, H.LinkedHashMapCell, H.LinkedHashMapKeyIterator, H.JSSyntaxRegExp, H._MatchImplementation, H._AllMatchesIterator, H.StringMatch, H._StringAllMatchesIterator, H._LazyMangledNamesMap, H._LazyReflectiveNamesMap, H.SupportedBrowser, H.Experimental, H.DomName, H.DocsEditable, H.Unstable, H._NativeFloat32x4List_Object_ListMixin, H._NativeInt32x4List_Object_ListMixin, H._NativeFloat64x2List_Object_ListMixin, H.NativeFloat32x4, H.NativeInt32x4, H.NativeFloat64x2, P._TimerImpl, P._AsyncAwaitCompleter, P._AsyncStarStreamController, P._IterationMarker, P._SyncStarIterator, P._BufferingStreamSubscription, P._BroadcastStreamController, P.DeferredLibrary, P.DeferredLoadException, P.FutureOr, P.Future, P.TimeoutException, P.Completer, P._Completer, P._FutureListener, P._Future, P._AsyncCallbackEntry, P._AsyncRun, P.StreamSubscription, P.EventSink, P.StreamConsumer, P.StreamSink, P.StreamTransformer, P.StreamIterator, P._ControllerEventSinkWrapper, P.StreamController, P.SynchronousStreamController, P._StreamControllerLifecycle, P._StreamControllerBase, P._StreamController, P._SyncStreamControllerDispatch, P._AsyncStreamControllerDispatch, P._StreamSinkWrapper, P._AddStreamState, P._EventSink, P._EventDispatch, P._PendingEvents, P._DelayedEvent, P._DelayedDone, P._DoneStreamSubscription, P._BroadcastSubscriptionWrapper, P._StreamIterator, P._EventSinkWrapper, P._HandlerEventSink, P.Timer, P.AsyncError, P._ZoneFunction, P.ZoneSpecification, P._ZoneSpecification, P.ZoneDelegate, P.Zone, P._ZoneDelegate, P._Zone, P._HashMapKeyIterator, P._Es6MapIterator, P._SetBase, P._HashSetIterator, P._LinkedHashSetCell, P._LinkedHashSetIterator, P.HashMap, P.HashSet, P.IterableMixin, P.HasNextIterator, P.LinkedHashMap, P.LinkedHashSet, P._LinkedListIterator0, P.ListMixin, P._MapBaseValueIterator, P._UnmodifiableMapMixin, P.Queue, P._DoubleLink, P._DoubleLinkedQueueIterator, P._ListQueueIterator, P.SetMixin, P._SetBase_Object_SetMixin, P._SplayTreeNode, P._SplayTree, P._TypeTest, P._SplayTreeIterator, P.StringConversionSinkMixin, P.Codec, P._Base64Encoder, P._Base64Decoder, P._ConverterStreamEventSink, P.HtmlEscapeMode, P._JsonStringifier, P._JsonPrettyPrintMixin, P.StringSink, P._ClosableStringSink, P._StringConversionSinkAsStringSinkAdapter, P._Utf8Encoder, P._Utf8Decoder, P._BigIntImpl, P._BigIntReduction, P._BigIntClassic, P.Deprecated, P._Override, P.Provisional, P._Proxy0, P.pragma, P.BigInt, P.bool, P.Comparable, P.DateTime, P.num, P.Duration, P.OutOfMemoryError, P.StackOverflowError, P.Exception, P._Exception, P.FormatException, P.IntegerDivisionByZeroException, P.Expando, P.Function, P.Invocation, P._Invocation, P.BidirectionalIterator, P.List, P.Map, P.MapEntry, P.Null, P.Pattern, P.Match, P.RegExp, P.RegExpMatch, P.Sink, P.StackTrace, P._StringStackTrace, P.Stopwatch, P.String, P.RuneIterator, P.StringBuffer, P.Symbol0, P.Type, P.Uri, P._Uri, P.UriData, P._SimpleUri, P._FakeUserTag, P.ServiceExtensionResponse, P.UserTag, P.Metric, P.Metrics, P.ServiceProtocolInfo, P.Service, P.Flow, P.Timeline, P.TimelineTask, P._AsyncBlock, P._SyncBlock, W.CanvasRenderingContext, W.__CssStyleDeclarationSet_Object_CssStyleDeclarationBase, W.CssStyleDeclarationBase, W._ElementFactoryProvider, W.ScrollAlignment, W.Events, W._GeopositionWrapper, W.GlobalEventHandlers, W.InputElementBase, W.HiddenInputElement, W.TextInputElementBase, W.SearchInputElement, W.TextInputElement, W.UrlInputElement, W.TelephoneInputElement, W.EmailInputElement, W.PasswordInputElement, W.RangeInputElementBase, W.DateInputElement, W.MonthInputElement, W.WeekInputElement, W.TimeInputElement, W.LocalDateTimeInputElement, W.NumberInputElement, W.RangeInputElement, W.CheckboxInputElement, W.RadioButtonInputElement, W.FileUploadInputElement, W.SubmitButtonInputElement, W.ImageButtonInputElement, W.ResetButtonInputElement, W.ButtonInputElement, W._WrappedEvent, W._BeforeUnloadEventStreamProvider, W._JenkinsSmiHash, W.CanvasImageSource, W.WindowBase, W.LocationBase, W.HistoryBase, W.CssClassSet, W.CssRect, W.Dimension, W.EventStreamProvider, W.ElementStream, W.CustomStream, W._StreamPool, W._CustomEventStreamProvider, W._Html5NodeValidator, W.ImmutableListMixin, W.KeyCode, W.KeyLocation, W._KeyName, W.KeyboardEventStream, W.NodeValidatorBuilder, W._SimpleNodeValidator, W._SvgNodeValidator, W.ReadyState, W._WrappedIterator, W._HttpRequestUtils, W.FixedSizeListIterator, W._VariableSizeListIterator, W.Console, W._JSElementUpgrader, W._DOMWindowCrossFrame, W._LocationCrossFrame, W._HistoryCrossFrame, W.Platform, W.ElementUpgrader, W.NodeValidator, W.NodeTreeSanitizer, W._TrustedHtmlTreeSanitizer, W.UriPolicy, W._SameOriginUriPolicy, W._ThrowsNodeValidator, W._ValidatingTreeSanitizer, P._StructuredClone, P._AcceptStructuredClone, P.ContextAttributes, P._TypedImageData, P.Device, P.Lists, P.NodeListWrapper, P._KeyRangeFactoryProvider, P.BytesBuilder, P._CopyingBytesBuilder0, P._BytesBuilder, P.IOException, P.OSError, P._BufferAndStart, P._IOCrypto, P.ZLibOption, P.RawZLibFilter, P.Directory, P.FileSystemEntity, P._AsyncDirectoryListerOps, P._AsyncDirectoryLister, P._EmbedderConfig, P._EventHandler, P.FileMode, P.FileLock, P.File0, P.RandomAccessFile, P.FileSystemException, P._RandomAccessFileOps, P._RandomAccessFile, P.FileSystemEntityType, P.FileStat, P.FileSystemEvent, P._FileSystemWatcher, P._IOResourceInfo, P._IOService, P.IOSink, P._StreamSinkImpl0, P.Link, P._Namespace, P.IOOverrides, P.Platform0, P._Platform, P._ProcessUtils, P.ProcessInfo, P.ProcessStartMode, P.Process, P.ProcessResult, P.ProcessSignal, P.SignalException, P.ProcessException, P.SecureSocket, P.RawSecureSocket, P.X509Certificate, P._FilterStatus, P._ExternalBuffer, P._SecureFilter, P.TlsException, P.SecurityContext, P._ServiceObject0, P.InternetAddressType, P.InternetAddress, P.NetworkInterface, P.RawServerSocket, P.ServerSocket, P.SocketDirection, P.SocketOption, P._RawSocketOptions, P.RawSocketOption, P.RawSocketEvent, P.ConnectionTask, P.RawSocket, P.Socket, P.Datagram, P.SocketException, P._StdSink, P.StdoutException, P.StdinException, P._StdConsumer, P.StdioType, P._StdIOUtils, P.RawSynchronousSocket, P.Capability, P.IsolateSpawnException, P.Isolate, P.SendPort, P.ReceivePort, P.RawReceivePort, P.RemoteError, P.JsObject, P._JSRandom, P._Random, P._JSSecureRandom, P._JenkinsSmiHash0, P.Point, P.Random, P._RectangleBase, P.MirrorSystem, P.Mirror, P.IsolateMirror, P.DeclarationMirror, P.ObjectMirror, P.InstanceMirror, P.ClosureMirror, P.LibraryMirror, P.LibraryDependencyMirror, P.CombinatorMirror, P.TypeMirror, P.ClassMirror, P.FunctionTypeMirror, P.TypedefMirror, P.MethodMirror, P.VariableMirror, P.ParameterMirror, P.SourceLocation0, P.Comment0, P.MirrorsUsed, P._SvgElementFactoryProvider, P.ByteBuffer, P.TypedData, P.Endian, P.ByteData, P.Int8List, P.Uint8List, P.Uint8ClampedList, P.Int16List, P.Uint16List, P.Int32List, P.Uint32List, P.Int64List, P.Uint64List, P.Float32List, P.Float64List, P.Float32x4List, P.Int32x4List, P.Float64x2List, P.Float32x4, P.Int32x4, P.Float64x2, P.UnmodifiableByteBufferView, P.UnmodifiableByteDataView, P._UnmodifiableListMixin, Z.AnalysisErrorListener, F.AnalysisContext, R.ContextLocator, K.ContextRoot, D.DeclaredVariables, B.AnalysisResult, B.AnalysisResultWithErrors, B.ElementDeclarationResult, B.ErrorsResult, B.FileResult, B.ParsedLibraryResult, B.ParsedUnitResult, B.ParseResult, B.ResolvedLibraryResult, B.ResolvedUnitResult, B.ResolveResult, B.ResultState, B.UnitElementResult, L.AnalysisSession, E.AnalysisException, N.UriConverter, U.AdjacentStrings, U.AnnotatedNode, U.Annotation, U.ArgumentList, U.AsExpression, U.AssertInitializer, U.Assertion, U.AssertStatement, U.AssignmentExpression, U.AstNode, U.AstVisitor, U.AwaitExpression, U.BinaryExpression, U.Block, U.BlockFunctionBody, U.BooleanLiteral, U.BreakStatement, U.CascadeExpression, U.CatchClause, U.ClassDeclaration, U.ClassMember, U.ClassOrMixinDeclaration, U.ClassTypeAlias, U.CollectionElement, U.Combinator, U.Comment1, U.CommentReference, U.CompilationUnit, U.CompilationUnitMember, U.ConditionalExpression, U.Configuration, U.ConstructorDeclaration, U.ConstructorFieldInitializer, U.ConstructorInitializer, U.ConstructorName, U.ConstructorReferenceNode, U.ContinueStatement, U.Declaration, U.DeclaredIdentifier, U.DefaultFormalParameter, U.Directive, U.DoStatement, U.DottedName, U.DoubleLiteral, U.EmptyFunctionBody, U.EmptyStatement, U.EnumConstantDeclaration, U.EnumDeclaration, U.ExportDirective, U.Expression, U.ExpressionFunctionBody, U.ExpressionStatement, U.ExtendsClause, U.FieldDeclaration, U.FieldFormalParameter, U.ForEachParts, U.ForEachPartsWithDeclaration, U.ForEachPartsWithIdentifier, U.ForEachStatement, U.ForElement, U.ForLoopParts, U.FormalParameter, U.FormalParameterList, U.ForParts, U.ForPartsWithDeclarations, U.ForPartsWithExpression, U.ForStatement, U.ForStatement2, U.FunctionBody, U.FunctionDeclaration, U.FunctionDeclarationStatement, U.FunctionExpression, U.FunctionExpressionInvocation, U.FunctionTypeAlias, U.FunctionTypedFormalParameter, U.GenericFunctionType, U.GenericTypeAlias, U.HideCombinator, U.Identifier, U.IfElement, U.IfStatement, U.ImplementsClause, U.ImportDirective, U.IndexExpression, U.InstanceCreationExpression, U.IntegerLiteral, U.InterpolationElement, U.InterpolationExpression, U.InterpolationString, U.InvocationExpression, U.IsExpression, U.Label, U.LabeledStatement, U.LibraryDirective, U.LibraryIdentifier, U.ListLiteral, U.ListLiteral2, U.Literal, U.MapLiteral, U.MapLiteral2, U.MapLiteralEntry, U.MethodDeclaration, U.MethodInvocation, U.MethodReferenceExpression, U.MixinDeclaration, U.NamedCompilationUnitMember, U.NamedExpression, U.NamedType, U.NamespaceDirective, U.NativeClause, U.NativeFunctionBody, U.NodeList0, U.NormalFormalParameter, U.NullLiteral, U.OnClause, U.ParenthesizedExpression, U.PartDirective, U.PartOfDirective, U.PostfixExpression, U.PrefixedIdentifier, U.PrefixExpression, U.PropertyAccess, U.RedirectingConstructorInvocation, U.RethrowExpression, U.ReturnStatement, U.ScriptTag, U.SetLiteral, U.SetLiteral2, U.SetOrMapLiteral, U.ShowCombinator, U.SimpleFormalParameter, U.SimpleIdentifier, U.SimpleStringLiteral, U.SingleStringLiteral, U.SpreadElement, U.Statement, U.StringInterpolation, U.StringLiteral, U.SuperConstructorInvocation, U.SuperExpression, U.SwitchCase, U.SwitchDefault, U.SwitchMember, U.SwitchStatement, U.SymbolLiteral, U.ThisExpression, U.ThrowExpression, U.TopLevelVariableDeclaration, U.TryStatement, U.TypeAlias, U.TypeAnnotation, U.TypeArgumentList, U.TypedLiteral, U.TypeName, U.TypeParameter, U.TypeParameterList, U.UriBasedDirective, U.VariableDeclaration, U.VariableDeclarationList, U.VariableDeclarationStatement, U.WhileStatement, U.WithClause, U.YieldStatement, A.AstFactory, F.Precedence, Y.ResolutionMap, B._GeneralizingAstVisitor_Object_UIAsCodeVisitorMixin, B._UnifyingAstVisitor_Object_UIAsCodeVisitorMixin, B._RecursiveAstVisitor_Object_UIAsCodeVisitorMixin, B._SimpleAstVisitor_Object_UIAsCodeVisitorMixin, B._ThrowingAstVisitor_Object_UIAsCodeVisitorMixin, B._TimedAstVisitor_Object_UIAsCodeVisitorMixin, F.DartObject, G.ClassElement, G.ClassMemberElement, G.CompilationUnitElement, G.ConstructorElement, G.Element0, G.ElementAnnotation, G.ElementKind, G.ElementLocation, G.ElementVisitor, G.ExecutableElement, G.ExportElement, G.FieldElement, G.FieldFormalParameterElement, G.FunctionElement, G.FunctionTypeAliasElement, G.FunctionTypedElement, G.GenericFunctionTypeElement, G.GenericTypeAliasElement, G.HideElementCombinator, G.ImportElement, G.LabelElement0, G.LibraryElement, G.LocalElement, G.LocalVariableElement, G.MethodElement, G.MultiplyDefinedElement, G.MultiplyInheritedExecutableElement, G.NamespaceCombinator, G.ParameterElement, G.PrefixElement, G.PropertyAccessorElement, G.PropertyInducingElement, G.ShowElementCombinator, G.TopLevelVariableElement, G.TypeDefiningElement, G.TypeParameterElement, G.TypeParameterizedElement, G.UndefinedElement, G.UriReferencedElement, G.VariableElement, F.DartType, F.FunctionType, F.InterfaceType, F.ParameterizedType, F.TypeParameterType, N.TypeSystem, B.GeneralizingElementVisitor, B.RecursiveElementVisitor, B.SimpleElementVisitor, B.ThrowingElementVisitor, V.AnalysisError, Z.BooleanErrorListener, Z.ErrorReporter, Z.RecordingErrorListener, Z._NullErrorListener, Z._TypeToConvert, E.CaughtException, E.File1, E.FileSystemException0, E.Folder, E.Resource, E.ResourceProvider, X.MemoryResourceProvider, X._MemoryResource, T.PhysicalResourceProvider, T._PhysicalResource, M.AnalysisPerformanceKind, M.InstrumentationServer, M.InstrumentationService, M.MulticastInstrumentationServer, M.PluginData, M.ErrorConfig, M.ErrorProcessor, Z.LineInfo_Location, E.LineInfo, F.SourceRange, Q.AnalysisOptionsProvider, Q.OptionsFormatException, A.ErrorCode, B.CancelableCompleter, B.CancelableFuture, B.FutureCanceledError, B._CancelableCompleterFuture, B._WrappedFuture, R.ContextBuilder, R.ContextBuilderOptions, R.EmbedderYamlLocator, B.AnalysisCache, B.CacheEntry, B.CacheFlushManager, B.CachePartition, B.Delta, B.DeltaResult, B.InvalidatedResult, B.ReentrantSynchronousStream, B.ReentrantSynchronousStreamSubscription, B.ResultData, M.AnalysisContextImpl, M.PartitionManager, M.ResultProvider, K.ContextRoot0, Z.SourceFactoryImpl, K.ByteStore, K.MemoryByteStore, K.MemoryCachingByteStore, K.NullByteStore, B.Cache, R.ContextLocatorImpl, K.ContextRootImpl, A.DefinedNames, L.AnalysisDriver, L.AnalysisDriverGeneric, L.AnalysisDriverPriority, L.AnalysisDriverScheduler, L.AnalysisDriverTestView, B.AnalysisResultImpl, L.DriverPerformance, L.DriverWatcher, L.ExceptionResult, L.SchedulerWorker, L._DiscoverAvailableFilesTask, L._ExceptionState, L._FilesDefiningClassMemberNameTask, L._FilesReferencingNameTask, L._TopLevelNameDeclarationsTask, Z.DriverBasedAnalysisContext, K.EnableString, K.ExperimentStatus, K.IsEnabledByDefault, K.IsExpired, T.ConflictingFlagLists, T.ValidationResult, T.ExperimentalFeature, M.FileContentOverlay, M.FileState, M.FileStateTestView, M.FileSystemState, M.FileSystemStateTestView, M._ExportedDeclarations, M._FileContent, M._FileContentCache, D.FileTracker, E.IndexElementInfo, E._ElementInfo, E._ElementRelationInfo, E._IndexAssembler, E._NameRelationInfo, E._StringInfo, E._SubtypeInfo, G.LibraryAnalyzer, G.UnitAnalysisResult, G._NameOrSource, U.LibraryContext, D.LibraryCycle, D.Node0, D.DependencyWalker, R.PerformanceLog, R.PerformanceLogSection, K._LocalNameScope, K.RestrictedAnalysisContext, B.ElementDeclarationResultImpl, S.Declaration0, S.DeclarationKind, S.Search, S.SearchedFiles, S.SearchResult, S.SearchResultKind, S.SubtypeResult, S._IndexRequest, S._MaxNumberOfDeclarationsError, S._UnlinkedParameterComposer, L.AnalysisSessionImpl, E.AnalysisStatus, E.Monitor, E.StatusSupport, K.TopLevelDeclaration, K.TopLevelDeclarationInSource, K.TopLevelDeclarationKind, N.DriverBasedUriConverter, U.AstNodeImpl, U._ChildEntities_Object_IterableMixin, U.CommentType, U.ForMixin, U.IfMixin, U.LocalVariableInfo, U._NodeListImpl_Object_ListMixin, U.StringLexemeHelper, U.UriValidationCode, U._SetOrMapKind, Y.ResolutionMapImpl, A._AstCloner_Object_UIAsCodeVisitorMixin, A._AstComparator_Object_UIAsCodeVisitorMixin, A._IncrementalAstCloner_Object_UIAsCodeVisitorMixin, A._NodeReplacer_Object_UIAsCodeVisitorMixin, A._ResolutionCopier_Object_UIAsCodeVisitorMixin, A._ToSourceVisitor_Object_UIAsCodeVisitorMixin, A._ToSourceVisitor2_Object_UIAsCodeVisitorMixin, A.UIAsCodeVisitorMixin, V._ConstLiteralVerifier, S.ConstantEvaluationEngine, Z.AnalysisTarget, S.ConstantEvaluationValidator, S.ConstantEvaluationValidator_ForProduction, S.DartObjectComputer, S.EvaluationResult, S.EvaluationResultImpl, F.InstanceState, F.ConstructorInvocation, F.DartObjectImpl, F.EvaluationException, R.CompilationUnitBuilder, G.ElementImpl, G.AuxiliaryElements, G.ConstVariableElement, G.ElementAnnotationImpl, G.ElementLocationImpl, G.FunctionTypedElementImpl, G.HideElementCombinatorImpl, G.LibraryResolutionCapability, G.LibraryResynthesizerContext, G.Modifier, G.MultiplyDefinedElementImpl, G.ParameterElementMixin, G.ResynthesizerContext, G.ShowElementCombinatorImpl, G.SimplyBoundableMixin, G.TypeParameterizedElementMixin, G.TypeParameterSerializationContext, G.UnitExplicitTopLevelAccessors, G.UnitExplicitTopLevelVariables, K.ElementHandle, K.ElementResynthesizer, Z.Conflict, Z.InheritanceManager2, Z.Interface, Z.Name, O.Member, F.TypeImpl0, F.Nullability, F.VoidType, R.InheritanceManager, R.MemberMap, M.MethodInvocationResolver, S.Scope, S.ImplicitLabelScope, S.LabelScope, S.Namespace, S.NamespaceBuilder, S.PrefixedNamespace, D.CharacterReader, O.Scanner, S.SdkPatcher, E.AbstractDartSdk, E.SdkExtensionFinder, E.SdkLibrariesReader, V.AnalyzerError, V.AnalyzerErrorGroup, R.InheritanceOverrideVerifier, R._ClassVerifier, T.PendingError, T.PendingMissingRequiredParameterError, F.Listener, G._ConstructorNameWithInvalidTypeArgs, G._InvalidCollectionElement, G._Modifiers, G._OperatorName, G._OptionalFormalParameters, G._ParameterDefaultValue, G._RedirectingFactoryBody, N.FastaErrorReporter, O.ToAnalyzerTokenStreamConverter, Z.UriResolver, L.ConstantEvaluator0, A.ElementWalker, O.AnalysisContext0, O.AnalysisDelta, O.AnalysisEngine, O.AnalysisErrorInfo, O.AnalysisErrorInfoImpl, O.AnalysisLevel, O.AnalysisListener, O.AnalysisNotScheduledError, O.AnalysisOptions, O.AnalysisOptionsImpl, O.AnalysisResult1, O.CacheConsistencyValidationStatistics, O.CacheConsistencyValidator, O.CacheState, O.ChangeNotice, O.ChangeNoticeImpl, O.ChangeSet, O.ChangeSet_ContentChange, O.ComputedResult, O.ImplicitAnalysisEvent, O.InternalAnalysisContext, O.Logger, O.NullLogger, O.PerformanceStatistics, O.ResultChangedEvent, O.SourcesChangedEvent, R.HiddenElements, L.ResolutionContext, L.ResolutionContextBuilder, E.MappedInterner, F.Character, F.Enum, F.PrintWriter, Y.FileNameUtilities, Y.StringUtilities, Y.UUID, K.FileUtilities2, K.OSUtilities, E.JavaFile, E.JavaSystemIO, X.CommentAndMetadata, X.FinalConstVarOrType, X.Modifiers, X.Parser, X._TooDeepTreeError, X.ParserAdapter, L.BuildLibraryElementUtils, L.ElementHolder, L.ImportsVerifier, L.InferenceContext, L.INIT_STATE, L.RedirectingConstructorKind, L.ToDoFinder, L.TypeNameResolver, L.TypeParameterBoundsResolver, L.TypePromotionManager, L.TypePromotionManager_TypePromoteScope, L.TypeProvider, L.TypeProviderBase, L.TypeResolverMode, L.UsedImportedElements, L.UsedLocalElements, L._InvalidAccessVerifier, L._LabelTracker, L._LeafElements, L._LiteralResolution, L._LiteralResolutionKind, E.DartSdk, E.DartSdkManager, E.LibraryMap, E.SdkDescription, E.SdkLibrary, E.SdkLibraryImpl, Z.Source, Z.ContentCache, Z.LocalSourcePredicate, Z.LocalSourcePredicate_FALSE, Z.LocalSourcePredicate_NOT_SDK, Z.LocalSourcePredicate_TRUE, Z.Source_ContentReceiver, Z.SourceContainer, Z.SourceFactory, Z.SourceKind, Z.UriKind, X.LocalSourcePredicate0, X.LocalSourcePredicate_FALSE0, X.LocalSourcePredicate_NOT_SDK0, X.LocalSourcePredicate_TRUE0, S._InferredCollectionElementTypeInformation, N.AstTestFactory, B.ElementFactory, X.TokenFactory, B.TimestampedData, N.TypeSystem0, N.GenericInferrer, N.TypeComparison, N._TypeRange, N._TypeConstraintOrigin, L.BooleanArray, L.MapIterator, L.MultipleMapIterator, L.SingleMapIterator, L.TokenMap, Q.ParameterKind, K.JenkinsSmiHash, K.PerformanceTag, K._PerformanceTagImpl, G.SdkConstraintExtractor, Q.IgnoreInfo, B.DriverOptions, B.LintDriver, T.LintConfig, T.RuleConfig, T._LintConfig, F.CamelCaseString, F.DartLinter, F.LintFilter, F.Group, F.Hyperlink, F.LinterContext, F.LinterContextImpl, F.LinterContextUnit, F.LinterException, A.Linter, F.Maturity, F.NodeLintRule, F.PrintingReporter, F.Reporter, F.SourceLinter, F.NodeLintRegistry, F._Subscription, B.OptionsValidator, K.DartProject, K.ProjectVisitor, K._ApiModel, B.PSDependency, B._PSDependencyList_Object_IterableMixin, B.PSEntry, B.PSGitRepo, B.PSHost, B.PSNode, B._PSNodeList_Object_IterableMixin, B.Pubspec, B.PubspecVisitor, B._PSGitRepo, B._PSHost, B._PSNode, B._Pubspec, B._StringBuilder, E._Registry_Object_IterableMixin, M.Spelunker, M._ErrorListener, A.LintRegistry, D.ApiSignature, V.Id, V.SummaryClass, V.TopLevel, V.Variant, V.VariantId, Z.ExprBuilder, Q.Reader, Q.BufferContext, Q.Builder, Q.Offset, Q.__FbBoolList_Object_ListMixin, Q.__FbList_Object_ListMixin, Q._VTable, X._AnalysisDriverExceptionContextBuilder_Object__AnalysisDriverExceptionContextMixin, X.__AnalysisDriverExceptionContextImpl_Object__AnalysisDriverExceptionContextMixin, X._AnalysisDriverExceptionContextMixin, X._AnalysisDriverExceptionFileBuilder_Object__AnalysisDriverExceptionFileMixin, X.__AnalysisDriverExceptionFileImpl_Object__AnalysisDriverExceptionFileMixin, X._AnalysisDriverExceptionFileMixin, X._AnalysisDriverResolvedUnitBuilder_Object__AnalysisDriverResolvedUnitMixin, X.__AnalysisDriverResolvedUnitImpl_Object__AnalysisDriverResolvedUnitMixin, X._AnalysisDriverResolvedUnitMixin, X._AnalysisDriverSubtypeBuilder_Object__AnalysisDriverSubtypeMixin, X.__AnalysisDriverSubtypeImpl_Object__AnalysisDriverSubtypeMixin, X._AnalysisDriverSubtypeMixin, X._AnalysisDriverUnitErrorBuilder_Object__AnalysisDriverUnitErrorMixin, X.__AnalysisDriverUnitErrorImpl_Object__AnalysisDriverUnitErrorMixin, X._AnalysisDriverUnitErrorMixin, X._AnalysisDriverUnitIndexBuilder_Object__AnalysisDriverUnitIndexMixin, X.__AnalysisDriverUnitIndexImpl_Object__AnalysisDriverUnitIndexMixin, X._AnalysisDriverUnitIndexMixin, X._AnalysisDriverUnlinkedUnitBuilder_Object__AnalysisDriverUnlinkedUnitMixin, X.__AnalysisDriverUnlinkedUnitImpl_Object__AnalysisDriverUnlinkedUnitMixin, X._AnalysisDriverUnlinkedUnitMixin, X._AvailableDeclarationBuilder_Object__AvailableDeclarationMixin, X.__AvailableDeclarationImpl_Object__AvailableDeclarationMixin, X._AvailableDeclarationMixin, X._AvailableFileBuilder_Object__AvailableFileMixin, X.__AvailableFileImpl_Object__AvailableFileMixin, X._AvailableFileMixin, X._AvailableFileExportBuilder_Object__AvailableFileExportMixin, X.__AvailableFileExportImpl_Object__AvailableFileExportMixin, X._AvailableFileExportMixin, X._AvailableFileExportCombinatorBuilder_Object__AvailableFileExportCombinatorMixin, X.__AvailableFileExportCombinatorImpl_Object__AvailableFileExportCombinatorMixin, X._AvailableFileExportCombinatorMixin, X._CodeRangeBuilder_Object__CodeRangeMixin, X.__CodeRangeImpl_Object__CodeRangeMixin, X._CodeRangeMixin, X._EntityRefBuilder_Object__EntityRefMixin, X.__EntityRefImpl_Object__EntityRefMixin, X._EntityRefMixin, X._LinkedDependencyBuilder_Object__LinkedDependencyMixin, X.__LinkedDependencyImpl_Object__LinkedDependencyMixin, X._LinkedDependencyMixin, X._LinkedExportNameBuilder_Object__LinkedExportNameMixin, X.__LinkedExportNameImpl_Object__LinkedExportNameMixin, X._LinkedExportNameMixin, X._LinkedLibraryBuilder_Object__LinkedLibraryMixin, X.__LinkedLibraryImpl_Object__LinkedLibraryMixin, X._LinkedLibraryMixin, X._LinkedNodeBuilder_Object__LinkedNodeMixin, X.__LinkedNodeImpl_Object__LinkedNodeMixin, X._LinkedNodeMixin, X._LinkedNodeBundleBuilder_Object__LinkedNodeBundleMixin, X.__LinkedNodeBundleImpl_Object__LinkedNodeBundleMixin, X._LinkedNodeBundleMixin, X._LinkedNodeLibraryBuilder_Object__LinkedNodeLibraryMixin, X.__LinkedNodeLibraryImpl_Object__LinkedNodeLibraryMixin, X._LinkedNodeLibraryMixin, X._LinkedNodeReferencesBuilder_Object__LinkedNodeReferencesMixin, X.__LinkedNodeReferencesImpl_Object__LinkedNodeReferencesMixin, X._LinkedNodeReferencesMixin, X._LinkedNodeTypeBuilder_Object__LinkedNodeTypeMixin, X.__LinkedNodeTypeImpl_Object__LinkedNodeTypeMixin, X._LinkedNodeTypeMixin, X._LinkedNodeUnitBuilder_Object__LinkedNodeUnitMixin, X.__LinkedNodeUnitImpl_Object__LinkedNodeUnitMixin, X._LinkedNodeUnitMixin, X._LinkedNodeVariablesDeclarationBuilder_Object__LinkedNodeVariablesDeclarationMixin, X.__LinkedNodeVariablesDeclarationImpl_Object__LinkedNodeVariablesDeclarationMixin, X._LinkedNodeVariablesDeclarationMixin, X._LinkedReferenceBuilder_Object__LinkedReferenceMixin, X.__LinkedReferenceImpl_Object__LinkedReferenceMixin, X._LinkedReferenceMixin, X._LinkedUnitBuilder_Object__LinkedUnitMixin, X.__LinkedUnitImpl_Object__LinkedUnitMixin, X._LinkedUnitMixin, X._PackageBundleBuilder_Object__PackageBundleMixin, X.__PackageBundleImpl_Object__PackageBundleMixin, X._PackageBundleMixin, X._PackageIndexBuilder_Object__PackageIndexMixin, X.__PackageIndexImpl_Object__PackageIndexMixin, X._PackageIndexMixin, X._TopLevelInferenceErrorBuilder_Object__TopLevelInferenceErrorMixin, X.__TopLevelInferenceErrorImpl_Object__TopLevelInferenceErrorMixin, X._TopLevelInferenceErrorMixin, X._UnitIndexBuilder_Object__UnitIndexMixin, X.__UnitIndexImpl_Object__UnitIndexMixin, X._UnitIndexMixin, X._UnlinkedClassBuilder_Object__UnlinkedClassMixin, X.__UnlinkedClassImpl_Object__UnlinkedClassMixin, X._UnlinkedClassMixin, X._UnlinkedCombinatorBuilder_Object__UnlinkedCombinatorMixin, X.__UnlinkedCombinatorImpl_Object__UnlinkedCombinatorMixin, X._UnlinkedCombinatorMixin, X._UnlinkedConfigurationBuilder_Object__UnlinkedConfigurationMixin, X.__UnlinkedConfigurationImpl_Object__UnlinkedConfigurationMixin, X._UnlinkedConfigurationMixin, X._UnlinkedConstructorInitializerBuilder_Object__UnlinkedConstructorInitializerMixin, X.__UnlinkedConstructorInitializerImpl_Object__UnlinkedConstructorInitializerMixin, X._UnlinkedConstructorInitializerMixin, X._UnlinkedDocumentationCommentBuilder_Object__UnlinkedDocumentationCommentMixin, X.__UnlinkedDocumentationCommentImpl_Object__UnlinkedDocumentationCommentMixin, X._UnlinkedDocumentationCommentMixin, X._UnlinkedEnumBuilder_Object__UnlinkedEnumMixin, X.__UnlinkedEnumImpl_Object__UnlinkedEnumMixin, X._UnlinkedEnumMixin, X._UnlinkedEnumValueBuilder_Object__UnlinkedEnumValueMixin, X.__UnlinkedEnumValueImpl_Object__UnlinkedEnumValueMixin, X._UnlinkedEnumValueMixin, X._UnlinkedExecutableBuilder_Object__UnlinkedExecutableMixin, X.__UnlinkedExecutableImpl_Object__UnlinkedExecutableMixin, X._UnlinkedExecutableMixin, X._UnlinkedExportNonPublicBuilder_Object__UnlinkedExportNonPublicMixin, X.__UnlinkedExportNonPublicImpl_Object__UnlinkedExportNonPublicMixin, X._UnlinkedExportNonPublicMixin, X._UnlinkedExportPublicBuilder_Object__UnlinkedExportPublicMixin, X.__UnlinkedExportPublicImpl_Object__UnlinkedExportPublicMixin, X._UnlinkedExportPublicMixin, X._UnlinkedExprBuilder_Object__UnlinkedExprMixin, X.__UnlinkedExprImpl_Object__UnlinkedExprMixin, X._UnlinkedExprMixin, X._UnlinkedImportBuilder_Object__UnlinkedImportMixin, X.__UnlinkedImportImpl_Object__UnlinkedImportMixin, X._UnlinkedImportMixin, X._UnlinkedParamBuilder_Object__UnlinkedParamMixin, X.__UnlinkedParamImpl_Object__UnlinkedParamMixin, X._UnlinkedParamMixin, X._UnlinkedPartBuilder_Object__UnlinkedPartMixin, X.__UnlinkedPartImpl_Object__UnlinkedPartMixin, X._UnlinkedPartMixin, X._UnlinkedPublicNameBuilder_Object__UnlinkedPublicNameMixin, X.__UnlinkedPublicNameImpl_Object__UnlinkedPublicNameMixin, X._UnlinkedPublicNameMixin, X._UnlinkedPublicNamespaceBuilder_Object__UnlinkedPublicNamespaceMixin, X.__UnlinkedPublicNamespaceImpl_Object__UnlinkedPublicNamespaceMixin, X._UnlinkedPublicNamespaceMixin, X._UnlinkedReferenceBuilder_Object__UnlinkedReferenceMixin, X.__UnlinkedReferenceImpl_Object__UnlinkedReferenceMixin, X._UnlinkedReferenceMixin, X._UnlinkedTokensBuilder_Object__UnlinkedTokensMixin, X.__UnlinkedTokensImpl_Object__UnlinkedTokensMixin, X._UnlinkedTokensMixin, X._UnlinkedTypedefBuilder_Object__UnlinkedTypedefMixin, X.__UnlinkedTypedefImpl_Object__UnlinkedTypedefMixin, X._UnlinkedTypedefMixin, X._UnlinkedTypeParamBuilder_Object__UnlinkedTypeParamMixin, X.__UnlinkedTypeParamImpl_Object__UnlinkedTypeParamMixin, X._UnlinkedTypeParamMixin, X._UnlinkedUnitBuilder_Object__UnlinkedUnitMixin, X.__UnlinkedUnitImpl_Object__UnlinkedUnitMixin, X._UnlinkedUnitMixin, X._UnlinkedVariableBuilder_Object__UnlinkedVariableMixin, X.__UnlinkedVariableImpl_Object__UnlinkedVariableMixin, X._UnlinkedVariableMixin, B.AvailableDeclarationKind, B.EntityRefKind, B.IndexNameKind, B.IndexRelationKind, B.IndexSyntheticElementKind, B.LinkedNodeCommentType, B.LinkedNodeFormalParameterKind, B.LinkedNodeKind, B.LinkedNodeTypeKind, B.ReferenceKind, B.TopLevelInferenceErrorKind, B.TypedefStyle, B.UnlinkedConstructorInitializerKind, B.UnlinkedExecutableKind, B.UnlinkedExprAssignOperator, B.UnlinkedExprOperation, B.UnlinkedParamKind, B.UnlinkedTokenKind, B.UnlinkedTokenType, D.AnalysisSessionForLink, D._ClassElementForLink_Object_ReferenceableElementForLink, D.CompilationUnitElementForLink, D._ExecutableElementForLink_Object_TypeParameterizedElementMixin, D.ContextForLink, D.ExprTypeComputer, D.FieldElementForLink, D.VariableElementForLink, D.ParameterElementForLink, D._FunctionElementForLink_FunctionTypedParam_Object_ParameterParentElementForLink, D._FunctionElementForLink_Initializer_Object_ReferenceableElementForLink, D.FunctionElementForLink_Local, D._FunctionTypeAliasElementForLink_Object_TypeParameterizedElementMixin, D._GenericFunctionTypeElementForLink_Object_TypeParameterizedElementMixin, D._GenericTypeAliasElementForLink_Object_TypeParameterizedElementMixin, D.InlineFunctionTypeParameterContext, D.LibraryCycleForLink, N.LibraryResynthesizerContextMixin, D.Linker, D._NonstaticMemberElementForLink_Object_ReferenceableElementForLink, D.ParameterElementForLink_VariableSetter, D.ParameterParentElementForLink, D.PropertyAccessorElementForLink, D._PropertyAccessorElementForLink_EnumField_Object_ReferenceableElementForLink, D._PropertyAccessorElementForLink_Variable_Object_ReferenceableElementForLink, D.ReferenceableElementForLink, D.SimplyBoundableForLinkMixin, D._SpecialTypeElementForLink_Object_ReferenceableElementForLink, D.SyntheticVariableElementForLink, D._UndefinedElementForLink_Object_ReferenceableElementForLink, N.LibraryResynthesizerMixin, N.ReferenceInfo, N.UnitResynthesizer, N.NameFilter, E.ConflictingSummaryException, E.SummaryDataStore, M._Meaning, M._ExportNamespace, M._Namespace0, M._Prelinker, N.LibraryResynthesizer, N.RecursiveInstantiateToBounds, N.SummaryResynthesizerContext, N.UnitResynthesizerMixin, F.AbstractConstExprSerializer, U._Scope, U._ScopedEntity, E.SummaryBasedDartSdk, R.AstBinaryReader, M.LinkedBundleContext, G.LinkedElementFactory, G._ElementRequest, G._Library, F.LinkedUnitContext, F.Reference, Y.TokensContext, O.TokensResult, O.TokensWriter, O.LibrarySpecificUnit, Z.AnalysisContextTarget, Z.AnalysisTask, Z.ListResultDescriptor, Z.ListTaskInput, Z.MapTaskInput, Z.ModificationTimeMismatchError, Z.ResultCachingPolicy, Z.ResultDescriptor, Z.TargetedResult, Z.TaskDescriptor, Z.TaskInput, Z.TaskInputBuilder, Z.TaskSuitability, Z.WorkManager, Z.WorkOrderPriority, V.TaskInputImpl, O._NameOrSource0, O._SourceClosureKind, O._SourceClosureTaskInputBuilder, G.DartWorkManager, L.AnalysisDriver0, L.CycleAwareDependencyWalker, L.ExtendedAnalysisContext, L.StronglyConnectedComponent, L.WorkItem, L.WorkOrder, V.ConstantTaskInputBuilder, V.ListTaskInputMixin, V._ListToCollectionTaskInputBuilder, V.MapTaskInputMixin, V.MapToFlattenListTaskInputBuilder, V.ObjectToListTaskInputBuilder, V.SimpleTaskInputBuilder, V.TopLevelTaskInputBuilder, Q.TaskManager, Z.ResultDescriptorImpl, Z.SimpleResultCachingPolicy, Z.TaskDescriptorImpl, B.AnalyzerOptions, B.ErrorBuilder, B.OptionsFileValidator, B._OptionsProcessor, B._OverrideChecker, Q.InstanceMemberInferrer, Q._CycleException, Q._FieldOverrideInferenceResult, B.Merger, Y.Workspace, Y.WorkspacePackage, B.ArchiveFile, A.Bz2BitReader, M.Bz2BitWriter, U.BZip2, L.BZip2Decoder, D.BZip2Encoder, M.GZipDecoder, D.GZipEncoder, V.TarFile, Q.TarDecoder, S.TarEncoder, R.ArchiveException, T.InputStreamBase, T.MemPtr, Q.OutputStreamBase, E.ZipDirectory, Q.ZipFile, X.ZipFileHeader, Q.ZipDecoder, K._ZipFileData, K._ZipEncoderData, K.ZipEncoder, Z.ZLibDecoderBase, T.Deflate, T._DeflaterConfig, T._HuffmanTree, T._StaticTree, Y.HuffmanTable, S.Inflate, Z.ZLibDecoder0, X.ZLibEncoder0, Y.AllowAnythingParser, N.ArgParser, V.ArgResults, G.Option, G.OptionType, G.Parser0, G.Usage, S.AsyncCache, S.AsyncMemoizer, E.CancelableOperation, E.CancelableCompleter0, V.DelegatingEventSink, R.DelegatingFuture, O.DelegatingSink, G.DelegatingStreamConsumer, O.DelegatingStreamSink, Y.DelegatingStreamSubscription, F.FutureGroup, S.NullStreamSink, L.RestartableTimer, U.CaptureSink, V.ErrorResult, A.ReleaseSink, E.Result, F.ValueResult, Y.StreamCompleter, L.StreamGroup, L._StreamGroupState, G.StreamQueue, G.StreamQueueTransaction, G._EventRequest, G._NextRequest, G._PeekRequest, G._SkipRequest, G._ListRequest, G._CancelRequest, G._RestRequest, G._HasNextRequest, G._TransactionRequest, T.StreamSinkCompleter, T._CompleterSink, F.StreamSinkTransformer, X.HandlerTransformer, X._HandlerSink, Q.StreamTransformerWrapper, Q._StreamTransformerWrapperSink, M.TypeSafeStreamSinkTransformer, N.StreamSplitter, D._TransformedSubscription, Y.TypeSafeStreamSubscription, G.AsyncMessageGrouper, L.BazelWorkerDriver, L._WorkAttempt, N.DriverConnection, N.StdDriverConnection, N.IsolateDriverConnection, M.MessageGrouper, Y.MessageGrouperState, Y._LengthReader, Y._MessageReader, X.SyncMessageGrouper, N.AsyncWorkerLoop, M.SyncWorkerLoop, S.WorkerConnection, S.AsyncWorkerConnection, S.SyncWorkerConnection, S.StdAsyncWorkerConnection, S.SendPortAsyncWorkerConnection, S.StdSyncWorkerConnection, O.WorkerLoop, M.GeneratedMessage, L.Resolver, L.ReleasableResolver, L.Resolvers, L.NonLibraryAssetException, T.AssetNotFoundException, T.PackageNotFoundException, T.InvalidOutputException, T.InvalidInputException, T.BuildStepCompletedException, T.UnresolvableAssetException, N.AssetId, D.AssetReader, X.AssetWriter, X.AssetWriterSpy, M.BuildStep, M.StageTracker, M.NoOpStageTracker, V.BuildStepImpl, V._DelayedResolver, R.Builder0, R.BuilderOptions, T.UnexpectedOutputException, F.FileDeletingBuilder, B.MultiplexingBuilder, F.PostProcessBuildStep, G.PostProcessBuilder, Y.Resource0, Y.ResourceManager, R.ModuleStrategy, A._WorkerException, A.MissingModulesException, L.KernelBuilder, L._ModuleNode, Z.MetaModule, F.MetaModuleBuilder, N.MetaModuleCleanBuilder, Z._CleanMetaModuleCache, Z.ModuleBuilder, K.ModuleLibrary, S.ModuleLibraryBuilder, U.Module, U._AssetIdConverter, U._DartPlatformConverter, T.DartPlatform, R.UnlinkedSummaryBuilder, R.LinkedSummaryBuilder, M.Dart2JsBatchWorkerPool, M._Dart2JsWorker, M._Dart2JsJob, M.Dart2JsResult, B.Dart2JsArchiveExtractor, Q.DevCompilerBuilder, A._WorkerException0, B.WebCompiler, B.WebEntrypointBuilder, M.CanonicalizedMap, S._CombinedIterator, U.Equality, U.EqualityBy, U.DefaultEquality, U.IdentityEquality, U.IterableEquality, U.ListEquality, U._UnorderedEquality, U._MapEntry, U.MapEquality, U.MultiEquality, U.DeepCollectionEquality, U.CaseInsensitiveEquality, M.DelegatingMap, M._DelegatingIterableBase, A._IteratorZip, Y.PriorityQueue, Y.HeapPriorityQueue, Q._QueueList_Object_ListMixin, Y.UnionSetController, L.NonGrowableListMixin, L.UnmodifiableSetMixin, L.UnmodifiableMapMixin, B.Pair, Y.AccumulatorSink, B.Digest, G.HashSink, V.Int32, V.Int64, V.IntX, G.CompilerOptions, U.DiagnosticMessage, S.ExperimentalFlag, R.FileSystem0, R.FileSystemEntity0, R.FileSystemException1, E.StandardFileSystem, E._IoFileSystemEntity, E.DataFileSystemEntity, A.ErrorSeverity, A.ErrorType, X.LibrariesSpecification, X.TargetLibrariesSpecification, X.LibraryInfo, X.LibrariesSpecificationException, Z.ProcessedOptions, Z.HermeticFileSystem, T.SyntacticEntity, G.CompilerContext, E.Crash, B.Code, B.Message, B.Template, B.LocatedMessage, B.FormattedMessage, B.DiagnosticMessageFromJson, D.TypeLabeler, D.LabeledClassName, M.Assert, V.AsyncModifier, A.Parser1, A.DirectiveContext, A.DirectiveState, N.FormalParameterKind, Y.ForwardingListener, D.IdentifierContext, N.LiteralEntryInfo, E.LoopState, S.MemberKind, X.ModifierRecoveryContext, K.ParserError, R.TokenStreamRewriter, R.TokenStreamGhostWriter, R.TypeInfo, R.TypeParamOrArgInfo, O.NoType, O.PrefixedType, O.SimpleTypeWith1Argument, O.SimpleType, O.VoidType0, O.ComplexTypeInfo, X.DebugAbort, Y.Quote, Y.UnescapeErrorListener, G.Scanner0, G.ScannerResult, U.AbstractScanner, U._LineStarts_Object_ListMixin, L.SimpleToken, U.KeywordState, U.ArrayKeywordState, U.LeafKeywordState, D.Node1, D.StringCanonicalizer, D._LazySubstring, Y.Severity, R.NullValue, R.Stack, R.FixedNullableList, R.GrowableList, R.ParserRecovery, G.Ticker, F.UriTranslator, N.Link0, N.LinkBuilder, S.LinkIterator, S.LinkBuilderImplementation, E.Interner, E.NullInterner, D.CharSequenceReader, D.StringUtilities0, L.TokenType, L.Token, L.TokenClass, D.Glob, U.AstNode0, Y.ListTree, Y._ListTreeNode, G.Parser2, B.Range0, B.GlobMatch, B._CrawlAsync, Q.JS, Q._Anonymous, G.BadKeyException, D.CheckedFromJsonException, R.JsonConverter, K.JsonKey, E.JsonLiteral, K.FieldRename, K.JsonSerializable, Y.JsonValue, T.Node2, T.Reference0, T.ClassLevel, T.ProcedureKind, T.AsyncMarker, T.Name0, T.ConstantMapEntry, T.Location0, T.MetadataRepository, T.BinarySink, T.BinarySource, U.TreeVisitor, T.Source0, R.ParseError, R.InvalidKernelVersionError, R.CanonicalNameError, R._ComponentIndex, R.BinaryBuilder, R._MetadataSubsection, G.BinaryPrinter, G.VariableIndexer, G.LabelIndexer, G.SwitchCaseIndexer, G.TypeParameterIndexer, G.StringIndexer, G.UriIndexer, G.BufferedSink, G._MetadataSubsection0, G.BytesSink, G.NotQuiteString, S.Tag, S.ConstantTag, T.CanonicalName, T.MixinInferrer, T.ClassHierarchy, T.ClassHierarchySubtypes, T._ClassInfoSubtype, T._ClosedWorldClassHierarchySubtypes, T.ClosedWorldClassHierarchy, T._IntervalListBuilder, T._ClassInfo, F.Heap, R.CloneVisitor, D.CoqLib, Q.CoreTypes, Y.ImportTable, Y.ComponentImportTable, Y.LibraryImportTable, Y.LibraryIndex, Y._ClassTable, Y._MemberTable, V.SubtypeTester, R.TargetFlags, R.DiagnosticReporter, R.Target, U.Namer, U.Disambiguator, U.NameSystem, U.Annotator, U.ExpressionVisitor, U.ExpressionPrinter, V.InstanceBuilder, V.EvaluationEnvironment, V.NumberSemantics, V.ConstantsBackend, V._AbortCurrentEvaluation, V.ErrorReporter0, U.DartTypeVisitor, K.TransformerFlag, M.FreshTypeParameters, M.Substitution, M._TypeUnification, U.StatementVisitor, U.MemberVisitor, U.InitializerVisitor, U.DartTypeVisitor1, U.ConstantVisitor0, U.MemberReferenceVisitor, U.ExpressionVisitor1, U.StatementVisitor1, N.Logger0, N.Level, N.LogRecord, Q.Immutable, Q.Required, Q._AlwaysThrows, Q._Checked, Q._Experimental, Q._Factory, Q._IsTest, Q._IsTestGroup, Q._Literal, Q._MustCallSuper, Q._OptionalTypeArgs, Q._Protected, Q._Sealed, Q._Virtual, Q._VisibleForOverriding, Q._VisibleForTesting, M.Packages, Z.NoPackages, Z.PackagesBase, M.Context, M._PathDirection, M._PathRelation, O.Style, X.ParsedPath, X.PathException, O.Pool, O.PoolResource, M.BuilderInfo, M.CodedBufferReader, M.CodedBufferWriter, M.EventPlugin, M.InvalidProtocolBufferException, M.FieldInfo, M._ExtensionFieldSet, M.ExtensionRegistry, M._EmptyExtensionRegistry, M._FieldSet, M.PbFieldType, M.PackageName, M.ServerContext, M.GeneratedService, M.ProtobufEnum, M.ReadonlyMessageMixin, M.ClientContext, M.RpcClient, M.UnknownFieldSet, M.UnknownFieldSetField, T.Version, U.VersionConstraint, U._EmptyVersion, X.VersionRange, E.VersionUnion, U.ScratchSpace, L.SourceMapBuilder, L.Entry0, T.Mapping, T.TargetLineEntry, T.TargetEntry, T._MappingTokenizer, T._TokenKind, A.Printer0, A.NestedPrinter, A.NestedItem, D.TextEditTransaction, D._TextEdit, Y.SourceSpanMixin, G.SourceMapFileSpan, Y.SourceFile, D.SourceLocationMixin, Y.FileSpan, U.Highlighter, V.SourceLocation, V.SourceSpan, G.SourceSpanException, U.Chain, A.Frame, X.LazyChain, T.LazyTrace, O.StackZoneSpecification, O._Node, Y.Trace, N.UnparsedFrame, Q.VMTrace, X.StringScanner0, D._EagerSpanScannerState, Z.LineScannerState, R._SpanScannerState, S._SpanScannerState0, A.AsciiGlyphSet, E.GlyphSet, K.UnicodeGlyphSet, R.AsyncQueue, V._ConstructableFileSystemEvent, B.DirectoryWatcher, O.ResubscribableWatcher, E._LinuxDirectoryWatcher, R._MacOSDirectoryWatcher, D._PollingDirectoryWatcher, L._EventBatcher, L._WindowsDirectoryWatcher, F.FileWatcher, R._NativeFileWatcher, D._PollingFileWatcher, B.PathSet0, B._Entry, O.ManuallyClosedWatcher, E.WatchEvent, E.ChangeType, G.Watcher, U._DeepEquals, X.Event1, X.DocumentStartEvent, X.DocumentEndEvent, X.AliasEvent, X._ValueEvent, X.EventType, A.Loader, G.Parser3, G._State0, O.Scanner1, O._SimpleKey, O._Chomping, O.ScalarStyle, O.CollectionStyle, L.Token0, L.VersionDirectiveToken, L.TagDirectiveToken, L.AnchorToken, L.AliasToken, L.TagToken, L.ScalarToken, L.TokenType0, B.Pair0, L.YamlDocument, L.VersionDirective, L.TagDirective, Z.YamlNode]);
    _inheritMany(H.ChromeObject, [H.Rule, H.AppWindowBounds, H.AppWindowCreateWindowOptions, H.AppWindowAppWindow, H.AppRuntimeLaunchItem, H.AppRuntimeLaunchData, H.FilesystemAcceptOption, H.FilesystemChooseEntryOptions]);
    _inheritMany(H.Event, [H.Event_app_window_onBoundsChanged, H.Event_app_window_onClosed, H.Event_app_window_onFullscreened, H.Event_app_window_onMaximized, H.Event_app_window_onMinimized, H.Event_app_window_onRestored, H.Event_app_runtime_onLaunched, H.Event_app_runtime_onRestarted]);
    _inheritMany(H._HashBase, [H._MD5, H._SHA1]);
    _inheritMany(H.HttpClientCredentials, [H.HttpClientBasicCredentials, H.HttpClientDigestCredentials]);
    _inherit(H._ContentType, H._HeaderValue);
    _inheritMany(P.Stream, [H._HttpIncoming, H._HttpInboundMessage, H.__HttpServer_Stream__ServiceObject, H._DetachedSocket, H._HttpDetachedIncoming, H._HttpParser, H.__WebSocketImpl_Stream__ServiceObject, H.CastStream, P._StreamImpl, P.StreamView, P._AsBroadcastStream, P._EmptyStream, P._ForwardingStream, P._BoundSinkStream, P._BoundSubscriptionStream, W._EventStream, W._ElementListEventStreamImpl, W._CustomEventStreamImpl, P._FileStream, P.SecureServerSocket, P.RawSecureServerSocket, P._RawSecureSocket, P.RawDatagramSocket, P._StdStream, P._ReceivePortImpl, V.LazyStream, Y._CompleterStream, L.StreamZip, T.SubscriptionStream]);
    _inheritMany(H._HttpInboundMessage, [H._HttpRequest, H._HttpClientResponse]);
    _inherit(H._IOSinkImpl, H._StreamSinkImpl);
    _inherit(H._HttpOutboundMessage, H._IOSinkImpl);
    _inheritMany(H._HttpOutboundMessage, [H._HttpResponse, H._HttpClientRequest]);
    _inheritMany(P.ChunkedConversionSink, [P.ByteConversionSink, P._SimpleCallbackSink, P._JsonEncoderSink, P._JsonUtf8EncoderSink, P.StringConversionSink]);
    _inheritMany(P.ByteConversionSink, [H._HttpGZipSink, P.ByteConversionSinkBase, P._Utf8StringSinkAdapter, P._Utf8ConversionSink, P._BufferSink, P._FilterSink, D._HmacSink]);
    _inherit(H.__HttpConnection_LinkedListEntry__ServiceObject, P.LinkedListEntry);
    _inherit(H._HttpConnection, H.__HttpConnection_LinkedListEntry__ServiceObject);
    _inherit(H._HttpServer, H.__HttpServer_Stream__ServiceObject);
    _inheritMany(H._Credentials, [H._SiteCredentials, H._ProxyCredentials]);
    _inheritMany(H._HttpClientCredentials, [H._HttpClientBasicCredentials, H._HttpClientDigestCredentials]);
    _inherit(H._HttpOverridesScope, H.HttpOverrides);
    _inheritMany(P.StreamTransformerBase, [H._WebSocketProtocolTransformer, H._WebSocketTransformerImpl, H._WebSocketOutgoingTransformer, H.CastStreamTransformer, P.Converter, P._StreamSinkTransformer, P._StreamBindTransformer, P._StreamSubscriptionTransformer, P.LineSplitter, Z.CaptureStreamTransformer, D.ReleaseStreamTransformer, B.SingleSubscriptionTransformer, M._TypeSafeStreamTransformer, B.BatchedStreamTransformer]);
    _inherit(H._WebSocketImpl, H.__WebSocketImpl_Stream__ServiceObject);
    _inheritMany(J.Interceptor, [J.JSBool, J.JSNull, J.JavaScriptObject, J.JSArray, J.JSNumber, J.JSString, H.NativeByteBuffer, H.NativeTypedData, W.EventTarget, W.Event0, W.AbstractWorker, W.AccessibleNodeList, W.AnimationEffectReadOnly, W.AnimationEffectTimingReadOnly, W.AnimationTimeline, W.WorkletGlobalScope, W.AuthenticatorResponse, W.BackgroundFetchFetch, W.BackgroundFetchManager, W.BarProp, W.BarcodeDetector, W.Blob, W.BluetoothRemoteGattDescriptor, W.Body, W.BudgetState, W.CacheStorage, W.CanvasGradient, W.CanvasPattern, W.CanvasRenderingContext2D, W.ChildNode, W.Client, W.Clients, W.CookieStore, W.Coordinates, W.Credential, W.CredentialUserData, W.CredentialsContainer, W.Crypto, W.CryptoKey, W.Css, W.CssRule, W.CssStyleValue, W.CssTransformComponent, W._CssStyleDeclaration_Interceptor_CssStyleDeclarationBase, W.StyleSheet, W.CssVariableReferenceValue, W.CustomElementRegistry, W.DataTransfer, W.DataTransferItem, W.DataTransferItemList, W.DeprecatedStorageInfo, W.DeprecatedStorageQuota, W.ReportBody, W.DetectedBarcode, W.DetectedFace, W.DetectedText, W.DeviceAcceleration, W.DeviceRotationRate, W.Entry, W.DirectoryReader, W.DocumentOrShadowRoot, W.DomError, W.DomException, W.DomImplementation, W.DomIterator, W.DomMatrixReadOnly, W.DomParser, W.DomPointReadOnly, W.DomQuad, W._DomRectList_Interceptor_ListMixin, W.DomRectReadOnly, W._DomStringList_Interceptor_ListMixin, W.DomStringMap, W.DomTokenList, W.External, W.FaceDetector, W._FileList_Interceptor_ListMixin, W.FileSystem, W.FontFace, W.FontFaceSource, W.FormData, W.Gamepad, W.GamepadButton, W.GamepadPose, W.Geolocation, W.Geoposition, W.Headers, W.History, W._HtmlCollection_Interceptor_ListMixin, W.HtmlHyperlinkElementUtils, W.IdleDeadline, W.ImageBitmap, W.ImageBitmapRenderingContext, W.ImageCapture, W.ImageData, W.InputDeviceCapabilities, W.IntersectionObserver, W.IntersectionObserverEntry, W.Location, W.MediaCapabilities, W.MediaCapabilitiesInfo, W.MediaDeviceInfo, W.MediaError, W.MediaKeyStatusMap, W.MediaKeySystemAccess, W.MediaKeys, W.MediaKeysPolicy, W.MediaList, W.MediaMetadata, W.MediaSession, W.MediaSettingsRange, W.MemoryInfo, W.MessageChannel, W.Metadata, W._MidiInputMap_Interceptor_MapMixin, W._MidiOutputMap_Interceptor_MapMixin, W.MimeType, W._MimeTypeArray_Interceptor_ListMixin, W.MutationObserver, W.MutationRecord, W.NavigationPreloadManager, W.NavigatorConcurrentHardware, W.NavigatorAutomationInformation, W.NavigatorCookies, W.NavigatorID, W.NavigatorLanguage, W.NavigatorOnLine, W.NavigatorUserMediaError, W.NodeFilter, W.NodeIterator, W._NodeList_Interceptor_ListMixin, W.NonDocumentTypeChildNode, W.NonElementParentNode, W.NoncedElement, W.OffscreenCanvasRenderingContext2D, W.OverconstrainedError, W.PaintRenderingContext2D, W.PaintSize, W.ParentNode, W.Path2D, W.PaymentAddress, W.PaymentInstruments, W.PaymentManager, W.PaymentResponse, W.PerformanceEntry, W.PerformanceNavigation, W.PerformanceObserver, W.PerformanceObserverEntryList, W.PerformanceServerTiming, W.PerformanceTiming, W.Permissions, W.PhotoCapabilities, W.Plugin, W._PluginArray_Interceptor_ListMixin, W.PositionError, W.Presentation, W.PresentationReceiver, W.PushManager, W.PushMessageData, W.PushSubscription, W.PushSubscriptionOptions, W.Range, W.RelatedApplication, W.ReportingObserver, W.ResizeObserver, W.ResizeObserverEntry, W.RtcCertificate, W.RtcIceCandidate, W.RtcLegacyStatsReport, W.RtcRtpContributingSource, W.RtcRtpReceiver, W.RtcRtpSender, W.RtcSessionDescription, W._RtcStatsReport_Interceptor_MapMixin, W.RtcStatsResponse, W.Screen, W.ScrollState, W.Selection, W.SharedArrayBuffer, W.SpeechGrammar, W._SpeechGrammarList_Interceptor_ListMixin, W.SpeechRecognitionAlternative, W.SpeechRecognitionResult, W.SpeechSynthesisVoice, W.StaticRange, W._Storage_Interceptor_MapMixin, W.StorageManager, W.StyleMedia, W.StylePropertyMapReadonly, W.SyncManager, W.TextDetector, W.TextMetrics, W._TextTrackCueList_Interceptor_ListMixin, W.TimeRanges, W.Touch, W._TouchList_Interceptor_ListMixin, W.TrackDefault, W.TrackDefaultList, W.TreeWalker, W.TrustedHtml, W.TrustedScriptUrl, W.TrustedUrl, W.UnderlyingSourceBase, W.Url, W.UrlSearchParams, W.UrlUtilsReadOnly, W.VRCoordinateSystem, W.VRDisplayCapabilities, W.VREyeParameters, W.VRFrameData, W.VRPose, W.VRStageBounds, W.VRStageBoundsPoint, W.VRStageParameters, W.ValidityState, W.VideoPlaybackQuality, W.VideoTrack, W.VttRegion, W.WindowBase64, W.WorkletAnimation, W.XPathEvaluator, W.XPathExpression, W.XPathNSResolver, W.XPathResult, W.XmlSerializer, W.XsltProcessor, W._Bluetooth, W._BluetoothCharacteristicProperties, W._BluetoothRemoteGATTServer, W._BluetoothRemoteGATTService, W._BluetoothUUID, W._BudgetService, W._Cache, W._CanvasPath, W.__CssRuleList_Interceptor_ListMixin, W._DOMFileSystemSync, W._EntrySync, W._DirectoryReaderSync, W._FileReaderSync, W._FileWriterSync, W.__GamepadList_Interceptor_ListMixin, W._HTMLAllCollection, W._Mojo, W._MojoHandle, W._MojoWatcher, W._NFC, W.__NamedNodeMap_Interceptor_ListMixin, W._PagePopupController, W._Report, W.__SpeechRecognitionResultList_Interceptor_ListMixin, W.__StyleSheetList_Interceptor_ListMixin, W._SubtleCrypto, W._USBAlternateInterface, W._USBConfiguration, W._USBDevice, W._USBEndpoint, W._USBInTransferResult, W._USBInterface, W._USBIsochronousInTransferPacket, W._USBIsochronousInTransferResult, W._USBIsochronousOutTransferPacket, W._USBIsochronousOutTransferResult, W._USBOutTransferResult, W._WindowTimers, W._WorkerLocation, W._Worklet, P.Cursor, P.IdbFactory, P.Index, P.KeyRange, P.ObjectStore, P.Observation, P.Observer, P.ObserverChanges, P.Angle, P.AnimatedAngle, P.AnimatedBoolean, P.AnimatedEnumeration, P.AnimatedInteger, P.AnimatedLength, P.AnimatedLengthList, P.AnimatedNumber, P.AnimatedNumberList, P.AnimatedPreserveAspectRatio, P.AnimatedRect, P.AnimatedString, P.AnimatedTransformList, P.FilterPrimitiveStandardAttributes, P.FitToViewBox, P.Length, P._LengthList_Interceptor_ListMixin, P.Matrix, P.Number, P._NumberList_Interceptor_ListMixin, P.Point0, P.PointList, P.PreserveAspectRatio, P.Rect, P._StringList_Interceptor_ListMixin, P.Tests, P.Transform, P._TransformList_Interceptor_ListMixin, P.UnitTypes, P.UriReference, P.ZoomAndPan, P.AudioBuffer, P.AudioListener, P.AudioParam, P._AudioParamMap_Interceptor_MapMixin, P.AudioTrack, P.AudioWorkletProcessor, P.PeriodicWave, P.ActiveInfo, P.AngleInstancedArrays, P.Buffer, P.Canvas, P.ColorBufferFloat, P.CompressedTextureAstc, P.CompressedTextureAtc, P.CompressedTextureETC1, P.CompressedTextureEtc, P.CompressedTexturePvrtc, P.CompressedTextureS3TC, P.CompressedTextureS3TCsRgb, P.DebugRendererInfo, P.DebugShaders, P.DepthTexture, P.DrawBuffers, P.EXTsRgb, P.ExtBlendMinMax, P.ExtColorBufferFloat, P.ExtColorBufferHalfFloat, P.ExtDisjointTimerQuery, P.ExtDisjointTimerQueryWebGL2, P.ExtFragDepth, P.ExtShaderTextureLod, P.ExtTextureFilterAnisotropic, P.Framebuffer, P.GetBufferSubDataAsync, P.LoseContext, P.OesElementIndexUint, P.OesStandardDerivatives, P.OesTextureFloat, P.OesTextureFloatLinear, P.OesTextureHalfFloat, P.OesTextureHalfFloatLinear, P.OesVertexArrayObject, P.Program, P.Query, P.Renderbuffer, P.RenderingContext, P.RenderingContext2, P.Sampler, P.Shader, P.ShaderPrecisionFormat, P.Sync, P.Texture, P.TimerQueryExt, P.TransformFeedback, P.UniformLocation, P.VertexArrayObject, P.VertexArrayObjectOes, P.WebGL, P._WebGL2RenderingContextBase, P._WebGLRenderingContextBase, P.SqlDatabase, P.SqlError, P.SqlResultSet, P._SqlResultSetRowList_Interceptor_ListMixin, P.SqlTransaction]);
    _inherit(J.JSMutableIndexable, J.JSIndexable);
    _inheritMany(J.JavaScriptObject, [J.PlainJavaScriptObject, J.UnknownJavaScriptObject, J.JavaScriptFunction, D.DartStackTraceUtility]);
    _inherit(J.JSUnmodifiableArray, J.JSArray);
    _inheritMany(J.JSNumber, [J.JSInt, J.JSDouble]);
    _inheritMany(P.Converter, [H.CastConverter, P._UnicodeSubsetEncoder, P._UnicodeSubsetDecoder, P.Base64Encoder, P.Base64Decoder, P._FusedConverter, P.HtmlEscape, P.JsonEncoder, P.JsonUtf8Encoder, P.JsonDecoder, P.Utf8Encoder, P.Utf8Decoder, P.ZLibEncoder, P.ZLibDecoder, P._WindowsCodePageEncoder, P._WindowsCodePageDecoder, A.Hash, A.HexDecoder, R.HexEncoder, E._IdentityConverter, B.PercentDecoder, B.PercentEncoder, D.Hmac]);
    _inheritMany(P.Iterable, [H._CastIterableBase, H.EfficientLengthIterable, H.MappedIterable, H.WhereIterable, H.ExpandIterable, H.TakeIterable, H.TakeWhileIterable, H.SkipIterable, H.SkipWhileIterable, H.FollowedByIterable, H.WhereTypeIterable, P.IterableBase, H._ConstantMapKeyIterable, H._StringAllMatchesIterable, P.LinkedList0, P.DoubleLinkedQueue, P.Runes]);
    _inheritMany(H._CastIterableBase, [H.CastIterable, H.__CastListBase__CastIterableBase_ListMixin, H.CastSet, H.CastQueue]);
    _inherit(H._EfficientLengthCastIterable, H.CastIterable);
    _inherit(H._CastListBase, H.__CastListBase__CastIterableBase_ListMixin);
    _inherit(H.CastList, H._CastListBase);
    _inherit(P.MapBase, P.MapMixin);
    _inheritMany(P.MapBase, [H.CastMap, P.UnmodifiableMapBase, H.JsLinkedHashMap, P._HashMap, P._JsonMap, W._AttributeMap, W._DataAttributeMap, P._CaseInsensitiveStringMap, M.PbMap, A._YamlMapWrapper_MapBase_UnmodifiableMapMixin, A.__YamlMapNodes_MapBase_UnmodifiableMapMixin]);
    _inherit(P.ListBase, P._ListBase_Object_ListMixin);
    _inheritMany(P.ListBase, [H.UnmodifiableListBase, H.FixedLengthListBase, W._ChildrenElementList, W.ElementList, W._FrozenElementList, W._ChildNodeListLazy, W._WrappedList, P.FilteredElementList, B.CombinedListView, T._MappingList, M.PbListBase, N._TypedDataBuffer, A.YamlListWrapper, A._YamlListNodes]);
    _inheritMany(H.UnmodifiableListBase, [H.CodeUnits, P.UnmodifiableListView, P._UnmodifiableUint8ListView_UnmodifiableListBase__UnmodifiableListMixin, P._UnmodifiableInt8ListView_UnmodifiableListBase__UnmodifiableListMixin, P._UnmodifiableUint8ClampedListView_UnmodifiableListBase__UnmodifiableListMixin, P._UnmodifiableUint16ListView_UnmodifiableListBase__UnmodifiableListMixin, P._UnmodifiableInt16ListView_UnmodifiableListBase__UnmodifiableListMixin, P._UnmodifiableUint32ListView_UnmodifiableListBase__UnmodifiableListMixin, P._UnmodifiableInt32ListView_UnmodifiableListBase__UnmodifiableListMixin, P._UnmodifiableUint64ListView_UnmodifiableListBase__UnmodifiableListMixin, P._UnmodifiableInt64ListView_UnmodifiableListBase__UnmodifiableListMixin, P._UnmodifiableInt32x4ListView_UnmodifiableListBase__UnmodifiableListMixin, P._UnmodifiableFloat32x4ListView_UnmodifiableListBase__UnmodifiableListMixin, P._UnmodifiableFloat64x2ListView_UnmodifiableListBase__UnmodifiableListMixin, P._UnmodifiableFloat32ListView_UnmodifiableListBase__UnmodifiableListMixin, P._UnmodifiableFloat64ListView_UnmodifiableListBase__UnmodifiableListMixin]);
    _inheritMany(H.EfficientLengthIterable, [H.ListIterable, H.EmptyIterable, H.LinkedHashMapKeyIterable, P._HashMapKeyIterable, P._Es6MapIterable, P._MapBaseValueIterable, P._SplayTreeKeyIterable, P._SplayTreeValueIterable, P.Set]);
    _inheritMany(H.ListIterable, [H.SubListIterable, H.MappedListIterable, H._ListIndicesIterable, H.ReversedListIterable, P.ListQueue, P._JsonMapKeyIterable, P._GeneratorIterable]);
    _inherit(H.EfficientLengthMappedIterable, H.MappedIterable);
    _inheritMany(P.Iterator, [H.MappedIterator, H.WhereIterator, H.TakeIterator, H.TakeWhileIterator, H.SkipIterator, H.SkipWhileIterator, S.MappedLinkIterator]);
    _inherit(H.EfficientLengthTakeIterable, H.TakeIterable);
    _inherit(H.EfficientLengthSkipIterable, H.SkipIterable);
    _inherit(H.EfficientLengthFollowedByIterable, H.FollowedByIterable);
    _inheritMany(P.IterableBase, [H.LinkedList, H._AllMatchesIterable, P._SyncStarIterable, D.Archive, S.CombinedIterableView, O.EmptyUnmodifiableSet, A.IterableZip, S.MappedLinkIterable, T.ClassSet, B.PathSet]);
    _inheritMany(P.UnmodifiableMapBase, [H.ListMapView, L.CombinedMapView, T.$JsonMapWrapper, T._MappingMap]);
    _inheritMany(P.MapView, [P._UnmodifiableMapView_MapView__UnmodifiableMapMixin, K.PathMap]);
    _inherit(P.UnmodifiableMapView, P._UnmodifiableMapView_MapView__UnmodifiableMapMixin);
    _inherit(H.ConstantMapView, P.UnmodifiableMapView);
    _inheritMany(H.ConstantMap, [H.ConstantStringMap, H.GeneralConstantMap]);
    _inheritMany(H.Closure, [H.ConstantStringMap_values_closure, H.Instantiation, H.Primitives_functionNoSuchMethod_closure, H.unwrapException_saveStackTrace, H.Closure_fromTearOff_closure, H.TearOffClosure, H.JsLinkedHashMap_values_closure, H.initHooks_closure, H.initHooks_closure0, H.initHooks_closure1, P.MapBase_mapToString_closure, P._convertJsonToDart_walk, P._JsonMap_values_closure, P.JsonUtf8Encoder_convert_addChunk, P._JsonStringifier_writeMap_closure, P._JsonPrettyPrintMixin_writeMap_closure, P._symbolMapToStringMap_closure, P.NoSuchMethodError_toString_closure, P.Uri__parseIPv4Address_error, P.Uri_parseIPv6Address_error, P.Uri_parseIPv6Address_parseHex, P._Uri__Uri$notSimple_closure, P._Uri__checkNonWindowsPathReservedCharacters_closure, P._Uri__makePath_closure, P._Uri__makeQuery_writeParameter, P._Uri__makeQuery_closure, P.UriData__writeUri_closure, P._createTables_closure, P._createTables_build, P._createTables_setChars, P._createTables_setRange, Q.fixSourceMapSources_closure, M.Context_join_closure, M.Context_joinAll_closure, M.Context_split_closure, M._validateArgList_closure, X.ParsedPath_normalize_closure, L.WindowsStyle_absolutePathToUri_closure, T.MappingBundle_toJson_closure, T.SingleMapping$fromJson_closure, T.SingleMapping_toJson_closure0, T.SingleMapping_toJson_closure, T.SingleMapping__findLine_closure, T.SingleMapping__findColumn_closure, L.closure, U.Chain_Chain$parse_closure, U.Chain_Chain$parse_closure0, U.Chain_toTrace_closure, U.Chain_toString_closure0, U.Chain_toString__closure0, U.Chain_toString_closure, U.Chain_toString__closure, A.Frame_Frame$parseVM_closure, A.Frame_Frame$parseV8_closure, A.Frame_Frame$parseV8_closure_parseLocation, A.Frame_Frame$parseFirefox_closure, A.Frame_Frame$parseFriendly_closure, Y.Trace_Trace$from_closure, Y.Trace__parseVM_closure, Y.Trace$parseV8_closure, Y.Trace$parseV8_closure0, Y.Trace$parseJSCore_closure, Y.Trace$parseJSCore_closure0, Y.Trace$parseFirefox_closure, Y.Trace$parseFirefox_closure0, Y.Trace$parseFriendly_closure, Y.Trace$parseFriendly_closure0, Y.Trace_foldFrames_closure, Y.Trace_foldFrames_closure0, Y.Trace_toString_closure0, Y.Trace_toString_closure, O.mapStackTrace_closure, O.mapStackTrace_closure0, O.mapStackTrace_closure1, O.mapStackTrace_closure2, D.closure0]);
    _inherit(H.ConstantProtoMap, H.ConstantStringMap);
    _inheritMany(H.Instantiation, [H.Instantiation1, H.Instantiation2, H.Instantiation3, H.Instantiation4, H.Instantiation5, H.Instantiation6, H.Instantiation7, H.Instantiation8, H.Instantiation9, H.Instantiation10, H.Instantiation11, H.Instantiation12, H.Instantiation13, H.Instantiation14, H.Instantiation15, H.Instantiation16, H.Instantiation17, H.Instantiation18, H.Instantiation19, H.Instantiation20]);
    _inheritMany(P.Error, [H.NullError, H.JsNoSuchMethodError, H.UnknownJsTypeError, H.TypeErrorImplementation, H.CastErrorImplementation, P.FallThroughError, H.RuntimeError, H.DeferredNotLoadedError, H.UnimplementedNoSuchMethodError, H.MainError, P.AssertionError, P.JsonUnsupportedObjectError, P._CompileTimeError, P._DuplicatedFieldInitializerError, P.CastError, P.NullThrownError, P.ArgumentError, P.AbstractClassInstantiationError, P.NoSuchMethodError, P.UnsupportedError, P.UnimplementedError, P.StateError, P.ConcurrentModificationError, P.CyclicInitializationError]);
    _inheritMany(H.TearOffClosure, [H.StaticClosure, H.BoundClosure]);
    _inherit(H.JavaScriptIndexingBehavior, J.JSMutableIndexable);
    _inherit(H.FallThroughErrorImplementation, P.FallThroughError);
    _inheritMany(P.AssertionError, [H._AssertionError, H._UnreachableError, P.TypeError]);
    _inheritMany(H.JsLinkedHashMap, [H.Es6LinkedHashMap, P._LinkedIdentityHashMap, P._LinkedCustomHashMap]);
    _inherit(H._LazyMangledInstanceNamesMap, H._LazyMangledNamesMap);
    _inherit(H._NativeFloat32x4List_Object_ListMixin_FixedLengthListMixin, H._NativeFloat32x4List_Object_ListMixin);
    _inherit(H.NativeFloat32x4List, H._NativeFloat32x4List_Object_ListMixin_FixedLengthListMixin);
    _inherit(H._NativeInt32x4List_Object_ListMixin_FixedLengthListMixin, H._NativeInt32x4List_Object_ListMixin);
    _inherit(H.NativeInt32x4List, H._NativeInt32x4List_Object_ListMixin_FixedLengthListMixin);
    _inherit(H._NativeFloat64x2List_Object_ListMixin_FixedLengthListMixin, H._NativeFloat64x2List_Object_ListMixin);
    _inherit(H.NativeFloat64x2List, H._NativeFloat64x2List_Object_ListMixin_FixedLengthListMixin);
    _inheritMany(H.NativeTypedData, [H.NativeByteData, H.NativeTypedArray]);
    _inheritMany(H.NativeTypedArray, [H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin, H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin]);
    _inherit(H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin, H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin);
    _inherit(H.NativeTypedArrayOfDouble, H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin);
    _inherit(H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin, H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin);
    _inherit(H.NativeTypedArrayOfInt, H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin);
    _inheritMany(H.NativeTypedArrayOfDouble, [H.NativeFloat32List, H.NativeFloat64List]);
    _inheritMany(H.NativeTypedArrayOfInt, [H.NativeInt16List, H.NativeInt32List, H.NativeInt8List, H.NativeUint16List, H.NativeUint32List, H.NativeUint8ClampedList, H.NativeUint8List]);
    _inheritMany(P._StreamImpl, [P._ControllerStream, P._GeneratedStreamImpl]);
    _inherit(P._BroadcastStream, P._ControllerStream);
    _inheritMany(P._BufferingStreamSubscription, [P._ControllerSubscription, P._ForwardingStreamSubscription, P._SinkTransformerStreamSubscription]);
    _inherit(P._BroadcastSubscription, P._ControllerSubscription);
    _inheritMany(P._BroadcastStreamController, [P._SyncBroadcastStreamController, P._AsyncBroadcastStreamController]);
    _inherit(P._AsBroadcastStreamController, P._SyncBroadcastStreamController);
    _inheritMany(P._Completer, [P._AsyncCompleter, P._SyncCompleter]);
    _inheritMany(P._StreamController, [P._AsyncStreamController, P._SyncStreamController]);
    _inherit(P._StreamControllerAddStreamState, P._AddStreamState);
    _inheritMany(P._PendingEvents, [P._IterablePendingEvents, P._StreamImplEvents]);
    _inheritMany(P._DelayedEvent, [P._DelayedData, P._DelayedError]);
    _inheritMany(P._ForwardingStream, [P._WhereStream, P._MapStream, P._ExpandStream, P._HandleErrorStream, P._TakeStream, P._TakeWhileStream, P._SkipStream, P._SkipWhileStream, P._DistinctStream]);
    _inherit(P._StateStreamSubscription, P._ForwardingStreamSubscription);
    _inherit(P._StreamHandlerTransformer, P._StreamSinkTransformer);
    _inheritMany(P._Zone, [P._CustomZone, P._RootZone]);
    _inheritMany(P._HashMap, [P._IdentityHashMap, P._CustomHashMap]);
    _inherit(P._Es6LinkedIdentityHashMap, P._LinkedIdentityHashMap);
    _inheritMany(P._SetBase, [P._HashSet, P._LinkedHashSet, P._UnmodifiableSet]);
    _inheritMany(P._HashSet, [P._IdentityHashSet, P._CustomHashSet]);
    _inheritMany(P._LinkedHashSet, [P._LinkedIdentityHashSet, P._LinkedCustomHashSet]);
    _inherit(P.DoubleLinkedQueueEntry, P._DoubleLink);
    _inherit(P._DoubleLinkedQueueEntry, P.DoubleLinkedQueueEntry);
    _inheritMany(P._DoubleLinkedQueueEntry, [P._DoubleLinkedQueueElement, P._DoubleLinkedQueueSentinel]);
    _inherit(P.SetBase, P._SetBase_Object_SetMixin);
    _inherit(P._SplayTreeMapNode, P._SplayTreeNode);
    _inheritMany(P._SplayTree, [P._SplayTreeMap__SplayTree_MapMixin, P._SplayTreeSet__SplayTree_IterableMixin]);
    _inherit(P.SplayTreeMap, P._SplayTreeMap__SplayTree_MapMixin);
    _inheritMany(P._SplayTreeIterator, [P._SplayTreeKeyIterator, P._SplayTreeValueIterator, P._SplayTreeNodeIterator]);
    _inherit(P._SplayTreeSet__SplayTree_IterableMixin_SetMixin, P._SplayTreeSet__SplayTree_IterableMixin);
    _inherit(P.SplayTreeSet, P._SplayTreeSet__SplayTree_IterableMixin_SetMixin);
    _inherit(P.StringConversionSinkBase, P.StringConversionSinkMixin);
    _inheritMany(P.StringConversionSinkBase, [P._StringSinkConversionSink, P._UnicodeSubsetEncoderSink, P._Base64DecoderSink, P._HtmlEscapeSink, P._LineSplitterSink, P._StringAdapterSink, P._WindowsCodePageEncoderSink, A._HexDecoderSink, B._PercentDecoderSink, N.StringAccumulatorSink]);
    _inheritMany(P._StringSinkConversionSink, [P._JsonDecoderSink, P._StringCallbackSink]);
    _inheritMany(P.Codec, [P.Encoding, P.Base64Codec, P._FusedCodec, P._InvertedCodec, P.JsonCodec, P.ZLibCodec, P.GZipCodec, N.HexCodec, E.IdentityCodec, U.PercentCodec]);
    _inheritMany(P.Encoding, [P.AsciiCodec, P.Latin1Codec, P.Utf8Codec, P.SystemEncoding]);
    _inheritMany(P._UnicodeSubsetEncoder, [P.AsciiEncoder, P.Latin1Encoder]);
    _inheritMany(P._UnicodeSubsetDecoder, [P.AsciiDecoder, P.Latin1Decoder]);
    _inheritMany(P.ByteConversionSinkBase, [P._ErrorHandlingAsciiDecoderSink, P._SimpleAsciiDecoderSink, P._Base64EncoderSink, P._ByteAdapterSink, P._ByteCallbackSink, P._Latin1DecoderSink, P._WindowsCodePageDecoderSink, T._Adler32Sink, X._Crc32Sink, A.ByteAccumulatorSink, A._HexDecoderByteSink, R._HexEncoderSink, B._PercentDecoderByteSink, B._PercentEncoderSink]);
    _inherit(P._BufferCachingBase64Encoder, P._Base64Encoder);
    _inheritMany(P._Base64EncoderSink, [P._AsciiBase64EncoderSink, P._Utf8Base64EncoderSink]);
    _inherit(P.JsonCyclicError, P.JsonUnsupportedObjectError);
    _inheritMany(P._JsonStringifier, [P._JsonStringStringifier, P._JsonUtf8Stringifier]);
    _inherit(P.__JsonStringStringifierPretty__JsonStringStringifier__JsonPrettyPrintMixin, P._JsonStringStringifier);
    _inherit(P._JsonStringStringifierPretty, P.__JsonStringStringifierPretty__JsonStringStringifier__JsonPrettyPrintMixin);
    _inherit(P.__JsonUtf8StringifierPretty__JsonUtf8Stringifier__JsonPrettyPrintMixin, P._JsonUtf8Stringifier);
    _inherit(P._JsonUtf8StringifierPretty, P.__JsonUtf8StringifierPretty__JsonUtf8Stringifier__JsonPrettyPrintMixin);
    _inherit(P._Latin1AllowInvalidDecoderSink, P._Latin1DecoderSink);
    _inherit(P._LineSplitterEventSink, P._LineSplitterSink);
    _inherit(P.ClosableStringSink, P.StringSink);
    _inherit(P.__Utf8EncoderSink__Utf8Encoder_StringConversionSinkMixin, P._Utf8Encoder);
    _inherit(P._Utf8EncoderSink, P.__Utf8EncoderSink__Utf8Encoder_StringConversionSinkMixin);
    _inheritMany(P.num, [P.double, P.int]);
    _inheritMany(P.ArgumentError, [P.RangeError, P.IndexError]);
    _inherit(P._DataUri, P._Uri);
    _inheritMany(P.Metric, [P.Gauge, P.Counter]);
    _inheritMany(W.EventTarget, [W.Node, W.Sensor, W.AccessibleNode, W.Animation, W.ApplicationCache, W.BackgroundFetchRegistration, W.BatteryManager, W.BroadcastChannel, W.MediaStreamTrack, W.WorkerGlobalScope, W.EventSource, W.FileReader, W.FileWriter, W.FontFaceSet, W.HttpRequestEventTarget, W.MediaDevices, W.MediaKeySession, W.MediaQueryList, W.MediaRecorder, W.MediaSource, W.MediaStream, W.MessagePort, W.MidiAccess, W.MidiPort, W.NetworkInformation, W.Notification, W.OffscreenCanvas, W.PaymentRequest, W.Performance, W.PermissionStatus, W.PresentationAvailability, W.PresentationConnection, W.PresentationConnectionList, W.PresentationRequest, W.RemotePlayback, W.RtcDataChannel, W.RtcDtmfSender, W.RtcPeerConnection, W.ScreenOrientation, W.ServiceWorker, W.ServiceWorkerContainer, W.ServiceWorkerRegistration, W.SharedWorker, W.SourceBuffer, W._SourceBufferList_EventTarget_ListMixin, W.SpeechRecognition, W.SpeechSynthesis, W.SpeechSynthesisUtterance, W.TextTrack, W.TextTrackCue, W._TextTrackList_EventTarget_ListMixin, W.VR, W.VRDevice, W.VRDisplay, W.VRSession, W.VideoTrackList, W.VisualViewport, W.WebSocket0, W.Window, W.WindowEventHandlers, W.Worker, W.WorkerPerformance, W._BluetoothDevice, W._BluetoothRemoteGATTCharacteristic, W._Clipboard, W._MojoInterfaceInterceptor, W._USB, P.Database, P.Request, P.Transaction, P.AudioNode, P.BaseAudioContext, P.AudioTrackList]);
    _inheritMany(W.Node, [W.Element, W.CharacterData, W.Document, W.DocumentFragment, W._Attr, W._DocumentType]);
    _inheritMany(W.Element, [W.HtmlElement, P.SvgElement]);
    _inheritMany(W.Event0, [W.ExtendableEvent, W.AnimationEvent, W.AnimationPlaybackEvent, W.ApplicationCacheErrorEvent, W.BeforeInstallPromptEvent, W.BeforeUnloadEvent, W.BlobEvent, W.ClipboardEvent, W.CloseEvent, W.UIEvent, W.CustomEvent, W.DeviceMotionEvent, W.DeviceOrientationEvent, W.ErrorEvent, W.FontFaceSetLoadEvent, W.GamepadEvent, W.HashChangeEvent, W.MediaEncryptedEvent, W.MediaKeyMessageEvent, W.MediaQueryListEvent, W.MediaStreamEvent, W.MediaStreamTrackEvent, W.MessageEvent, W.MidiConnectionEvent, W.MidiMessageEvent, W.MutationEvent, W.PageTransitionEvent, W.PaymentRequestUpdateEvent, W.PopStateEvent, W.PresentationConnectionAvailableEvent, W.PresentationConnectionCloseEvent, W.ProgressEvent, W.PromiseRejectionEvent, W.RtcDataChannelEvent, W.RtcDtmfToneChangeEvent, W.RtcPeerConnectionIceEvent, W.RtcTrackEvent, W.SecurityPolicyViolationEvent, W.SensorErrorEvent, W.SpeechRecognitionError, W.SpeechRecognitionEvent, W.SpeechSynthesisEvent, W.StorageEvent, W.TrackEvent, W.TransitionEvent, W.VRDeviceEvent, W.VRDisplayEvent, W.VRSessionEvent, W._MojoInterfaceRequestEvent, W._USBConnectionEvent, P.VersionChangeEvent, P.AudioProcessingEvent, P.OfflineAudioCompletionEvent, P.ContextEvent]);
    _inheritMany(W.ExtendableEvent, [W.AbortPaymentEvent, W.BackgroundFetchEvent, W.CanMakePaymentEvent, W.ExtendableMessageEvent, W.FetchEvent, W.ForeignFetchEvent, W.InstallEvent, W.NotificationEvent, W.PaymentRequestEvent, W.PushEvent, W.SyncEvent]);
    _inheritMany(W.Sensor, [W.OrientationSensor, W.Accelerometer, W.AmbientLightSensor, W.Gyroscope, W.Magnetometer]);
    _inheritMany(W.OrientationSensor, [W.AbsoluteOrientationSensor, W.RelativeOrientationSensor]);
    _inheritMany(W.HtmlElement, [W.AnchorElement, W.AreaElement, W.MediaElement, W.BRElement, W.BaseElement, W.BodyElement, W.ButtonElement, W.CanvasElement, W.ContentElement, W.DListElement, W.DataElement, W.DataListElement, W.DetailsElement, W.DialogElement, W.DivElement, W.EmbedElement, W.FieldSetElement, W.FormElement, W.HRElement, W.HeadElement, W.HeadingElement, W.HtmlHtmlElement, W.IFrameElement, W.ImageElement, W.InputElement, W.LIElement, W.LabelElement, W.LegendElement, W.LinkElement, W.MapElement, W.MenuElement, W.MetaElement, W.MeterElement, W.ModElement, W.OListElement, W.ObjectElement, W.OptGroupElement, W.OptionElement, W.OutputElement, W.ParagraphElement, W.ParamElement, W.PictureElement, W.PreElement, W.ProgressElement, W.QuoteElement, W.ScriptElement, W.SelectElement, W.ShadowElement, W.SlotElement, W.SourceElement, W.SpanElement, W.StyleElement, W.TableCaptionElement, W.TableCellElement, W.TableColElement, W.TableElement, W.TableRowElement, W.TableSectionElement, W.TemplateElement, W.TextAreaElement, W.TimeElement, W.TitleElement, W.TrackElement, W.UListElement, W.UnknownElement, W._HTMLDirectoryElement, W._HTMLFontElement, W._HTMLFrameElement, W._HTMLFrameSetElement, W._HTMLMarqueeElement]);
    _inherit(W.AnimationEffectTiming, W.AnimationEffectTimingReadOnly);
    _inheritMany(W.WorkletGlobalScope, [W.AnimationWorkletGlobalScope, W.PaintWorkletGlobalScope, P.AudioWorkletGlobalScope]);
    _inheritMany(W.MediaElement, [W.AudioElement, W.VideoElement]);
    _inheritMany(W.AuthenticatorResponse, [W.AuthenticatorAssertionResponse, W.AuthenticatorAttestationResponse]);
    _inheritMany(W.BackgroundFetchEvent, [W.BackgroundFetchClickEvent, W.BackgroundFetchFailEvent, W.BackgroundFetchedEvent]);
    _inherit(W.BackgroundFetchSettledFetch, W.BackgroundFetchFetch);
    _inheritMany(W.CharacterData, [W.Text, W.Comment, W.ProcessingInstruction]);
    _inherit(W.CDataSection, W.Text);
    _inherit(W.CanvasCaptureMediaStreamTrack, W.MediaStreamTrack);
    _inheritMany(W.UIEvent, [W.CompositionEvent, W.FocusEvent, W.KeyboardEvent, W.MouseEvent, W.TextEvent, W.TouchEvent]);
    _inheritMany(W.CssRule, [W.CssCharsetRule, W.CssGroupingRule, W.CssFontFaceRule, W.CssImportRule, W.CssKeyframeRule, W.CssKeyframesRule, W.CssNamespaceRule, W.CssPageRule, W.CssStyleRule, W.CssViewportRule]);
    _inherit(W.CssConditionRule, W.CssGroupingRule);
    _inheritMany(W.CssStyleValue, [W.CssResourceValue, W.CssKeywordValue, W.CssNumericValue, W.CssPositionValue, W.CssTransformValue, W.CssUnparsedValue]);
    _inherit(W.CssImageValue, W.CssResourceValue);
    _inheritMany(W.CssTransformComponent, [W.CssMatrixComponent, W.CssPerspective, W.CssRotation, W.CssScale, W.CssSkew, W.CssTranslation]);
    _inheritMany(W.CssConditionRule, [W.CssMediaRule, W.CssSupportsRule]);
    _inherit(W.CssStyleDeclaration, W._CssStyleDeclaration_Interceptor_CssStyleDeclarationBase);
    _inherit(W._CssStyleDeclarationSet, W.__CssStyleDeclarationSet_Object_CssStyleDeclarationBase);
    _inherit(W.CssStyleSheet, W.StyleSheet);
    _inherit(W.CssUnitValue, W.CssNumericValue);
    _inherit(W.CssurlImageValue, W.CssImageValue);
    _inheritMany(W.WorkerGlobalScope, [W.DedicatedWorkerGlobalScope, W.ServiceWorkerGlobalScope, W.SharedWorkerGlobalScope]);
    _inheritMany(W.ReportBody, [W.DeprecationReport, W.InterventionReport]);
    _inheritMany(W.Entry, [W.DirectoryEntry, W.FileEntry]);
    _inheritMany(W.AnimationTimeline, [W.DocumentTimeline, W.ScrollTimeline]);
    _inherit(W.DomMatrix, W.DomMatrixReadOnly);
    _inherit(W.DomPoint, W.DomPointReadOnly);
    _inherit(W._DomRectList_Interceptor_ListMixin_ImmutableListMixin, W._DomRectList_Interceptor_ListMixin);
    _inherit(W.DomRectList, W._DomRectList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W._DomStringList_Interceptor_ListMixin_ImmutableListMixin, W._DomStringList_Interceptor_ListMixin);
    _inherit(W.DomStringList, W._DomStringList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W.ElementEvents, W.Events);
    _inheritMany(W.Credential, [W.FederatedCredential, W.PasswordCredential, W.PublicKeyCredential]);
    _inherit(W.File, W.Blob);
    _inherit(W._FileList_Interceptor_ListMixin_ImmutableListMixin, W._FileList_Interceptor_ListMixin);
    _inherit(W.FileList, W._FileList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W._HtmlCollection_Interceptor_ListMixin_ImmutableListMixin, W._HtmlCollection_Interceptor_ListMixin);
    _inherit(W.HtmlCollection, W._HtmlCollection_Interceptor_ListMixin_ImmutableListMixin);
    _inheritMany(W.Document, [W.HtmlDocument, W.XmlDocument]);
    _inheritMany(W.HtmlCollection, [W.HtmlFormControlsCollection, W.HtmlOptionsCollection]);
    _inheritMany(W.HttpRequestEventTarget, [W.HttpRequest0, W.HttpRequestUpload]);
    _inherit(W.KeyframeEffectReadOnly, W.AnimationEffectReadOnly);
    _inherit(W.KeyframeEffect, W.KeyframeEffectReadOnly);
    _inherit(W.LinearAccelerationSensor, W.Accelerometer);
    _inheritMany(W.MidiPort, [W.MidiInput, W.MidiOutput]);
    _inherit(W.MidiInputMap, W._MidiInputMap_Interceptor_MapMixin);
    _inherit(W.MidiOutputMap, W._MidiOutputMap_Interceptor_MapMixin);
    _inherit(W._MimeTypeArray_Interceptor_ListMixin_ImmutableListMixin, W._MimeTypeArray_Interceptor_ListMixin);
    _inherit(W.MimeTypeArray, W._MimeTypeArray_Interceptor_ListMixin_ImmutableListMixin);
    _inheritMany(W.NavigatorConcurrentHardware, [W.Navigator, W._WorkerNavigator]);
    _inherit(W._NodeList_Interceptor_ListMixin_ImmutableListMixin, W._NodeList_Interceptor_ListMixin);
    _inherit(W.NodeList, W._NodeList_Interceptor_ListMixin_ImmutableListMixin);
    _inheritMany(W.PerformanceEntry, [W.PerformanceLongTaskTiming, W.PerformanceMark, W.PerformanceMeasure, W.PerformanceResourceTiming, W.PerformancePaintTiming, W.TaskAttributionTiming]);
    _inherit(W.PerformanceNavigationTiming, W.PerformanceResourceTiming);
    _inherit(W._PluginArray_Interceptor_ListMixin_ImmutableListMixin, W._PluginArray_Interceptor_ListMixin);
    _inherit(W.PluginArray, W._PluginArray_Interceptor_ListMixin_ImmutableListMixin);
    _inheritMany(W.MouseEvent, [W.PointerEvent, W.WheelEvent]);
    _inherit(W.RtcStatsReport, W._RtcStatsReport_Interceptor_MapMixin);
    _inherit(W.ShadowRoot, W.DocumentFragment);
    _inherit(W._SourceBufferList_EventTarget_ListMixin_ImmutableListMixin, W._SourceBufferList_EventTarget_ListMixin);
    _inherit(W.SourceBufferList, W._SourceBufferList_EventTarget_ListMixin_ImmutableListMixin);
    _inherit(W._SpeechGrammarList_Interceptor_ListMixin_ImmutableListMixin, W._SpeechGrammarList_Interceptor_ListMixin);
    _inherit(W.SpeechGrammarList, W._SpeechGrammarList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W.Storage, W._Storage_Interceptor_MapMixin);
    _inherit(W.StylePropertyMap, W.StylePropertyMapReadonly);
    _inherit(W._TextTrackCueList_Interceptor_ListMixin_ImmutableListMixin, W._TextTrackCueList_Interceptor_ListMixin);
    _inherit(W.TextTrackCueList, W._TextTrackCueList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W._TextTrackList_EventTarget_ListMixin_ImmutableListMixin, W._TextTrackList_EventTarget_ListMixin);
    _inherit(W.TextTrackList, W._TextTrackList_EventTarget_ListMixin_ImmutableListMixin);
    _inherit(W._TouchList_Interceptor_ListMixin_ImmutableListMixin, W._TouchList_Interceptor_ListMixin);
    _inherit(W.TouchList, W._TouchList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W.VRFrameOfReference, W.VRCoordinateSystem);
    _inherit(W.VttCue, W.TextTrackCue);
    _inheritMany(W._WrappedEvent, [W._BeforeUnloadEvent, W.KeyEvent]);
    _inherit(W.WindowClient, W.Client);
    _inherit(W.__CssRuleList_Interceptor_ListMixin_ImmutableListMixin, W.__CssRuleList_Interceptor_ListMixin);
    _inherit(W._CssRuleList, W.__CssRuleList_Interceptor_ListMixin_ImmutableListMixin);
    _inheritMany(W._EntrySync, [W._DirectoryEntrySync, W._FileEntrySync]);
    _inherit(W._DomRect, W.DomRectReadOnly);
    _inherit(W.__GamepadList_Interceptor_ListMixin_ImmutableListMixin, W.__GamepadList_Interceptor_ListMixin);
    _inherit(W._GamepadList, W.__GamepadList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W.__NamedNodeMap_Interceptor_ListMixin_ImmutableListMixin, W.__NamedNodeMap_Interceptor_ListMixin);
    _inherit(W._NamedNodeMap, W.__NamedNodeMap_Interceptor_ListMixin_ImmutableListMixin);
    _inheritMany(W.Body, [W._Request, W._Response]);
    _inherit(W._ResourceProgressEvent, W.ProgressEvent);
    _inherit(W.__SpeechRecognitionResultList_Interceptor_ListMixin_ImmutableListMixin, W.__SpeechRecognitionResultList_Interceptor_ListMixin);
    _inherit(W._SpeechRecognitionResultList, W.__SpeechRecognitionResultList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W.__StyleSheetList_Interceptor_ListMixin_ImmutableListMixin, W.__StyleSheetList_Interceptor_ListMixin);
    _inherit(W._StyleSheetList, W.__StyleSheetList_Interceptor_ListMixin_ImmutableListMixin);
    _inheritMany(W._AttributeMap, [W._ElementAttributeMap, W._NamespacedAttributeMap]);
    _inheritMany(W.CssRect, [W._ContentCssRect, W._PaddingCssRect, W._BorderCssRect, W._MarginCssRect]);
    _inherit(W._ContentCssListRect, W._ContentCssRect);
    _inheritMany(P.SetBase, [P.CssClassSetImpl, M._UnionSet_SetBase_UnmodifiableSetMixin]);
    _inheritMany(P.CssClassSetImpl, [W._MultiElementCssClassSet, W._ElementCssClassSet, P.AttributeClassSet]);
    _inherit(W._ElementEventStreamImpl, W._EventStream);
    _inherit(W._EventStreamSubscription, P.StreamSubscription);
    _inherit(W._CustomKeyEventStreamImpl, W._CustomEventStreamImpl);
    _inherit(W._KeyboardEventHandler, W.EventStreamProvider);
    _inheritMany(W._SimpleNodeValidator, [W._CustomElementNodeValidator, W._TemplatingNodeValidator]);
    _inherit(P._StructuredCloneDart2Js, P._StructuredClone);
    _inherit(P._AcceptStructuredCloneDart2Js, P._AcceptStructuredClone);
    _inherit(P.CursorWithValue, P.Cursor);
    _inherit(P.OpenDBRequest, P.Request);
    _inheritMany(P._FilterSink, [P._ZLibEncoderSink, P._ZLibDecoderSink]);
    _inheritMany(P.FileSystemEntity, [P._Directory, P._File, P._Link]);
    _inherit(P._FileStreamConsumer, P.StreamConsumer);
    _inheritMany(P.FileSystemEvent, [P.FileSystemCreateEvent, P.FileSystemModifyEvent, P.FileSystemDeleteEvent, P.FileSystemMoveEvent]);
    _inheritMany(P._IOResourceInfo, [P._ReadWriteResourceInfo, P._ProcessResourceInfo]);
    _inheritMany(P._ReadWriteResourceInfo, [P._FileResourceInfo, P._SocketResourceInfo]);
    _inherit(P._IOSinkImpl0, P._StreamSinkImpl0);
    _inherit(P._IOOverridesScope, P.IOOverrides);
    _inheritMany(P.TlsException, [P.HandshakeException, P.CertificateException]);
    _inherit(P.Stdin, P._StdStream);
    _inherit(P.Stdout, P._StdSink);
    _inheritMany(P.JsObject, [P.JsFunction, P._JsArray_JsObject_ListMixin]);
    _inherit(P.JsArray, P._JsArray_JsObject_ListMixin);
    _inheritMany(P._RectangleBase, [P.Rectangle, P.MutableRectangle]);
    _inherit(P.TypeVariableMirror, P.TypeMirror);
    _inheritMany(P.SvgElement, [P.GraphicsElement, P.AnimationElement, P.DescElement, P.DiscardElement, P.FEBlendElement, P.FEColorMatrixElement, P.FEComponentTransferElement, P.FECompositeElement, P.FEConvolveMatrixElement, P.FEDiffuseLightingElement, P.FEDisplacementMapElement, P.FEDistantLightElement, P.FEFloodElement, P._SVGComponentTransferFunctionElement, P.FEGaussianBlurElement, P.FEImageElement, P.FEMergeElement, P.FEMergeNodeElement, P.FEMorphologyElement, P.FEOffsetElement, P.FEPointLightElement, P.FESpecularLightingElement, P.FESpotLightElement, P.FETileElement, P.FETurbulenceElement, P.FilterElement, P._GradientElement, P.MarkerElement, P.MaskElement, P.MetadataElement, P.PatternElement, P.ScriptElement0, P.StopElement, P.StyleElement0, P.SymbolElement, P.TitleElement0, P.ViewElement, P._SVGFEDropShadowElement, P._SVGMPathElement]);
    _inheritMany(P.GraphicsElement, [P.AElement, P.GeometryElement, P.ClipPathElement, P.DefsElement, P.ForeignObjectElement, P.GElement, P.ImageElement0, P.SvgSvgElement, P.SwitchElement, P.TextContentElement, P.UseElement]);
    _inheritMany(P.AnimationElement, [P.AnimateElement, P.AnimateMotionElement, P.AnimateTransformElement, P.SetElement]);
    _inheritMany(P.GeometryElement, [P.CircleElement, P.EllipseElement, P.LineElement, P.PathElement, P.PolygonElement, P.PolylineElement, P.RectElement]);
    _inheritMany(P._SVGComponentTransferFunctionElement, [P.FEFuncAElement, P.FEFuncBElement, P.FEFuncGElement, P.FEFuncRElement]);
    _inherit(P._LengthList_Interceptor_ListMixin_ImmutableListMixin, P._LengthList_Interceptor_ListMixin);
    _inherit(P.LengthList, P._LengthList_Interceptor_ListMixin_ImmutableListMixin);
    _inheritMany(P._GradientElement, [P.LinearGradientElement, P.RadialGradientElement]);
    _inherit(P._NumberList_Interceptor_ListMixin_ImmutableListMixin, P._NumberList_Interceptor_ListMixin);
    _inherit(P.NumberList, P._NumberList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(P._StringList_Interceptor_ListMixin_ImmutableListMixin, P._StringList_Interceptor_ListMixin);
    _inherit(P.StringList, P._StringList_Interceptor_ListMixin_ImmutableListMixin);
    _inheritMany(P.TextContentElement, [P.TextPositioningElement, P.TextPathElement]);
    _inheritMany(P.TextPositioningElement, [P.TSpanElement, P.TextElement]);
    _inherit(P._TransformList_Interceptor_ListMixin_ImmutableListMixin, P._TransformList_Interceptor_ListMixin);
    _inherit(P.TransformList, P._TransformList_Interceptor_ListMixin_ImmutableListMixin);
    _inheritMany(P.TypedData, [P._TypedIntList, P._TypedFloatList]);
    _inherit(P.UnmodifiableUint8ListView, P._UnmodifiableUint8ListView_UnmodifiableListBase__UnmodifiableListMixin);
    _inherit(P.UnmodifiableInt8ListView, P._UnmodifiableInt8ListView_UnmodifiableListBase__UnmodifiableListMixin);
    _inherit(P.UnmodifiableUint8ClampedListView, P._UnmodifiableUint8ClampedListView_UnmodifiableListBase__UnmodifiableListMixin);
    _inherit(P.UnmodifiableUint16ListView, P._UnmodifiableUint16ListView_UnmodifiableListBase__UnmodifiableListMixin);
    _inherit(P.UnmodifiableInt16ListView, P._UnmodifiableInt16ListView_UnmodifiableListBase__UnmodifiableListMixin);
    _inherit(P.UnmodifiableUint32ListView, P._UnmodifiableUint32ListView_UnmodifiableListBase__UnmodifiableListMixin);
    _inherit(P.UnmodifiableInt32ListView, P._UnmodifiableInt32ListView_UnmodifiableListBase__UnmodifiableListMixin);
    _inherit(P.UnmodifiableUint64ListView, P._UnmodifiableUint64ListView_UnmodifiableListBase__UnmodifiableListMixin);
    _inherit(P.UnmodifiableInt64ListView, P._UnmodifiableInt64ListView_UnmodifiableListBase__UnmodifiableListMixin);
    _inherit(P.UnmodifiableInt32x4ListView, P._UnmodifiableInt32x4ListView_UnmodifiableListBase__UnmodifiableListMixin);
    _inherit(P.UnmodifiableFloat32x4ListView, P._UnmodifiableFloat32x4ListView_UnmodifiableListBase__UnmodifiableListMixin);
    _inherit(P.UnmodifiableFloat64x2ListView, P._UnmodifiableFloat64x2ListView_UnmodifiableListBase__UnmodifiableListMixin);
    _inherit(P.UnmodifiableFloat32ListView, P._UnmodifiableFloat32ListView_UnmodifiableListBase__UnmodifiableListMixin);
    _inherit(P.UnmodifiableFloat64ListView, P._UnmodifiableFloat64ListView_UnmodifiableListBase__UnmodifiableListMixin);
    _inheritMany(P.AudioNode, [P.AnalyserNode, P.AudioScheduledSourceNode, P.AudioDestinationNode, P.AudioWorkletNode, P.BiquadFilterNode, P.ChannelMergerNode, P.ChannelSplitterNode, P.ConvolverNode, P.DelayNode, P.DynamicsCompressorNode, P.GainNode, P.IirFilterNode, P.MediaElementAudioSourceNode, P.MediaStreamAudioDestinationNode, P.MediaStreamAudioSourceNode, P.PannerNode, P.ScriptProcessorNode, P.StereoPannerNode, P.WaveShaperNode]);
    _inheritMany(P.AudioScheduledSourceNode, [P.AudioBufferSourceNode, P.ConstantSourceNode, P.OscillatorNode]);
    _inheritMany(P.BaseAudioContext, [P.AudioContext, P.OfflineAudioContext]);
    _inherit(P.AudioParamMap, P._AudioParamMap_Interceptor_MapMixin);
    _inherit(P._SqlResultSetRowList_Interceptor_ListMixin_ImmutableListMixin, P._SqlResultSetRowList_Interceptor_ListMixin);
    _inherit(P.SqlResultSetRowList, P._SqlResultSetRowList_Interceptor_ListMixin_ImmutableListMixin);
    _inheritMany(Z.AnalysisErrorListener, [K._ErrorCollector, U.ConstantAnalysisErrorListener]);
    _inheritMany(E.AnalysisException, [L.InconsistentAnalysisException, A._ElementMismatchException, O.ObsoleteSourceAnalysisException, L.InfiniteTaskLoopException]);
    _inherit(B.GeneralizingAstVisitor, B._GeneralizingAstVisitor_Object_UIAsCodeVisitorMixin);
    _inheritMany(B.GeneralizingAstVisitor, [B.BreadthFirstVisitor, E._IndexContributor, K._ReferencedNamesComputer, B._DeclarationByElementLocator, N.ConstantEvaluator, A.ScopedNameFinder, M.ExitDetector, O.ResolutionEraser, M._SourceVisitor]);
    _inherit(B.UnifyingAstVisitor, B._UnifyingAstVisitor_Object_UIAsCodeVisitorMixin);
    _inheritMany(B.UnifyingAstVisitor, [B.DelegatingAstVisitor, B._BreadthFirstChildVisitor, A.NodeLocator, A.NodeLocator2, S.ConstantVisitor, R._ClassNotExecutableElementsBuilder, L.ScopedVisitor]);
    _inherit(B.RecursiveAstVisitor, B._RecursiveAstVisitor_Object_UIAsCodeVisitorMixin);
    _inherit(B.SimpleAstVisitor, B._SimpleAstVisitor_Object_UIAsCodeVisitorMixin);
    _inherit(B.ThrowingAstVisitor, B._ThrowingAstVisitor_Object_UIAsCodeVisitorMixin);
    _inherit(B.TimedAstVisitor, B._TimedAstVisitor_Object_UIAsCodeVisitorMixin);
    _inheritMany(X._MemoryResource, [X._MemoryDummyLink, X._MemoryFile, X._MemoryFolder]);
    _inheritMany(T._PhysicalResource, [T._PhysicalFile, T._PhysicalFolder]);
    _inherit(E.CharacterLocation, Z.LineInfo_Location);
    _inheritMany(A.ErrorCode, [Z.AnalysisOptionsErrorCode, Z.AnalysisOptionsHintCode, Z.AnalysisOptionsWarningCode, O.HintCode, X.LintCode, E.ParserErrorCode, F.TodoCode, A.CheckedModeCompileTimeErrorCode, A.CompileTimeErrorCode, A.StaticTypeWarningCode, A.StaticWarningCode, A.StrongModeCode, L.ResolverErrorCode, O.HtmlErrorCode, O.HtmlWarningCode, A.ScannerErrorCode]);
    _inheritMany(B.CachePartition, [B.PackageCachePartition, B.SdkCachePartition, B.UniversalCachePartition]);
    _inherit(B.UnlimitedCacheFlushManager, B.CacheFlushManager);
    _inherit(M.SdkAnalysisContext, M.AnalysisContextImpl);
    _inheritMany(B.AnalysisResultImpl, [B.FileResultImpl, B.ParsedLibraryResultImpl, B.ResolvedLibraryResultImpl, B.UnitElementResultImpl]);
    _inheritMany(B.FileResultImpl, [B.ResolvedUnitResultImpl, B.ErrorsResultImpl, B.ParsedUnitResultImpl]);
    _inherit(L.AnalysisResult0, B.ResolvedUnitResultImpl);
    _inheritMany(T.ValidationResult, [T.ConflictingFlags, T.IllegalUseOfExpiredFlag, T.UnnecessaryUseOfExpiredFlag, T.UnrecognizedFlag]);
    _inheritMany(D.Node0, [D._LibraryNode, B._ConstantNode, D.ConstNode, D.LibraryCycleNode, D.LibraryNode, D.SimplyBoundedNode, D.TypeInferenceNode]);
    _inheritMany(D.DependencyWalker, [D._LibraryWalker, B._ConstantWalker, D.ConstDependencyWalker, D.LibraryCycleDependencyWalker, D.LibraryDependencyWalker, D.SimplyBoundedDependencyWalker, D.TypeInferenceDependencyWalker]);
    _inheritMany(B.GeneralizingElementVisitor, [S._ContainingElementFinder, R._HasTypedefSelfReferenceVisitor]);
    _inheritMany(B.RecursiveAstVisitor, [S._ImportElementReferencesVisitor, S._LocalReferencesVisitor, A.MixinSuperInvokedNamesCollector, A.DeferredLibraryReferenceDetector, V.ConstantVerifier, A.ConstantExpressionsDependenciesFinder, A.ConstantFinder, A.ReferenceFinder, R._BaseElementBuilder, A.DeclarationResolver, R.ErrorVerifier, R.RequiredConstantsComputer, R._InvocationCollector, R._UninstantiatedBoundChecker, L.BestPracticesVerifier, L.Dart2JSVerifier, L.DeadCodeVerifier, L.EnumMemberBuilder, L.GatherUsedImportedElementsVisitor, L.GatherUsedLocalElementsVisitor, L.OverrideVerifier, L.UnusedLocalElementsVerifier, L._ResolverVisitor_isVariableAccessedInClosure, L._ResolverVisitor_isVariablePotentiallyMutatedIn, E.SdkLibrariesReader_LibraryBuilder, B.SdkConstraintVerifier, F.LinterVisitor, U._PublicNamespaceVisitor, U._SummarizeAstVisitor, B.CodeChecker, B._TopLevelInitializerValidator, Q.VariableGatherer]);
    _inheritMany(U.AstNodeImpl, [U.ExpressionImpl, U.AnnotatedNodeImpl, U.AnnotationImpl, U.ArgumentListImpl, U.ConstructorInitializerImpl, U.StatementImpl, U.FunctionBodyImpl, U.CatchClauseImpl, U.CollectionElementImpl, U.CombinatorImpl, U.CommentImpl, U.CommentReferenceImpl, U.CompilationUnitImpl, U.ConfigurationImpl, U.ConstructorNameImpl, U.FormalParameterImpl, U.DottedNameImpl, U.ExtendsClauseImpl, U.ForLoopPartsImpl, U.FormalParameterListImpl, U.TypeAnnotationImpl, U.ImplementsClauseImpl, U.InterpolationElementImpl, U.LabelImpl, U.NativeClauseImpl, U.OnClauseImpl, U.ScriptTagImpl, U.SpreadElementImpl, U.SwitchMemberImpl, U.TypeArgumentListImpl, U.TypeParameterListImpl, U.WithClauseImpl]);
    _inheritMany(U.ExpressionImpl, [U.LiteralImpl, U.AsExpressionImpl, U.AssignmentExpressionImpl, U.AwaitExpressionImpl, U.BinaryExpressionImpl, U.CascadeExpressionImpl, U.ConditionalExpressionImpl, U.IdentifierImpl, U.FunctionExpressionImpl, U.InvocationExpressionImpl, U.IndexExpressionImpl, U.InstanceCreationExpressionImpl, U.IsExpressionImpl, U.NamedExpressionImpl, U.ParenthesizedExpressionImpl, U.PostfixExpressionImpl, U.PrefixExpressionImpl, U.PropertyAccessImpl, U.RethrowExpressionImpl, U.SuperExpressionImpl, U.ThisExpressionImpl, U.ThrowExpressionImpl]);
    _inheritMany(U.LiteralImpl, [U.StringLiteralImpl, U.BooleanLiteralImpl, U.DoubleLiteralImpl, U.IntegerLiteralImpl, U.TypedLiteralImpl, U.NullLiteralImpl, U.SymbolLiteralImpl]);
    _inheritMany(U.StringLiteralImpl, [U.AdjacentStringsImpl, U.SingleStringLiteralImpl]);
    _inheritMany(U.ConstructorInitializerImpl, [U.AssertInitializerImpl, U.ConstructorFieldInitializerImpl, U.RedirectingConstructorInvocationImpl, U.SuperConstructorInvocationImpl]);
    _inheritMany(U.StatementImpl, [U.AssertStatementImpl, U.BlockImpl, U.BreakStatementImpl, U.ContinueStatementImpl, U.DoStatementImpl, U.EmptyStatementImpl, U.ExpressionStatementImpl, U._ForStatement2Impl_StatementImpl_ForMixin, U.FunctionDeclarationStatementImpl, U._IfStatementImpl_StatementImpl_IfMixin, U.LabeledStatementImpl, U.ReturnStatementImpl, U.SwitchStatementImpl, U.TryStatementImpl, U.VariableDeclarationStatementImpl, U.WhileStatementImpl, U.YieldStatementImpl]);
    _inheritMany(U.FunctionBodyImpl, [U.BlockFunctionBodyImpl, U.EmptyFunctionBodyImpl, U.ExpressionFunctionBodyImpl, U.NativeFunctionBodyImpl]);
    _inherit(U.ChildEntities, U._ChildEntities_Object_IterableMixin);
    _inheritMany(U.AnnotatedNodeImpl, [U.DeclarationImpl, U.DirectiveImpl, U.VariableDeclarationListImpl]);
    _inheritMany(U.DeclarationImpl, [U.CompilationUnitMemberImpl, U.ClassMemberImpl, U.DeclaredIdentifierImpl, U.EnumConstantDeclarationImpl, U.TypeParameterImpl, U.VariableDeclarationImpl]);
    _inheritMany(U.CompilationUnitMemberImpl, [U.NamedCompilationUnitMemberImpl, U.TopLevelVariableDeclarationImpl]);
    _inheritMany(U.NamedCompilationUnitMemberImpl, [U.ClassOrMixinDeclarationImpl, U.TypeAliasImpl, U.EnumDeclarationImpl, U.FunctionDeclarationImpl]);
    _inheritMany(U.ClassOrMixinDeclarationImpl, [U.ClassDeclarationImpl, U.MixinDeclarationImpl]);
    _inheritMany(U.TypeAliasImpl, [U.ClassTypeAliasImpl, U.FunctionTypeAliasImpl, U.GenericTypeAliasImpl]);
    _inheritMany(U.ClassMemberImpl, [U.ConstructorDeclarationImpl, U.FieldDeclarationImpl, U.MethodDeclarationImpl]);
    _inheritMany(U.IdentifierImpl, [U.SimpleIdentifierImpl, U.LibraryIdentifierImpl, U.PrefixedIdentifierImpl, X.SyntheticIdentifier]);
    _inheritMany(U.SimpleIdentifierImpl, [U.DeclaredSimpleIdentifier, U.EphemeralIdentifier]);
    _inheritMany(U.FormalParameterImpl, [U.DefaultFormalParameterImpl, U.NormalFormalParameterImpl]);
    _inheritMany(U.DirectiveImpl, [U.UriBasedDirectiveImpl, U.LibraryDirectiveImpl, U.PartOfDirectiveImpl]);
    _inheritMany(U.UriBasedDirectiveImpl, [U.NamespaceDirectiveImpl, U.PartDirectiveImpl]);
    _inheritMany(U.NamespaceDirectiveImpl, [U.ExportDirectiveImpl, U.ImportDirectiveImpl]);
    _inheritMany(U.NormalFormalParameterImpl, [U.FieldFormalParameterImpl, U.FunctionTypedFormalParameterImpl, U.SimpleFormalParameterImpl]);
    _inheritMany(U.ForLoopPartsImpl, [U.ForEachPartsImpl, U.ForPartsImpl]);
    _inheritMany(U.ForEachPartsImpl, [U.ForEachPartsWithDeclarationImpl, U.ForEachPartsWithIdentifierImpl]);
    _inherit(U.ForStatement2Impl, U._ForStatement2Impl_StatementImpl_ForMixin);
    _inheritMany(U.ForStatement2Impl, [U.ForEachStatementImpl, U.ForStatementImpl]);
    _inheritMany(U.CollectionElementImpl, [U._ForElementImpl_CollectionElementImpl_ForMixin, U._IfElementImpl_CollectionElementImpl_IfMixin, U.MapLiteralEntryImpl]);
    _inherit(U.ForElementImpl, U._ForElementImpl_CollectionElementImpl_ForMixin);
    _inheritMany(U.ForPartsImpl, [U.ForPartsWithDeclarationsImpl, U.ForPartsWithExpressionImpl]);
    _inheritMany(U.InvocationExpressionImpl, [U.FunctionExpressionInvocationImpl, U.MethodInvocationImpl]);
    _inheritMany(U.TypeAnnotationImpl, [U.GenericFunctionTypeImpl, U.TypeNameImpl]);
    _inheritMany(U.CombinatorImpl, [U.HideCombinatorImpl, U.ShowCombinatorImpl]);
    _inherit(U.IfElementImpl, U._IfElementImpl_CollectionElementImpl_IfMixin);
    _inherit(U.IfStatementImpl, U._IfStatementImpl_StatementImpl_IfMixin);
    _inheritMany(U.InterpolationElementImpl, [U.InterpolationExpressionImpl, U.InterpolationStringImpl]);
    _inheritMany(U.TypedLiteralImpl, [U.ListLiteral2Impl, U.ListLiteralImpl, U.SetOrMapLiteralImpl]);
    _inheritMany(U.SetOrMapLiteralImpl, [U.MapLiteral2Impl, U.MapLiteralImpl, U.SetLiteral2Impl, U.SetLiteralImpl]);
    _inherit(U.NodeListImpl, U._NodeListImpl_Object_ListMixin);
    _inheritMany(U.SingleStringLiteralImpl, [U.SimpleStringLiteralImpl, U.StringInterpolationImpl]);
    _inheritMany(U.SwitchMemberImpl, [U.SwitchCaseImpl, U.SwitchDefaultImpl]);
    _inherit(A.AstFactoryImpl, A.AstFactory);
    _inherit(A.AstCloner, A._AstCloner_Object_UIAsCodeVisitorMixin);
    _inherit(A.AstComparator, A._AstComparator_Object_UIAsCodeVisitorMixin);
    _inherit(A.ExceptionHandlingDelegatingAstVisitor, B.DelegatingAstVisitor);
    _inherit(A.IncrementalAstCloner, A._IncrementalAstCloner_Object_UIAsCodeVisitorMixin);
    _inherit(A.NodeReplacer, A._NodeReplacer_Object_UIAsCodeVisitorMixin);
    _inherit(A.ResolutionCopier, A._ResolutionCopier_Object_UIAsCodeVisitorMixin);
    _inherit(A.ToSourceVisitor, A._ToSourceVisitor_Object_UIAsCodeVisitorMixin);
    _inherit(A.ToSourceVisitor2, A._ToSourceVisitor2_Object_UIAsCodeVisitorMixin);
    _inherit(V._ConstantVerifier_validateInitializerExpression, S.ConstantVisitor);
    _inherit(S.ConstantEvaluationTarget, Z.AnalysisTarget);
    _inherit(A.ConstantAstCloner, A.AstCloner);
    _inheritMany(F.InstanceState, [F.BoolState, F.NumState, F.DynamicState, F.FunctionState, F.GenericState, F.ListState, F.MapState, F.NullState, F.SetState, F.StringState, F.SymbolState, F.TypeState]);
    _inheritMany(F.NumState, [F.DoubleState, F.IntState]);
    _inheritMany(R._BaseElementBuilder, [R.ApiElementBuilder, R.LocalElementBuilder]);
    _inheritMany(B.SimpleAstVisitor, [R.DirectiveElementBuilder, R._NamespaceCombinatorBuilder, X.ElementResolver, L.DirectiveResolver, S.StaticTypeAnalyzer, U._CombinatorEncoder]);
    _inherit(R.ElementBuilder, R.ApiElementBuilder);
    _inheritMany(G.ElementImpl, [G.AbstractClassElementImpl, G.UriReferencedElementImpl, G.VariableElementImpl, G._ExecutableElementImpl_ElementImpl_TypeParameterizedElementMixin, G.DynamicElementImpl, G._GenericFunctionTypeElementImpl_ElementImpl_TypeParameterizedElementMixin, G._GenericTypeAliasElementImpl_ElementImpl_TypeParameterizedElementMixin, G.LabelElementImpl, G.LibraryElementImpl, G.PrefixElementImpl, G.TypeParameterElementImpl, N.UnknownInferredTypeElement]);
    _inheritMany(G.AbstractClassElementImpl, [G._ClassElementImpl_AbstractClassElementImpl_TypeParameterizedElementMixin, G.EnumElementImpl]);
    _inherit(G._ClassElementImpl_AbstractClassElementImpl_TypeParameterizedElementMixin_SimplyBoundableMixin, G._ClassElementImpl_AbstractClassElementImpl_TypeParameterizedElementMixin);
    _inherit(G.ClassElementImpl, G._ClassElementImpl_AbstractClassElementImpl_TypeParameterizedElementMixin_SimplyBoundableMixin);
    _inheritMany(G.UriReferencedElementImpl, [G.CompilationUnitElementImpl, G.ExportElementImpl, G.ImportElementImpl]);
    _inheritMany(G.VariableElementImpl, [G.NonParameterVariableElementImpl, G._ParameterElementImpl_VariableElementImpl_ParameterElementMixin]);
    _inheritMany(G.NonParameterVariableElementImpl, [G.PropertyInducingElementImpl, G.LocalVariableElementImpl]);
    _inheritMany(G.PropertyInducingElementImpl, [G.FieldElementImpl, G.TopLevelVariableElementImpl]);
    _inherit(G._ConstFieldElementImpl_FieldElementImpl_ConstVariableElement, G.FieldElementImpl);
    _inherit(G.ConstFieldElementImpl, G._ConstFieldElementImpl_FieldElementImpl_ConstVariableElement);
    _inherit(G.ConstFieldElementImpl_ofEnum, G.ConstFieldElementImpl);
    _inheritMany(G.ConstFieldElementImpl_ofEnum, [G.ConstFieldElementImpl_EnumValue, G.ConstFieldElementImpl_EnumValues]);
    _inherit(G._ConstLocalVariableElementImpl_LocalVariableElementImpl_ConstVariableElement, G.LocalVariableElementImpl);
    _inherit(G.ConstLocalVariableElementImpl, G._ConstLocalVariableElementImpl_LocalVariableElementImpl_ConstVariableElement);
    _inherit(G.ExecutableElementImpl, G._ExecutableElementImpl_ElementImpl_TypeParameterizedElementMixin);
    _inheritMany(G.ExecutableElementImpl, [G.ConstructorElementImpl, G.FunctionElementImpl, G.MethodElementImpl, G.PropertyAccessorElementImpl]);
    _inherit(G._ConstTopLevelVariableElementImpl_TopLevelVariableElementImpl_ConstVariableElement, G.TopLevelVariableElementImpl);
    _inherit(G.ConstTopLevelVariableElementImpl, G._ConstTopLevelVariableElementImpl_TopLevelVariableElementImpl_ConstVariableElement);
    _inherit(G.ParameterElementImpl, G._ParameterElementImpl_VariableElementImpl_ParameterElementMixin);
    _inheritMany(G.ParameterElementImpl, [G.FieldFormalParameterElementImpl, G._DefaultParameterElementImpl_ParameterElementImpl_ConstVariableElement, G.ParameterElementImpl_ofImplicitSetter]);
    _inherit(G._DefaultFieldFormalParameterElementImpl_FieldFormalParameterElementImpl_ConstVariableElement, G.FieldFormalParameterElementImpl);
    _inherit(G.DefaultFieldFormalParameterElementImpl, G._DefaultFieldFormalParameterElementImpl_FieldFormalParameterElementImpl_ConstVariableElement);
    _inherit(G.DefaultParameterElementImpl, G._DefaultParameterElementImpl_ParameterElementImpl_ConstVariableElement);
    _inheritMany(G.FunctionElementImpl, [G.FunctionElementImpl_forFunctionTypedParameter, G.FunctionElementImpl_forLUB]);
    _inherit(G.GenericFunctionTypeElementImpl, G._GenericFunctionTypeElementImpl_ElementImpl_TypeParameterizedElementMixin);
    _inherit(G._GenericTypeAliasElementImpl_ElementImpl_TypeParameterizedElementMixin_SimplyBoundableMixin, G._GenericTypeAliasElementImpl_ElementImpl_TypeParameterizedElementMixin);
    _inherit(G.GenericTypeAliasElementImpl, G._GenericTypeAliasElementImpl_ElementImpl_TypeParameterizedElementMixin_SimplyBoundableMixin);
    _inherit(G.MixinElementImpl, G.ClassElementImpl);
    _inherit(G.MultiplyInheritedMethodElementImpl, G.MethodElementImpl);
    _inheritMany(G.PropertyAccessorElementImpl, [G.MultiplyInheritedPropertyAccessorElementImpl, G.PropertyAccessorElementImpl_ImplicitGetter, G.PropertyAccessorElementImpl_ImplicitSetter]);
    _inheritMany(K.ElementHandle, [K.ClassElementHandle, K.CompilationUnitElementHandle, K.ExecutableElementHandle, K.ExportElementHandle, K.VariableElementHandle, K.FunctionTypeAliasElementHandle, K.GenericTypeAliasElementHandle, K.ImportElementHandle, K.LabelElementHandle, K.LibraryElementHandle, K.PrefixElementHandle, K.TypeParameterElementHandle]);
    _inheritMany(K.ExecutableElementHandle, [K.ConstructorElementHandle, K.FunctionElementHandle, K.MethodElementHandle, K.PropertyAccessorElementHandle]);
    _inheritMany(K.VariableElementHandle, [K.PropertyInducingElementHandle, K.LocalVariableElementHandle, K._ParameterElementHandle_VariableElementHandle_ParameterElementMixin]);
    _inheritMany(K.PropertyInducingElementHandle, [K.FieldElementHandle, K.TopLevelVariableElementHandle]);
    _inherit(K.ParameterElementHandle, K._ParameterElementHandle_VariableElementHandle_ParameterElementMixin);
    _inheritMany(O.Member, [O.ExecutableMember, O.VariableMember, O.TypeParameterMember]);
    _inheritMany(O.ExecutableMember, [O.ConstructorMember, O.FunctionMember, O.MethodMember, O.PropertyAccessorMember]);
    _inheritMany(O.VariableMember, [O._ParameterMember_VariableMember_ParameterElementMixin, O.FieldMember]);
    _inherit(O.ParameterMember, O._ParameterMember_VariableMember_ParameterElementMixin);
    _inherit(O.FieldFormalParameterMember, O.ParameterMember);
    _inheritMany(F.TypeImpl0, [F.BottomTypeImpl, F.DynamicTypeImpl, F.FunctionTypeImpl, F.InterfaceTypeImpl, F.TypeParameterTypeImpl, F.UndefinedTypeImpl, F.VoidTypeImpl, N.UnknownInferredType]);
    _inheritMany(F.DynamicTypeImpl, [F.CircularFunctionTypeImpl, F.CircularTypeImpl]);
    _inheritMany(F.FunctionTypeImpl, [F._FunctionTypeImplLazy, F._FunctionTypeImplStrict]);
    _inherit(F.DeferredFunctionTypeImpl, F._FunctionTypeImplLazy);
    _inheritMany(S.Scope, [S.EnclosedScope, S.LibraryImportScope]);
    _inheritMany(S.EnclosedScope, [S.BlockScope, S.ClassScope, S.ConstructorInitializerScope, S.FunctionScope, S.FunctionTypeScope, S.LibraryScope, S.TypeParameterScope]);
    _inherit(D.CharacterRangeReader, D.CharacterReader);
    _inheritMany(E.AbstractDartSdk, [E.EmbedderSdk, E.FolderBasedDartSdk]);
    _inheritMany(F.Listener, [R.StackListener, E.ErrorCollectingListener, D.ErrorDelegationListener]);
    _inherit(G.AstBuilder, R.StackListener);
    _inheritMany(Z.UriResolver, [E.ResourceUriResolver, Z.CustomUriResolver, Z.DartUriResolver, X.ExplicitSourceResolver, X.FileUriResolver, X.PackageUriResolver, X.RelativeFileUriResolver, D.PackageMapUriResolver, E.InSummaryPackageUriResolver, E.InSummaryUriResolver, V.BazelPackageUriResolver, G.PackageBuildPackageUriResolver]);
    _inherit(F.PrintStringWriter, F.PrintWriter);
    _inherit(X._Parser2, X.ParserAdapter);
    _inheritMany(L.ScopedVisitor, [L.AstRewriteVisitor, L.ResolverVisitor, L.TypeResolverVisitor, L.VariableResolverVisitor]);
    _inheritMany(L.ResolverVisitor, [L.InstanceFieldResolverVisitor, L.PartialResolverVisitor]);
    _inheritMany(L.TypeProviderBase, [L.TypeProviderImpl, D.TypeProviderForLink, E.SummaryTypeProvider]);
    _inheritMany(Z.Source, [Z.BasicSource, Z.NonExistingSource, X.FileBasedSource, B.FileSource, K.StringSource]);
    _inherit(N.Dart2TypeSystem, N.TypeSystem0);
    _inherit(N._TypeConstraint, N._TypeRange);
    _inheritMany(N._TypeConstraintOrigin, [N._TypeConstraintFromArgument, N._TypeConstraintFromExtendsClause, N._TypeConstraintFromFunctionContext, N._TypeConstraintFromReturnType]);
    _inherit(K.LimitedQueue, P.ListQueue);
    _inherit(B.StdLogger, O.Logger);
    _inherit(T._RuleConfig, T.RuleConfig);
    _inherit(F.FileGlobFilter, F.LintFilter);
    _inherit(F.LinterOptions, B.DriverOptions);
    _inherit(F.LintRule, A.Linter);
    _inherit(F.NodeLintRuleWithContext, F.NodeLintRule);
    _inherit(F._LintCode, X.LintCode);
    _inheritMany(B.OptionsValidator, [X.LinterRuleOptionsValidator, B.CompositeValidator, B.EnabledExperimentsValidator, B.ErrorFilterOptionValidator, B.LanguageOptionValidator, B.TopLevelOptionValidator, B.StrongModeOptionValueValidator]);
    _inherit(B.PSDependencyList, B._PSDependencyList_Object_IterableMixin);
    _inherit(B.PSNodeList, B._PSNodeList_Object_IterableMixin);
    _inherit(B._PSDependency, B.PSDependency);
    _inherit(B._PSDependencyList, B.PSDependencyList);
    _inherit(B._PSNodeList, B.PSNodeList);
    _inherit(E.Registry, E._Registry_Object_IterableMixin);
    _inheritMany(Q.Reader, [Q.BoolListReader, Q.BoolReader, Q.Float64ListReader, Q.Int32Reader, Q.Int8Reader, Q.ListReader, Q.StringReader, Q.TableReader, Q.Uint32ListReader, Q.Uint32Reader, Q.Uint8ListReader, Q.Uint8Reader, Q.Float64Reader, X._AvailableDeclarationKindReader, X._EntityRefKindReader, X._IndexNameKindReader, X._IndexRelationKindReader, X._IndexSyntheticElementKindReader, X._LinkedNodeCommentTypeReader, X._LinkedNodeFormalParameterKindReader, X._LinkedNodeKindReader, X._LinkedNodeTypeKindReader, X._ReferenceKindReader, X._TopLevelInferenceErrorKindReader, X._TypedefStyleReader, X._UnlinkedConstructorInitializerKindReader, X._UnlinkedExecutableKindReader, X._UnlinkedExprAssignOperatorReader, X._UnlinkedExprOperationReader, X._UnlinkedParamKindReader, X._UnlinkedTokenKindReader, X._UnlinkedTokenTypeReader]);
    _inherit(Q._FbBoolList, Q.__FbBoolList_Object_ListMixin);
    _inherit(Q._FbList, Q.__FbList_Object_ListMixin);
    _inheritMany(Q._FbList, [Q._FbFloat64List, Q._FbGenericList, Q._FbUint32List, Q._FbUint8List]);
    _inherit(X.AnalysisDriverExceptionContextBuilder, X._AnalysisDriverExceptionContextBuilder_Object__AnalysisDriverExceptionContextMixin);
    _inheritMany(Q.TableReader, [X._AnalysisDriverExceptionContextReader, X._AnalysisDriverExceptionFileReader, X._AnalysisDriverResolvedUnitReader, X._AnalysisDriverSubtypeReader, X._AnalysisDriverUnitErrorReader, X._AnalysisDriverUnitIndexReader, X._AnalysisDriverUnlinkedUnitReader, X._AvailableDeclarationReader, X._AvailableFileReader, X._AvailableFileExportReader, X._AvailableFileExportCombinatorReader, X._CodeRangeReader, X._EntityRefReader, X._LinkedDependencyReader, X._LinkedExportNameReader, X._LinkedLibraryReader, X._LinkedNodeReader, X._LinkedNodeBundleReader, X._LinkedNodeLibraryReader, X._LinkedNodeReferencesReader, X._LinkedNodeTypeReader, X._LinkedNodeUnitReader, X._LinkedNodeVariablesDeclarationReader, X._LinkedReferenceReader, X._LinkedUnitReader, X._PackageBundleReader, X._PackageIndexReader, X._TopLevelInferenceErrorReader, X._UnitIndexReader, X._UnlinkedClassReader, X._UnlinkedCombinatorReader, X._UnlinkedConfigurationReader, X._UnlinkedConstructorInitializerReader, X._UnlinkedDocumentationCommentReader, X._UnlinkedEnumReader, X._UnlinkedEnumValueReader, X._UnlinkedExecutableReader, X._UnlinkedExportNonPublicReader, X._UnlinkedExportPublicReader, X._UnlinkedExprReader, X._UnlinkedImportReader, X._UnlinkedParamReader, X._UnlinkedPartReader, X._UnlinkedPublicNameReader, X._UnlinkedPublicNamespaceReader, X._UnlinkedReferenceReader, X._UnlinkedTokensReader, X._UnlinkedTypedefReader, X._UnlinkedTypeParamReader, X._UnlinkedUnitReader, X._UnlinkedVariableReader]);
    _inherit(X._AnalysisDriverExceptionContextImpl, X.__AnalysisDriverExceptionContextImpl_Object__AnalysisDriverExceptionContextMixin);
    _inherit(X.AnalysisDriverExceptionFileBuilder, X._AnalysisDriverExceptionFileBuilder_Object__AnalysisDriverExceptionFileMixin);
    _inherit(X._AnalysisDriverExceptionFileImpl, X.__AnalysisDriverExceptionFileImpl_Object__AnalysisDriverExceptionFileMixin);
    _inherit(X.AnalysisDriverResolvedUnitBuilder, X._AnalysisDriverResolvedUnitBuilder_Object__AnalysisDriverResolvedUnitMixin);
    _inherit(X._AnalysisDriverResolvedUnitImpl, X.__AnalysisDriverResolvedUnitImpl_Object__AnalysisDriverResolvedUnitMixin);
    _inherit(X.AnalysisDriverSubtypeBuilder, X._AnalysisDriverSubtypeBuilder_Object__AnalysisDriverSubtypeMixin);
    _inherit(X._AnalysisDriverSubtypeImpl, X.__AnalysisDriverSubtypeImpl_Object__AnalysisDriverSubtypeMixin);
    _inherit(X.AnalysisDriverUnitErrorBuilder, X._AnalysisDriverUnitErrorBuilder_Object__AnalysisDriverUnitErrorMixin);
    _inherit(X._AnalysisDriverUnitErrorImpl, X.__AnalysisDriverUnitErrorImpl_Object__AnalysisDriverUnitErrorMixin);
    _inherit(X.AnalysisDriverUnitIndexBuilder, X._AnalysisDriverUnitIndexBuilder_Object__AnalysisDriverUnitIndexMixin);
    _inherit(X._AnalysisDriverUnitIndexImpl, X.__AnalysisDriverUnitIndexImpl_Object__AnalysisDriverUnitIndexMixin);
    _inherit(X.AnalysisDriverUnlinkedUnitBuilder, X._AnalysisDriverUnlinkedUnitBuilder_Object__AnalysisDriverUnlinkedUnitMixin);
    _inherit(X._AnalysisDriverUnlinkedUnitImpl, X.__AnalysisDriverUnlinkedUnitImpl_Object__AnalysisDriverUnlinkedUnitMixin);
    _inherit(X.AvailableDeclarationBuilder, X._AvailableDeclarationBuilder_Object__AvailableDeclarationMixin);
    _inherit(X._AvailableDeclarationImpl, X.__AvailableDeclarationImpl_Object__AvailableDeclarationMixin);
    _inherit(X.AvailableFileBuilder, X._AvailableFileBuilder_Object__AvailableFileMixin);
    _inherit(X._AvailableFileImpl, X.__AvailableFileImpl_Object__AvailableFileMixin);
    _inherit(X.AvailableFileExportBuilder, X._AvailableFileExportBuilder_Object__AvailableFileExportMixin);
    _inherit(X._AvailableFileExportImpl, X.__AvailableFileExportImpl_Object__AvailableFileExportMixin);
    _inherit(X.AvailableFileExportCombinatorBuilder, X._AvailableFileExportCombinatorBuilder_Object__AvailableFileExportCombinatorMixin);
    _inherit(X._AvailableFileExportCombinatorImpl, X.__AvailableFileExportCombinatorImpl_Object__AvailableFileExportCombinatorMixin);
    _inherit(X.CodeRangeBuilder, X._CodeRangeBuilder_Object__CodeRangeMixin);
    _inherit(X._CodeRangeImpl, X.__CodeRangeImpl_Object__CodeRangeMixin);
    _inherit(X.EntityRefBuilder, X._EntityRefBuilder_Object__EntityRefMixin);
    _inherit(X._EntityRefImpl, X.__EntityRefImpl_Object__EntityRefMixin);
    _inherit(X.LinkedDependencyBuilder, X._LinkedDependencyBuilder_Object__LinkedDependencyMixin);
    _inherit(X._LinkedDependencyImpl, X.__LinkedDependencyImpl_Object__LinkedDependencyMixin);
    _inherit(X.LinkedExportNameBuilder, X._LinkedExportNameBuilder_Object__LinkedExportNameMixin);
    _inherit(X._LinkedExportNameImpl, X.__LinkedExportNameImpl_Object__LinkedExportNameMixin);
    _inherit(X.LinkedLibraryBuilder, X._LinkedLibraryBuilder_Object__LinkedLibraryMixin);
    _inherit(X._LinkedLibraryImpl, X.__LinkedLibraryImpl_Object__LinkedLibraryMixin);
    _inherit(X.LinkedNodeBuilder, X._LinkedNodeBuilder_Object__LinkedNodeMixin);
    _inherit(X._LinkedNodeImpl, X.__LinkedNodeImpl_Object__LinkedNodeMixin);
    _inherit(X.LinkedNodeBundleBuilder, X._LinkedNodeBundleBuilder_Object__LinkedNodeBundleMixin);
    _inherit(X._LinkedNodeBundleImpl, X.__LinkedNodeBundleImpl_Object__LinkedNodeBundleMixin);
    _inherit(X.LinkedNodeLibraryBuilder, X._LinkedNodeLibraryBuilder_Object__LinkedNodeLibraryMixin);
    _inherit(X._LinkedNodeLibraryImpl, X.__LinkedNodeLibraryImpl_Object__LinkedNodeLibraryMixin);
    _inherit(X.LinkedNodeReferencesBuilder, X._LinkedNodeReferencesBuilder_Object__LinkedNodeReferencesMixin);
    _inherit(X._LinkedNodeReferencesImpl, X.__LinkedNodeReferencesImpl_Object__LinkedNodeReferencesMixin);
    _inherit(X.LinkedNodeTypeBuilder, X._LinkedNodeTypeBuilder_Object__LinkedNodeTypeMixin);
    _inherit(X._LinkedNodeTypeImpl, X.__LinkedNodeTypeImpl_Object__LinkedNodeTypeMixin);
    _inherit(X.LinkedNodeUnitBuilder, X._LinkedNodeUnitBuilder_Object__LinkedNodeUnitMixin);
    _inherit(X._LinkedNodeUnitImpl, X.__LinkedNodeUnitImpl_Object__LinkedNodeUnitMixin);
    _inherit(X.LinkedNodeVariablesDeclarationBuilder, X._LinkedNodeVariablesDeclarationBuilder_Object__LinkedNodeVariablesDeclarationMixin);
    _inherit(X._LinkedNodeVariablesDeclarationImpl, X.__LinkedNodeVariablesDeclarationImpl_Object__LinkedNodeVariablesDeclarationMixin);
    _inherit(X.LinkedReferenceBuilder, X._LinkedReferenceBuilder_Object__LinkedReferenceMixin);
    _inherit(X._LinkedReferenceImpl, X.__LinkedReferenceImpl_Object__LinkedReferenceMixin);
    _inherit(X.LinkedUnitBuilder, X._LinkedUnitBuilder_Object__LinkedUnitMixin);
    _inherit(X._LinkedUnitImpl, X.__LinkedUnitImpl_Object__LinkedUnitMixin);
    _inherit(X.PackageBundleBuilder, X._PackageBundleBuilder_Object__PackageBundleMixin);
    _inherit(X._PackageBundleImpl, X.__PackageBundleImpl_Object__PackageBundleMixin);
    _inherit(X.PackageIndexBuilder, X._PackageIndexBuilder_Object__PackageIndexMixin);
    _inherit(X._PackageIndexImpl, X.__PackageIndexImpl_Object__PackageIndexMixin);
    _inherit(X.TopLevelInferenceErrorBuilder, X._TopLevelInferenceErrorBuilder_Object__TopLevelInferenceErrorMixin);
    _inherit(X._TopLevelInferenceErrorImpl, X.__TopLevelInferenceErrorImpl_Object__TopLevelInferenceErrorMixin);
    _inherit(X.UnitIndexBuilder, X._UnitIndexBuilder_Object__UnitIndexMixin);
    _inherit(X._UnitIndexImpl, X.__UnitIndexImpl_Object__UnitIndexMixin);
    _inherit(X.UnlinkedClassBuilder, X._UnlinkedClassBuilder_Object__UnlinkedClassMixin);
    _inherit(X._UnlinkedClassImpl, X.__UnlinkedClassImpl_Object__UnlinkedClassMixin);
    _inherit(X.UnlinkedCombinatorBuilder, X._UnlinkedCombinatorBuilder_Object__UnlinkedCombinatorMixin);
    _inherit(X._UnlinkedCombinatorImpl, X.__UnlinkedCombinatorImpl_Object__UnlinkedCombinatorMixin);
    _inherit(X.UnlinkedConfigurationBuilder, X._UnlinkedConfigurationBuilder_Object__UnlinkedConfigurationMixin);
    _inherit(X._UnlinkedConfigurationImpl, X.__UnlinkedConfigurationImpl_Object__UnlinkedConfigurationMixin);
    _inherit(X.UnlinkedConstructorInitializerBuilder, X._UnlinkedConstructorInitializerBuilder_Object__UnlinkedConstructorInitializerMixin);
    _inherit(X._UnlinkedConstructorInitializerImpl, X.__UnlinkedConstructorInitializerImpl_Object__UnlinkedConstructorInitializerMixin);
    _inherit(X.UnlinkedDocumentationCommentBuilder, X._UnlinkedDocumentationCommentBuilder_Object__UnlinkedDocumentationCommentMixin);
    _inherit(X._UnlinkedDocumentationCommentImpl, X.__UnlinkedDocumentationCommentImpl_Object__UnlinkedDocumentationCommentMixin);
    _inherit(X.UnlinkedEnumBuilder, X._UnlinkedEnumBuilder_Object__UnlinkedEnumMixin);
    _inherit(X._UnlinkedEnumImpl, X.__UnlinkedEnumImpl_Object__UnlinkedEnumMixin);
    _inherit(X.UnlinkedEnumValueBuilder, X._UnlinkedEnumValueBuilder_Object__UnlinkedEnumValueMixin);
    _inherit(X._UnlinkedEnumValueImpl, X.__UnlinkedEnumValueImpl_Object__UnlinkedEnumValueMixin);
    _inherit(X.UnlinkedExecutableBuilder, X._UnlinkedExecutableBuilder_Object__UnlinkedExecutableMixin);
    _inherit(X._UnlinkedExecutableImpl, X.__UnlinkedExecutableImpl_Object__UnlinkedExecutableMixin);
    _inherit(X.UnlinkedExportNonPublicBuilder, X._UnlinkedExportNonPublicBuilder_Object__UnlinkedExportNonPublicMixin);
    _inherit(X._UnlinkedExportNonPublicImpl, X.__UnlinkedExportNonPublicImpl_Object__UnlinkedExportNonPublicMixin);
    _inherit(X.UnlinkedExportPublicBuilder, X._UnlinkedExportPublicBuilder_Object__UnlinkedExportPublicMixin);
    _inherit(X._UnlinkedExportPublicImpl, X.__UnlinkedExportPublicImpl_Object__UnlinkedExportPublicMixin);
    _inherit(X.UnlinkedExprBuilder, X._UnlinkedExprBuilder_Object__UnlinkedExprMixin);
    _inherit(X._UnlinkedExprImpl, X.__UnlinkedExprImpl_Object__UnlinkedExprMixin);
    _inherit(X.UnlinkedImportBuilder, X._UnlinkedImportBuilder_Object__UnlinkedImportMixin);
    _inherit(X._UnlinkedImportImpl, X.__UnlinkedImportImpl_Object__UnlinkedImportMixin);
    _inherit(X.UnlinkedParamBuilder, X._UnlinkedParamBuilder_Object__UnlinkedParamMixin);
    _inherit(X._UnlinkedParamImpl, X.__UnlinkedParamImpl_Object__UnlinkedParamMixin);
    _inherit(X.UnlinkedPartBuilder, X._UnlinkedPartBuilder_Object__UnlinkedPartMixin);
    _inherit(X._UnlinkedPartImpl, X.__UnlinkedPartImpl_Object__UnlinkedPartMixin);
    _inherit(X.UnlinkedPublicNameBuilder, X._UnlinkedPublicNameBuilder_Object__UnlinkedPublicNameMixin);
    _inherit(X._UnlinkedPublicNameImpl, X.__UnlinkedPublicNameImpl_Object__UnlinkedPublicNameMixin);
    _inherit(X.UnlinkedPublicNamespaceBuilder, X._UnlinkedPublicNamespaceBuilder_Object__UnlinkedPublicNamespaceMixin);
    _inherit(X._UnlinkedPublicNamespaceImpl, X.__UnlinkedPublicNamespaceImpl_Object__UnlinkedPublicNamespaceMixin);
    _inherit(X.UnlinkedReferenceBuilder, X._UnlinkedReferenceBuilder_Object__UnlinkedReferenceMixin);
    _inherit(X._UnlinkedReferenceImpl, X.__UnlinkedReferenceImpl_Object__UnlinkedReferenceMixin);
    _inherit(X.UnlinkedTokensBuilder, X._UnlinkedTokensBuilder_Object__UnlinkedTokensMixin);
    _inherit(X._UnlinkedTokensImpl, X.__UnlinkedTokensImpl_Object__UnlinkedTokensMixin);
    _inherit(X.UnlinkedTypedefBuilder, X._UnlinkedTypedefBuilder_Object__UnlinkedTypedefMixin);
    _inherit(X._UnlinkedTypedefImpl, X.__UnlinkedTypedefImpl_Object__UnlinkedTypedefMixin);
    _inherit(X.UnlinkedTypeParamBuilder, X._UnlinkedTypeParamBuilder_Object__UnlinkedTypeParamMixin);
    _inherit(X._UnlinkedTypeParamImpl, X.__UnlinkedTypeParamImpl_Object__UnlinkedTypeParamMixin);
    _inherit(X.UnlinkedUnitBuilder, X._UnlinkedUnitBuilder_Object__UnlinkedUnitMixin);
    _inherit(X._UnlinkedUnitImpl, X.__UnlinkedUnitImpl_Object__UnlinkedUnitMixin);
    _inherit(X.UnlinkedVariableBuilder, X._UnlinkedVariableBuilder_Object__UnlinkedVariableMixin);
    _inherit(X._UnlinkedVariableImpl, X.__UnlinkedVariableImpl_Object__UnlinkedVariableMixin);
    _inheritMany(V.SummaryClass, [B.AnalysisDriverExceptionContext, B.AnalysisDriverExceptionFile, B.AnalysisDriverResolvedUnit, B.AnalysisDriverSubtype, B.AnalysisDriverUnitError, B.AnalysisDriverUnitIndex, B.AnalysisDriverUnlinkedUnit, B.AvailableDeclaration, B.AvailableFile, B.AvailableFileExport, B.AvailableFileExportCombinator, B.CodeRange, B.EntityRef, B.LinkedDependency, B.LinkedExportName, B.LinkedLibrary, B.LinkedNode, B.LinkedNodeBundle, B.LinkedNodeLibrary, B.LinkedNodeReferences, B.LinkedNodeType, B.LinkedNodeUnit, B.LinkedNodeVariablesDeclaration, B.LinkedReference, B.LinkedUnit, B.PackageBundle, B.PackageDependencyInfo, B.PackageIndex, B.TopLevelInferenceError, B.UnitIndex, B.UnlinkedClass, B.UnlinkedCombinator, B.UnlinkedConfiguration, B.UnlinkedConstructorInitializer, B.UnlinkedDocumentationComment, B.UnlinkedEnum, B.UnlinkedEnumValue, B.UnlinkedExecutable, B.UnlinkedExportNonPublic, B.UnlinkedExportPublic, B.UnlinkedExpr, B.UnlinkedImport, B.UnlinkedParam, B.UnlinkedPart, B.UnlinkedPublicName, B.UnlinkedPublicNamespace, B.UnlinkedReference, B.UnlinkedTokens, B.UnlinkedTypedef, B.UnlinkedTypeParam, B.UnlinkedUnit, B.UnlinkedVariable]);
    _inherit(D.ClassElementForLink, D._ClassElementForLink_Object_ReferenceableElementForLink);
    _inheritMany(D.ClassElementForLink, [D._ClassElementForLink_Class_ClassElementForLink_TypeParameterizedElementMixin, D.ClassElementForLink_Enum]);
    _inherit(D._ClassElementForLink_Class_ClassElementForLink_TypeParameterizedElementMixin_SimplyBoundableForLinkMixin, D._ClassElementForLink_Class_ClassElementForLink_TypeParameterizedElementMixin);
    _inherit(D.ClassElementForLink_Class, D._ClassElementForLink_Class_ClassElementForLink_TypeParameterizedElementMixin_SimplyBoundableForLinkMixin);
    _inheritMany(D.CompilationUnitElementForLink, [D.CompilationUnitElementInBuildUnit, D.CompilationUnitElementInDependency]);
    _inheritMany(D.ConstNode, [D.ConstConstructorNode, D.ConstParameterNode, D.ConstVariableNode]);
    _inherit(D._ExecutableElementForLink_Object_TypeParameterizedElementMixin_ParameterParentElementForLink, D._ExecutableElementForLink_Object_TypeParameterizedElementMixin);
    _inherit(D.ExecutableElementForLink, D._ExecutableElementForLink_Object_TypeParameterizedElementMixin_ParameterParentElementForLink);
    _inheritMany(D.ExecutableElementForLink, [D.ExecutableElementForLink_NonLocal, D._FunctionElementForLink_Local_NonSynthetic_ExecutableElementForLink_ReferenceableElementForLink, D._FunctionElementForLink_Synthetic_ExecutableElementForLink_ReferenceableElementForLink]);
    _inheritMany(D.ExecutableElementForLink_NonLocal, [D._ConstructorElementForLink_ExecutableElementForLink_NonLocal_ReferenceableElementForLink, D._MethodElementForLink_ExecutableElementForLink_NonLocal_ReferenceableElementForLink, D._PropertyAccessorElementForLink_Executable_ExecutableElementForLink_NonLocal_ReferenceableElementForLink, D._TopLevelFunctionElementForLink_ExecutableElementForLink_NonLocal_ReferenceableElementForLink]);
    _inherit(D.ConstructorElementForLink, D._ConstructorElementForLink_ExecutableElementForLink_NonLocal_ReferenceableElementForLink);
    _inherit(D.ConstructorElementForLink_Synthetic, D.ConstructorElementForLink);
    _inheritMany(D.VariableElementForLink, [D.FieldElementForLink_ClassField, D.TopLevelVariableElementForLink]);
    _inherit(D.FieldElementForLink_EnumField, D.FieldElementForLink);
    _inheritMany(D.FieldElementForLink_EnumField, [D.FieldElementForLink_EnumField_index, D.FieldElementForLink_EnumField_value, D.FieldElementForLink_EnumField_values]);
    _inherit(D.FieldFormalParameterElementForLink, D.ParameterElementForLink);
    _inherit(D.FunctionElementForLink_FunctionTypedParam, D._FunctionElementForLink_FunctionTypedParam_Object_ParameterParentElementForLink);
    _inherit(D._FunctionElementForLink_Initializer_Object_ReferenceableElementForLink_TypeParameterizedElementMixin, D._FunctionElementForLink_Initializer_Object_ReferenceableElementForLink);
    _inherit(D.FunctionElementForLink_Initializer, D._FunctionElementForLink_Initializer_Object_ReferenceableElementForLink_TypeParameterizedElementMixin);
    _inherit(D.FunctionElementForLink_Local_NonSynthetic, D._FunctionElementForLink_Local_NonSynthetic_ExecutableElementForLink_ReferenceableElementForLink);
    _inherit(D.FunctionElementForLink_Synthetic, D._FunctionElementForLink_Synthetic_ExecutableElementForLink_ReferenceableElementForLink);
    _inherit(D._FunctionTypeAliasElementForLink_Object_TypeParameterizedElementMixin_ParameterParentElementForLink, D._FunctionTypeAliasElementForLink_Object_TypeParameterizedElementMixin);
    _inherit(D._FunctionTypeAliasElementForLink_Object_TypeParameterizedElementMixin_ParameterParentElementForLink_ReferenceableElementForLink, D._FunctionTypeAliasElementForLink_Object_TypeParameterizedElementMixin_ParameterParentElementForLink);
    _inherit(D._FunctionTypeAliasElementForLink_Object_TypeParameterizedElementMixin_ParameterParentElementForLink_ReferenceableElementForLink_SimplyBoundableForLinkMixin, D._FunctionTypeAliasElementForLink_Object_TypeParameterizedElementMixin_ParameterParentElementForLink_ReferenceableElementForLink);
    _inherit(D.FunctionTypeAliasElementForLink, D._FunctionTypeAliasElementForLink_Object_TypeParameterizedElementMixin_ParameterParentElementForLink_ReferenceableElementForLink_SimplyBoundableForLinkMixin);
    _inherit(D._GenericFunctionTypeElementForLink_Object_TypeParameterizedElementMixin_ParameterParentElementForLink, D._GenericFunctionTypeElementForLink_Object_TypeParameterizedElementMixin);
    _inherit(D._GenericFunctionTypeElementForLink_Object_TypeParameterizedElementMixin_ParameterParentElementForLink_ReferenceableElementForLink, D._GenericFunctionTypeElementForLink_Object_TypeParameterizedElementMixin_ParameterParentElementForLink);
    _inherit(D.GenericFunctionTypeElementForLink, D._GenericFunctionTypeElementForLink_Object_TypeParameterizedElementMixin_ParameterParentElementForLink_ReferenceableElementForLink);
    _inherit(D._GenericTypeAliasElementForLink_Object_TypeParameterizedElementMixin_ParameterParentElementForLink, D._GenericTypeAliasElementForLink_Object_TypeParameterizedElementMixin);
    _inherit(D._GenericTypeAliasElementForLink_Object_TypeParameterizedElementMixin_ParameterParentElementForLink_ReferenceableElementForLink, D._GenericTypeAliasElementForLink_Object_TypeParameterizedElementMixin_ParameterParentElementForLink);
    _inherit(D._GenericTypeAliasElementForLink_Object_TypeParameterizedElementMixin_ParameterParentElementForLink_ReferenceableElementForLink_SimplyBoundableForLinkMixin, D._GenericTypeAliasElementForLink_Object_TypeParameterizedElementMixin_ParameterParentElementForLink_ReferenceableElementForLink);
    _inherit(D.GenericTypeAliasElementForLink, D._GenericTypeAliasElementForLink_Object_TypeParameterizedElementMixin_ParameterParentElementForLink_ReferenceableElementForLink_SimplyBoundableForLinkMixin);
    _inheritMany(N.LibraryResynthesizerContextMixin, [D.LibraryElementForLink, N._LibraryResynthesizerContext]);
    _inheritMany(D.LibraryElementForLink, [D.LibraryElementInBuildUnit, D.LibraryElementInDependency]);
    _inherit(D.MethodElementForLink, D._MethodElementForLink_ExecutableElementForLink_NonLocal_ReferenceableElementForLink);
    _inherit(D.NonstaticMemberElementForLink, D._NonstaticMemberElementForLink_Object_ReferenceableElementForLink);
    _inherit(D.PropertyAccessorElementForLink_EnumField, D._PropertyAccessorElementForLink_EnumField_Object_ReferenceableElementForLink);
    _inherit(D.PropertyAccessorElementForLink_Executable, D._PropertyAccessorElementForLink_Executable_ExecutableElementForLink_NonLocal_ReferenceableElementForLink);
    _inherit(D.PropertyAccessorElementForLink_Variable, D._PropertyAccessorElementForLink_Variable_Object_ReferenceableElementForLink);
    _inherit(D.SpecialTypeElementForLink, D._SpecialTypeElementForLink_Object_ReferenceableElementForLink);
    _inherit(D.TopLevelFunctionElementForLink, D._TopLevelFunctionElementForLink_ExecutableElementForLink_NonLocal_ReferenceableElementForLink);
    _inherit(D.UndefinedElementForLink, D._UndefinedElementForLink_Object_ReferenceableElementForLink);
    _inheritMany(N.LibraryResynthesizerMixin, [D._LibraryResynthesizer, N._LibraryResynthesizer0]);
    _inheritMany(N.ReferenceInfo, [D._ReferenceInfo, N._ReferenceInfo0]);
    _inheritMany(N.UnitResynthesizer, [D.__UnitResynthesizer_UnitResynthesizer_UnitResynthesizerMixin, N.__UnitResynthesizer_UnitResynthesizer_UnitResynthesizerMixin0]);
    _inherit(D._UnitResynthesizer, D.__UnitResynthesizer_UnitResynthesizer_UnitResynthesizerMixin);
    _inherit(E.ResynthesizerResultProvider, M.ResultProvider);
    _inherit(E.InputPackagesResultProvider, E.ResynthesizerResultProvider);
    _inherit(E.InSummarySource, Z.BasicSource);
    _inherit(N.SummaryResynthesizer, K.ElementResynthesizer);
    _inherit(E.StoreBasedSummaryResynthesizer, N.SummaryResynthesizer);
    _inheritMany(M._Meaning, [M._ClassMeaning, M._PrefixMeaning]);
    _inherit(N._DeferredInitializerElement, K.FunctionElementHandle);
    _inherit(N._UnitResynthesizer0, N.__UnitResynthesizer_UnitResynthesizer_UnitResynthesizerMixin0);
    _inherit(U._ConstExprSerializer, F.AbstractConstExprSerializer);
    _inheritMany(U._ScopedEntity, [U._ScopedClassMember, U._ScopedTypeParameter]);
    _inherit(U._TypeParameterScope, U._Scope);
    _inheritMany(Z.AnalysisTask, [R.SourceBasedAnalysisTask, O.ConstantEvaluationAnalysisTask]);
    _inheritMany(R.SourceBasedAnalysisTask, [O.BuildCompilationUnitElementTask, O.BuildDirectiveElementsTask, O.BuildEnumMemberElementsTask, O.BuildExportNamespaceTask, O.BuildLibraryElementTask, O.BuildPublicNamespaceTask, O.BuildSourceExportClosureTask, O.BuildTypeProviderTask, O.ComputeLibraryCycleTask, O.ComputeRequiredConstantsTask, O.ContainingLibrariesTask, O.DartErrorsTask, O.EvaluateUnitConstantsTask, O.GatherUsedImportedElementsTask, O.GatherUsedLocalElementsTask, O.GenerateHintsTask, O.GenerateLintsTask, O.InferInstanceMembersInUnitTask, O.InferStaticVariableTypesInUnitTask, O.LibraryErrorsReadyTask, O.LibraryUnitErrorsTask, O.ParseDartTask, O.PartiallyResolveUnitReferencesTask, O.ReadyLibraryElement2Task, O.ReadyLibraryElement5Task, O.ReadyLibraryElement7Task, O.ReadyResolvedUnitTask, O.ResolveDirectiveElementsTask, O.ResolvedUnit7InLibraryClosureTask, O.ResolvedUnit7InLibraryTask, O.ResolveInstanceFieldsInUnitTask, O.ResolveLibraryReferencesTask, O.ResolveLibraryTask, O.ResolveLibraryTypeNamesTask, O.ResolveTopLevelLibraryTypeBoundsTask, O.ResolveTopLevelUnitTypeBoundsTask, O.ResolveUnitTask, O.ResolveUnitTypeNamesTask, O.ResolveVariableReferencesTask, O.ScanDartTask, O.StrongModeVerifyUnitTask, O.VerifyUnitTask, R.GetContentTask, B.GenerateOptionsErrorsTask]);
    _inheritMany(O.ConstantEvaluationAnalysisTask, [O.ComputeConstantDependenciesTask, O.ComputeConstantValueTask, O.InferStaticVariableTask, O.ResolveConstantExpressionTask]);
    _inheritMany(O.InferStaticVariableTask, [O.ComputeInferableStaticVariableDependenciesTask, O.InferStaticVariableTypeTask]);
    _inheritMany(V.TaskInputImpl, [O._ExportSourceClosureTaskInput, V.ConstantTaskInput, V.SimpleTaskInput, V._ListToCollectionTaskInput, V.MapToFlattenListTaskInput, V._ObjectToListTaskInput_TaskInputImpl_ListTaskInputMixin]);
    _inherit(L._WorkOrderDependencyWalker, L.CycleAwareDependencyWalker);
    _inherit(V._ListTaskInputImpl_SimpleTaskInput_ListTaskInputMixin, V.SimpleTaskInput);
    _inherit(V.ListTaskInputImpl, V._ListTaskInputImpl_SimpleTaskInput_ListTaskInputMixin);
    _inheritMany(V._ListToCollectionTaskInput, [V._ListToFlattenListTaskInput__ListToCollectionTaskInput_ListTaskInputMixin, V._ListToListTaskInput__ListToCollectionTaskInput_ListTaskInputMixin, V._ListToMapTaskInput__ListToCollectionTaskInput_MapTaskInputMixin]);
    _inherit(V.ListToFlattenListTaskInput, V._ListToFlattenListTaskInput__ListToCollectionTaskInput_ListTaskInputMixin);
    _inheritMany(V._ListToCollectionTaskInputBuilder, [V.ListToFlattenListTaskInputBuilder, V.ListToListTaskInputBuilder, V.ListToMapTaskInputBuilder]);
    _inherit(V.ListToListTaskInput, V._ListToListTaskInput__ListToCollectionTaskInput_ListTaskInputMixin);
    _inherit(V.ListToMapTaskInput, V._ListToMapTaskInput__ListToCollectionTaskInput_MapTaskInputMixin);
    _inherit(V.ObjectToListTaskInput, V._ObjectToListTaskInput_TaskInputImpl_ListTaskInputMixin);
    _inherit(Z.ListResultDescriptorImpl, Z.ResultDescriptorImpl);
    _inherit(B.AnalyzerOptionsValidator, B.CompositeValidator);
    _inheritMany(B.TopLevelOptionValidator, [B.LinterOptionsValidator, B.TopLevelAnalyzerOptionsValidator]);
    _inherit(B.TrueOrFalseValueErrorBuilder, B.ErrorBuilder);
    _inheritMany(Y.Workspace, [M.SimpleWorkspace, V.BazelWorkspace, D.GnWorkspace, G.PackageBuildWorkspace]);
    _inheritMany(M.SimpleWorkspace, [T.BasicWorkspace, B.PubWorkspace]);
    _inheritMany(Y.WorkspacePackage, [T.BasicWorkspacePackage, V.BazelWorkspacePackage, D.GnWorkspacePackage, G.PackageBuildWorkspacePackage, B.PubWorkspacePackage]);
    _inheritMany(E.ResourceUriResolver, [V.BazelFileUriResolver, G.PackageBuildFileUriResolver]);
    _inheritMany(A.Hash, [T.Adler32, X.Crc32, M.MD5, L.Sha1, V.Sha256]);
    _inherit(T.InputStream, T.InputStreamBase);
    _inherit(Q.OutputStream, Q.OutputStreamBase);
    _inherit(G._ZLibDecoder, Z.ZLibDecoderBase);
    _inherit(Z.ArgParserException, P.FormatException);
    _inherit(Y.DelegatingStream, P.StreamView);
    _inherit(R.ResultFuture, R.DelegatingFuture);
    _inheritMany(G._ListRequest, [G._TakeRequest, G._LookAheadRequest]);
    _inherit(X._SafeCloseSink, O.DelegatingStreamSink);
    _inherit(T._CancelOnErrorSubscriptionWrapper, Y.DelegatingStreamSubscription);
    _inheritMany(M.GeneratedMessage, [M.Input, M.WorkRequest, M.WorkResponse]);
    _inherit(D.MultiPackageAssetReader, D.AssetReader);
    _inheritMany(A._WorkerException, [A.AnalyzerSummaryException, A.KernelException]);
    _inheritMany(A._WorkerException0, [A.AnalyzerSummaryException0, A.DartDevcCompilationException, A.KernelSummaryException]);
    _inheritMany(U._UnorderedEquality, [U.UnorderedIterableEquality, U.SetEquality]);
    _inherit(N.EqualityMap, M.DelegatingMap);
    _inheritMany(M._DelegatingIterableBase, [M.DelegatingIterable, M._MapKeySet__DelegatingIterableBase_UnmodifiableSetMixin, M.MapValueSet]);
    _inheritMany(M.DelegatingIterable, [M.DelegatingSet, M.DelegatingList, M.DelegatingQueue]);
    _inheritMany(M.DelegatingSet, [E.EqualitySet, L._UnmodifiableSetView_DelegatingSet_UnmodifiableSetMixin]);
    _inherit(Q.QueueList, Q._QueueList_Object_ListMixin);
    _inherit(Q._CastQueueList, Q.QueueList);
    _inherit(M.UnionSet, M._UnionSet_SetBase_UnmodifiableSetMixin);
    _inherit(L._NonGrowableListView_DelegatingList_NonGrowableListMixin, M.DelegatingList);
    _inherit(L.NonGrowableListView, L._NonGrowableListView_DelegatingList_NonGrowableListMixin);
    _inherit(L.UnmodifiableSetView, L._UnmodifiableSetView_DelegatingSet_UnmodifiableSetMixin);
    _inherit(M.MapKeySet, M._MapKeySet__DelegatingIterableBase_UnmodifiableSetMixin);
    _inherit(R.DigestSink, P.Sink);
    _inheritMany(G.HashSink, [M._MD5Sink, L._Sha1Sink, V._Sha256Sink]);
    _inherit(Z.HermeticAccessException, R.FileSystemException1);
    _inherit(B.MessageCode, B.Code);
    _inherit(M.ClassMemberParser, A.Parser1);
    _inheritMany(D.IdentifierContext, [G.CatchParameterIdentifierContext, G.ClassOrMixinIdentifierContext, G.CombinatorIdentifierContext, G.ConstructorReferenceIdentifierContext, G.DottedNameIdentifierContext, G.EnumDeclarationIdentifierContext, G.EnumValueDeclarationIdentifierContext, G.ExpressionIdentifierContext, G.FieldDeclarationIdentifierContext, G.FieldInitializerIdentifierContext, G.FormalParameterDeclarationIdentifierContext, G.ImportPrefixIdentifierContext, G.LiteralSymbolIdentifierContext, G.LocalFunctionDeclarationIdentifierContext, G.LabelDeclarationIdentifierContext, G.LabelReferenceIdentifierContext, G.LibraryIdentifierContext, G.LocalVariableDeclarationIdentifierContext, G.MetadataReferenceIdentifierContext, G.MethodDeclarationIdentifierContext, G.NamedArgumentReferenceIdentifierContext, G.TopLevelDeclarationIdentifierContext, G.TypedefDeclarationIdentifierContext, G.TypeReferenceIdentifierContext, G.TypeVariableDeclarationIdentifierContext]);
    _inheritMany(N.LiteralEntryInfo, [R.ForCondition, R.SpreadOperator, R.ForEntry, R.ForInEntry, R.ForComplete, R.ForInComplete, R.IfCondition, R.IfEntry, R.IfComplete, R.IfElse, R.ElseEntry, R.IfElseComplete, R.Nested]);
    _inheritMany(R.SpreadOperator, [R.ForSpread, R.ForInSpread, R.IfSpread, R.ElseSpread]);
    _inheritMany(Y.ForwardingListener, [R.ClassHeaderRecoveryListener, R.ImportRecoveryListener, R.MixinHeaderRecoveryListener]);
    _inherit(Q.TopLevelParser, M.ClassMemberParser);
    _inherit(O.SimpleNullableTypeWith1Argument, O.SimpleTypeWith1Argument);
    _inherit(O.SimpleNullableType, O.SimpleType);
    _inheritMany(R.TypeParamOrArgInfo, [O.NoTypeParamOrArg, O.SimpleTypeArgument1, O.ComplexTypeParamOrArgInfo]);
    _inheritMany(O.SimpleTypeArgument1, [O.SimpleTypeArgument1GtEq, O.SimpleTypeArgument1GtGt]);
    _inherit(U.LineStarts, U._LineStarts_Object_ListMixin);
    _inherit(V.ArrayBasedScanner, U.AbstractScanner);
    _inheritMany(L.SimpleToken, [S.ErrorToken, D.StringToken0, L.BeginToken, L.StringToken, L.KeywordToken, L.SyntheticToken]);
    _inheritMany(S.ErrorToken, [S.EncodingErrorToken, S.NonAsciiIdentifierToken, S.NonAsciiWhitespaceToken, S.AsciiControlCharacterToken, S.UnsupportedOperator, S.UnterminatedString, S.UnterminatedToken, S.UnmatchedToken]);
    _inheritMany(U.ArrayKeywordState, [U.LowerCaseArrayKeywordState, U.UpperCaseArrayKeywordState]);
    _inheritMany(V.ArrayBasedScanner, [T.StringScanner, B.Utf8BytesScanner]);
    _inheritMany(D.StringToken0, [D.SyntheticStringToken0, D.CommentToken0]);
    _inherit(D.DartDocToken, D.CommentToken0);
    _inheritMany(D._LazySubstring, [D._CompactLazySubstring, D._FullLazySubstring]);
    _inherit(S.LinkEntry, N.Link0);
    _inherit(D.SubSequenceReader, D.CharSequenceReader);
    _inheritMany(L.StringToken, [L.CommentToken, L.SyntheticStringToken]);
    _inherit(L.DocumentationCommentToken, L.CommentToken);
    _inherit(L.Keyword, L.TokenType);
    _inherit(L.SyntheticBeginToken, L.BeginToken);
    _inherit(L.SyntheticKeywordToken, L.KeywordToken);
    _inheritMany(U.AstNode0, [U.SequenceNode, U.StarNode, U.DoubleStarNode, U.AnyCharNode, U.RangeNode, U.OptionsNode, U.LiteralNode]);
    _inheritMany(G.BadKeyException, [G.UnrecognizedKeysException, G.MissingRequiredKeysException, G.DisallowedNullValueException]);
    _inheritMany(T.Node2, [T.TreeNode, T.DartType0, T.NamedType0, T.Supertype, T.Constant]);
    _inheritMany(T.TreeNode, [T.NamedNode, T.FileUriNode, T.LibraryDependency, T.LibraryPart, T.Combinator0, T.Initializer, T.FunctionNode, T.Expression0, T.Arguments, T.NamedExpression0, T.MapEntry0, T.Statement0, T.SwitchCase0, T.Catch, T.TypeParameter0, T.Component]);
    _inheritMany(T.NamedNode, [T.Library, T.Typedef, T.Class, T.Member0]);
    _inheritMany(T.Member0, [T.Field, T.Constructor, T.RedirectingFactoryConstructor, T.Procedure]);
    _inheritMany(T.Initializer, [T.InvalidInitializer, T.FieldInitializer, T.SuperInitializer, T.RedirectingInitializer, T.LocalInitializer, T.AssertInitializer0]);
    _inheritMany(T.Expression0, [T.InvalidExpression, T.VariableGet, T.VariableSet, T.PropertyGet, T.PropertySet, T.DirectPropertyGet, T.DirectPropertySet, T.InvocationExpression0, T.SuperPropertyGet, T.SuperPropertySet, T.StaticGet, T.StaticSet, T.Instantiation0, T.Not, T.LogicalExpression, T.ConditionalExpression0, T.StringConcatenation, T.ListConcatenation, T.SetConcatenation, T.MapConcatenation, T.IsExpression0, T.AsExpression0, T.BasicLiteral, T.SymbolLiteral0, T.TypeLiteral, T.ThisExpression0, T.Rethrow, T.Throw, T.ListLiteral0, T.SetLiteral0, T.MapLiteral0, T.AwaitExpression0, T.FunctionExpression0, T.ConstantExpression, T.Let, T.BlockExpression, T.LoadLibrary, T.CheckLibraryIsLoaded]);
    _inheritMany(T.InvocationExpression0, [T.DirectMethodInvocation, T.MethodInvocation0, T.SuperMethodInvocation, T.StaticInvocation, T.ConstructorInvocation0]);
    _inheritMany(T.BasicLiteral, [T.StringLiteral0, T.IntLiteral, T.DoubleLiteral0, T.BoolLiteral, T.NullLiteral0]);
    _inheritMany(T.Statement0, [T.ExpressionStatement0, T.Block0, T.AssertBlock, T.EmptyStatement0, T.AssertStatement0, T.LabeledStatement0, T.BreakStatement0, T.WhileStatement0, T.DoStatement0, T.ForStatement0, T.ForInStatement, T.SwitchStatement0, T.ContinueSwitchStatement, T.IfStatement0, T.ReturnStatement0, T.TryCatch, T.TryFinally, T.YieldStatement0, T.VariableDeclaration0, T.FunctionDeclaration0]);
    _inheritMany(T.Name0, [T._PrivateName, T._PublicName]);
    _inheritMany(T.DartType0, [T.InvalidType, T.DynamicType, T.VoidType1, T.BottomType, T.InterfaceType0, T.FunctionType0, T.TypedefType, T.TypeParameterType0]);
    _inheritMany(T.Constant, [T.PrimitiveConstant, T.SymbolConstant, T.MapConstant, T.ListConstant, T.SetConstant, T.InstanceConstant, T.PartialInstantiationConstant, T.TearOffConstant, T.TypeLiteralConstant, T.UnevaluatedConstant]);
    _inheritMany(T.PrimitiveConstant, [T.NullConstant, T.BoolConstant, T.IntConstant, T.DoubleConstant, T.StringConstant]);
    _inheritMany(U.TreeVisitor, [U.Transformer, U.Visitor]);
    _inheritMany(U.Transformer, [T._ChildReplacer, V.ConstantsTransformer]);
    _inherit(R.BinaryBuilderWithMetadata, R.BinaryBuilder);
    _inheritMany(U.Visitor, [U.RecursiveVisitor, U.Printer]);
    _inheritMany(U.RecursiveVisitor, [G.ConstantIndexer, Y._ImportTableBuilder, U._ConstantNamer_RecursiveVisitor_Namer, V.ConstantEvaluator1]);
    _inherit(T._LubHeap, F.Heap);
    _inherit(R.CloneWithoutBody, R.CloneVisitor);
    _inherit(V.TypeEnvironment, V.SubtypeTester);
    _inherit(Z.HierarchyBasedTypeEnvironment, V.TypeEnvironment);
    _inherit(R.NoneTarget, R.Target);
    _inherit(U.NormalNamer, U.Namer);
    _inherit(U.ConstantNamer, U._ConstantNamer_RecursiveVisitor_Namer);
    _inherit(U.Precedence0, U.ExpressionVisitor);
    _inherit(V.SimpleErrorReporter, V.ErrorReporter0);
    _inheritMany(U.DartTypeVisitor, [V.IsInstantiatedVisitor, M._TypeSubstitutor, M._OccurrenceVisitor]);
    _inheritMany(M.Substitution, [M._NullSubstitution, M._MapSubstitution, M._ClassBottomSubstitution, M._CombinedSubstitution, M._FilteredSubstitution]);
    _inheritMany(M._TypeSubstitutor, [M._TopSubstitutor, M._InnerTypeSubstitutor]);
    _inherit(M._DeepTypeSubstitutor, M._InnerTypeSubstitutor);
    _inherit(U.BodyVisitor1, U.ExpressionVisitor1);
    _inheritMany(Z.PackagesBase, [Z.MapPackages, Z.NonFilePackagesDirectoryPackages]);
    _inherit(B.InternalStyle, O.Style);
    _inheritMany(B.InternalStyle, [E.PosixStyle, F.UrlStyle, L.WindowsStyle]);
    _inheritMany(M.FieldInfo, [M.Extension, M.MapFieldInfo]);
    _inheritMany(M.PbListBase, [M.FrozenPbList, M.PbList]);
    _inherit(X.CompatibleWithVersionRange, X.VersionRange);
    _inheritMany(T.Mapping, [T.MultiSectionMapping, T.MappingBundle, T.SingleMapping, D.LazyMapping]);
    _inheritMany(Y.SourceSpanMixin, [V.SourceSpanBase, Y._FileSpan, N.NullSpan]);
    _inheritMany(V.SourceSpanBase, [G.SourceMapSpan, X.SourceSpanWithContext]);
    _inherit(Y.FileLocation, D.SourceLocationMixin);
    _inherit(V.SourceLocationBase, V.SourceLocation);
    _inherit(G.SourceSpanFormatException, G.SourceSpanException);
    _inheritMany(X.StringScanner0, [S.SpanScanner, Z.LineScanner, R.RelativeSpanScanner]);
    _inherit(D.EagerSpanScanner, S.SpanScanner);
    _inheritMany(G.SourceSpanFormatException, [E.StringScannerException, Z.YamlException]);
    _inheritMany(N._TypedDataBuffer, [N._IntBuffer, N._FloatBuffer, N.Int32x4Buffer, N.Float32x4Buffer]);
    _inheritMany(N._IntBuffer, [N.Uint8Buffer, N.Int8Buffer, N.Uint8ClampedBuffer, N.Uint16Buffer, N.Int16Buffer, N.Uint32Buffer, N.Int32Buffer, N.Uint64Buffer, N.Int64Buffer]);
    _inheritMany(N._FloatBuffer, [N.Float32Buffer, N.Float64Buffer]);
    _inheritMany(V._ConstructableFileSystemEvent, [V.ConstructableFileSystemCreateEvent, V.ConstructableFileSystemDeleteEvent, V.ConstructableFileSystemModifyEvent, V.ConstructableFileSystemMoveEvent]);
    _inheritMany(O.ResubscribableWatcher, [E.LinuxDirectoryWatcher, R.MacOSDirectoryWatcher, D.PollingDirectoryWatcher, L.WindowsDirectoryWatcher, R.NativeFileWatcher, D.PollingFileWatcher]);
    _inheritMany(X._ValueEvent, [X.ScalarEvent, X.SequenceStartEvent, X.MappingStartEvent]);
    _inheritMany(Z.YamlNode, [Z._YamlMap_YamlNode_MapMixin, Z._YamlList_YamlNode_ListMixin, Z.YamlScalar]);
    _inherit(Z._YamlMap_YamlNode_MapMixin_UnmodifiableMapMixin, Z._YamlMap_YamlNode_MapMixin);
    _inherit(Z.YamlMap, Z._YamlMap_YamlNode_MapMixin_UnmodifiableMapMixin);
    _inherit(Z.YamlList, Z._YamlList_YamlNode_ListMixin);
    _inherit(A.YamlMapWrapper, A._YamlMapWrapper_MapBase_UnmodifiableMapMixin);
    _inherit(A._YamlMapNodes, A.__YamlMapNodes_MapBase_UnmodifiableMapMixin);
    _mixin(H.UnmodifiableListBase, H.UnmodifiableListMixin);
    _mixin(H.__CastListBase__CastIterableBase_ListMixin, P.ListMixin);
    _mixin(H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin, P.ListMixin);
    _mixin(H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin, H.FixedLengthListMixin);
    _mixin(P._ListBase_Object_ListMixin, P.ListMixin);
    _mixin(P._UnmodifiableMapView_MapView__UnmodifiableMapMixin, P._UnmodifiableMapMixin);
    _mixin(P.__JsonStringStringifierPretty__JsonStringStringifier__JsonPrettyPrintMixin, P._JsonPrettyPrintMixin);
    _mixin(P.__JsonUtf8StringifierPretty__JsonUtf8Stringifier__JsonPrettyPrintMixin, P._JsonPrettyPrintMixin);
  })();
  (function constants() {
    var makeConstList = hunkHelpers.makeConstList;
    C.Interceptor_methods = J.Interceptor.prototype;
    C.JSArray_methods = J.JSArray.prototype;
    C.JSInt_methods = J.JSInt.prototype;
    C.JSNumber_methods = J.JSNumber.prototype;
    C.JSString_methods = J.JSString.prototype;
    C.JavaScriptFunction_methods = J.JavaScriptFunction.prototype;
    C.NativeByteBuffer_methods = H.NativeByteBuffer.prototype;
    C.NativeUint8List_methods = H.NativeUint8List.prototype;
    C.PlainJavaScriptObject_methods = J.PlainJavaScriptObject.prototype;
    C.UnknownJavaScriptObject_methods = J.UnknownJavaScriptObject.prototype;
    C.AsciiDecoder_false_127 = new P.AsciiDecoder(false, 127, []);
    C.AsciiEncoder_127 = new P.AsciiEncoder(127, []);
    C.Base64Encoder_false = new P.Base64Encoder(false, []);
    C.Base64Codec_Base64Encoder_false = new P.Base64Codec(C.Base64Encoder_false, []);
    C.C_AsciiCodec = new P.AsciiCodec([]);
    C.C_Base64Decoder = new P.Base64Decoder([]);
    C.C_EmptyIterator = new H.EmptyIterator([P.Null]);
    C.C_JS_CONST = function getTagFallback(o) {
  var s = Object.prototype.toString.call(o);
  return s.substring(8, s.length - 1);
};
    C.C_JS_CONST0 = function() {
  var toStringFunction = Object.prototype.toString;
  function getTag(o) {
    var s = toStringFunction.call(o);
    return s.substring(8, s.length - 1);
  }
  function getUnknownTag(object, tag) {
    if (/^HTML[A-Z].*Element$/.test(tag)) {
      var name = toStringFunction.call(object);
      if (name == "[object Object]") return null;
      return "HTMLElement";
    }
  }
  function getUnknownTagGenericBrowser(object, tag) {
    if (self.HTMLElement && object instanceof HTMLElement) return "HTMLElement";
    return getUnknownTag(object, tag);
  }
  function prototypeForTag(tag) {
    if (typeof window == "undefined") return null;
    if (typeof window[tag] == "undefined") return null;
    var constructor = window[tag];
    if (typeof constructor != "function") return null;
    return constructor.prototype;
  }
  function discriminator(tag) { return null; }
  var isBrowser = typeof navigator == "object";
  return {
    getTag: getTag,
    getUnknownTag: isBrowser ? getUnknownTagGenericBrowser : getUnknownTag,
    prototypeForTag: prototypeForTag,
    discriminator: discriminator };
};
    C.C_JS_CONST6 = function(getTagFallback) {
  return function(hooks) {
    if (typeof navigator != "object") return hooks;
    var ua = navigator.userAgent;
    if (ua.indexOf("DumpRenderTree") >= 0) return hooks;
    if (ua.indexOf("Chrome") >= 0) {
      function confirm(p) {
        return typeof window == "object" && window[p] && window[p].name == p;
      }
      if (confirm("Window") && confirm("HTMLElement")) return hooks;
    }
    hooks.getTag = getTagFallback;
  };
};
    C.C_JS_CONST1 = function(hooks) {
  if (typeof dartExperimentalFixupGetTag != "function") return hooks;
  hooks.getTag = dartExperimentalFixupGetTag(hooks.getTag);
};
    C.C_JS_CONST2 = function(hooks) {
  var getTag = hooks.getTag;
  var prototypeForTag = hooks.prototypeForTag;
  function getTagFixed(o) {
    var tag = getTag(o);
    if (tag == "Document") {
      if (!!o.xmlVersion) return "!Document";
      return "!HTMLDocument";
    }
    return tag;
  }
  function prototypeForTagFixed(tag) {
    if (tag == "Document") return null;
    return prototypeForTag(tag);
  }
  hooks.getTag = getTagFixed;
  hooks.prototypeForTag = prototypeForTagFixed;
};
    C.C_JS_CONST5 = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Firefox") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "GeoGeolocation": "Geolocation",
    "Location": "!Location",
    "WorkerMessageEvent": "MessageEvent",
    "XMLDocument": "!Document"};
  function getTagFirefox(o) {
    var tag = getTag(o);
    return quickMap[tag] || tag;
  }
  hooks.getTag = getTagFirefox;
};
    C.C_JS_CONST4 = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Trident/") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "HTMLDDElement": "HTMLElement",
    "HTMLDTElement": "HTMLElement",
    "HTMLPhraseElement": "HTMLElement",
    "Position": "Geoposition"
  };
  function getTagIE(o) {
    var tag = getTag(o);
    var newTag = quickMap[tag];
    if (newTag) return newTag;
    if (tag == "Object") {
      if (window.DataView && (o instanceof window.DataView)) return "DataView";
    }
    return tag;
  }
  function prototypeForTagIE(tag) {
    var constructor = window[tag];
    if (constructor == null) return null;
    return constructor.prototype;
  }
  hooks.getTag = getTagIE;
  hooks.prototypeForTag = prototypeForTagIE;
};
    C.C_JS_CONST3 = function(hooks) { return hooks; }
;
    C.C_Latin1Codec = new P.Latin1Codec([]);
    C.C_OutOfMemoryError = new P.OutOfMemoryError([]);
    C.C_Utf8Codec = new P.Utf8Codec([]);
    C.C_Utf8Encoder = new P.Utf8Encoder([]);
    C.JsonCodec_null_null = new P.JsonCodec(null, null, []);
    C.JsonDecoder_null = new P.JsonDecoder(null, []);
    C.JsonEncoder_null_null = new P.JsonEncoder(null, null, []);
    C.Latin1Decoder_false_255 = new P.Latin1Decoder(false, 255, []);
    C.Latin1Encoder_255 = new P.Latin1Encoder(255, []);
    C.List_127_2047_65535_1114111 = H.setRuntimeTypeInfo(makeConstList([127, 2047, 65535, 1114111]), [P.int]);
    C.List_2Vk = H.setRuntimeTypeInfo(makeConstList([0, 0, 32776, 33792, 1, 10240, 0, 0]), [P.int]);
    C.List_CVk = H.setRuntimeTypeInfo(makeConstList([0, 0, 65490, 45055, 65535, 34815, 65534, 18431]), [P.int]);
    C.List_JYB = H.setRuntimeTypeInfo(makeConstList([0, 0, 26624, 1023, 65534, 2047, 65534, 2047]), [P.int]);
    C.List_empty0 = H.setRuntimeTypeInfo(makeConstList([]), [P.String]);
    C.List_empty = makeConstList([]);
    C.List_gRj = H.setRuntimeTypeInfo(makeConstList([0, 0, 32722, 12287, 65534, 34815, 65534, 18431]), [P.int]);
    C.List_nxB = H.setRuntimeTypeInfo(makeConstList([0, 0, 24576, 1023, 65534, 34815, 65534, 18431]), [P.int]);
    C.List_qFt = H.setRuntimeTypeInfo(makeConstList([0, 0, 27858, 1023, 65534, 51199, 65535, 32767]), [P.int]);
    C.List_qNA = H.setRuntimeTypeInfo(makeConstList([0, 0, 32754, 11263, 65534, 34815, 65534, 18431]), [P.int]);
    C.List_qg40 = H.setRuntimeTypeInfo(makeConstList([0, 0, 32722, 12287, 65535, 34815, 65534, 18431]), [P.int]);
    C.List_qg4 = H.setRuntimeTypeInfo(makeConstList([0, 0, 65490, 12287, 65535, 34815, 65534, 18431]), [P.int]);
    C.List_empty1 = H.setRuntimeTypeInfo(makeConstList([]), [P.Symbol0]);
    C.Map_empty = new H.ConstantStringMap(0, {}, C.List_empty1, [P.Symbol0, null]);
    C.Symbol_call = new H.Symbol("call", []);
    C._PathDirection_8Gl = new M._PathDirection("at root", []);
    C._PathDirection_988 = new M._PathDirection("below root", []);
    C._PathDirection_FIw = new M._PathDirection("reaches root", []);
    C._PathDirection_ZGD = new M._PathDirection("above root", []);
    C._PathRelation_different = new M._PathRelation("different", []);
    C._PathRelation_equal = new M._PathRelation("equal", []);
    C._PathRelation_inconclusive = new M._PathRelation("inconclusive", []);
    C._PathRelation_within = new M._PathRelation("within", []);
    C._TokenKind_false_false_false = new T._TokenKind(false, false, false, []);
    C._TokenKind_false_false_true = new T._TokenKind(false, false, true, []);
    C._TokenKind_false_true_false = new T._TokenKind(false, true, false, []);
    C._TokenKind_true_false_false = new T._TokenKind(true, false, false, []);
  })();
  var init = {mangledGlobalNames: {int: "int", double: "double", num: "num", String: "String", bool: "bool", Null: "Null", List: "List"}, mangledNames: {}, getTypeFromName: getGlobalFromName, metadata: [], types: [{func: 1, ret: P.bool, args: [P.String]}, {func: 1, args: [,]}, {func: 1, ret: A.Frame, args: [P.String]}, {func: 1, ret: P.String, args: [P.String]}, {func: 1, ret: P.Null, args: [,,]}, {func: 1, ret: A.Frame}, {func: 1, ret: P.bool, args: [A.Frame]}, {func: 1, ret: A.Frame, args: [A.Frame]}, {func: 1, ret: P.Null, args: [P.Symbol0,,]}, {func: 1, ret: P.Null, args: [P.String]}, {func: 1, ret: P.Null, args: [P.String,,]}, {func: 1, ret: -1, args: [P.Uint8List, P.String, P.int]}, {func: 1, ret: P.bool, args: [,]}, {func: 1, ret: Y.Trace, args: [P.String]}, {func: 1, ret: P.int, args: [A.Frame]}, {func: 1, ret: P.String, args: [A.Frame]}, {func: 1, ret: P.Null, args: [P.String, P.String]}, {func: 1, ret: -1, args: [P.String, P.int]}, {func: 1, ret: -1, args: [P.String], opt: [,]}, {func: 1, ret: P.String, args: [P.int]}, {func: 1, ret: [P.Map,,,], args: [T.SingleMapping]}, {func: 1, ret: P.String, args: [Y.SourceFile]}, {func: 1, args: [P.String,,]}, {func: 1, ret: P.int, args: [P.int, P.int]}, {func: 1, ret: [P.Map, P.String, P.int]}, {func: 1, ret: P.Null}, {func: 1, ret: -1, args: [{func: 1, args: [P.String]}]}, {func: 1, ret: P.int, args: [Y.Trace]}, {func: 1, args: [, P.String]}, {func: 1, ret: P.String, args: [Y.Trace]}, {func: 1, ret: -1, args: [P.String, P.String]}, {func: 1, args: [P.String]}, {func: 1, ret: A.Frame, args: [,,]}, {func: 1, ret: Y.Trace}, {func: 1, ret: [P.List, A.Frame], args: [Y.Trace]}, {func: 1, ret: P.Uint8List, args: [P.int]}, {func: 1, ret: P.Uint8List, args: [,,]}, {func: 1, ret: Y.Trace, args: [Y.Trace]}, {func: 1, ret: P.String, args: [,]}, {func: 1, bounds: [P.num], ret: 0, args: [0, 0]}, {func: 1, ret: -1, args: [P.Uint8List, P.int, P.int]}], interceptorsByTag: null, leafTags: null};
  (function staticFields() {
    $.Closure_functionCounter = 0;
    $.BoundClosure_selfFieldNameCache = null;
    $.BoundClosure_receiverFieldNameCache = null;
    $._inTypeAssertion = false;
    $.getTagFunction = null;
    $.alternateTagFunction = null;
    $.prototypeForTagFunction = null;
    $.dispatchRecordsForInstanceTags = null;
    $.interceptorsForUncacheableTags = null;
    $.initNativeDispatchFlag = null;
    $._toStringVisiting = [];
    $.Encoding__nameToEncoding = P.LinkedHashMap_LinkedHashMap$_literal(["iso_8859-1:1987", C.C_Latin1Codec, "iso-ir-100", C.C_Latin1Codec, "iso_8859-1", C.C_Latin1Codec, "iso-8859-1", C.C_Latin1Codec, "latin1", C.C_Latin1Codec, "l1", C.C_Latin1Codec, "ibm819", C.C_Latin1Codec, "cp819", C.C_Latin1Codec, "csisolatin1", C.C_Latin1Codec, "iso-ir-6", C.C_AsciiCodec, "ansi_x3.4-1968", C.C_AsciiCodec, "ansi_x3.4-1986", C.C_AsciiCodec, "iso_646.irv:1991", C.C_AsciiCodec, "iso646-us", C.C_AsciiCodec, "us-ascii", C.C_AsciiCodec, "us", C.C_AsciiCodec, "ibm367", C.C_AsciiCodec, "cp367", C.C_AsciiCodec, "csascii", C.C_AsciiCodec, "ascii", C.C_AsciiCodec, "csutf8", C.C_Utf8Codec, "utf-8", C.C_Utf8Codec], P.String, P.Encoding);
    $._currentUriBase = null;
    $._current = null;
    $._mapping = null;
  })();
  (function lazyInitializers() {
    var _lazy = hunkHelpers.lazy;
    _lazy($, "DART_CLOSURE_PROPERTY_NAME", "$get$DART_CLOSURE_PROPERTY_NAME", function() {
      return H.getIsolateAffinityTag("_$dart_dartClosure");
    });
    _lazy($, "JS_INTEROP_INTERCEPTOR_TAG", "$get$JS_INTEROP_INTERCEPTOR_TAG", function() {
      return H.getIsolateAffinityTag("_$dart_js");
    });
    _lazy($, "TypeErrorDecoder_noSuchMethodPattern", "$get$TypeErrorDecoder_noSuchMethodPattern", function() {
      return H.interceptedTypeCheck(H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(H.TypeErrorDecoder_buildJavaScriptObject())), "$isTypeErrorDecoder");
    });
    _lazy($, "TypeErrorDecoder_notClosurePattern", "$get$TypeErrorDecoder_notClosurePattern", function() {
      return H.interceptedTypeCheck(H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(H.TypeErrorDecoder_buildJavaScriptObjectWithNonClosure())), "$isTypeErrorDecoder");
    });
    _lazy($, "TypeErrorDecoder_nullCallPattern", "$get$TypeErrorDecoder_nullCallPattern", function() {
      return H.interceptedTypeCheck(H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(null)), "$isTypeErrorDecoder");
    });
    _lazy($, "TypeErrorDecoder_nullLiteralCallPattern", "$get$TypeErrorDecoder_nullLiteralCallPattern", function() {
      return H.interceptedTypeCheck(H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOnNull()), "$isTypeErrorDecoder");
    });
    _lazy($, "TypeErrorDecoder_undefinedCallPattern", "$get$TypeErrorDecoder_undefinedCallPattern", function() {
      return H.interceptedTypeCheck(H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(void 0)), "$isTypeErrorDecoder");
    });
    _lazy($, "TypeErrorDecoder_undefinedLiteralCallPattern", "$get$TypeErrorDecoder_undefinedLiteralCallPattern", function() {
      return H.interceptedTypeCheck(H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOnUndefined()), "$isTypeErrorDecoder");
    });
    _lazy($, "TypeErrorDecoder_nullPropertyPattern", "$get$TypeErrorDecoder_nullPropertyPattern", function() {
      return H.interceptedTypeCheck(H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(null)), "$isTypeErrorDecoder");
    });
    _lazy($, "TypeErrorDecoder_nullLiteralPropertyPattern", "$get$TypeErrorDecoder_nullLiteralPropertyPattern", function() {
      return H.interceptedTypeCheck(H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOnNull()), "$isTypeErrorDecoder");
    });
    _lazy($, "TypeErrorDecoder_undefinedPropertyPattern", "$get$TypeErrorDecoder_undefinedPropertyPattern", function() {
      return H.interceptedTypeCheck(H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(void 0)), "$isTypeErrorDecoder");
    });
    _lazy($, "TypeErrorDecoder_undefinedLiteralPropertyPattern", "$get$TypeErrorDecoder_undefinedLiteralPropertyPattern", function() {
      return H.interceptedTypeCheck(H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOnUndefined()), "$isTypeErrorDecoder");
    });
    _lazy($, "Utf8Decoder__decoder", "$get$Utf8Decoder__decoder", function() {
      return P.Utf8Decoder__makeDecoder();
    });
    _lazy($, "_Base64Decoder__inverseAlphabet", "$get$_Base64Decoder__inverseAlphabet", function() {
      return H.NativeInt8List_NativeInt8List$fromList(H.setRuntimeTypeInfo([-2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -1, -2, -2, -2, -2, -2, 62, -2, 62, -2, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -2, -2, -2, -1, -2, -2, -2, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -2, -2, -2, -2, 63, -2, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -2, -2, -2, -2, -2], [P.int]));
    });
    _lazy($, "_Uri__isWindowsCached", "$get$_Uri__isWindowsCached", function() {
      return typeof process != "undefined" && Object.prototype.toString.call(process) == "[object process]" && process.platform == "win32";
    });
    _lazy($, "_Uri__needsNoEncoding", "$get$_Uri__needsNoEncoding", function() {
      return P.RegExp_RegExp("^[\\-\\.0-9A-Z_a-z~]*$", false);
    });
    _lazy($, "_scannerTables", "$get$_scannerTables", function() {
      return P._createTables();
    });
    _lazy($, "windows", "$get$windows", function() {
      return M.Context_Context($.$get$Style_windows());
    });
    _lazy($, "url", "$get$url", function() {
      return M.Context_Context($.$get$Style_url());
    });
    _lazy($, "context", "$get$context", function() {
      return M.createInternal();
    });
    _lazy($, "Style_posix", "$get$Style_posix", function() {
      return E.PosixStyle$();
    });
    _lazy($, "Style_windows", "$get$Style_windows", function() {
      return L.WindowsStyle$();
    });
    _lazy($, "Style_url", "$get$Style_url", function() {
      return F.UrlStyle$();
    });
    _lazy($, "Style_platform", "$get$Style_platform", function() {
      return O.Style__getPlatformStyle();
    });
    _lazy($, "_digits", "$get$_digits", function() {
      return new L.closure().call$0();
    });
    _lazy($, "MAX_INT32", "$get$MAX_INT32", function() {
      return H.intTypeCheck(J.$sub$n(P.pow(2, 31), 1));
    });
    _lazy($, "MIN_INT32", "$get$MIN_INT32", function() {
      return H.intTypeCheck(J.$negate$in(P.pow(2, 31)));
    });
    _lazy($, "_vmFrame", "$get$_vmFrame", function() {
      return P.RegExp_RegExp("^#\\d+\\s+(\\S.*) \\((.+?)((?::\\d+){0,2})\\)$", false);
    });
    _lazy($, "_v8Frame", "$get$_v8Frame", function() {
      return P.RegExp_RegExp("^\\s*at (?:(\\S.*?)(?: \\[as [^\\]]+\\])? \\((.*)\\)|(.*))$", false);
    });
    _lazy($, "_v8UrlLocation", "$get$_v8UrlLocation", function() {
      return P.RegExp_RegExp("^(.*):(\\d+):(\\d+)|native$", false);
    });
    _lazy($, "_v8EvalLocation", "$get$_v8EvalLocation", function() {
      return P.RegExp_RegExp("^eval at (?:\\S.*?) \\((.*)\\)(?:, .*?:\\d+:\\d+)?$", false);
    });
    _lazy($, "_firefoxSafariFrame", "$get$_firefoxSafariFrame", function() {
      return P.RegExp_RegExp("^(?:([^@(/]*)(?:\\(.*\\))?((?:/[^/]*)*)(?:\\(.*\\))?@)?(.*?):(\\d*)(?::(\\d*))?$", false);
    });
    _lazy($, "_friendlyFrame", "$get$_friendlyFrame", function() {
      return P.RegExp_RegExp("^(\\S+)(?: (\\d+)(?::(\\d+))?)?\\s+([^\\d].*)$", false);
    });
    _lazy($, "_asyncBody", "$get$_asyncBody", function() {
      return P.RegExp_RegExp("<(<anonymous closure>|[^>]+)_async_body>", false);
    });
    _lazy($, "_initialDot", "$get$_initialDot", function() {
      return P.RegExp_RegExp("^\\.", false);
    });
    _lazy($, "Frame__uriRegExp", "$get$Frame__uriRegExp", function() {
      return P.RegExp_RegExp("^[a-zA-Z][-+.a-zA-Z\\d]*://", false);
    });
    _lazy($, "Frame__windowsRegExp", "$get$Frame__windowsRegExp", function() {
      return P.RegExp_RegExp("^([a-zA-Z]:[\\\\/]|\\\\\\\\)", false);
    });
    _lazy($, "_v8Trace", "$get$_v8Trace", function() {
      return P.RegExp_RegExp("\\n    ?at ", false);
    });
    _lazy($, "_v8TraceLine", "$get$_v8TraceLine", function() {
      return P.RegExp_RegExp("    ?at ", false);
    });
    _lazy($, "_firefoxSafariTrace", "$get$_firefoxSafariTrace", function() {
      return P.RegExp_RegExp("^(([.0-9A-Za-z_$/<]|\\(.*\\))*@)?[^\\s]*:\\d*$", true);
    });
    _lazy($, "_friendlyTrace", "$get$_friendlyTrace", function() {
      return P.RegExp_RegExp("^[^\\s<][^\\s]*( \\d+(:\\d+)?)?[ \\t]+[^\\s]+$", true);
    });
    _lazy($, "roots", "$get$roots", function() {
      return J.toList$0$ax(J.map$1$1$ax(self.$dartLoader.rootDirectories, new D.closure0(), P.String));
    });
  })();
  (function nativeSupport() {
    !function() {
      var intern = function(s) {
        var o = {};
        o[s] = 1;
        return Object.keys(hunkHelpers.convertToFastObject(o))[0];
      };
      init.getIsolateTag = function(name) {
        return intern("___dart_" + name + init.isolateTag);
      };
      var tableProperty = "___dart_isolate_tags_";
      var usedProperties = Object[tableProperty] || (Object[tableProperty] = Object.create(null));
      var rootProperty = "_ZxYxX";
      for (var i = 0;; i++) {
        var property = intern(rootProperty + "_" + i + "_");
        if (!(property in usedProperties)) {
          usedProperties[property] = 1;
          init.isolateTag = property;
          break;
        }
      }
      init.dispatchPropertyName = init.getIsolateTag("dispatch_record");
    }();
    hunkHelpers.setOrUpdateInterceptorsByTag({ArrayBuffer: H.NativeByteBuffer, ArrayBufferView: H.NativeTypedData, Int8Array: H.NativeInt8List, Uint32Array: H.NativeUint32List, Uint8Array: H.NativeUint8List, ApplicationCacheErrorEvent: W.ApplicationCacheErrorEvent, DOMError: W.DomError, DOMException: W.DomException, ErrorEvent: W.ErrorEvent, Event: W.Event0, InputEvent: W.Event0, MediaError: W.MediaError, NavigatorUserMediaError: W.NavigatorUserMediaError, OverconstrainedError: W.OverconstrainedError, PositionError: W.PositionError, SensorErrorEvent: W.SensorErrorEvent, SpeechRecognitionError: W.SpeechRecognitionError, SQLError: P.SqlError});
    hunkHelpers.setOrUpdateLeafTags({ArrayBuffer: true, ArrayBufferView: false, Int8Array: true, Uint32Array: true, Uint8Array: false, ApplicationCacheErrorEvent: true, DOMError: true, DOMException: true, ErrorEvent: true, Event: false, InputEvent: false, MediaError: true, NavigatorUserMediaError: true, OverconstrainedError: true, PositionError: true, SensorErrorEvent: true, SpeechRecognitionError: true, SQLError: true});
    H.NativeTypedArray.$nativeSuperclassTag = "ArrayBufferView";
    H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin.$nativeSuperclassTag = "ArrayBufferView";
    H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin.$nativeSuperclassTag = "ArrayBufferView";
    H.NativeTypedArrayOfInt.$nativeSuperclassTag = "ArrayBufferView";
  })();
  Function.prototype.call$1 = function(a) {
    return this(a);
  };
  Function.prototype.call$0 = function() {
    return this();
  };
  Function.prototype.call$3 = function(a, b, c) {
    return this(a, b, c);
  };
  Function.prototype.call$2 = function(a, b) {
    return this(a, b);
  };
  Function.prototype.call$1$1 = function(a) {
    return this(a);
  };
  Function.prototype.call$1$2 = function(a, b) {
    return this(a, b);
  };
  Function.prototype.call$4 = function(a, b, c, d) {
    return this(a, b, c, d);
  };
  Function.prototype.call$1$0 = function() {
    return this();
  };
  Function.prototype.call$7 = function(a, b, c, d, e, f, g) {
    return this(a, b, c, d, e, f, g);
  };
  convertAllToFastObject(holders);
  convertToFastObject($);
  (function(callback) {
    if (typeof document === "undefined") {
      callback(null);
      return;
    }
    if (typeof document.currentScript != 'undefined') {
      callback(document.currentScript);
      return;
    }
    var scripts = document.scripts;
    function onLoad(event) {
      for (var i = 0; i < scripts.length; ++i)
        scripts[i].removeEventListener("load", onLoad, false);
      callback(event.target);
    }
    for (var i = 0; i < scripts.length; ++i)
      scripts[i].addEventListener("load", onLoad, false);
  })(function(currentScript) {
    init.currentScript = currentScript;
    if (typeof dartMainRunner === "function")
      dartMainRunner(D.main, []);
    else
      D.main([]);
  });
})();

//# sourceMappingURL=stack_trace_mapper.dart.js.map
